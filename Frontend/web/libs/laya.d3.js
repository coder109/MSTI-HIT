!function(e,t){"use strict";class DepthCasterData{static createDepthCasterUniformBlock(){if(!DepthCasterData.DepthCasterUBOData){let e=new Map;e.set(t.Shader3D.propertyNameToID("u_ShadowBias"),t.UniformBufferParamsType.Vector4),e.set(t.Shader3D.propertyNameToID("u_ShadowLightDirection"),t.UniformBufferParamsType.Vector3),DepthCasterData.DepthCasterUBOData=new t.UnifromBufferData(e)}return DepthCasterData.DepthCasterUBOData}}class DepthPass{constructor(){t.Config3D._uniformBlock&&(this._castDepthData=DepthCasterData.createDepthCasterUniformBlock(),this._castDepthUBO=t.UniformBufferObject.getBuffer(t.UniformBufferObject.UBONAME_SHADOW,0),this._castDepthUBO||(this._castDepthUBO=t.UniformBufferObject.create(t.UniformBufferObject.UBONAME_SHADOW,t.BufferUsage.Dynamic,this._castDepthData.getbyteLength(),!0)))}static __init__(){DepthPass.DEPTHPASS=t.Shader3D.getDefineByName("DEPTHPASS"),DepthPass.DEFINE_SHADOW_BIAS=t.Shader3D.propertyNameToID("u_ShadowBias"),DepthPass.DEPTHTEXTURE=t.Shader3D.propertyNameToID("u_CameraDepthTexture"),DepthPass.DEPTHNORMALSTEXTURE=t.Shader3D.propertyNameToID("u_CameraDepthNormalsTexture"),DepthPass.DEPTHZBUFFERPARAMS=t.Shader3D.propertyNameToID("u_ZBufferParams"),DepthPass.SHADOWUNIFORMBLOCK=t.Shader3D.propertyNameToID(t.UniformBufferObject.UBONAME_SHADOW)}getTarget(e,a,r){switch(this._viewPort=e.viewport,this._camera=e,a){case t.DepthTextureMode.Depth:e.depthTexture=this._depthTexture=t.RenderTexture.createFromPool(this._viewPort.width,this._viewPort.height,r,t.RenderTargetFormat.None,!1,1);break;case t.DepthTextureMode.DepthNormals:e.depthNormalTexture=this._depthNormalsTexture=t.RenderTexture.createFromPool(this._viewPort.width,this._viewPort.height,t.RenderTargetFormat.R8G8B8A8,r,!1,1);break;case t.DepthTextureMode.MotionVectors:break;default:throw"there is UnDefined type of DepthTextureMode"}}_setupDepthModeShaderValue(e,a){if(e!==t.DepthTextureMode.Depth)throw"there is UnDefined type of DepthTextureMode";var r=a.farPlane,n=a.nearPlane;this._zBufferParams.setValue(1-r/n,r/n,(n-r)/(n*r),1/n),a._shaderValues.setVector(DepthPass.DEFINE_SHADOW_BIAS,DepthPass.SHADOW_BIAS),a._shaderValues.setTexture(DepthPass.DEPTHTEXTURE,this._depthTexture),a._shaderValues.setVector(DepthPass.DEPTHZBUFFERPARAMS,this._zBufferParams)}cleanUp(){this._depthTexture instanceof t.RenderTexture&&this._depthTexture&&t.RenderTexture.recoverToPool(this._depthTexture),this._depthNormalsTexture&&t.RenderTexture.recoverToPool(this._depthNormalsTexture),this._depthTexture=null,this._depthNormalsTexture=null}}DepthPass.SHADOW_BIAS=new t.Vector4;class KeyframeNode{constructor(){this._ownerPath=[],this._propertys=[],this._keyFrames=[]}get ownerPathCount(){return this._ownerPath.length}get propertyCount(){return this._propertys.length}get keyFramesCount(){return this._keyFrames.length}_setOwnerPathCount(e){this._ownerPath.length=e}_setOwnerPathByIndex(e,t){this._ownerPath[e]=t}_joinOwnerPath(e){return this._ownerPath.join(e)}_setPropertyCount(e){this._propertys.length=e}_setPropertyByIndex(e,t){this._propertys[e]=t}_joinProperty(e){return this._propertys.join(e)}_setKeyframeCount(e){this._keyFrames.length=e}_setKeyframeByIndex(e,t){this._keyFrames[e]=t}getOwnerPathByIndex(e){return this._ownerPath[e]}getPropertyByIndex(e){return this._propertys[e]}getKeyframeByIndex(e){return this._keyFrames[e]}}class AnimationEvent{constructor(){}}var a,r;e.WeightedMode=void 0,(a=e.WeightedMode||(e.WeightedMode={}))[a.None=0]="None",a[a.In=1]="In",a[a.Out=2]="Out",a[a.Both=3]="Both";class Keyframe{constructor(){}cloneTo(e){e.time=this.time}clone(){var e=new Keyframe;return this.cloneTo(e),e}}Keyframe.defaultWeight=.33333;class FloatKeyframe extends Keyframe{constructor(){super(),this.inWeight=Keyframe.defaultWeight,this.outWeight=Keyframe.defaultWeight,this.weightedMode=e.WeightedMode.None}cloneTo(e){super.cloneTo(e);var t=e;t.inTangent=this.inTangent,t.outTangent=this.outTangent,t.value=this.value,t.inTangent=this.inTangent,t.outTangent=this.outTangent,t.value=this.value,t.inWeight=this.inWeight,t.outWeight=this.outWeight,t.weightedMode=this.weightedMode}clone(){let e=new FloatKeyframe;return this.cloneTo(e),e}}class QuaternionKeyframe extends Keyframe{constructor(e=!1){super(),this.inTangent=new t.Vector4,this.outTangent=new t.Vector4,this.value=new t.Quaternion,e&&(this.inWeight=new t.Vector4,this.outWeight=new t.Vector4,this.weightedMode=new t.Vector4)}cloneTo(e){super.cloneTo(e);var t=e;this.inTangent.cloneTo(t.inTangent),this.outTangent.cloneTo(t.outTangent),this.value.cloneTo(t.value),this.weightedMode&&(this.inWeight.cloneTo(t.inWeight),this.outWeight.cloneTo(t.outWeight),this.weightedMode.cloneTo(t.weightedMode))}}class Vector3Keyframe extends Keyframe{constructor(a=!1){super(),this.inTangent=new t.Vector3,this.outTangent=new t.Vector3,this.value=new t.Vector3,a&&(this.inWeight=new t.Vector3(Keyframe.defaultWeight,Keyframe.defaultWeight,Keyframe.defaultWeight),this.outWeight=new t.Vector3(Keyframe.defaultWeight,Keyframe.defaultWeight,Keyframe.defaultWeight),this.weightedMode=new t.Vector3(e.WeightedMode.None,e.WeightedMode.None,e.WeightedMode.None))}cloneTo(e){super.cloneTo(e);var t=e;this.inTangent.cloneTo(t.inTangent),this.outTangent.cloneTo(t.outTangent),this.value.cloneTo(t.value),this.weightedMode&&(this.inWeight.cloneTo(t.inWeight),this.outWeight.cloneTo(t.outWeight),this.weightedMode.cloneTo(t.weightedMode))}}class AnimationClipParser03{static READ_DATA(){AnimationClipParser03._DATA.offset=AnimationClipParser03._reader.getUint32(),AnimationClipParser03._DATA.size=AnimationClipParser03._reader.getUint32()}static READ_BLOCK(){for(var e=AnimationClipParser03._BLOCK.count=AnimationClipParser03._reader.getUint16(),t=AnimationClipParser03._BLOCK.blockStarts=[],a=AnimationClipParser03._BLOCK.blockLengths=[],r=0;r<e;r++)t.push(AnimationClipParser03._reader.getUint32()),a.push(AnimationClipParser03._reader.getUint32())}static READ_STRINGS(){var e=AnimationClipParser03._reader.getUint32(),t=AnimationClipParser03._reader.getUint16(),a=AnimationClipParser03._reader.pos;AnimationClipParser03._reader.pos=e+AnimationClipParser03._DATA.offset;for(var r=0;r<t;r++)AnimationClipParser03._strings[r]=AnimationClipParser03._reader.readUTFString();AnimationClipParser03._reader.pos=a}static parse(e,t){AnimationClipParser03._animationClip=e,AnimationClipParser03._reader=t,AnimationClipParser03.READ_DATA(),AnimationClipParser03.READ_BLOCK(),AnimationClipParser03.READ_STRINGS();for(var a=0,r=AnimationClipParser03._BLOCK.count;a<r;a++){var n=t.getUint16(),i=AnimationClipParser03._strings[n],o=AnimationClipParser03["READ_"+i];if(null==o)throw new Error("model file err,no this function:"+n+" "+i);o.call(null)}}static READ_ANIMATIONS(){var e,t,a,r=AnimationClipParser03._reader,n=[],i=r.getUint16();for(n.length=i,e=0;e<i;e++)n[e]=r.getFloat32();var o=AnimationClipParser03._animationClip;o.name=AnimationClipParser03._strings[r.getUint16()];var s=o._duration=r.getFloat32();o.islooping=!!r.getByte(),o._frameRate=r.getInt16();var l=r.getInt16(),h=o._nodes;h.count=l;var d=o._nodesMap={},c=o._nodesDic={};for(e=0;e<l;e++){a=new KeyframeNode,h.setNodeByIndex(e,a),a._indexInList=e;var u=a.type=r.getUint8(),_=r.getUint16();for(a._setOwnerPathCount(_),t=0;t<_;t++)a._setOwnerPathByIndex(t,AnimationClipParser03._strings[r.getUint16()]);var m=a._joinOwnerPath("/"),f=d[m];f||(d[m]=f=[]),f.push(a),a.propertyOwner=AnimationClipParser03._strings[r.getUint16()];var S=r.getUint16();for(a._setPropertyCount(S),t=0;t<S;t++)a._setPropertyByIndex(t,AnimationClipParser03._strings[r.getUint16()]);var g=m+"."+a.propertyOwner+"."+a._joinProperty(".");c[g]=a,a.fullPath=g;var p=r.getUint16();for(a._setKeyframeCount(p),t=0;t<p;t++)switch(u){case 0:var D=new FloatKeyframe;a._setKeyframeByIndex(t,D),D.time=n[r.getUint16()],D.inTangent=r.getFloat32(),D.outTangent=r.getFloat32(),D.value=r.getFloat32();break;case 1:case 3:case 4:var T=new Vector3Keyframe;a._setKeyframeByIndex(t,T),T.time=n[r.getUint16()];var E=T.inTangent,x=T.outTangent,M=T.value;E.x=r.getFloat32(),E.y=r.getFloat32(),E.z=r.getFloat32(),x.x=r.getFloat32(),x.y=r.getFloat32(),x.z=r.getFloat32(),M.x=r.getFloat32(),M.y=r.getFloat32(),M.z=r.getFloat32();break;case 2:var R=new QuaternionKeyframe;a._setKeyframeByIndex(t,R),R.time=n[r.getUint16()];var A=R.inTangent,C=R.outTangent,y=R.value;A.x=r.getFloat32(),A.y=r.getFloat32(),A.z=r.getFloat32(),A.w=r.getFloat32(),C.x=r.getFloat32(),C.y=r.getFloat32(),C.z=r.getFloat32(),C.w=r.getFloat32(),y.x=r.getFloat32(),y.y=r.getFloat32(),y.z=r.getFloat32(),y.w=r.getFloat32();break;default:throw"AnimationClipParser03:unknown type."}}var v=r.getUint16();for(e=0;e<v;e++){var I=new AnimationEvent;I.time=Math.min(s,r.getFloat32()),I.eventName=AnimationClipParser03._strings[r.getUint16()];var L=[],P=r.getUint16();for(P>0&&(I.params=L=[]),t=0;t<P;t++){switch(r.getByte()){case 0:L.push(!!r.getByte());break;case 1:L.push(r.getInt32());break;case 2:L.push(r.getFloat32());break;case 3:L.push(AnimationClipParser03._strings[r.getUint16()]);break;default:throw new Error("unknown type.")}}o.addEvent(I)}}}AnimationClipParser03._strings=[],AnimationClipParser03._BLOCK={count:0},AnimationClipParser03._DATA={offset:0,size:0};class Vector2Keyframe extends Keyframe{constructor(a=!1){super(),this.inTangent=new t.Vector2,this.outTangent=new t.Vector2,this.value=new t.Vector2,a&&(this.inWeight=new t.Vector2(Keyframe.defaultWeight,Keyframe.defaultWeight),this.outWeight=new t.Vector2(Keyframe.defaultWeight,Keyframe.defaultWeight),this.weightedMode=new t.Vector2(e.WeightedMode.None,e.WeightedMode.None))}cloneTo(e){super.cloneTo(e);var t=e;this.inTangent.cloneTo(t.inTangent),this.outTangent.cloneTo(t.outTangent),this.value.cloneTo(t.value),this.weightedMode&&(this.inWeight.cloneTo(t.inWeight),this.outWeight.cloneTo(t.outWeight),this.weightedMode.cloneTo(t.weightedMode))}}class Vector4Keyframe extends Keyframe{constructor(a=!1){super(),this.inTangent=new t.Vector4,this.outTangent=new t.Vector4,this.value=new t.Vector4,a&&(this.inWeight=new t.Vector4(Keyframe.defaultWeight,Keyframe.defaultWeight,Keyframe.defaultWeight,Keyframe.defaultWeight),this.outWeight=new t.Vector4(Keyframe.defaultWeight,Keyframe.defaultWeight,Keyframe.defaultWeight,Keyframe.defaultWeight),this.weightedMode=new t.Vector4(e.WeightedMode.None,e.WeightedMode.None,e.WeightedMode.None,e.WeightedMode.None))}cloneTo(e){super.cloneTo(e);var t=e;this.inTangent.cloneTo(t.inTangent),this.outTangent.cloneTo(t.outTangent),this.value.cloneTo(t.value),this.weightedMode&&(this.inWeight.cloneTo(t.inWeight),this.outWeight.cloneTo(t.outWeight),this.weightedMode.cloneTo(t.weightedMode))}}e.KeyFrameValueType=void 0,(r=e.KeyFrameValueType||(e.KeyFrameValueType={}))[r.None=-1]="None",r[r.Float=0]="Float",r[r.Position=1]="Position",r[r.Rotation=2]="Rotation",r[r.Scale=3]="Scale",r[r.RotationEuler=4]="RotationEuler",r[r.Vector2=5]="Vector2",r[r.Vector3=6]="Vector3",r[r.Vector4=7]="Vector4",r[r.Color=8]="Color";class KeyframeNodeOwner{constructor(){this.indexInList=-1,this.referenceCount=0,this.updateMark=-1,this.type=-1,this.fullPath=null,this.nodePath=null,this.propertyOwner=null,this.property=null,this.defaultValue=null,this.value=null,this.crossFixedValue=null,this.isMaterial=!1}saveCrossFixedValue(){if(this.propertyOwner)switch(this.type){case 0:this.crossFixedValue=this.value;break;case 1:case 3:case 4:case 2:this.value.cloneTo(this.crossFixedValue);break;default:throw"Animator:unknown type."}}animatorDataSetCallBack(){this.callBackOwner[this.callbackFun].apply(this.callBackOwner,this.callParams)}getCallbackNode(){if(this.propertyOwner&&this.callbackFunData){let e=this.callbackFunData.split(".");this.callBackOwner=this.propertyOwner;for(let t=0,a=e.length-1;t<a;t++)this.callBackOwner=this.callBackOwner[e[t]];this.callbackFun=e[e.length-1]}}}class AnimationClipParser04{static READ_DATA(){AnimationClipParser04._DATA.offset=AnimationClipParser04._reader.getUint32(),AnimationClipParser04._DATA.size=AnimationClipParser04._reader.getUint32()}static READ_BLOCK(){for(var e=AnimationClipParser04._BLOCK.count=AnimationClipParser04._reader.getUint16(),t=AnimationClipParser04._BLOCK.blockStarts=[],a=AnimationClipParser04._BLOCK.blockLengths=[],r=0;r<e;r++)t.push(AnimationClipParser04._reader.getUint32()),a.push(AnimationClipParser04._reader.getUint32())}static READ_STRINGS(){var e=AnimationClipParser04._reader.getUint32(),t=AnimationClipParser04._reader.getUint16(),a=AnimationClipParser04._reader.pos;AnimationClipParser04._reader.pos=e+AnimationClipParser04._DATA.offset;for(var r=0;r<t;r++)AnimationClipParser04._strings[r]=AnimationClipParser04._reader.readUTFString();AnimationClipParser04._reader.pos=a}static parse(e,t,a){AnimationClipParser04._animationClip=e,AnimationClipParser04._reader=t,AnimationClipParser04._version=a,AnimationClipParser04.READ_DATA(),AnimationClipParser04.READ_BLOCK(),AnimationClipParser04.READ_STRINGS();for(var r=0,n=AnimationClipParser04._BLOCK.count;r<n;r++){var i=t.getUint16(),o=AnimationClipParser04._strings[i],s=AnimationClipParser04["READ_"+o];if(null==s)throw new Error("model file err,no this function:"+i+" "+o);s.call(null)}AnimationClipParser04._version=null,AnimationClipParser04._reader=null,AnimationClipParser04._animationClip=null}static READ_ANIMATIONS(){var a,r,n,i=AnimationClipParser04._reader,o=[],s=i.getUint16();for(o.length=s,a=0;a<s;a++)o[a]=i.getFloat32();var l=AnimationClipParser04._animationClip;l.name=AnimationClipParser04._strings[i.getUint16()];var h=l._duration=i.getFloat32();l.islooping=!!i.getByte(),l._frameRate=i.getInt16();var d=i.getInt16(),c=l._nodes;c.count=d;var u=l._nodesMap={},_=l._nodesDic={};for(a=0;a<d;a++){if(n=new KeyframeNode,"LAYAANIMATION:WEIGHT_05"==AnimationClipParser04._version){1==i.getByte()&&(n.propertyChangePath=AnimationClipParser04._strings[i.getUint16()]),1==i.getByte()&&(n.callbackFunData=AnimationClipParser04._strings[i.getUint16()]);let e=i.getUint8(),t=null;for(r=0;r<e;r++)null==t&&(t=[]),t.push(AnimationClipParser04._strings[i.getUint16()]);n.callParams=t}c.setNodeByIndex(a,n),n._indexInList=a;var m=n.type=i.getUint8(),f=i.getUint16();for(n._setOwnerPathCount(f),r=0;r<f;r++)n._setOwnerPathByIndex(r,AnimationClipParser04._strings[i.getUint16()]);var S=n._joinOwnerPath("/"),g=u[S];g||(u[S]=g=[]),g.push(n),n.propertyOwner=AnimationClipParser04._strings[i.getUint16()];var p=i.getUint16();for(n._setPropertyCount(p),r=0;r<p;r++)n._setPropertyByIndex(r,AnimationClipParser04._strings[i.getUint16()]);var D=S+"."+n.propertyOwner+"."+n._joinProperty(".");_[D]=n,n.fullPath=D,n.nodePath=S;var T=i.getUint16();switch(n._setKeyframeCount(T),AnimationClipParser04._version){case"LAYAANIMATION:04":for(r=0;r<T;r++)switch(m){case e.KeyFrameValueType.Float:var E=new FloatKeyframe;n._setKeyframeByIndex(r,E),E.time=o[i.getUint16()],E.inTangent=i.getFloat32(),E.outTangent=i.getFloat32(),E.value=i.getFloat32();break;case e.KeyFrameValueType.Position:case e.KeyFrameValueType.Scale:case e.KeyFrameValueType.RotationEuler:case e.KeyFrameValueType.Vector3:var x=new Vector3Keyframe;n._setKeyframeByIndex(r,x),x.time=o[i.getUint16()];var M=x.inTangent,R=x.outTangent,A=x.value;M.x=i.getFloat32(),M.y=i.getFloat32(),M.z=i.getFloat32(),R.x=i.getFloat32(),R.y=i.getFloat32(),R.z=i.getFloat32(),A.x=i.getFloat32(),A.y=i.getFloat32(),A.z=i.getFloat32();break;case e.KeyFrameValueType.Rotation:var C=new QuaternionKeyframe;n._setKeyframeByIndex(r,C),C.time=o[i.getUint16()];var y=C.inTangent,v=C.outTangent,I=C.value;y.x=i.getFloat32(),y.y=i.getFloat32(),y.z=i.getFloat32(),y.w=i.getFloat32(),v.x=i.getFloat32(),v.y=i.getFloat32(),v.z=i.getFloat32(),v.w=i.getFloat32(),I.x=i.getFloat32(),I.y=i.getFloat32(),I.z=i.getFloat32(),I.w=i.getFloat32();break;case e.KeyFrameValueType.Vector2:var L=new Vector2Keyframe;n._setKeyframeByIndex(r,L),L.time=o[i.getUint16()];var P=L.inTangent,B=L.outTangent,O=L.value;P.x=i.getFloat32(),P.y=i.getFloat32(),B.x=i.getFloat32(),B.y=i.getFloat32(),O.x=i.getFloat32(),O.y=i.getFloat32();break;case e.KeyFrameValueType.Vector4:case e.KeyFrameValueType.Color:var V=new Vector4Keyframe;n._setKeyframeByIndex(r,V),V.time=o[i.getUint16()];var w=V.inTangent,b=V.outTangent,N=V.value;w.x=i.getFloat32(),w.y=i.getFloat32(),w.z=i.getFloat32(),w.w=i.getFloat32(),b.x=i.getFloat32(),b.y=i.getFloat32(),b.z=i.getFloat32(),b.w=i.getFloat32(),N.x=i.getFloat32(),N.y=i.getFloat32(),N.z=i.getFloat32(),N.w=i.getFloat32();break;default:throw"AnimationClipParser04:unknown type."}break;case"LAYAANIMATION:WEIGHT_04":case"LAYAANIMATION:WEIGHT_05":for(r=0;r<T;r++){let t=1;switch(m){case e.KeyFrameValueType.Float:E=new FloatKeyframe;n._setKeyframeByIndex(r,E),E.time=o[i.getUint16()],E.inTangent=i.getFloat32(),E.outTangent=i.getFloat32(),E.value=i.getFloat32(),E.weightedMode=i.getUint8(),"LAYAANIMATION:WEIGHT_05"==AnimationClipParser04._version?(e.WeightedMode.In!=E.weightedMode&&e.WeightedMode.Both!=E.weightedMode||(E.inWeight=i.getFloat32()),e.WeightedMode.Out!=E.weightedMode&&e.WeightedMode.Both!=E.weightedMode||(E.outWeight=i.getFloat32())):(E.inWeight=i.getFloat32(),E.outWeight=i.getFloat32());break;case e.KeyFrameValueType.Position:case e.KeyFrameValueType.Scale:case e.KeyFrameValueType.RotationEuler:case e.KeyFrameValueType.Vector3:x=new Vector3Keyframe(!0);n._setKeyframeByIndex(r,x),x.time=o[i.getUint16()];M=x.inTangent,R=x.outTangent,A=x.value;let a=x.weightedMode,s=x.inWeight,l=x.outWeight;M.x=i.getFloat32(),M.y=i.getFloat32(),M.z=i.getFloat32(),R.x=i.getFloat32(),R.y=i.getFloat32(),R.z=i.getFloat32(),A.x=i.getFloat32(),A.y=i.getFloat32(),A.z=i.getFloat32(),"LAYAANIMATION:WEIGHT_05"==AnimationClipParser04._version&&(t=i.getByte()),1==t&&(a.x=i.getUint8(),a.y=i.getUint8(),a.z=i.getUint8(),s.x=i.getFloat32(),s.y=i.getFloat32(),s.z=i.getFloat32(),l.x=i.getFloat32(),l.y=i.getFloat32(),l.z=i.getFloat32());break;case e.KeyFrameValueType.Rotation:C=new QuaternionKeyframe(!0);n._setKeyframeByIndex(r,C),C.time=o[i.getUint16()];y=C.inTangent,v=C.outTangent,I=C.value;let h=C.weightedMode,d=C.inWeight,c=C.outWeight;y.x=i.getFloat32(),y.y=i.getFloat32(),y.z=i.getFloat32(),y.w=i.getFloat32(),v.x=i.getFloat32(),v.y=i.getFloat32(),v.z=i.getFloat32(),v.w=i.getFloat32(),I.x=i.getFloat32(),I.y=i.getFloat32(),I.z=i.getFloat32(),I.w=i.getFloat32(),"LAYAANIMATION:WEIGHT_05"==AnimationClipParser04._version&&(t=i.getByte()),1==t&&(h.x=i.getUint8(),h.y=i.getUint8(),h.z=i.getUint8(),h.w=i.getUint8(),d.x=i.getFloat32(),d.y=i.getFloat32(),d.z=i.getFloat32(),d.w=i.getFloat32(),c.x=i.getFloat32(),c.y=i.getFloat32(),c.z=i.getFloat32(),c.w=i.getFloat32());break;case e.KeyFrameValueType.Vector2:L=new Vector2Keyframe(!0);n._setKeyframeByIndex(r,L),L.time=o[i.getUint16()];P=L.inTangent,B=L.outTangent,O=L.value;let u=L.weightedMode,_=L.inWeight,m=L.outWeight;P.x=i.getFloat32(),P.y=i.getFloat32(),B.x=i.getFloat32(),B.y=i.getFloat32(),O.x=i.getFloat32(),O.y=i.getFloat32(),"LAYAANIMATION:WEIGHT_05"==AnimationClipParser04._version&&(t=i.getByte()),1==t&&(u.x=i.getUint8(),u.y=i.getUint8(),_.x=i.getFloat32(),_.y=i.getFloat32(),m.x=i.getFloat32(),m.y=i.getFloat32());break;case e.KeyFrameValueType.Vector4:case e.KeyFrameValueType.Color:V=new Vector4Keyframe(!0);n._setKeyframeByIndex(r,V),V.time=o[i.getUint16()];w=V.inTangent,b=V.outTangent,N=V.value;var F=V.weightedMode,U=V.inWeight,G=V.outWeight;w.x=i.getFloat32(),w.y=i.getFloat32(),w.z=i.getFloat32(),w.w=i.getFloat32(),b.x=i.getFloat32(),b.y=i.getFloat32(),b.z=i.getFloat32(),b.w=i.getFloat32(),N.x=i.getFloat32(),N.y=i.getFloat32(),N.z=i.getFloat32(),N.w=i.getFloat32(),"LAYAANIMATION:WEIGHT_05"==AnimationClipParser04._version&&(t=i.getByte()),1==t&&(F.x=i.getUint8(),F.y=i.getUint8(),F.z=i.getUint8(),F.w=i.getUint8(),U.x=i.getFloat32(),U.y=i.getFloat32(),U.z=i.getFloat32(),U.w=i.getFloat32(),G.x=i.getFloat32(),G.y=i.getFloat32(),G.z=i.getFloat32(),G.w=i.getFloat32());break;default:throw"AnimationClipParser04:unknown type."}}break;case"LAYAANIMATION:COMPRESSION_04":for(r=0;r<T;r++)switch(m){case e.KeyFrameValueType.Float:E=new FloatKeyframe,n._setKeyframeByIndex(r,E),E.time=o[i.getUint16()],E.inTangent=t.HalfFloatUtils.convertToNumber(i.getUint16()),E.outTangent=t.HalfFloatUtils.convertToNumber(i.getUint16()),E.value=t.HalfFloatUtils.convertToNumber(i.getUint16());break;case e.KeyFrameValueType.Position:case e.KeyFrameValueType.Scale:case e.KeyFrameValueType.RotationEuler:case e.KeyFrameValueType.Vector3:x=new Vector3Keyframe,n._setKeyframeByIndex(r,x),x.time=o[i.getUint16()],M=x.inTangent,R=x.outTangent,A=x.value,M.x=t.HalfFloatUtils.convertToNumber(i.getUint16()),M.y=t.HalfFloatUtils.convertToNumber(i.getUint16()),M.z=t.HalfFloatUtils.convertToNumber(i.getUint16()),R.x=t.HalfFloatUtils.convertToNumber(i.getUint16()),R.y=t.HalfFloatUtils.convertToNumber(i.getUint16()),R.z=t.HalfFloatUtils.convertToNumber(i.getUint16()),A.x=t.HalfFloatUtils.convertToNumber(i.getUint16()),A.y=t.HalfFloatUtils.convertToNumber(i.getUint16()),A.z=t.HalfFloatUtils.convertToNumber(i.getUint16());break;case e.KeyFrameValueType.Rotation:C=new QuaternionKeyframe,n._setKeyframeByIndex(r,C),C.time=o[i.getUint16()],y=C.inTangent,v=C.outTangent,I=C.value,y.x=t.HalfFloatUtils.convertToNumber(i.getUint16()),y.y=t.HalfFloatUtils.convertToNumber(i.getUint16()),y.z=t.HalfFloatUtils.convertToNumber(i.getUint16()),y.w=t.HalfFloatUtils.convertToNumber(i.getUint16()),v.x=t.HalfFloatUtils.convertToNumber(i.getUint16()),v.y=t.HalfFloatUtils.convertToNumber(i.getUint16()),v.z=t.HalfFloatUtils.convertToNumber(i.getUint16()),v.w=t.HalfFloatUtils.convertToNumber(i.getUint16()),I.x=t.HalfFloatUtils.convertToNumber(i.getUint16()),I.y=t.HalfFloatUtils.convertToNumber(i.getUint16()),I.z=t.HalfFloatUtils.convertToNumber(i.getUint16()),I.w=t.HalfFloatUtils.convertToNumber(i.getUint16());break;case e.KeyFrameValueType.Vector2:L=new Vector2Keyframe;n._setKeyframeByIndex(r,L),L.time=o[i.getUint16()];P=L.inTangent,B=L.outTangent,O=L.value;P.x=t.HalfFloatUtils.convertToNumber(i.getUint16()),P.y=t.HalfFloatUtils.convertToNumber(i.getUint16()),B.x=t.HalfFloatUtils.convertToNumber(i.getUint16()),B.y=t.HalfFloatUtils.convertToNumber(i.getUint16()),O.x=t.HalfFloatUtils.convertToNumber(i.getUint16()),O.y=t.HalfFloatUtils.convertToNumber(i.getUint16());break;case e.KeyFrameValueType.Vector4:case e.KeyFrameValueType.Color:V=new Vector4Keyframe;n._setKeyframeByIndex(r,V),V.time=o[i.getUint16()];w=V.inTangent,b=V.outTangent,N=V.value;w.x=t.HalfFloatUtils.convertToNumber(i.getUint16()),w.y=t.HalfFloatUtils.convertToNumber(i.getUint16()),w.z=t.HalfFloatUtils.convertToNumber(i.getUint16()),w.w=t.HalfFloatUtils.convertToNumber(i.getUint16()),b.x=t.HalfFloatUtils.convertToNumber(i.getUint16()),b.y=t.HalfFloatUtils.convertToNumber(i.getUint16()),b.z=t.HalfFloatUtils.convertToNumber(i.getUint16()),b.w=t.HalfFloatUtils.convertToNumber(i.getUint16()),N.x=t.HalfFloatUtils.convertToNumber(i.getUint16()),N.y=t.HalfFloatUtils.convertToNumber(i.getUint16()),N.z=t.HalfFloatUtils.convertToNumber(i.getUint16()),N.w=t.HalfFloatUtils.convertToNumber(i.getUint16());break;default:throw"AnimationClipParser04:unknown type."}}}var H=i.getUint16();for(a=0;a<H;a++){var k=new AnimationEvent;k.time=Math.min(h,i.getFloat32()),k.eventName=AnimationClipParser04._strings[i.getUint16()];var z=[],W=i.getUint16();for(W>0&&(k.params=z=[]),r=0;r<W;r++){switch(i.getByte()){case 0:z.push(!!i.getByte());break;case 1:z.push(i.getInt32());break;case 2:z.push(i.getFloat32());break;case 3:z.push(AnimationClipParser04._strings[i.getUint16()]);break;default:throw new Error("unknown type.")}}l.addEvent(k)}}}AnimationClipParser04._strings=[],AnimationClipParser04._BLOCK={count:0},AnimationClipParser04._DATA={offset:0,size:0};class KeyframeNodeList{constructor(){this._nodes=[]}get count(){return this._nodes.length}set count(e){this._nodes.length=e}getNodeByIndex(e){return this._nodes[e]}setNodeByIndex(e,t){this._nodes[e]=t}}class TextureGenerator{constructor(){}static lightAttenTexture(e,t,a,r,n,i){var o=e/a,s=1/(1+25*o);o>=.64&&(o>1?s=0:s*=1-(o-.64)/.36),i[n]=Math.floor(255*s+.5)}static haloTexture(e,t,a,r,n,i){var o=(e-(a>>=1))/a,s=(t-(r>>=1))/r,l=o*o+s*s;l>1&&(l=1),i[n]=Math.floor(255*(1-l)+.5)}static _generateTexture2D(e,a,r,n){var i=0,o=0;switch(e.format){case t.TextureFormat.R8G8B8:o=3;break;case t.TextureFormat.R8G8B8A8:o=4;break;case t.TextureFormat.Alpha8:o=1;break;default:throw"GeneratedTexture._generateTexture: unkonw texture format."}for(var s=new Uint8Array(a*r*o),l=0;l<r;l++)for(var h=0;h<a;h++)n(h,l,a,r,i,s),i+=o;e.setPixelsData(s,!1,!1)}}class Utils3D{static _createFloatTextureBuffer(e,a){var r=new t.Texture2D(e,a,t.TextureFormat.R32G32B32A32,!1,!1);return r.setPixelsData(null,!1,!1),r.filterMode=t.FilterMode.Point,r.wrapModeU=t.WrapMode.Clamp,r.wrapModeV=t.WrapMode.Clamp,r.anisoLevel=1,r}static _rotationTransformScaleSkinAnimation(e,t,a,r,n,i,o,s,l,h,d,c){var u,_,m,f,S,g=Utils3D._tempArray16_0,p=Utils3D._tempArray16_1,D=Utils3D._tempArray16_2,T=r+r,E=n+n,x=i+i,M=r*T,R=n*T,A=n*E,C=i*T,y=i*E,v=i*x,I=o*T,L=o*E,P=o*x;for(g[15]=1,g[0]=1-A-v,g[1]=R+P,g[2]=C-L,g[4]=R-P,g[5]=1-M-v,g[6]=y+I,g[8]=C+L,g[9]=y-I,g[10]=1-M-A,p[15]=1,p[0]=s,p[5]=l,p[10]=h,u=0;u<4;u++)_=g[u],m=g[u+4],f=g[u+8],S=g[u+12],D[u]=_,D[u+4]=m,D[u+8]=f,D[u+12]=_*e+m*t+f*a+S;for(u=0;u<4;u++)_=D[u],m=D[u+4],f=D[u+8],S=D[u+12],d[u+c]=_*p[0]+m*p[1]+f*p[2]+S*p[3],d[u+c+4]=_*p[4]+m*p[5]+f*p[6]+S*p[7],d[u+c+8]=_*p[8]+m*p[9]+f*p[10]+S*p[11],d[u+c+12]=_*p[12]+m*p[13]+f*p[14]+S*p[15]}static billboardTrans(e,a,r,n){t.Vector3.normalize(r,Utils3D._tempV1),t.Vector3.cross(a,r,Utils3D._tempV0),t.Vector3.normalize(Utils3D._tempV0,Utils3D._tempV0),t.Vector3.scale(Utils3D._tempV0,e.x,n),t.Vector3.scale(r,e.y,Utils3D._tempV1),t.Vector3.add(n,Utils3D._tempV1,n)}static PointinTriangle(e,t,a,r){let n=a.vsub(e,Utils3D._tempVector3_0),i=t.vsub(e,Utils3D._tempVector3_1),o=r.vsub(e,Utils3D._tempVector3_2),s=n.dot(n),l=n.dot(i),h=n.dot(o),d=i.dot(i),c=i.dot(o),u=1/(s*d-l*l),_=(d*h-l*c)*u;if(_<0||_>1)return!1;let m=(s*c-l*h)*u;return!(m<0||m>1)&&_+m<=1}static _computeBoneAndAnimationDatasByBindPoseMatrxix(e,t,a,r,n,i){var o,s,l=0,h=0,d=e.length;for(o=0;o<d;l+=e[o].keyframeWidth,h+=16,o++)Utils3D._rotationTransformScaleSkinAnimation(t[l+0],t[l+1],t[l+2],t[l+3],t[l+4],t[l+5],t[l+6],t[l+7],t[l+8],t[l+9],r,h),0!=o&&(s=16*e[o].parentIndex,Utils3D.mulMatrixByArray(r,s,r,h,r,h));var c=a.length;for(o=0;o<c;o++)Utils3D.mulMatrixByArrayAndMatrixFast(r,16*i[o],a[o],n,16*o)}static _computeAnimationDatasByArrayAndMatrixFast(e,t,a,r){for(var n=0,i=e.length;n<i;n++)Utils3D.mulMatrixByArrayAndMatrixFast(t,16*r[n],e[n],a,16*n)}static _computeBoneAndAnimationDatasByBindPoseMatrxixOld(e,t,a,r,n){var i,o,s=0,l=0,h=e.length;for(i=0;i<h;s+=e[i].keyframeWidth,l+=16,i++)Utils3D._rotationTransformScaleSkinAnimation(t[s+7],t[s+8],t[s+9],t[s+3],t[s+4],t[s+5],t[s+6],t[s+0],t[s+1],t[s+2],r,l),0!=i&&(o=16*e[i].parentIndex,Utils3D.mulMatrixByArray(r,o,r,l,r,l));var d=a.length;for(i=0;i<d;i++){var c=16*i;Utils3D.mulMatrixByArrayAndMatrixFast(r,c,a[i],n,c)}}static _computeAnimationDatasByArrayAndMatrixFastOld(e,t,a){for(var r=e.length,n=0;n<r;n++){var i=16*n;Utils3D.mulMatrixByArrayAndMatrixFast(t,i,e[n],a,i)}}static _computeRootAnimationData(e,t,a){for(var r=0,n=0,i=0,o=e.length;r<o;n+=e[r].keyframeWidth,i+=16,r++)Utils3D.createAffineTransformationArray(t[n+0],t[n+1],t[n+2],t[n+3],t[n+4],t[n+5],t[n+6],t[n+7],t[n+8],t[n+9],a,i)}static transformVector3ArrayByQuat(e,t,a,r,n){var i=e[t],o=e[t+1],s=e[t+2],l=a.x,h=a.y,d=a.z,c=a.w,u=c*i+h*s-d*o,_=c*o+d*i-l*s,m=c*s+l*o-h*i,f=-l*i-h*o-d*s;r[n]=u*c+f*-l+_*-d-m*-h,r[n+1]=_*c+f*-h+m*-l-u*-d,r[n+2]=m*c+f*-d+u*-h-_*-l}static mulMatrixByArray(e,t,a,r,n,i){var o,s,l,h,d;if(n===a){for(a=Utils3D._tempArray16_3,o=0;o<16;++o)a[o]=n[i+o];r=0}for(o=0;o<4;o++)s=e[t+o],l=e[t+o+4],h=e[t+o+8],d=e[t+o+12],n[i+o]=s*a[r+0]+l*a[r+1]+h*a[r+2]+d*a[r+3],n[i+o+4]=s*a[r+4]+l*a[r+5]+h*a[r+6]+d*a[r+7],n[i+o+8]=s*a[r+8]+l*a[r+9]+h*a[r+10]+d*a[r+11],n[i+o+12]=s*a[r+12]+l*a[r+13]+h*a[r+14]+d*a[r+15]}static mulMatrixByArrayFast(e,t,a,r,n,i){var o,s,l,h,d;for(o=0;o<4;o++)s=e[t+o],l=e[t+o+4],h=e[t+o+8],d=e[t+o+12],n[i+o]=s*a[r+0]+l*a[r+1]+h*a[r+2]+d*a[r+3],n[i+o+4]=s*a[r+4]+l*a[r+5]+h*a[r+6]+d*a[r+7],n[i+o+8]=s*a[r+8]+l*a[r+9]+h*a[r+10]+d*a[r+11],n[i+o+12]=s*a[r+12]+l*a[r+13]+h*a[r+14]+d*a[r+15]}static mulMatrixByArrayAndMatrixFast(e,t,a,r,n){var i,o,s,l,h,d=a.elements,c=d[0],u=d[1],_=d[2],m=d[3],f=d[4],S=d[5],g=d[6],p=d[7],D=d[8],T=d[9],E=d[10],x=d[11],M=d[12],R=d[13],A=d[14],C=d[15],y=t,v=t+4,I=t+8,L=t+12,P=n,B=n+4,O=n+8,V=n+12;for(i=0;i<4;i++)o=e[y+i],s=e[v+i],l=e[I+i],h=e[L+i],r[P+i]=o*c+s*u+l*_+h*m,r[B+i]=o*f+s*S+l*g+h*p,r[O+i]=o*D+s*T+l*E+h*x,r[V+i]=o*M+s*R+l*A+h*C}static createAffineTransformationArray(e,t,a,r,n,i,o,s,l,h,d,c){var u=r+r,_=n+n,m=i+i,f=r*u,S=r*_,g=r*m,p=n*_,D=n*m,T=i*m,E=o*u,x=o*_,M=o*m;d[c+0]=(1-(p+T))*s,d[c+1]=(S+M)*s,d[c+2]=(g-x)*s,d[c+3]=0,d[c+4]=(S-M)*l,d[c+5]=(1-(f+T))*l,d[c+6]=(D+E)*l,d[c+7]=0,d[c+8]=(g+x)*h,d[c+9]=(D-E)*h,d[c+10]=(1-(f+p))*h,d[c+11]=0,d[c+12]=e,d[c+13]=t,d[c+14]=a,d[c+15]=1}static transformVector3ArrayToVector3ArrayCoordinate(e,t,a,r,n){var i=e[t+0],o=e[t+1],s=e[t+2],l=a.elements,h=i*l[3]+o*l[7]+s*l[11]+l[15];r[n]=i*l[0]+o*l[4]+s*l[8]+l[12]/h,r[n+1]=i*l[1]+o*l[5]+s*l[9]+l[13]/h,r[n+2]=i*l[2]+o*l[6]+s*l[10]+l[14]/h}static transformVector3ArrayToVector3ArrayNormal(e,t,a,r,n){var i=e[t+0],o=e[t+1],s=e[t+2],l=a.elements;r[n]=i*l[0]+o*l[4]+s*l[8],r[n+1]=i*l[1]+o*l[5]+s*l[9],r[n+2]=i*l[2]+o*l[6]+s*l[10]}static transformLightingMapTexcoordArray(e,t,a,r,n){r[n+0]=e[t+0]*a.x+a.z,r[n+1]=1-((1-e[t+1])*a.y+a.w)}static getURLVerion(e){var t=e.indexOf("?");return t>=0?e.substr(t):null}static _createAffineTransformationArray(e,t,a,r){var n=t.x,i=t.y,o=t.z,s=t.w,l=n+n,h=i+i,d=o+o,c=n*l,u=n*h,_=n*d,m=i*h,f=i*d,S=o*d,g=s*l,p=s*h,D=s*d,T=a.x,E=a.y,x=a.z;r[0]=(1-(m+S))*T,r[1]=(u+D)*T,r[2]=(_-p)*T,r[3]=0,r[4]=(u-D)*E,r[5]=(1-(c+S))*E,r[6]=(f+g)*E,r[7]=0,r[8]=(_+p)*x,r[9]=(f-g)*x,r[10]=(1-(c+m))*x,r[11]=0,r[12]=e.x,r[13]=e.y,r[14]=e.z,r[15]=1}static _mulMatrixArray(e,t,a,r,n){var i=t,o=e,s=r,l=i[a],h=i[a+1],d=i[a+2],c=i[a+3],u=i[a+4],_=i[a+5],m=i[a+6],f=i[a+7],S=i[a+8],g=i[a+9],p=i[a+10],D=i[a+11],T=i[a+12],E=i[a+13],x=i[a+14],M=i[a+15],R=o[0],A=o[1],C=o[2],y=o[3],v=o[4],I=o[5],L=o[6],P=o[7],B=o[8],O=o[9],V=o[10],w=o[11],b=o[12],N=o[13],F=o[14],U=o[15];s[n]=l*R+h*v+d*B+c*b,s[n+1]=l*A+h*I+d*O+c*N,s[n+2]=l*C+h*L+d*V+c*F,s[n+3]=l*y+h*P+d*w+c*U,s[n+4]=u*R+_*v+m*B+f*b,s[n+5]=u*A+_*I+m*O+f*N,s[n+6]=u*C+_*L+m*V+f*F,s[n+7]=u*y+_*P+m*w+f*U,s[n+8]=S*R+g*v+p*B+D*b,s[n+9]=S*A+g*I+p*O+D*N,s[n+10]=S*C+g*L+p*V+D*F,s[n+11]=S*y+g*P+p*w+D*U,s[n+12]=T*R+E*v+x*B+M*b,s[n+13]=T*A+E*I+x*O+M*N,s[n+14]=T*C+E*L+x*V+M*F,s[n+15]=T*y+E*P+x*w+M*U}static arcTanAngle(e,t){return 0==e?1==t?Math.PI/2:-Math.PI/2:e>0?Math.atan(t/e):e<0?t>0?Math.atan(t/e)+Math.PI:Math.atan(t/e)-Math.PI:0}static angleTo(e,a,r){t.Vector3.subtract(a,e,n),t.Vector3.normalize(n,n),r.x=Math.asin(n.y),r.y=Utils3D.arcTanAngle(-n.z,-n.x)}static transformQuat(e,t,a){var r=t,n=e.x,i=e.y,o=e.z,s=r[0],l=r[1],h=r[2],d=r[3],c=d*n+l*o-h*i,u=d*i+h*n-s*o,_=d*o+s*i-l*n,m=-s*n-l*i-h*o;a.x=c*d+m*-s+u*-h-_*-l,a.y=u*d+m*-l+_*-s-c*-h,a.z=_*d+m*-h+c*-l-u*-s}static quaternionWeight(e,t,a){a.x=e.x*t,a.y=e.y*t,a.z=e.z*t,a.w=e.w}static quaternionConjugate(e,t){t.x=-e.x,t.y=-e.y,t.z=-e.z,t.w=e.w}static scaleWeight(e,t,a){var r=e.x,n=e.y,i=e.z;a.x=r>0?Math.pow(Math.abs(r),t):-Math.pow(Math.abs(r),t),a.y=n>0?Math.pow(Math.abs(n),t):-Math.pow(Math.abs(n),t),a.z=i>0?Math.pow(Math.abs(i),t):-Math.pow(Math.abs(i),t)}static scaleBlend(e,t,a,r){var n=Utils3D._tempVector3_0,i=Utils3D._tempVector3_1;Utils3D.scaleWeight(e,1-a,n),Utils3D.scaleWeight(t,a,i);var o=a>.5?t:e;r.x=o.x>0?Math.abs(n.x*i.x):-Math.abs(n.x*i.x),r.y=o.y>0?Math.abs(n.y*i.y):-Math.abs(n.y*i.y),r.z=o.z>0?Math.abs(n.z*i.z):-Math.abs(n.z*i.z)}static matrix4x4MultiplyFFF(e,t,a){var r,n,i,o,s;if(a===t)for(t=new Float32Array(16),r=0;r<16;++r)t[r]=a[r];var l=t[0],h=t[1],d=t[2],c=t[3],u=t[4],_=t[5],m=t[6],f=t[7],S=t[8],g=t[9],p=t[10],D=t[11],T=t[12],E=t[13],x=t[14],M=t[15];for(r=0;r<4;r++)n=e[r],i=e[r+4],o=e[r+8],s=e[r+12],a[r]=n*l+i*h+o*d+s*c,a[r+4]=n*u+i*_+o*m+s*f,a[r+8]=n*S+i*g+o*p+s*D,a[r+12]=n*T+i*E+o*x+s*M}static matrix4x4MultiplyMFM(e,t,a){Utils3D.matrix4x4MultiplyFFF(e.elements,t,a.elements)}static _buildTexture2D(e,a,r,n,i=!1){var o=new t.Texture2D(e,a,r,i,!0);return o.anisoLevel=1,o.filterMode=t.FilterMode.Point,TextureGenerator._generateTexture2D(o,e,a,n),o}static _drawBound(e,t,a){e.lineCount+12>e.maxLineCount&&(e.maxLineCount+=12);var r=Utils3D._tempVector3_0,n=Utils3D._tempVector3_1,i=t.min,o=t.max;r.setValue(i.x,i.y,i.z),n.setValue(o.x,i.y,i.z),e.addLine(r,n,a,a),r.setValue(i.x,i.y,i.z),n.setValue(i.x,i.y,o.z),e.addLine(r,n,a,a),r.setValue(o.x,i.y,i.z),n.setValue(o.x,i.y,o.z),e.addLine(r,n,a,a),r.setValue(i.x,i.y,o.z),n.setValue(o.x,i.y,o.z),e.addLine(r,n,a,a),r.setValue(i.x,i.y,i.z),n.setValue(i.x,o.y,i.z),e.addLine(r,n,a,a),r.setValue(i.x,i.y,o.z),n.setValue(i.x,o.y,o.z),e.addLine(r,n,a,a),r.setValue(o.x,i.y,i.z),n.setValue(o.x,o.y,i.z),e.addLine(r,n,a,a),r.setValue(o.x,i.y,o.z),n.setValue(o.x,o.y,o.z),e.addLine(r,n,a,a),r.setValue(i.x,o.y,i.z),n.setValue(o.x,o.y,i.z),e.addLine(r,n,a,a),r.setValue(i.x,o.y,i.z),n.setValue(i.x,o.y,o.z),e.addLine(r,n,a,a),r.setValue(o.x,o.y,i.z),n.setValue(o.x,o.y,o.z),e.addLine(r,n,a,a),r.setValue(i.x,o.y,o.z),n.setValue(o.x,o.y,o.z),e.addLine(r,n,a,a)}static _getHierarchyPath(e,t,a){a.length=0;for(var r=t;r!==e;){var n=r._parent;if(!n)return null;a.push(n.getChildIndex(r)),r=n}return a}static _getNodeByHierarchyPath(e,t){for(var a=e,r=t.length-1;r>=0;r--)a=a.getChildAt(t[r]);return a}static _getParentNodeByHierarchyPath(e,t){let a=t.length,r=e;for(let e=0;e<a;e++){if(!r)return null;r=r.parent}return r}static uint8ArrayToArrayBuffer(e){let a,r=e.width,n=e.height;switch(e.colorFormat){case t.RenderTargetFormat.R8G8B8:case t.RenderTargetFormat.R8G8B8A8:a=new Uint8Array(r*n*4);break;case t.RenderTargetFormat.R16G16B16A16:a=new Float32Array(r*n*4);break;default:throw"this function is not surpprt "+e.format.toString()+"format Material"}if(e.getData(0,0,e.width,e.height,a),e.colorFormat===t.RenderTargetFormat.R16G16B16A16){let e=a,t=new Uint8Array(r*n*4);for(let a=0,r=e.length;a<r;a++)t[a]=Math.min(Math.floor(255*e[a]),255);a=t}let i=a;var o;if(t.LayaEnv.isConch);else{var s=new t.HTMLCanvas(!0);s.lock=!0,s.size(r,n);var l=s.getContext("2d"),h=l.createImageData(r,n);h.data.set(new Uint8ClampedArray(i)),l.putImageData(h,0,0),o=s.source.toDataURL(),s.destroy()}return o}static uint8ArrayToArrayBufferAsync(e){let a,r=e.width,n=e.height;switch(e.colorFormat){case t.RenderTargetFormat.R8G8B8:case t.RenderTargetFormat.R8G8B8A8:a=new Uint8Array(r*n*4);break;case t.RenderTargetFormat.R16G16B16A16:a=new Float32Array(r*n*4);break;default:throw"this function is not surpprt "+e.format.toString()+"format Material"}return e.getDataAsync(0,0,e.width,e.height,a).then((()=>{if(e.colorFormat===t.RenderTargetFormat.R16G16B16A16){let e=a,t=new Uint8Array(r*n*4);for(let a=0,r=e.length;a<r;a++)t[a]=Math.min(Math.floor(255*e[a]),255);a=t}let i=a;var o;if(t.LayaEnv.isConch);else{var s=new t.HTMLCanvas(!0);s.lock=!0,s.size(r,n);var l=s.getContext("2d"),h=l.createImageData(r,n);h.data.set(new Uint8ClampedArray(i)),l.putImageData(h,0,0),o=s.source.toDataURL(),s.destroy()}return Promise.resolve(o)}))}}Utils3D._tempVector3_0=new t.Vector3,Utils3D._tempVector3_1=new t.Vector3,Utils3D._tempVector3_2=new t.Vector3,Utils3D._tempArray16_0=new Float32Array(16),Utils3D._tempArray16_1=new Float32Array(16),Utils3D._tempArray16_2=new Float32Array(16),Utils3D._tempArray16_3=new Float32Array(16),Utils3D._compIdToNode=new Object,Utils3D._tempV0=new t.Vector3,Utils3D._tempV1=new t.Vector3,window.getRTBase64=Utils3D.uint8ArrayToArrayBuffer;const n=new t.Vector3;class AnimationClip extends t.Resource{constructor(){super(),this._duration=0,this._frameRate=0,this._nodes=new KeyframeNodeList,this.islooping=!1,this._animationEvents=[]}static _parse(e){var a=new AnimationClip,r=new t.Byte(e),n=r.readUTFString();switch(n){case"LAYAANIMATION:03":AnimationClipParser03.parse(a,r);break;case"LAYAANIMATION:04":case"LAYAANIMATION:COMPRESSION_04":case"LAYAANIMATION:WEIGHT_04":case"LAYAANIMATION:WEIGHT_05":AnimationClipParser04.parse(a,r,n);break;default:throw"unknown animationClip version."}return a}static load(e,a){t.ILaya.loader.load(e,a,null,t.Loader.ANIMATIONCLIP)}duration(){return this._duration}_weightModeHermite(t,a){return 0==(t&e.WeightedMode.Out)&&0==(a&e.WeightedMode.In)}_hermiteInterpolate(e,t,a,r){var n=e.outTangent,i=t.inTangent;if(Number.isFinite(n)&&Number.isFinite(i)){var o=a*a,s=o*a,l=s-2*o+a,h=s-o,d=-2*s+3*o;return(2*s-3*o+1)*e.value+l*n*r+h*i*r+d*t.value}return e.value}_hermiteInterpolateVector3(e,t,a,r,n){var i=e.value,o=e.outTangent,s=t.value,l=t.inTangent,h=a*a,d=h*a,c=2*d-3*h+1,u=d-2*h+a,_=d-h,m=-2*d+3*h,f=o.x,S=l.x;!e.weightedMode||this._weightModeHermite(e.weightedMode.x,t.weightedMode.x)?Number.isFinite(f)&&Number.isFinite(S)?n.x=c*i.x+u*f*r+_*S*r+m*s.x:n.x=i.x:n.x=this._hermiteCurveSplineWeight(e.value.x,e.time,e.outWeight.x,e.outTangent.x,t.value.x,t.time,t.inWeight.x,t.inTangent.x,a),f=o.y,S=l.y,!e.weightedMode||this._weightModeHermite(e.weightedMode.y,t.weightedMode.y)?Number.isFinite(f)&&Number.isFinite(S)?n.y=c*i.y+u*f*r+_*S*r+m*s.y:n.y=i.y:n.y=this._hermiteCurveSplineWeight(e.value.y,e.time,e.outWeight.y,e.outTangent.y,t.value.y,t.time,t.inWeight.y,t.inTangent.y,a),f=o.z,S=l.z,!e.weightedMode||this._weightModeHermite(e.weightedMode.z,t.weightedMode.z)?Number.isFinite(f)&&Number.isFinite(S)?n.z=c*i.z+u*f*r+_*S*r+m*s.z:n.z=i.z:n.z=this._hermiteCurveSplineWeight(e.value.z,e.time,e.outWeight.z,e.outTangent.z,t.value.z,t.time,t.inWeight.z,t.inTangent.z,a)}_hermiteInterpolateQuaternion(e,t,a,r,n){var i=e.value,o=e.outTangent,s=t.value,l=t.inTangent,h=a*a,d=h*a,c=2*d-3*h+1,u=d-2*h+a,_=d-h,m=-2*d+3*h,f=o.x,S=l.x;!e.weightedMode||this._weightModeHermite(e.weightedMode.x,t.weightedMode.x)?Number.isFinite(f)&&Number.isFinite(S)?n.x=c*i.x+u*f*r+_*S*r+m*s.x:n.x=i.x:n.x=this._hermiteCurveSplineWeight(e.value.x,e.time,e.outWeight.x,e.outTangent.x,t.value.x,t.time,t.inWeight.x,t.inTangent.x,a),f=o.y,S=l.y,!e.weightedMode||this._weightModeHermite(e.weightedMode.y,t.weightedMode.y)?Number.isFinite(f)&&Number.isFinite(S)?n.y=c*i.y+u*f*r+_*S*r+m*s.y:n.y=i.y:n.y=this._hermiteCurveSplineWeight(e.value.y,e.time,e.outWeight.y,e.outTangent.y,t.value.y,t.time,t.inWeight.y,t.inTangent.y,a),f=o.z,S=l.z,!e.weightedMode||this._weightModeHermite(e.weightedMode.z,t.weightedMode.z)?Number.isFinite(f)&&Number.isFinite(S)?n.z=c*i.z+u*f*r+_*S*r+m*s.z:n.z=i.z:n.z=this._hermiteCurveSplineWeight(e.value.z,e.time,e.outWeight.z,e.outTangent.z,t.value.z,t.time,t.inWeight.z,t.inTangent.z,a),f=o.w,S=l.w,!e.weightedMode||this._weightModeHermite(e.weightedMode.w,t.weightedMode.w)?Number.isFinite(f)&&Number.isFinite(S)?n.w=c*i.w+u*f*r+_*S*r+m*s.w:n.w=i.w:n.w=this._hermiteCurveSplineWeight(e.value.w,e.time,e.outWeight.w,e.outTangent.w,t.value.w,t.time,t.inWeight.w,t.inTangent.w,a)}_hermiteInterpolateVector4(e,t,a,r,n){var i=e.value,o=e.outTangent,s=t.value,l=t.inTangent,h=a*a,d=h*a,c=2*d-3*h+1,u=d-2*h+a,_=d-h,m=-2*d+3*h,f=o.x,S=l.x;!e.weightedMode||this._weightModeHermite(e.weightedMode.x,t.weightedMode.x)?Number.isFinite(f)&&Number.isFinite(S)?n.x=c*i.x+u*f*r+_*S*r+m*s.x:n.x=i.x:n.x=this._hermiteCurveSplineWeight(e.value.x,e.time,e.outWeight.x,e.outTangent.x,t.value.x,t.time,t.inWeight.x,t.inTangent.x,a),f=o.y,S=l.y,!e.weightedMode||this._weightModeHermite(e.weightedMode.y,t.weightedMode.y)?Number.isFinite(f)&&Number.isFinite(S)?n.y=c*i.y+u*f*r+_*S*r+m*s.y:n.y=i.y:n.y=this._hermiteCurveSplineWeight(e.value.y,e.time,e.outWeight.y,e.outTangent.y,t.value.y,t.time,t.inWeight.y,t.inTangent.y,a),f=o.z,S=l.z,!e.weightedMode||this._weightModeHermite(e.weightedMode.z,t.weightedMode.z)?Number.isFinite(f)&&Number.isFinite(S)?n.z=c*i.z+u*f*r+_*S*r+m*s.z:n.z=i.z:n.z=this._hermiteCurveSplineWeight(e.value.z,e.time,e.outWeight.z,e.outTangent.z,t.value.z,t.time,t.inWeight.z,t.inTangent.z,a),f=o.w,S=l.w,!e.weightedMode||this._weightModeHermite(e.weightedMode.w,t.weightedMode.w)?Number.isFinite(f)&&Number.isFinite(S)?n.w=c*i.w+u*f*r+_*S*r+m*s.w:n.w=i.w:n.w=this._hermiteCurveSplineWeight(e.value.w,e.time,e.outWeight.w,e.outTangent.w,t.value.w,t.time,t.inWeight.w,t.inTangent.w,a)}_hermiteInterpolateVector2(e,t,a,r,n){var i=e.value,o=e.outTangent,s=t.value,l=t.inTangent,h=a*a,d=h*a,c=2*d-3*h+1,u=d-2*h+a,_=d-h,m=-2*d+3*h,f=o.x,S=l.x;!e.weightedMode||this._weightModeHermite(e.weightedMode.x,t.weightedMode.x)?Number.isFinite(f)&&Number.isFinite(S)?n.x=c*i.x+u*f*r+_*S*r+m*s.x:n.x=i.x:n.x=this._hermiteCurveSplineWeight(e.value.x,e.time,e.outWeight.x,e.outTangent.x,t.value.x,t.time,t.inWeight.x,t.inTangent.x,a),f=o.y,S=l.y,!e.weightedMode||this._weightModeHermite(e.weightedMode.y,t.weightedMode.y)?Number.isFinite(f)&&Number.isFinite(S)?n.y=c*i.y+u*f*r+_*S*r+m*s.y:n.y=i.y:n.y=this._hermiteCurveSplineWeight(e.value.y,e.time,e.outWeight.y,e.outTangent.y,t.value.y,t.time,t.inWeight.y,t.inTangent.y,a)}_hermiteCurveSplineWeight(e,t,a,r,n,i,o,s,l){let h=222e-18,d=l,c=e,u=a,_=o,m=i-t,f=n-c;f=Math.max(Math.abs(f),h)*(f<0?-1:1);let S=r,g=s;if(!Number.isFinite(S)||!Number.isFinite(g))return e;S=S*m/f,g=g*m/f;let p=1-_,D=.5,T=0;if(Math.abs(u-.33333334)<1e-4&&Math.abs(_-.33333334)<1e-4)D=d,T=1-D;else for(;;){T=1-D;let e=3*T*T*D*u+3*T*D*D*p+D*D*D-d;if(Math.abs(e)<=2.5*h)break;let t=3*T*T*u+6*T*D*(p-u)+3*D*D*(1-p),a=6*T*(p-2*u)+6*D*(1-2*p+u);D-=(6*e*t*t-3*e*e*a)/(6*t*t*t-6*e*t*a+e*e*(18*u-18*p+6))}return(3*T*T*D*u*S+3*T*D*D*(1-_*g)+D*D*D)*f+c}_curveInterpolate(e,t,a,r){return!e.weightedMode||this._weightModeHermite(e.weightedMode,t.weightedMode)?this._hermiteInterpolate(e,t,a,r):this._hermiteCurveSplineWeight(e.value,e.time,e.outWeight,e.outTangent,t.value,t.time,t.inWeight,t.inTangent,a)}_evaluateClipDatasRealTime(a,r,n,i,o,s,l){for(var h=0,d=a.count;h<d;h++){var c,u=a.getNodeByIndex(h),_=u.type,m=u._keyFrames,f=m.length,S=n[h];if(!l||l.getTransformActive(u.nodePath)){if(o)for(-1!==S&&r<m[S].time&&(S=-1,n[h]=S),c=S+1;c<f&&!(m[c].time>r);)S++,c++,n[h]=S;else for((c=S+1)!==f&&r>m[c].time&&(S=f-1,n[h]=S),c=S+1;S>-1&&!(m[S].time<r);)S--,c--,n[h]=S;var g=c===f;switch(_){case e.KeyFrameValueType.Float:if(-1!==S){var p=m[S];if(g)s[h]=p.value;else{var D,T=m[c],E=T.time-p.time;D=0!==E?(r-p.time)/E:0,s[h]=this._curveInterpolate(p,T,D,E)}}else s[h]=m[0].value;i&&(s[h]=s[h]-m[0].value);break;case e.KeyFrameValueType.Position:case e.KeyFrameValueType.RotationEuler:case e.KeyFrameValueType.Vector3:var x=s[h];if(this._evaluateFrameNodeVector3DatasRealTime(m,S,g,r,x),i){var M=m[0].value;x.x-=M.x,x.y-=M.y,x.z-=M.z}break;case e.KeyFrameValueType.Rotation:var R=s[h];if(this._evaluateFrameNodeQuaternionDatasRealTime(m,S,g,r,R),i){var A=AnimationClip._tempQuaternion0,C=m[0].value;Utils3D.quaternionConjugate(C,A),t.Quaternion.multiply(A,R,R)}break;case e.KeyFrameValueType.Scale:x=s[h],this._evaluateFrameNodeVector3DatasRealTime(m,S,g,r,x),i&&(M=m[0].value,x.x/=M.x,x.y/=M.y,x.z/=M.z);break;case e.KeyFrameValueType.Vector2:var y=s[h];if(this._evaluateFrameNodeVector2DatasRealTime(m,S,g,r,y),i){var v=m[0].value;y.x-=v.x,y.y-=v.y}break;case e.KeyFrameValueType.Vector4:case e.KeyFrameValueType.Color:var I=s[h];if(this._evaluateFrameNodeVector4DatasRealTime(m,S,g,r,I),i){var L=m[0].value;I.x-=L.x,I.y-=L.y,I.z-=L.z,I.w-=L.w}break;default:throw"AnimationClip:unknown node type."}}}}_evaluateFrameNodeVector3DatasRealTime(e,t,a,r,n){if(-1!==t){var i=e[t];if(a){var o=i.value;n.x=o.x,n.y=o.y,n.z=o.z}else{var s,l=e[t+1],h=i.time,d=l.time-h;s=0!==d?(r-h)/d:0,this._hermiteInterpolateVector3(i,l,s,d,n)}}else{var c=e[0].value;n.x=c.x,n.y=c.y,n.z=c.z}}_evaluateFrameNodeVector2DatasRealTime(e,t,a,r,n){if(-1!==t){var i=e[t];if(a){var o=i.value;n.x=o.x,n.y=o.y}else{var s,l=e[t+1],h=i.time,d=l.time-h;s=0!==d?(r-h)/d:0,this._hermiteInterpolateVector2(i,l,s,d,n)}}else{var c=e[0].value;n.x=c.x,n.y=c.y}}_evaluateFrameNodeVector4DatasRealTime(e,t,a,r,n){if(-1!==t){var i=e[t];if(a){var o=i.value;n.x=o.x,n.y=o.y,n.z=o.z}else{var s,l=e[t+1],h=i.time,d=l.time-h;s=0!==d?(r-h)/d:0,this._hermiteInterpolateVector4(i,l,s,d,n)}}else{var c=e[0].value;n.x=c.x,n.y=c.y,n.z=c.z}}_evaluateFrameNodeQuaternionDatasRealTime(e,t,a,r,n){if(-1!==t){var i=e[t];if(a){var o=i.value;n.x=o.x,n.y=o.y,n.z=o.z,n.w=o.w}else{var s,l=e[t+1],h=i.time,d=l.time-h;s=0!==d?(r-h)/d:0,this._hermiteInterpolateQuaternion(i,l,s,d,n)}}else{var c=e[0].value;n.x=c.x,n.y=c.y,n.z=c.z,n.w=c.w}}_binarySearchEventIndex(e){for(var t,a=0,r=this._animationEvents.length-1;a<=r;){t=Math.floor((a+r)/2);var n=this._animationEvents[t].time;if(n==e)return t;n>e?r=t-1:a=t+1}return a}addEvent(e){var t=this._binarySearchEventIndex(e.time);this._animationEvents.splice(t,0,e)}_disposeResource(){this._nodes=null,this._nodesMap=null}}AnimationClip._tempQuaternion0=new t.Quaternion;class Laya3DRender{}var i,o,s,l,h,d,c,u;e.ShaderDataType=void 0,(i=e.ShaderDataType||(e.ShaderDataType={}))[i.None=0]="None",i[i.Int=1]="Int",i[i.Bool=2]="Bool",i[i.Float=3]="Float",i[i.Vector2=4]="Vector2",i[i.Vector3=5]="Vector3",i[i.Vector4=6]="Vector4",i[i.Color=7]="Color",i[i.Matrix4x4=8]="Matrix4x4",i[i.Texture2D=9]="Texture2D",i[i.Texture3D=10]="Texture3D",i[i.TextureCube=11]="TextureCube",i[i.Buffer=12]="Buffer",i[i.Matrix3x3=13]="Matrix3x3",i[i.Texture2DArray=14]="Texture2DArray";e.StaticFlag=void 0,(o=e.StaticFlag||(e.StaticFlag={}))[o.Normal=1]="Normal",o[o.StaticBatch=2]="StaticBatch";class Sprite3D extends t.Node{constructor(t=null,a=!1){super(),this._isRenderNode=0,this._id=++Sprite3D._uniqueIDCounter,this._is3D=!0,this._transform=Laya3DRender.Render3DModuleDataFactory.createTransform(this),this._isStatic=a?e.StaticFlag.StaticBatch:e.StaticFlag.Normal,this.layer=0,this.name=t||"New Sprite3D"}static __init__(){Sprite3D.WORLDMATRIX=t.Shader3D.propertyNameToID("u_WorldMat"),Sprite3D.WORLDINVERTFRONT=t.Shader3D.propertyNameToID("u_WroldInvertFront"),Sprite3D.sprite3DCommandUniformMap=t.LayaGL.renderDeviceFactory.createGlobalUniformMap("Sprite3D"),Sprite3D.sprite3DCommandUniformMap.addShaderUniform(Sprite3D.WORLDMATRIX,"u_WorldMat",e.ShaderDataType.Matrix4x4),Sprite3D.sprite3DCommandUniformMap.addShaderUniform(Sprite3D.WORLDINVERTFRONT,"u_WroldInvertFront",e.ShaderDataType.Vector4)}static instantiate(e,t=null,a=!0,r=null,n=null){var i=e.clone();t&&t.addChild(i);var o=i.transform;if(a){var s=o.worldMatrix;e.transform.worldMatrix.cloneTo(s),o.worldMatrix=s}else r&&(o.position=r),n&&(o.rotation=n);return i}static load(e,a){t.ILaya.loader.load(e).then((e=>{a&&a.runWith([null==e?void 0:e.create()])}))}get id(){return this._id}get layer(){return this._layer}set layer(e){if(this._layer!==e){if(!(e>=0&&e<=30))throw new Error("Layer value must be 0-30.");this._layer=e,this.event(t.Event.LAYERCHANGE,e)}}get isStatic(){return!!(this._isStatic>>1|0)}set isStatic(a){this._isStatic=a?e.StaticFlag.StaticBatch:e.StaticFlag.Normal,this.event(t.Event.staticMask,this._isStatic)}get transform(){return this._transform}get scene(){return this._scene}_onActive(){super._onActive(),t.Stat.sprite3DCount++}_onInActive(){super._onInActive(),t.Stat.sprite3DCount--}_onAdded(){if(this._parent instanceof Sprite3D){var e=this._parent;this.transform._setParent(e.transform)}else this.transform._onWorldTransform();super._onAdded()}_onRemoved(){super._onRemoved(),this._parent instanceof Sprite3D&&this.transform._setParent(null)}onStartListeningToType(e){super.onStartListeningToType(e),e.startsWith("collision")?this._setBit(t.NodeFlags.PROCESS_COLLISIONS,!0):e.startsWith("trigger")&&this._setBit(t.NodeFlags.PROCESS_TRIGGERS,!0)}_parse(e,t){if(void 0!==e.isStatic&&(this.isStatic=e.isStatic),void 0!==e.active&&(this.active=e.active),null!=e.name&&(this.name=e.name),null!=e.tag&&(this.tag=e.tag),void 0!==e.position){var a=this.transform.localPosition;a.fromArray(e.position),this.transform.localPosition=a}if(void 0!==e.rotationEuler){var r=this.transform.localRotationEuler;r.fromArray(e.rotationEuler),this.transform.localRotationEuler=r}if(void 0!==e.rotation){var n=this.transform.localRotation;n.fromArray(e.rotation),this.transform.localRotation=n}if(void 0!==e.scale){var i=this.transform.localScale;i.fromArray(e.scale),this.transform.localScale=i}null!=e.layer&&(this.layer=e.layer)}_cloneTo(e,t,a){if(this._destroyed)throw new Error("Sprite3D: Can't be cloned if the Sprite3D has destroyed.");var r=e,n=this._transform,i=r._transform;r.name=this.name,r.tag=this.tag,r._destroyed=this._destroyed,r.active=this.active,i.localPosition=n.localPosition,i.localRotation=n.localRotation,i.localScale=n.localScale,r._isStatic=this._isStatic,r.layer=this.layer,super._cloneTo(r,t,a)}static _createSprite3DInstance(e){for(var t=e._create(),a=e._children,r=0,n=a.length;r<n;r++){var i=Sprite3D._createSprite3DInstance(a[r]);t.addChild(i)}return t}static _parseSprite3DInstance(e,t,a,r){for(var n=a._children,i=r._children,o=0,s=n.length;o<s;o++)Sprite3D._parseSprite3DInstance(e,t,n[o],i[o]);a._cloneTo(r,e,t)}clone(){var e=Sprite3D._createSprite3DInstance(this);return Sprite3D._parseSprite3DInstance(this,e,this,e),e}destroy(e=!0){this._destroyed||(super.destroy(e),this._transform=null)}_create(){return new Sprite3D}}Sprite3D._uniqueIDCounter=0;class Plane{constructor(e=new t.Vector3,a=0){this._normal=e,this._distance=a}set normal(e){e.cloneTo(this._normal)}get normal(){return this._normal}set distance(e){this._distance=e}get distance(){return this._distance}static createPlaneBy3P(e,t,a,r){var n=t.x-e.x,i=t.y-e.y,o=t.z-e.z,s=a.x-e.x,l=a.y-e.y,h=a.z-e.z,d=i*h-o*l,c=o*s-n*h,u=n*l-i*s,_=1/Math.sqrt(d*d+c*c+u*u),m=d*_,f=c*_,S=u*_,g=r.normal;g.x=m,g.y=f,g.z=S,r.normal=g.normalize(),r.distance=-(m*e.x+f*e.y+S*e.z)}normalize(){var e=this.normal.x,t=this.normal.y,a=this.normal.z,r=1/Math.sqrt(e*e+t*t+a*a);this.normal.x=e*r,this.normal.y=t*r,this.normal.z=a*r,this.distance*=r}cloneTo(e){var t=e;this.normal.cloneTo(t.normal),t.distance=this.distance}clone(){var e=new Plane;return this.cloneTo(e),e}}Plane.PlaneIntersectionType_Back=0,Plane.PlaneIntersectionType_Front=1,Plane.PlaneIntersectionType_Intersecting=2;class Ray{constructor(e,t){this.origin=e,this.direction=t}at(e,a){t.Vector3.scale(this.direction,e,a),t.Vector3.add(this.origin,a,a)}}class ContainmentType{}ContainmentType.Disjoint=0,ContainmentType.Contains=1,ContainmentType.Intersects=2;class CollisionUtils{constructor(){}static distancePlaneToPoint(e,a){return t.Vector3.dot(e.normal,a)+e.distance}static distanceBoxToPoint(e,t){var a=e.min,r=a.x,n=a.y,i=a.z,o=e.max,s=o.x,l=o.y,h=o.z,d=t.x,c=t.y,u=t.z,_=0;return d<r&&(_+=(r-d)*(r-d)),d>s&&(_+=(s-d)*(s-d)),c<n&&(_+=(n-c)*(n-c)),c>l&&(_+=(l-c)*(l-c)),u<i&&(_+=(i-u)*(i-u)),u>h&&(_+=(h-u)*(h-u)),Math.sqrt(_)}static distanceBoxToBox(e,t){var a,r=e.min,n=r.x,i=r.y,o=r.z,s=e.max,l=s.x,h=s.y,d=s.z,c=t.min,u=c.x,_=c.y,m=c.z,f=t.max,S=f.x,g=f.y,p=f.z,D=0;return n>S?D+=(a=n-S)*a:u>l&&(D+=(a=u-l)*a),i>g?D+=(a=i-g)*a:_>h&&(D+=(a=_-h)*a),o>p?D+=(a=o-p)*a:m>d&&(D+=(a=m-d)*a),Math.sqrt(D)}static distanceSphereToPoint(e,a){var r=Math.sqrt(t.Vector3.distanceSquared(e.center,a));return r-=e.radius,Math.max(r,0)}static distanceSphereToSphere(e,a){var r=Math.sqrt(t.Vector3.distanceSquared(e.center,a.center));return r-=e.radius+a.radius,Math.max(r,0)}static intersectsRayAndTriangleRD(e,a,r,n,i){var o=e.origin,s=o.x,l=o.y,h=o.z,d=e.direction,c=d.x,u=d.y,_=d.z,m=a.x,f=a.y,S=a.z,g=r.x,p=r.y,D=r.z,T=n.x,E=n.y,x=n.z,M=CollisionUtils._tempV30.x,R=CollisionUtils._tempV30.y,A=CollisionUtils._tempV30.z;M=g-m,R=p-f,A=D-S;var C=CollisionUtils._tempV31.x,y=CollisionUtils._tempV31.y,v=CollisionUtils._tempV31.z;C=T-m,y=E-f,v=x-S;var I=CollisionUtils._tempV32.x,L=CollisionUtils._tempV32.y,P=CollisionUtils._tempV32.z,B=M*(I=u*v-_*y)+R*(L=_*C-c*v)+A*(P=c*y-u*C);if(t.MathUtils3D.isZero(B))return!1;var O=1/B,V=CollisionUtils._tempV33.x,w=CollisionUtils._tempV33.y,b=CollisionUtils._tempV33.z,N=(V=s-m)*I+(w=l-f)*L+(b=h-S)*P;if((N*=O)<0||N>1)return!1;var F=CollisionUtils._tempV34.x,U=CollisionUtils._tempV34.y,G=CollisionUtils._tempV34.z,H=c*(F=w*A-b*R)+u*(U=b*M-V*A)+_*(G=V*R-w*M);if((H*=O)<0||N+H>1)return!1;var k=C*F+y*U+v*G;return!((k*=O)<0)}static intersectsRayAndTriangleRP(e,a,r,n,i){var o;return CollisionUtils.intersectsRayAndTriangleRD(e,a,r,n,o)?(t.Vector3.scale(e.direction,o,CollisionUtils._tempV30),t.Vector3.add(e.origin,CollisionUtils._tempV30,i),!0):(t.Vector3.ZERO.cloneTo(i),!1)}static intersectsRayAndPoint(e,a){t.Vector3.subtract(e.origin,a,CollisionUtils._tempV30);var r=t.Vector3.dot(CollisionUtils._tempV30,e.direction),n=t.Vector3.dot(CollisionUtils._tempV30,CollisionUtils._tempV30)-t.MathUtils3D.zeroTolerance;return!(n>0&&r>0)&&!(r*r-n<0)}static intersectsRayAndRay(e,a,r){var n=e.origin,i=n.x,o=n.y,s=n.z,l=e.direction,h=l.x,d=l.y,c=l.z,u=a.origin,_=u.x,m=u.y,f=u.z,S=a.direction,g=S.x,p=S.y,D=S.z;t.Vector3.cross(l,S,CollisionUtils._tempV30);var T=CollisionUtils._tempV30,E=t.Vector3.scalarLength(CollisionUtils._tempV30);if(t.MathUtils3D.isZero(E)&&t.MathUtils3D.nearEqual(_,i)&&t.MathUtils3D.nearEqual(m,o)&&t.MathUtils3D.nearEqual(f,s))return t.Vector3.ZERO.cloneTo(r),!0;E*=E;var x=_-i,M=m-o,R=f-s,A=g,C=p,y=D,v=T.x,I=T.y,L=T.z,P=x*C*L+M*y*v+R*A*I-x*y*I-M*A*L-R*C*v;A=h,C=d,y=c;var B=P/E;t.Vector3.scale(l,B,CollisionUtils._tempV30),t.Vector3.scale(S,B,CollisionUtils._tempV31),t.Vector3.add(n,CollisionUtils._tempV30,CollisionUtils._tempV32),t.Vector3.add(u,CollisionUtils._tempV31,CollisionUtils._tempV33);var O=CollisionUtils._tempV32,V=CollisionUtils._tempV33;return t.MathUtils3D.nearEqual(V.x,O.x)&&t.MathUtils3D.nearEqual(V.y,O.y)&&t.MathUtils3D.nearEqual(V.z,O.z)?(r=CollisionUtils._tempV32,!0):(t.Vector3.ZERO.cloneTo(r),!1)}static intersectsPlaneAndTriangle(e,t,a,r){var n=CollisionUtils.intersectsPlaneAndPoint(e,t),i=CollisionUtils.intersectsPlaneAndPoint(e,a),o=CollisionUtils.intersectsPlaneAndPoint(e,r);return n==Plane.PlaneIntersectionType_Front&&i==Plane.PlaneIntersectionType_Front&&o==Plane.PlaneIntersectionType_Front?Plane.PlaneIntersectionType_Front:n==Plane.PlaneIntersectionType_Back&&i==Plane.PlaneIntersectionType_Back&&o==Plane.PlaneIntersectionType_Back?Plane.PlaneIntersectionType_Back:Plane.PlaneIntersectionType_Intersecting}static intersectsRayAndPlaneRD(e,a){var r=a.normal,n=t.Vector3.dot(r,e.direction);if(Math.abs(n)<t.MathUtils3D.zeroTolerance)return-1;var i=t.Vector3.dot(r,e.origin),o=(-a.distance-i)/n;if(o<0){if(o<-t.MathUtils3D.zeroTolerance)return-1;o=0}return o}static intersectsRayAndPlaneRP(e,a,r){var n=CollisionUtils.intersectsRayAndPlaneRD(e,a);if(-1==n)return r.setValue(0,0,0),!1;var i=CollisionUtils._tempV30;return t.Vector3.scale(e.direction,n,i),t.Vector3.add(e.origin,i,r),!0}static intersectsRayAndBoxRD(e,a){var r=e.origin,n=r.x,i=r.y,o=r.z,s=e.direction,l=s.x,h=s.y,d=s.z,c=a.min,u=c.x,_=c.y,m=c.z,f=a.max,S=f.x,g=f.y,p=f.z,D=0,T=t.MathUtils3D.MaxValue;if(t.MathUtils3D.isZero(l)){if(n<u||n>S)return-1}else{var E=1/l,x=(u-n)*E,M=(S-n)*E;if(x>M){var R=x;x=M,M=R}if((D=Math.max(x,D))>(T=Math.min(M,T)))return-1}if(t.MathUtils3D.isZero(h)){if(i<_||i>g)return-1}else{var A=1/h,C=(_-i)*A,y=(g-i)*A;if(C>y){var v=C;C=y,y=v}if((D=Math.max(C,D))>(T=Math.min(y,T)))return-1}if(t.MathUtils3D.isZero(d)){if(o<m||o>p)return-1}else{var I=1/d,L=(m-o)*I,P=(p-o)*I;if(L>P){var B=L;L=P,P=B}if((D=Math.max(L,D))>(T=Math.min(P,T)))return-1}return D}static intersectsRayAndBoxRP(e,a,r){var n=CollisionUtils.intersectsRayAndBoxRD(e,a);return-1===n?(t.Vector3.ZERO.cloneTo(r),n):(t.Vector3.scale(e.direction,n,CollisionUtils._tempV30),t.Vector3.add(e.origin,CollisionUtils._tempV30,CollisionUtils._tempV31),CollisionUtils._tempV31.cloneTo(r),n)}static intersectsRayAndSphereRD(e,a){var r=a.radius;t.Vector3.subtract(e.origin,a.center,CollisionUtils._tempV30);var n=t.Vector3.dot(CollisionUtils._tempV30,e.direction),i=t.Vector3.dot(CollisionUtils._tempV30,CollisionUtils._tempV30)-r*r;if(i>0&&n>0)return-1;var o=n*n-i;if(o<0)return-1;var s=-n-Math.sqrt(o);return s<0&&(s=0),s}static intersectsRayAndSphereRP(e,a,r){var n=CollisionUtils.intersectsRayAndSphereRD(e,a);return-1===n?(t.Vector3.ZERO.cloneTo(r),n):(t.Vector3.scale(e.direction,n,CollisionUtils._tempV30),t.Vector3.add(e.origin,CollisionUtils._tempV30,CollisionUtils._tempV31),CollisionUtils._tempV31.cloneTo(r),n)}static intersectsSphereAndTriangle(e,a,r,n){var i=e.center,o=e.radius;return CollisionUtils.closestPointPointTriangle(i,a,r,n,CollisionUtils._tempV30),t.Vector3.subtract(CollisionUtils._tempV30,i,CollisionUtils._tempV31),t.Vector3.dot(CollisionUtils._tempV31,CollisionUtils._tempV31)<=o*o}static intersectsPlaneAndPoint(e,a){var r=t.Vector3.dot(e.normal,a)+e.distance;return r>0?Plane.PlaneIntersectionType_Front:r<0?Plane.PlaneIntersectionType_Back:Plane.PlaneIntersectionType_Intersecting}static intersectsPlaneAndPlane(e,a){t.Vector3.cross(e.normal,a.normal,CollisionUtils._tempV30);var r=t.Vector3.dot(CollisionUtils._tempV30,CollisionUtils._tempV30);return!t.MathUtils3D.isZero(r)}static intersectsPlaneAndPlaneRL(e,a,r){var n=e.normal,i=a.normal;t.Vector3.cross(n,i,CollisionUtils._tempV34);var o=t.Vector3.dot(CollisionUtils._tempV34,CollisionUtils._tempV34);return!t.MathUtils3D.isZero(o)&&(t.Vector3.scale(i,e.distance,CollisionUtils._tempV30),t.Vector3.scale(n,a.distance,CollisionUtils._tempV31),t.Vector3.subtract(CollisionUtils._tempV30,CollisionUtils._tempV31,CollisionUtils._tempV32),t.Vector3.cross(CollisionUtils._tempV32,CollisionUtils._tempV34,CollisionUtils._tempV33),t.Vector3.normalize(CollisionUtils._tempV34,CollisionUtils._tempV34),new Ray(CollisionUtils._tempV33,CollisionUtils._tempV34),!0)}static intersectsPlaneAndBox(e,a){var r=e.distance,n=e.normal,i=n.x,o=n.y,s=n.z,l=a.min,h=l.x,d=l.y,c=l.z,u=a.max,_=u.x,m=u.y,f=u.z;CollisionUtils._tempV30.x=i>0?h:_,CollisionUtils._tempV30.y=o>0?d:m,CollisionUtils._tempV30.z=s>0?c:f,CollisionUtils._tempV31.x=i>0?_:h,CollisionUtils._tempV31.y=o>0?m:d,CollisionUtils._tempV31.z=s>0?f:c;var S=t.Vector3.dot(n,CollisionUtils._tempV30);return S+r>0?Plane.PlaneIntersectionType_Front:(S=t.Vector3.dot(n,CollisionUtils._tempV31))+r<0?Plane.PlaneIntersectionType_Back:Plane.PlaneIntersectionType_Intersecting}static intersectsPlaneAndSphere(e,a){var r=a.radius,n=t.Vector3.dot(e.normal,a.center)+e.distance;return n>r?Plane.PlaneIntersectionType_Front:n<-r?Plane.PlaneIntersectionType_Back:Plane.PlaneIntersectionType_Intersecting}static intersectsBoxAndBox(e,t){var a=e.min,r=e.max,n=t.min,i=t.max;return!(a.x>i.x||n.x>r.x)&&(!(a.y>i.y||n.y>r.y)&&!(a.z>i.z||n.z>r.z))}static intersectsBoxAndSphere(e,a){var r=a.center,n=a.radius,i=CollisionUtils._tempV30;return t.Vector3.Clamp(r,e.min,e.max,i),t.Vector3.distanceSquared(r,i)<=n*n}static intersectsSphereAndSphere(e,a){var r=e.radius+a.radius;return t.Vector3.distanceSquared(e.center,a.center)<=r*r}static boxContainsPoint(e,t){var a=e.min,r=e.max;return a.x<=t.x&&r.x>=t.x&&a.y<=t.y&&r.y>=t.y&&a.z<=t.z&&r.z>=t.z?ContainmentType.Contains:ContainmentType.Disjoint}static boxContainsBox(e,t){var a=e.min,r=a.x,n=a.y,i=a.z,o=e.max,s=o.x,l=o.y,h=o.z,d=t.min,c=d.x,u=d.y,_=d.z,m=t.max,f=m.x,S=m.y,g=m.z;return s<c||r>f||l<u||n>S||h<_||i>g?ContainmentType.Disjoint:r<=c&&f<=s&&n<=u&&S<=l&&i<=_&&g<=h?ContainmentType.Contains:ContainmentType.Intersects}static boxContainsSphere(e,a){var r=e.min,n=r.x,i=r.y,o=r.z,s=e.max,l=s.x,h=s.y,d=s.z,c=a.center,u=c.x,_=c.y,m=c.z,f=a.radius;return t.Vector3.Clamp(c,r,s,CollisionUtils._tempV30),t.Vector3.distanceSquared(c,CollisionUtils._tempV30)>f*f?ContainmentType.Disjoint:n+f<=u&&u<=l-f&&l-n>f&&i+f<=_&&_<=h-f&&h-i>f&&o+f<=m&&m<=d-f&&d-o>f?ContainmentType.Contains:ContainmentType.Intersects}static sphereContainsPoint(e,a){return t.Vector3.distanceSquared(a,e.center)<=e.radius*e.radius?ContainmentType.Contains:ContainmentType.Disjoint}static sphereContainsTriangle(e,t,a,r){var n=CollisionUtils.sphereContainsPoint(e,t),i=CollisionUtils.sphereContainsPoint(e,a),o=CollisionUtils.sphereContainsPoint(e,r);return n==ContainmentType.Contains&&i==ContainmentType.Contains&&o==ContainmentType.Contains?ContainmentType.Contains:CollisionUtils.intersectsSphereAndTriangle(e,t,a,r)?ContainmentType.Intersects:ContainmentType.Disjoint}static sphereContainsBox(e,a){var r=e.center;r.x,r.y,r.z;var n=e.radius,i=a.min;i.x,i.y,i.z;var o=a.max;o.x,o.y,o.z;var s=CollisionUtils._tempV30;if(s.x,s.y,s.z,!CollisionUtils.intersectsBoxAndSphere(a,e))return ContainmentType.Disjoint;var l=n*n;return t.Vector3.scalarLengthSquared(CollisionUtils._tempV30)>l||t.Vector3.scalarLengthSquared(CollisionUtils._tempV30)>l||t.Vector3.scalarLengthSquared(CollisionUtils._tempV30)>l||t.Vector3.scalarLengthSquared(CollisionUtils._tempV30)>l||t.Vector3.scalarLengthSquared(CollisionUtils._tempV30)>l||t.Vector3.scalarLengthSquared(CollisionUtils._tempV30)>l||t.Vector3.scalarLengthSquared(CollisionUtils._tempV30)>l||t.Vector3.scalarLengthSquared(CollisionUtils._tempV30)>l?ContainmentType.Intersects:ContainmentType.Contains}static sphereContainsSphere(e,a){var r=e.radius,n=a.radius,i=t.Vector3.distance(e.center,a.center);return r+n<i?ContainmentType.Disjoint:r-n<i?ContainmentType.Intersects:ContainmentType.Contains}static closestPointPointTriangle(e,a,r,n,i){t.Vector3.subtract(r,a,CollisionUtils._tempV30),t.Vector3.subtract(n,a,CollisionUtils._tempV31),t.Vector3.subtract(e,a,CollisionUtils._tempV32),t.Vector3.subtract(e,r,CollisionUtils._tempV33),t.Vector3.subtract(e,n,CollisionUtils._tempV34);var o=t.Vector3.dot(CollisionUtils._tempV30,CollisionUtils._tempV32),s=t.Vector3.dot(CollisionUtils._tempV31,CollisionUtils._tempV32),l=t.Vector3.dot(CollisionUtils._tempV30,CollisionUtils._tempV33),h=t.Vector3.dot(CollisionUtils._tempV31,CollisionUtils._tempV33),d=t.Vector3.dot(CollisionUtils._tempV30,CollisionUtils._tempV34),c=t.Vector3.dot(CollisionUtils._tempV31,CollisionUtils._tempV34);if(o<=0&&s<=0)a.cloneTo(i);else if(l>=0&&h<=l)r.cloneTo(i);else{var u=o*h-l*s;if(u<=0&&o>=0&&l<=0){var _=o/(o-l);return t.Vector3.scale(CollisionUtils._tempV30,_,i),void t.Vector3.add(a,i,i)}if(c>=0&&d<=c)n.cloneTo(i);else{var m=d*s-o*c;if(m<=0&&s>=0&&c<=0){var f=s/(s-c);return t.Vector3.scale(CollisionUtils._tempV31,f,i),void t.Vector3.add(a,i,i)}var S=l*c-d*h;if(S<=0&&h-l>=0&&d-c>=0){var g=(h-l)/(h-l+(d-c));return t.Vector3.subtract(n,r,i),t.Vector3.scale(i,g,i),void t.Vector3.add(r,i,i)}var p=1/(S+m+u),D=m*p,T=u*p;t.Vector3.scale(CollisionUtils._tempV30,D,CollisionUtils._tempV35),t.Vector3.scale(CollisionUtils._tempV31,T,CollisionUtils._tempV36),t.Vector3.add(CollisionUtils._tempV35,CollisionUtils._tempV36,i),t.Vector3.add(a,i,i)}}}static closestPointPlanePoint(e,a,r){var n=e.normal,i=t.Vector3.dot(n,a)-e.distance;t.Vector3.scale(n,i,CollisionUtils._tempV30),t.Vector3.subtract(a,CollisionUtils._tempV30,r)}static closestPointBoxPoint(e,a,r){t.Vector3.max(a,e.min,CollisionUtils._tempV30),t.Vector3.min(CollisionUtils._tempV30,e.max,r)}static closestPointSpherePoint(e,a,r){var n=e.center;t.Vector3.subtract(a,n,r),t.Vector3.normalize(r,r),t.Vector3.scale(r,e.radius,r),t.Vector3.add(r,n,r)}static closestPointSphereSphere(e,a,r){var n=e.center;t.Vector3.subtract(a.center,n,r),t.Vector3.normalize(r,r),t.Vector3.scale(r,e.radius,r),t.Vector3.add(r,n,r)}}CollisionUtils._tempV30=new t.Vector3,CollisionUtils._tempV31=new t.Vector3,CollisionUtils._tempV32=new t.Vector3,CollisionUtils._tempV33=new t.Vector3,CollisionUtils._tempV34=new t.Vector3,CollisionUtils._tempV35=new t.Vector3,CollisionUtils._tempV36=new t.Vector3,e.FrustumCorner=void 0,(s=e.FrustumCorner||(e.FrustumCorner={}))[s.FarBottomLeft=0]="FarBottomLeft",s[s.FarTopLeft=1]="FarTopLeft",s[s.FarTopRight=2]="FarTopRight",s[s.FarBottomRight=3]="FarBottomRight",s[s.nearBottomLeft=4]="nearBottomLeft",s[s.nearTopLeft=5]="nearTopLeft",s[s.nearTopRight=6]="nearTopRight",s[s.nearBottomRight=7]="nearBottomRight",s[s.unknown=8]="unknown";class BoundFrustum{constructor(e){this._matrix=e,this.initBoundingPlane()}static getPlanesFromMatrix(e,t,a,r,n,i,o){var s=e.elements,l=s[0],h=s[1],d=s[2],c=s[3],u=s[4],_=s[5],m=s[6],f=s[7],S=s[8],g=s[9],p=s[10],D=s[11],T=s[12],E=s[13],x=s[14],M=s[15],R=t.normal;R.x=d,R.y=m,R.z=p,t.distance=x,t.normal=R,t.normalize();var A=a.normal;A.x=c-d,A.y=f-m,A.z=D-p,a.distance=M-x,a.normal=A,a.normalize();var C=r.normal;C.x=c+l,C.y=f+u,C.z=D+S,r.distance=M+T,r.normal=C,r.normalize();var y=n.normal;y.x=c-l,y.y=f-u,y.z=D-S,n.distance=M-T,n.normal=y,n.normalize();var v=i.normal;v.x=c-h,v.y=f-_,v.z=D-g,i.distance=M-E,i.normal=v,i.normalize();var I=o.normal;I.x=c+h,I.y=f+_,I.z=D+g,o.distance=M+E,o.normal=I,o.normalize()}initBoundingPlane(){this._near=new Plane,this._far=new Plane,this._left=new Plane,this._right=new Plane,this._top=new Plane,this._bottom=new Plane,BoundFrustum.getPlanesFromMatrix(this._matrix,this._near,this._far,this._left,this._right,this._top,this._bottom)}get matrix(){return this._matrix}set matrix(e){e.cloneTo(this._matrix),BoundFrustum.getPlanesFromMatrix(this._matrix,this._near,this._far,this._left,this._right,this._top,this._bottom)}get near(){return this._near}get far(){return this._far}get left(){return this._left}get right(){return this._right}get top(){return this._top}get bottom(){return this._bottom}equalsBoundFrustum(e){return this._matrix.equalsOtherMatrix(e.matrix)}equalsObj(e){if(e instanceof BoundFrustum){var t=e;return this.equalsBoundFrustum(t)}return!1}getPlane(e){switch(e){case 0:return this._near;case 1:return this._far;case 2:return this._left;case 3:return this._right;case 4:return this._top;case 5:return this._bottom;default:return null}}static get3PlaneInterPoint(e,a,r,n){var i=e.normal,o=a.normal,s=r.normal;t.Vector3.cross(o,s,BoundFrustum._tempV30),t.Vector3.cross(s,i,BoundFrustum._tempV31),t.Vector3.cross(i,o,BoundFrustum._tempV32);var l=t.Vector3.dot(i,BoundFrustum._tempV30),h=t.Vector3.dot(o,BoundFrustum._tempV31),d=t.Vector3.dot(s,BoundFrustum._tempV32);t.Vector3.scale(BoundFrustum._tempV30,-e.distance/l,BoundFrustum._tempV33),t.Vector3.scale(BoundFrustum._tempV31,-a.distance/h,BoundFrustum._tempV34),t.Vector3.scale(BoundFrustum._tempV32,-r.distance/d,BoundFrustum._tempV35),t.Vector3.add(BoundFrustum._tempV33,BoundFrustum._tempV34,BoundFrustum._tempV36),t.Vector3.add(BoundFrustum._tempV35,BoundFrustum._tempV36,n)}getCorners(t){BoundFrustum.get3PlaneInterPoint(this._near,this._bottom,this._right,t[e.FrustumCorner.nearBottomRight]),BoundFrustum.get3PlaneInterPoint(this._near,this._top,this._right,t[e.FrustumCorner.nearTopRight]),BoundFrustum.get3PlaneInterPoint(this._near,this._top,this._left,t[e.FrustumCorner.nearTopLeft]),BoundFrustum.get3PlaneInterPoint(this._near,this._bottom,this._left,t[e.FrustumCorner.nearBottomLeft]),BoundFrustum.get3PlaneInterPoint(this._far,this._bottom,this._right,t[e.FrustumCorner.FarBottomRight]),BoundFrustum.get3PlaneInterPoint(this._far,this._top,this._right,t[e.FrustumCorner.FarTopRight]),BoundFrustum.get3PlaneInterPoint(this._far,this._top,this._left,t[e.FrustumCorner.FarTopLeft]),BoundFrustum.get3PlaneInterPoint(this._far,this._bottom,this._left,t[e.FrustumCorner.FarBottomLeft])}containsPoint(e){for(var t=Plane.PlaneIntersectionType_Front,a=Plane.PlaneIntersectionType_Front,r=0;r<6;r++){switch(r){case 0:a=CollisionUtils.intersectsPlaneAndPoint(this._near,e);break;case 1:a=CollisionUtils.intersectsPlaneAndPoint(this._far,e);break;case 2:a=CollisionUtils.intersectsPlaneAndPoint(this._left,e);break;case 3:a=CollisionUtils.intersectsPlaneAndPoint(this._right,e);break;case 4:a=CollisionUtils.intersectsPlaneAndPoint(this._top,e);break;case 5:a=CollisionUtils.intersectsPlaneAndPoint(this._bottom,e)}switch(a){case Plane.PlaneIntersectionType_Back:return ContainmentType.Disjoint;case Plane.PlaneIntersectionType_Intersecting:t=Plane.PlaneIntersectionType_Intersecting}}return t===Plane.PlaneIntersectionType_Intersecting?ContainmentType.Intersects:ContainmentType.Contains}intersects(e){var t=e.min,a=e.max,r=t.x,n=t.y,i=t.z,o=a.x,s=a.y,l=a.z,h=this._near.normal;if(this._near.distance+h.x*(h.x<0?r:o)+h.y*(h.y<0?n:s)+h.z*(h.z<0?i:l)<0)return!1;var d=this._left.normal;if(this._left.distance+d.x*(d.x<0?r:o)+d.y*(d.y<0?n:s)+d.z*(d.z<0?i:l)<0)return!1;var c=this._right.normal;if(this._right.distance+c.x*(c.x<0?r:o)+c.y*(c.y<0?n:s)+c.z*(c.z<0?i:l)<0)return!1;var u=this._bottom.normal;if(this._bottom.distance+u.x*(u.x<0?r:o)+u.y*(u.y<0?n:s)+u.z*(u.z<0?i:l)<0)return!1;var _=this._top.normal;if(this._top.distance+_.x*(_.x<0?r:o)+_.y*(_.y<0?n:s)+_.z*(_.z<0?i:l)<0)return!1;var m=this._far.normal;return!(this._far.distance+m.x*(m.x<0?r:o)+m.y*(m.y<0?n:s)+m.z*(m.z<0?i:l)<0)}containsBoundBox(e){for(var t=BoundFrustum._tempV30,a=BoundFrustum._tempV31,r=e.min,n=e.max,i=ContainmentType.Contains,o=0;o<6;o++){var s=this.getPlane(o),l=s.normal;if(l.x>=0?(t.x=n.x,a.x=r.x):(t.x=r.x,a.x=n.x),l.y>=0?(t.y=n.y,a.y=r.y):(t.y=r.y,a.y=n.y),l.z>=0?(t.z=n.z,a.z=r.z):(t.z=r.z,a.z=n.z),CollisionUtils.intersectsPlaneAndPoint(s,t)===Plane.PlaneIntersectionType_Back)return ContainmentType.Disjoint;CollisionUtils.intersectsPlaneAndPoint(s,a)===Plane.PlaneIntersectionType_Back&&(i=ContainmentType.Intersects)}return i}containsBoundSphere(e){for(var t=Plane.PlaneIntersectionType_Front,a=Plane.PlaneIntersectionType_Front,r=0;r<6;r++){switch(r){case 0:a=CollisionUtils.intersectsPlaneAndSphere(this._near,e);break;case 1:a=CollisionUtils.intersectsPlaneAndSphere(this._far,e);break;case 2:a=CollisionUtils.intersectsPlaneAndSphere(this._left,e);break;case 3:a=CollisionUtils.intersectsPlaneAndSphere(this._right,e);break;case 4:a=CollisionUtils.intersectsPlaneAndSphere(this._top,e);break;case 5:a=CollisionUtils.intersectsPlaneAndSphere(this._bottom,e)}switch(a){case Plane.PlaneIntersectionType_Back:return ContainmentType.Disjoint;case Plane.PlaneIntersectionType_Intersecting:t=Plane.PlaneIntersectionType_Intersecting}}return t===Plane.PlaneIntersectionType_Intersecting?ContainmentType.Intersects:ContainmentType.Contains}cloneTo(e){e.matrix=this.matrix}clone(){let e=new BoundFrustum(new t.Matrix4x4);return this.cloneTo(e),e}}BoundFrustum._tempV30=new t.Vector3,BoundFrustum._tempV31=new t.Vector3,BoundFrustum._tempV32=new t.Vector3,BoundFrustum._tempV33=new t.Vector3,BoundFrustum._tempV34=new t.Vector3,BoundFrustum._tempV35=new t.Vector3,BoundFrustum._tempV36=new t.Vector3;class Picker{constructor(){}static calculateCursorRay(e,a,r,n,i,o){var s=e.x,l=e.y,h=Picker._tempVector30,d=h;d.x=s,d.y=l,d.z=a.minDepth;var c=Picker._tempVector31,u=c;u.x=s,u.y=l,u.z=a.maxDepth;var _=o.origin,m=Picker._tempVector32;a.unprojectFromWVP(h,r,n,i,_),a.unprojectFromWVP(c,r,n,i,m);var f=o.direction;f.x=m.x-_.x,f.y=m.y-_.y,f.z=m.z-_.z,t.Vector3.normalize(o.direction,o.direction)}static rayIntersectsTriangle(e,a,r,n){var i=Picker._tempVector30,o=Picker._tempVector31;t.Vector3.subtract(r,a,i),t.Vector3.subtract(n,a,o);var s,l=Picker._tempVector32;if(t.Vector3.cross(e.direction,o,l),(s=t.Vector3.dot(i,l))>-Number.MIN_VALUE&&s<Number.MIN_VALUE)return Number.NaN;var h,d=1/s,c=Picker._tempVector33;if(t.Vector3.subtract(e.origin,a,c),h=t.Vector3.dot(c,l),(h*=d)<0||h>1)return Number.NaN;var u,_,m=Picker._tempVector34;return t.Vector3.cross(c,i,m),u=t.Vector3.dot(e.direction,m),(u*=d)<0||h+u>1?Number.NaN:(_=t.Vector3.dot(o,m),(_*=d)<0?Number.NaN:_)}static rayPlaneIntersection(e,a){let r=new t.Vector3,n=t.Vector3.dot(e.direction.normalize(),a.normal.normalize());if(0==n)return null;let i=(-a.distance-t.Vector3.dot(e.origin,a.normal))/n;return i<0?null:(e.at(i,r),r)}}Picker._tempVector30=new t.Vector3,Picker._tempVector31=new t.Vector3,Picker._tempVector32=new t.Vector3,Picker._tempVector33=new t.Vector3,Picker._tempVector34=new t.Vector3;class Transform3D extends t.EventDispatcher{constructor(e){super(),this._localPosition=new t.Vector3(0,0,0),this._localRotation=new t.Quaternion(0,0,0,1),this._localScale=new t.Vector3(1,1,1),this._localRotationEuler=new t.Vector3(0,0,0),this._localMatrix=new t.Matrix4x4,this._position=new t.Vector3(0,0,0),this._rotation=new t.Quaternion(0,0,0,1),this._scale=new t.Vector3(1,1,1),this._rotationEuler=new t.Vector3(0,0,0),this._worldMatrix=new t.Matrix4x4,this._children=null,this._isDefaultMatrix=!1,this._faceInvert=!1,this._frontFaceValue=1,this._parent=null,this._transformFlag=0,this._owner=e,this._children=[],this._setTransformFlag(Transform3D.TRANSFORM_LOCALQUATERNION|Transform3D.TRANSFORM_LOCALEULER|Transform3D.TRANSFORM_LOCALMATRIX,!1),this._setTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION|Transform3D.TRANSFORM_WORLDQUATERNION|Transform3D.TRANSFORM_WORLDEULER|Transform3D.TRANSFORM_WORLDSCALE|Transform3D.TRANSFORM_WORLDMATRIX,!0)}get isDefaultMatrix(){return this._getTransformFlag(Transform3D.TRANSFORM_LOCALMATRIX)&&this.localMatrix,this._isDefaultMatrix}get _isFrontFaceInvert(){if(this._getTransformFlag(Transform3D.TRANSFORM_WORLDSCALE)){var e=this.getWorldLossyScale(),t=e.x<0;e.y<0&&(t=!t),e.z<0&&(t=!t),this._faceInvert=t,this._frontFaceValue=this._faceInvert?-1:1}return this._faceInvert}getFrontFaceValue(){return this._getTransformFlag(Transform3D.TRANSFORM_WORLDSCALE)&&this._isFrontFaceInvert,this._frontFaceValue}get owner(){return this._owner}get worldNeedUpdate(){return this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX)}get localPositionX(){return this._localPosition.x}set localPositionX(e){this._localPosition.x=e,this.localPosition=this._localPosition}get localPositionY(){return this._localPosition.y}set localPositionY(e){this._localPosition.y=e,this.localPosition=this._localPosition}get localPositionZ(){return this._localPosition.z}set localPositionZ(e){this._localPosition.z=e,this.localPosition=this._localPosition}get localPosition(){return this._localPosition}set localPosition(e){this._localPosition!==e&&e.cloneTo(this._localPosition),this._setTransformFlag(Transform3D.TRANSFORM_LOCALMATRIX,!0),this._onWorldPositionTransform()}get localRotationX(){return this.localRotation.x}set localRotationX(e){let t=this.localRotation;t.x=e,this.localRotation=t}get localRotationY(){return this.localRotation.y}set localRotationY(e){let t=this.localRotation;t.y=e,this.localRotation=t}get localRotationZ(){return this.localRotation.z}set localRotationZ(e){let t=this.localRotation;t.z=e,this.localRotation=t}get localRotationW(){return this.localRotation.w}set localRotationW(e){let t=this.localRotation;t.w=e,this.localRotation=t}get localRotation(){if(this._getTransformFlag(Transform3D.TRANSFORM_LOCALQUATERNION)){var e=this._localRotationEuler;t.Quaternion.createFromYawPitchRoll(e.y/Transform3D._angleToRandin,e.x/Transform3D._angleToRandin,e.z/Transform3D._angleToRandin,this._localRotation),this._setTransformFlag(Transform3D.TRANSFORM_LOCALQUATERNION,!1)}return this._localRotation}set localRotation(e){this._localRotation!==e&&e.cloneTo(this._localRotation),this._localRotation.normalize(this._localRotation),this._setTransformFlag(Transform3D.TRANSFORM_LOCALEULER|Transform3D.TRANSFORM_LOCALMATRIX,!0),this._setTransformFlag(Transform3D.TRANSFORM_LOCALQUATERNION,!1),this._onWorldRotationTransform()}get localScaleX(){return this._localScale.x}set localScaleX(e){this._localScale.x=e,this.localScale=this._localScale}get localScaleY(){return this._localScale.y}set localScaleY(e){this._localScale.y=e,this.localScale=this._localScale}get localScaleZ(){return this._localScale.z}set localScaleZ(e){this._localScale.z=e,this.localScale=this._localScale}get localScale(){return this._localScale}set localScale(e){this._localScale!==e&&e.cloneTo(this._localScale),this._setTransformFlag(Transform3D.TRANSFORM_LOCALMATRIX,!0),this._onWorldScaleTransform()}get localRotationEulerX(){return this.localRotationEuler.x}set localRotationEulerX(e){let t=this.localRotationEuler;t.x=e,this.localRotationEuler=t}get localRotationEulerY(){return this.localRotationEuler.y}set localRotationEulerY(e){let t=this.localRotationEuler;t.y=e,this.localRotationEuler=t}get localRotationEulerZ(){return this.localRotationEuler.z}set localRotationEulerZ(e){let t=this.localRotationEuler;t.z=e,this.localRotationEuler=t}get localRotationEuler(){if(this._getTransformFlag(Transform3D.TRANSFORM_LOCALEULER)){this._localRotation.getYawPitchRoll(Transform3D._tempVector30);var e=Transform3D._tempVector30,t=this._localRotationEuler;t.x=e.y*Transform3D._angleToRandin,t.y=e.x*Transform3D._angleToRandin,t.z=e.z*Transform3D._angleToRandin,this._setTransformFlag(Transform3D.TRANSFORM_LOCALEULER,!1)}return this._localRotationEuler}set localRotationEuler(e){this._localRotationEuler!==e&&e.cloneTo(this._localRotationEuler),this._setTransformFlag(Transform3D.TRANSFORM_LOCALEULER,!1),this._setTransformFlag(Transform3D.TRANSFORM_LOCALQUATERNION|Transform3D.TRANSFORM_LOCALMATRIX,!0),this._onWorldRotationTransform()}get localMatrix(){return this._getTransformFlag(Transform3D.TRANSFORM_LOCALMATRIX)&&(t.Matrix4x4.createAffineTransformation(this._localPosition,this.localRotation,this._localScale,this._localMatrix),this._isDefaultMatrix=this._localMatrix.isIdentity(),this._setTransformFlag(Transform3D.TRANSFORM_LOCALMATRIX,!1)),this._localMatrix}set localMatrix(e){this._localMatrix!==e&&e.cloneTo(this._localMatrix),this._isDefaultMatrix=this._localMatrix.isIdentity(),this._localMatrix.decomposeTransRotScale(this._localPosition,this._localRotation,this._localScale),this._setTransformFlag(Transform3D.TRANSFORM_LOCALEULER,!0),this._setTransformFlag(Transform3D.TRANSFORM_LOCALMATRIX,!1),this._onWorldTransform()}get position(){if(this._getTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION)){if(null!=this._parent){var e=this.worldMatrix.elements;this._position.x=e[12],this._position.y=e[13],this._position.z=e[14]}else this._localPosition.cloneTo(this._position);this._setTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION,!1)}return this._position}set position(e){if(null!=this._parent){var a=Transform3D._tempMatrix0;this._parent.worldMatrix.invert(a),t.Vector3.transformCoordinate(e,a,this._localPosition)}else e.cloneTo(this._localPosition);this.localPosition=this._localPosition,this._position!==e&&e.cloneTo(this._position),this._setTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION,!1)}get rotation(){return this._getTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION)&&(null!=this._parent?t.Quaternion.multiply(this._parent.rotation,this.localRotation,this._rotation):this.localRotation.cloneTo(this._rotation),this._setTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION,!1)),this._rotation}set rotation(e){null!=this._parent?(this._parent.rotation.invert(Transform3D._tempQuaternion0),t.Quaternion.multiply(Transform3D._tempQuaternion0,e,this._localRotation)):e.cloneTo(this._localRotation),this.localRotation=this._localRotation,e!==this._rotation&&e.cloneTo(this._rotation),this._setTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION,!1)}get rotationEuler(){if(this._getTransformFlag(Transform3D.TRANSFORM_WORLDEULER)){this.rotation.getYawPitchRoll(Transform3D._tempVector30);var e=Transform3D._tempVector30,t=this._rotationEuler;t.x=e.y*Transform3D._angleToRandin,t.y=e.x*Transform3D._angleToRandin,t.z=e.z*Transform3D._angleToRandin,this._setTransformFlag(Transform3D.TRANSFORM_WORLDEULER,!1)}return this._rotationEuler}set rotationEuler(e){t.Quaternion.createFromYawPitchRoll(e.y/Transform3D._angleToRandin,e.x/Transform3D._angleToRandin,e.z/Transform3D._angleToRandin,this._rotation),this.rotation=this._rotation,this._rotationEuler!==e&&e.cloneTo(this._rotationEuler),this._setTransformFlag(Transform3D.TRANSFORM_WORLDEULER,!1)}get worldMatrix(){if(this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX)){if(null!=this._parent){let e=this._parent;for(;e._parent&&e.isDefaultMatrix;)e=e._parent;t.Matrix4x4.multiply(e.worldMatrix,this.localMatrix,this._worldMatrix)}else this.localMatrix.cloneTo(this._worldMatrix);this._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX,!1)}return this._worldMatrix}set worldMatrix(e){null===this._parent?e.cloneTo(this._localMatrix):(this._parent.worldMatrix.invert(this._localMatrix),t.Matrix4x4.multiply(this._localMatrix,e,this._localMatrix)),this.localMatrix=this._localMatrix,this._worldMatrix!==e&&e.cloneTo(this._worldMatrix),this._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX,!1)}_getScaleMatrix(){var e=Transform3D._tempQuaternion0,a=Transform3D._tempMatrix3x30,r=Transform3D._tempMatrix3x31,n=Transform3D._tempMatrix3x32;return t.Matrix3x3.createFromMatrix4x4(this.worldMatrix,r),this.rotation.invert(e),t.Matrix3x3.createRotationQuaternion(e,a),t.Matrix3x3.multiply(a,r,n),n}_setTransformFlag(e,t){t?this._transformFlag|=e:this._transformFlag&=~e}_getTransformFlag(e){return 0!=(this._transformFlag&e)}_setParent(e){if(this._parent!==e){if(this._parent){var t=this._parent._children,a=t.indexOf(this);t.splice(a,1)}e&&(e._children.push(this),e&&this._onWorldTransform()),this._parent=e}}_onWorldPositionRotationTransform(){this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX)&&this._getTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION)&&this._getTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION)&&this._getTransformFlag(Transform3D.TRANSFORM_WORLDEULER)||(this._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX|Transform3D.TRANSFORM_WORLDPOSITION|Transform3D.TRANSFORM_WORLDQUATERNION|Transform3D.TRANSFORM_WORLDEULER,!0),this.event(t.Event.TRANSFORM_CHANGED,this._transformFlag));for(var e=0,a=this._children.length;e<a;e++)this._children[e]._onWorldPositionRotationTransform()}_onWorldPositionScaleTransform(){this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX)&&this._getTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION)&&this._getTransformFlag(Transform3D.TRANSFORM_WORLDSCALE)||(this._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX|Transform3D.TRANSFORM_WORLDPOSITION|Transform3D.TRANSFORM_WORLDSCALE,!0),this.event(t.Event.TRANSFORM_CHANGED,this._transformFlag));for(var e=0,a=this._children.length;e<a;e++)this._children[e]._onWorldPositionScaleTransform()}_onWorldPositionTransform(){this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX)&&this._getTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION)||(this._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX|Transform3D.TRANSFORM_WORLDPOSITION,!0),this.event(t.Event.TRANSFORM_CHANGED,this._transformFlag));for(var e=0,a=this._children.length;e<a;e++)this._children[e]._onWorldPositionTransform()}_onWorldRotationTransform(){this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX)&&this._getTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION)&&this._getTransformFlag(Transform3D.TRANSFORM_WORLDEULER)||(this._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX|Transform3D.TRANSFORM_WORLDQUATERNION|Transform3D.TRANSFORM_WORLDEULER,!0),this.event(t.Event.TRANSFORM_CHANGED,this._transformFlag));for(var e=0,a=this._children.length;e<a;e++)this._children[e]._onWorldPositionRotationTransform()}_onWorldScaleTransform(){this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX)&&this._getTransformFlag(Transform3D.TRANSFORM_WORLDSCALE)||(this._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX|Transform3D.TRANSFORM_WORLDSCALE,!0),this.event(t.Event.TRANSFORM_CHANGED,this._transformFlag));for(var e=0,a=this._children.length;e<a;e++)this._children[e]._onWorldPositionScaleTransform()}_onWorldTransform(){this._getTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX)&&this._getTransformFlag(Transform3D.TRANSFORM_WORLDPOSITION)&&this._getTransformFlag(Transform3D.TRANSFORM_WORLDQUATERNION)&&this._getTransformFlag(Transform3D.TRANSFORM_WORLDEULER)&&this._getTransformFlag(Transform3D.TRANSFORM_WORLDSCALE)||(this._setTransformFlag(Transform3D.TRANSFORM_WORLDMATRIX|Transform3D.TRANSFORM_WORLDPOSITION|Transform3D.TRANSFORM_WORLDQUATERNION|Transform3D.TRANSFORM_WORLDEULER|Transform3D.TRANSFORM_WORLDSCALE,!0),this.event(t.Event.TRANSFORM_CHANGED,this._transformFlag));for(var e=0,a=this._children.length;e<a;e++)this._children[e]._onWorldTransform()}translate(e,a=!0){a?(t.Matrix4x4.createFromQuaternion(this.localRotation,Transform3D._tempMatrix0),t.Vector3.transformCoordinate(e,Transform3D._tempMatrix0,Transform3D._tempVector30),t.Vector3.add(this.localPosition,Transform3D._tempVector30,this._localPosition),this.localPosition=this._localPosition):(t.Vector3.add(this.position,e,this._position),this.position=this._position)}rotate(e,a=!0,r=!0){var n;r?n=e:(t.Vector3.scale(e,Math.PI/180,Transform3D._tempVector30),n=Transform3D._tempVector30),t.Quaternion.createFromYawPitchRoll(n.y,n.x,n.z,Transform3D._tempQuaternion0),a?(t.Quaternion.multiply(this._localRotation,Transform3D._tempQuaternion0,this._localRotation),this.localRotation=this._localRotation):(t.Quaternion.multiply(Transform3D._tempQuaternion0,this.rotation,this._rotation),this.rotation=this._rotation)}getForward(e){var t=this.worldMatrix.elements;e.x=-t[8],e.y=-t[9],e.z=-t[10]}getUp(e){var t=this.worldMatrix.elements;e.x=t[4],e.y=t[5],e.z=t[6]}getRight(e){var t=this.worldMatrix.elements;e.x=t[0],e.y=t[1],e.z=t[2]}lookAt(e,a,r=!1,n=!0){var i;if(r){if(i=this._localPosition,Math.abs(i.x-e.x)<t.MathUtils3D.zeroTolerance&&Math.abs(i.y-e.y)<t.MathUtils3D.zeroTolerance&&Math.abs(i.z-e.z)<t.MathUtils3D.zeroTolerance)return;n?(t.Quaternion.lookAt(this._localPosition,e,a,this._localRotation),this._localRotation.invert(this._localRotation)):(t.Vector3.subtract(this.localPosition,e,Transform3D._tempVector30),t.Quaternion.rotationLookAt(Transform3D._tempVector30,a,this.localRotation),this._localRotation.invert(this._localRotation)),this.localRotation=this._localRotation}else{var o=this.position;if(i=o,Math.abs(i.x-e.x)<t.MathUtils3D.zeroTolerance&&Math.abs(i.y-e.y)<t.MathUtils3D.zeroTolerance&&Math.abs(i.z-e.z)<t.MathUtils3D.zeroTolerance)return;n?(t.Quaternion.lookAt(o,e,a,this._rotation),this._rotation.invert(this._rotation)):(t.Vector3.subtract(this.position,e,Transform3D._tempVector30),t.Quaternion.rotationLookAt(Transform3D._tempVector30,a,this._rotation),this._rotation.invert(this._rotation)),this.rotation=this._rotation}}objLookat(e,t,a=!1){this.lookAt(e,t,a,!1)}getWorldLossyScale(){if(this._getTransformFlag(Transform3D.TRANSFORM_WORLDSCALE)){if(null!==this._parent){var e=this._getScaleMatrix().elements;this._scale.x=e[0],this._scale.y=e[4],this._scale.z=e[8]}else this._localScale.cloneTo(this._scale);this._setTransformFlag(Transform3D.TRANSFORM_WORLDSCALE,!1)}return this._scale}setWorldLossyScale(e){if(null!==this._parent){var a=Transform3D._tempMatrix3x33,r=Transform3D._tempMatrix3x33,n=r.elements,i=this._parent._getScaleMatrix();i.invert(i),t.Matrix3x3.createFromScaling(e,a),t.Matrix3x3.multiply(i,a,r),this._localScale.x=n[0],this._localScale.y=n[4],this._localScale.z=n[8]}else e.cloneTo(this._localScale);this.localScale=this._localScale,this._scale!==e&&e.cloneTo(this._scale),this._setTransformFlag(Transform3D.TRANSFORM_WORLDSCALE,!1)}get scale(){return console.warn("Transfrm3D: discard function,please use getWorldLossyScale instead."),this.getWorldLossyScale()}set scale(e){console.warn("Transfrm3D: discard function,please use setWorldLossyScale instead."),this.setWorldLossyScale(e)}localToGlobal(e,a){t.Vector3.transformV3ToV3(e,this.worldMatrix,a)}globalToLocal(e,a){this.worldMatrix.invert(Transform3D._tempMatrix0),t.Vector3.transformV3ToV3(e,Transform3D._tempMatrix0,a)}toLocalNormal(e,a){this.worldMatrix.invert(Transform3D._tempMatrix0),t.Vector3.TransformNormal(e,Transform3D._tempMatrix0,a)}toDir(e,t){this.rotationTo(this.rotation,e,t),this.rotation=this.rotation}rotationTo(e,a,r){var n=t.Vector3.dot(a,r);return t.Vector3.Up,n<-.999999?(t.Vector3.cross(t.Vector3.UnitX,a,Transform3D.tmpVec3),t.Vector3.scalarLength(Transform3D.tmpVec3)<1e-6&&t.Vector3.cross(t.Vector3.UnitY,a,Transform3D.tmpVec3),t.Vector3.normalize(Transform3D.tmpVec3,Transform3D.tmpVec3),t.Quaternion.createFromAxisAngle(Transform3D.tmpVec3,Math.PI,e),!0):n>.999999?(e.x=0,e.y=0,e.z=0,e.w=1,!1):(t.Vector3.cross(a,r,Transform3D.tmpVec3),e.x=Transform3D.tmpVec3.x,e.y=Transform3D.tmpVec3.y,e.z=Transform3D.tmpVec3.z,e.w=1+n,e.normalize(e),!0)}}Transform3D._tempVector30=new t.Vector3,Transform3D._tempQuaternion0=new t.Quaternion,Transform3D._tempMatrix0=new t.Matrix4x4,Transform3D._tempMatrix3x30=new t.Matrix3x3,Transform3D._tempMatrix3x31=new t.Matrix3x3,Transform3D._tempMatrix3x32=new t.Matrix3x3,Transform3D._tempMatrix3x33=new t.Matrix3x3,Transform3D.TRANSFORM_LOCALQUATERNION=1,Transform3D.TRANSFORM_LOCALEULER=2,Transform3D.TRANSFORM_LOCALMATRIX=4,Transform3D.TRANSFORM_WORLDPOSITION=8,Transform3D.TRANSFORM_WORLDQUATERNION=16,Transform3D.TRANSFORM_WORLDSCALE=32,Transform3D.TRANSFORM_WORLDMATRIX=64,Transform3D.TRANSFORM_WORLDEULER=128,Transform3D._angleToRandin=180/Math.PI,Transform3D.tmpVec3=new t.Vector3;class RenderableSprite3D extends Sprite3D{constructor(e){super(e)}static __init__(){RenderableSprite3D.SHADERDEFINE_RECEIVE_SHADOW=t.Shader3D.getDefineByName("RECEIVESHADOW"),RenderableSprite3D.SAHDERDEFINE_LIGHTMAP=t.Shader3D.getDefineByName("LIGHTMAP"),RenderableSprite3D.SHADERDEFINE_LIGHTMAP_DIRECTIONAL=t.Shader3D.getDefineByName("LIGHTMAP_DIRECTIONAL"),RenderableSprite3D.LIGHTMAPSCALEOFFSET=t.Shader3D.propertyNameToID("u_LightmapScaleOffset"),RenderableSprite3D.LIGHTMAP=t.Shader3D.propertyNameToID("u_LightMap"),RenderableSprite3D.LIGHTMAP_DIRECTION=t.Shader3D.propertyNameToID("u_LightMapDirection"),RenderableSprite3D.PICKCOLOR=t.Shader3D.propertyNameToID("u_PickColor"),RenderableSprite3D.REFLECTIONCUBE_PROBEPOSITION=t.Shader3D.propertyNameToID("u_SpecCubeProbePosition"),RenderableSprite3D.REFLECTIONCUBE_PROBEBOXMAX=t.Shader3D.propertyNameToID("u_SpecCubeBoxMax"),RenderableSprite3D.REFLECTIONCUBE_PROBEBOXMIN=t.Shader3D.propertyNameToID("u_SpecCubeBoxMin"),RenderableSprite3D.VOLUMETRICGI_PROBECOUNTS=t.Shader3D.propertyNameToID("u_VolumetricGI.probeCounts"),RenderableSprite3D.VOLUMETRICGI_PROBESTEPS=t.Shader3D.propertyNameToID("u_VolumetricGI.probeStep"),RenderableSprite3D.VOLUMETRICGI_PROBESTARTPOS=t.Shader3D.propertyNameToID("u_VolumetricGI.probeStartPosition"),RenderableSprite3D.VOLUMETRICGI_PROBEPARAMS=t.Shader3D.propertyNameToID("u_VolumetricGI.probeParams"),RenderableSprite3D.VOLUMETRICGI_IRRADIANCE=t.Shader3D.propertyNameToID("u_ProbeIrradiance"),RenderableSprite3D.VOLUMETRICGI_DISTANCE=t.Shader3D.propertyNameToID("u_ProbeDistance"),RenderableSprite3D.AMBIENTCOLOR=t.Shader3D.propertyNameToID("u_AmbientColor"),RenderableSprite3D.AMBIENTSH=t.Shader3D.propertyNameToID("u_IblSH"),RenderableSprite3D.AMBIENTINTENSITY=t.Shader3D.propertyNameToID("u_AmbientIntensity"),RenderableSprite3D.REFLECTIONINTENSITY=t.Shader3D.propertyNameToID("u_ReflectionIntensity"),RenderableSprite3D.IBLTEX=t.Shader3D.propertyNameToID("u_IBLTex"),RenderableSprite3D.IBLROUGHNESSLEVEL=t.Shader3D.propertyNameToID("u_IBLRoughnessLevel");const a=t.LayaGL.renderDeviceFactory.createGlobalUniformMap("Sprite3D");RenderableSprite3D.SHADERDEFINE_MORPHTARGET=t.Shader3D.getDefineByName("MORPHTARGETS"),RenderableSprite3D.SHADERDEFINE_MORPHTARGET_POSITION=t.Shader3D.getDefineByName("MORPHTARGETS_POSITION"),RenderableSprite3D.SHADERDEFINE_MORPHTARGET_NORMAL=t.Shader3D.getDefineByName("MORPHTARGETS_NORMAL"),RenderableSprite3D.SHADERDEFINE_MORPHTARGET_TANGENT=t.Shader3D.getDefineByName("MORPHTARGETS_TANGENT"),RenderableSprite3D.MorphTex=t.Shader3D.propertyNameToID("u_MorphTargetsTex"),RenderableSprite3D.MorphParams=t.Shader3D.propertyNameToID("u_MorphParams"),RenderableSprite3D.MorphAttriOffset=t.Shader3D.propertyNameToID("u_MorphAttrOffset"),RenderableSprite3D.MorphActiceTargets=t.Shader3D.propertyNameToID("u_MorphActiveTargets"),RenderableSprite3D.MorphActiveWeights=t.Shader3D.propertyNameToID("u_MorphTargetWeights"),RenderableSprite3D.MorphActiveCount=t.Shader3D.propertyNameToID("u_MorphTargetActiveCount"),a.addShaderUniform(RenderableSprite3D.MorphTex,"u_MorphTargetsTex",e.ShaderDataType.Texture2D),a.addShaderUniform(RenderableSprite3D.MorphParams,"u_MorphParams",e.ShaderDataType.Vector4),a.addShaderUniform(RenderableSprite3D.MorphAttriOffset,"u_MorphAttrOffset",e.ShaderDataType.Vector4),a.addShaderUniform(RenderableSprite3D.MorphActiceTargets,"u_MorphActiveTargets",e.ShaderDataType.Buffer),a.addShaderUniform(RenderableSprite3D.MorphActiveWeights,"u_MorphTargetWeights",e.ShaderDataType.Buffer),a.addShaderUniform(RenderableSprite3D.MorphActiveCount,"u_MorphTargetActiveCount",e.ShaderDataType.Int),a.addShaderUniform(RenderableSprite3D.LIGHTMAPSCALEOFFSET,"u_LightmapScaleOffset",e.ShaderDataType.Vector4),a.addShaderUniform(RenderableSprite3D.LIGHTMAP,"u_LightMap",e.ShaderDataType.Texture2D),a.addShaderUniform(RenderableSprite3D.LIGHTMAP_DIRECTION,"u_LightMapDirection",e.ShaderDataType.Texture2D),a.addShaderUniform(RenderableSprite3D.PICKCOLOR,"u_PickColor",e.ShaderDataType.Vector3),a.addShaderUniform(RenderableSprite3D.REFLECTIONCUBE_PROBEPOSITION,"u_SpecCubeProbePosition",e.ShaderDataType.Vector3),a.addShaderUniform(RenderableSprite3D.REFLECTIONCUBE_PROBEBOXMAX,"u_SpecCubeBoxMax",e.ShaderDataType.Vector3),a.addShaderUniform(RenderableSprite3D.REFLECTIONCUBE_PROBEBOXMIN,"u_SpecCubeBoxMin",e.ShaderDataType.Vector3),a.addShaderUniform(RenderableSprite3D.IBLTEX,"u_IBLTex",e.ShaderDataType.Texture2D),a.addShaderUniform(RenderableSprite3D.IBLROUGHNESSLEVEL,"u_IBLRoughnessLevel",e.ShaderDataType.Float),a.addShaderUniform(RenderableSprite3D.VOLUMETRICGI_PROBECOUNTS,"u_VolumetricGI.probeCounts",e.ShaderDataType.Vector3),a.addShaderUniform(RenderableSprite3D.VOLUMETRICGI_PROBESTEPS,"u_VolumetricGI.probeStep",e.ShaderDataType.Vector3),a.addShaderUniform(RenderableSprite3D.VOLUMETRICGI_PROBESTARTPOS,"u_VolumetricGI.probeStartPosition",e.ShaderDataType.Vector3),a.addShaderUniform(RenderableSprite3D.VOLUMETRICGI_PROBEPARAMS,"u_VolumetricGI.probeParams",e.ShaderDataType.Vector4),a.addShaderUniform(RenderableSprite3D.VOLUMETRICGI_IRRADIANCE,"u_ProbeIrradiance",e.ShaderDataType.Texture2D),a.addShaderUniform(RenderableSprite3D.VOLUMETRICGI_DISTANCE,"u_ProbeDistance",e.ShaderDataType.Texture2D),a.addShaderUniform(RenderableSprite3D.AMBIENTSH,"u_IblSH",e.ShaderDataType.Buffer),a.addShaderUniform(RenderableSprite3D.AMBIENTCOLOR,"u_AmbientColor",e.ShaderDataType.Vector4),a.addShaderUniform(RenderableSprite3D.AMBIENTINTENSITY,"u_AmbientIntensity",e.ShaderDataType.Float),a.addShaderUniform(RenderableSprite3D.REFLECTIONINTENSITY,"u_ReflectionIntensity",e.ShaderDataType.Float),RenderableSprite3D.REFLECTIONTEXTURE=t.Shader3D.propertyNameToID("u_ReflectTexture"),RenderableSprite3D.REFLECTIONCUBE_HDR_PARAMS=t.Shader3D.propertyNameToID("u_ReflectCubeHDRParams"),a.addShaderUniform(RenderableSprite3D.REFLECTIONTEXTURE,"u_ReflectTexture",e.ShaderDataType.TextureCube),a.addShaderUniform(RenderableSprite3D.REFLECTIONCUBE_HDR_PARAMS,"u_ReflectCubeHDRParams",e.ShaderDataType.Vector4),RenderableSprite3D.AMBIENTSHAR=t.Shader3D.propertyNameToID("u_AmbientSHAr"),a.addShaderUniform(RenderableSprite3D.AMBIENTSHAR,"u_AmbientSHAr",e.ShaderDataType.Vector4),RenderableSprite3D.AMBIENTSHAG=t.Shader3D.propertyNameToID("u_AmbientSHAg"),a.addShaderUniform(RenderableSprite3D.AMBIENTSHAG,"u_AmbientSHAg",e.ShaderDataType.Vector4),RenderableSprite3D.AMBIENTSHAB=t.Shader3D.propertyNameToID("u_AmbientSHAb"),a.addShaderUniform(RenderableSprite3D.AMBIENTSHAB,"u_AmbientSHAb",e.ShaderDataType.Vector4),RenderableSprite3D.AMBIENTSHBR=t.Shader3D.propertyNameToID("u_AmbientSHBr"),a.addShaderUniform(RenderableSprite3D.AMBIENTSHBR,"u_AmbientSHBr",e.ShaderDataType.Vector4),RenderableSprite3D.AMBIENTSHBG=t.Shader3D.propertyNameToID("u_AmbientSHBg"),a.addShaderUniform(RenderableSprite3D.AMBIENTSHBG,"u_AmbientSHBg",e.ShaderDataType.Vector4),RenderableSprite3D.AMBIENTSHBB=t.Shader3D.propertyNameToID("u_AmbientSHBb"),a.addShaderUniform(RenderableSprite3D.AMBIENTSHBB,"u_AmbientSHBb",e.ShaderDataType.Vector4),RenderableSprite3D.AMBIENTSHC=t.Shader3D.propertyNameToID("u_AmbientSHC"),a.addShaderUniform(RenderableSprite3D.AMBIENTSHC,"u_AmbientSHC",e.ShaderDataType.Vector4)}_onInActive(){super._onInActive()}_onActive(){super._onActive()}_onActiveInScene(){super._onActiveInScene()}_create(){return new Sprite3D(this.name)}_addToInitStaticBatchManager(){}_setBelongScene(e){super._setBelongScene(e)}_setUnBelongScene(){super._setUnBelongScene()}}class MeshSprite3DShaderDeclaration{}class Bounds{constructor(e,t){this._imp=Laya3DRender.Render3DModuleDataFactory.createBounds(e,t)}static merge(e,a,r){t.Vector3.min(e.min,a.min,r.min),t.Vector3.max(e.max,a.max,r.max),r.min=r.min,r.max=r.max}static containPoint(e,t){let a=e.getMax(),r=e.getMin();return!(t.x>a.x||t.x<r.x)&&(!(t.y>a.y||t.y<r.y)&&!(t.z>a.z||t.z<r.z))}get min(){return this.getMin()}set min(e){this.setMin(e)}get max(){return this.getMax()}set max(e){this.setMax(e)}setMin(e){this._imp.setMin(e)}getMin(){return this._imp.getMin()}setMax(e){this._imp.setMax(e)}getMax(){return this._imp.getMax()}setCenter(e){this._imp.setCenter(e)}getCenter(){return this._imp.getCenter()}setExtent(e){this._imp.setExtent(e)}getExtent(){return this._imp.getExtent()}_getUpdateFlag(e){return this._imp._getUpdateFlag(e)}_setUpdateFlag(e,t){this._imp._setUpdateFlag(e,t)}_getCenter(e,a,r){t.Vector3.add(e,a,r),t.Vector3.scale(r,.5,r)}_getExtent(e,a,r){t.Vector3.subtract(a,e,r),t.Vector3.scale(r,.5,r)}_getMin(e,a,r){t.Vector3.subtract(e,a,r)}_getMax(e,a,r){t.Vector3.add(e,a,r)}_rotateExtents(e,t,a){var r=e.x,n=e.y,i=e.z,o=t.elements;a.x=Math.abs(o[0]*r)+Math.abs(o[4]*n)+Math.abs(o[8]*i),a.y=Math.abs(o[1]*r)+Math.abs(o[5]*n)+Math.abs(o[9]*i),a.z=Math.abs(o[2]*r)+Math.abs(o[6]*n)+Math.abs(o[10]*i)}_tranform(e,t){this._imp._tranform(e,t._imp)}getCorners(e){this._imp.getCorners(e)}getBoundBox(e){this._imp._getBoundBox().cloneTo(e)}calculateBoundsintersection(e){return this._imp.calculateBoundsintersection(e._imp)}cloneTo(e){this._imp.cloneTo(e._imp)}clone(){var e=new Bounds(new t.Vector3,new t.Vector3);return this.cloneTo(e),e}}Bounds._UPDATE_MIN=1,Bounds._UPDATE_MAX=2,Bounds._UPDATE_CENTER=4,Bounds._UPDATE_EXTENT=8,e.volumeIntersectType=void 0,(l=e.volumeIntersectType||(e.volumeIntersectType={}))[l.contain=0]="contain",l[l.intersect=1]="intersect",l[l.Disjoint=2]="Disjoint";class Volume extends t.Component{constructor(){super(),this._aroundVolumeCacheNum=0,this._bounds=new Bounds,this._primitiveBounds=new Bounds,this._importance=0,this.runInEditor=!0}get type(){return this._type}get bounds(){return this._bounds}get boundsMax(){return this._primitiveBounds.getMax()}set boundsMax(e){this._primitiveBounds.setMax(e),this._reCaculateBoundBox()}get boundsMin(){return this._primitiveBounds.getMin()}set boundsMin(e){this._primitiveBounds.setMin(e),this._reCaculateBoundBox()}get probePosition(){return this.owner.transform.position}get importance(){return this._importance}set importance(e){this._importance=e}_onEnable(){this.owner.transform.on(t.Event.TRANSFORM_CHANGED,this,this._VolumeChange),this._volumeManager=this.owner.scene._volumeManager,this._volumeManager.add(this),this._reCaculateBoundBox()}_onDisable(){this.owner.transform.off(t.Event.TRANSFORM_CHANGED,this,this._VolumeChange),this._volumeManager.remove(this)}_VolumeChange(){this._volumeManager._needUpdateAllRender=!0;let e=this._volumeManager._regVolumeManager[this.type];e&&(e._needUpdateAllRender=!0),this._reCaculateBoundBox()}_reCaculateBoundBox(){this.owner&&this._primitiveBounds._tranform(this.owner.transform.worldMatrix,this._bounds)}_cloneTo(e){}}class ReflectionProbeManager{constructor(){this._reflectionProbes=new t.SingletonList,this._needUpdateAllRender=!1,this._sceneReflectionProbe=new ReflectionProbe,this._sceneReflectionProbe.boxProjection=!1,this._sceneReflectionProbe._isScene=!0}set sceneReflectionProbe(e){this._sceneReflectionProbe=e,this._needUpdateAllRender=!0}get sceneReflectionProbe(){return this._sceneReflectionProbe}_updateRenderObject(e){if(0!=this._reflectionProbes.length){for(var t,a,r=this._reflectionProbes.elements,n=0,i=e.bounds,o=0,s=this._reflectionProbes.length;o<s;o++){var l=r[o];if(t){if(t.importance>l.importance)continue;if((a=i.calculateBoundsintersection(l.bounds))<n&&t.importance==l.importance)continue}else if((a=i.calculateBoundsintersection(l.bounds))<n)continue;t=l,n=a}!t&&this._sceneReflectionProbe&&(t=this._sceneReflectionProbe),e.probReflection=t}else e.probReflection=this._sceneReflectionProbe}add(e){this._reflectionProbes.add(e),this._needUpdateAllRender=!0}remove(e){this._reflectionProbes.remove(e),this._needUpdateAllRender=!0}handleMotionlist(e){var t=e.elements;let a;for(var r=0,n=e.length;r<n;r++)a=t[r],a._surportReflectionProbe&&1==a.reflectionMode&&this._updateRenderObject(t[r])}reCaculateAllRenderObjects(e){var t=e.elements;let a;for(var r=0,n=e.length;r<n;r++)a=t[r],a._surportReflectionProbe&&1==a.reflectionMode&&this._updateRenderObject(a),this._needUpdateAllRender=!1}destroy(){for(let e=0;e<this._reflectionProbes.length;e++){this._reflectionProbes.elements[e].destroy()}this._reflectionProbes.length=0,this._sceneReflectionProbe.destroy(),this._sceneReflectionProbe=null}}class Sprite3DRenderDeclaration{}class VolumetricGIManager{constructor(){this._GIVolumes=new t.SingletonList,this._needUpdateAllRender=!0}removeVolumetricGI(e){e._baseRenderNode.shaderData.removeDefine(Sprite3DRenderDeclaration.SHADERDEFINE_VOLUMETRICGI),e.lightProb=null}add(e){this._GIVolumes.add(e),this._needUpdateAllRender=!0}remove(e){this._GIVolumes.remove(e),this._needUpdateAllRender=!0}_updateRenderObject(e){if(0==this._GIVolumes.length)return void this.removeVolumetricGI(e);let t,a=e.bounds,r=0,n=0,i=this._GIVolumes.elements;for(let e=0;e<this._GIVolumes.length;e++){let o=i[e];if(t){if(t.importance>o.importance)continue;if(n=a.calculateBoundsintersection(o.bounds),n<r&&t.importance==o.importance)continue}else if(n=a.calculateBoundsintersection(o.bounds),n<r)continue;t=o,r=n}t?e.lightProb=t:this.removeVolumetricGI(e)}handleMotionlist(e){for(let t=0;t<e.length;t++){let a=e.elements[t];a._surportVolumetricGI&&this._updateRenderObject(a)}this._needUpdateAllRender=!1}reCaculateAllRenderObjects(e){for(let t=0;t<e.length;t++){let a=e.elements[t];a._surportVolumetricGI&&this._updateRenderObject(a)}this._needUpdateAllRender=!1}destroy(){}}class VolumeManager{constructor(){this._motionObjects=new t.SingletonList,this._volumeList=new t.SingletonList,this._needUpdateAllRender=!1,this._regVolumeManager={},this._reflectionProbeManager=new ReflectionProbeManager,this._regVolumeManager[VolumeManager.ReflectionProbeVolumeType]=this._reflectionProbeManager,this._volumetricGIManager=new VolumetricGIManager,this._regVolumeManager[VolumeManager.VolumetricGIType]=this._volumetricGIManager}get reflectionProbeManager(){return this._reflectionProbeManager}get volumetricGIManager(){return this._volumetricGIManager}add(e){let t=this._regVolumeManager[e.type];t?t.add(e):(this._volumeList.add(e),this._needUpdateAllRender=!0)}remove(e){let t=this._regVolumeManager[e.type];t?t.remove(e):(this._volumeList.remove(e),this._needUpdateAllRender=!0)}addMotionObject(e){this._motionObjects.add(e)}removeMotionObject(e){this._motionObjects.remove(e)}_updateRenderObject(e){let t,a=this._volumeList.elements,r=e.bounds.getCenter();for(var n=0,i=this._volumeList.length;n<i;n++){let e=a[n],i=e.bounds;Bounds.containPoint(i,r)&&(t=e)}e.volume=t}handleMotionlist(){for(var e=this._motionObjects.elements,t=0,a=this._motionObjects.length;t<a;t++)this._updateRenderObject(e[t]);this.reflectionProbeManager._needUpdateAllRender||this.reflectionProbeManager.handleMotionlist(this._motionObjects),this.volumetricGIManager._needUpdateAllRender||this.volumetricGIManager.handleMotionlist(this._motionObjects),this.clearMotionObjects()}reCaculateAllRenderObjects(e){if(this._needUpdateAllRender){for(var t=e.elements,a=0,r=e.length;a<r;a++)this._updateRenderObject(t[a]);this._needUpdateAllRender=!1}else this.handleMotionlist();this.reflectionProbeManager._needUpdateAllRender?this.reflectionProbeManager.reCaculateAllRenderObjects(e):this.reflectionProbeManager.handleMotionlist(this._motionObjects),this.volumetricGIManager._needUpdateAllRender?this.volumetricGIManager.reCaculateAllRenderObjects(e):this.volumetricGIManager.handleMotionlist(this._motionObjects)}needreCaculateAllRenderObjects(){return this._needUpdateAllRender||this.reflectionProbeManager._needUpdateAllRender||this.volumetricGIManager._needUpdateAllRender}clearMotionObjects(){this._motionObjects.length=0}destroy(){}}VolumeManager.ReflectionProbeVolumeType=1,VolumeManager.VolumetricGIType=2;class ILaya3D{}ILaya3D.Scene3D=null,ILaya3D.Laya3D=null,e.AmbientMode=void 0,(h=e.AmbientMode||(e.AmbientMode={}))[h.SolidColor=0]="SolidColor",h[h.SphericalHarmonics=1]="SphericalHarmonics",e.ReflectionProbeMode=void 0,(d=e.ReflectionProbeMode||(e.ReflectionProbeMode={}))[d.off=0]="off",d[d.simple=1]="simple";class ReflectionProbe extends Volume{constructor(){super(),this._ambientColor=new t.Color,this._isScene=!1,this._importance=0,this._type=VolumeManager.ReflectionProbeVolumeType,this._dataModule=Laya3DRender.Render3DModuleDataFactory.createReflectionProbe(),this._dataModule.bound=this._bounds,this.ambientIntensity=1,this.reflectionIntensity=1,this.boundsMax=new t.Vector3(5,5,5),this.boundsMin=new t.Vector3(-5,-5,-5),this._reflectionProbeID=ReflectionProbe.getID(),this.ambientMode=e.AmbientMode.SolidColor,this._dataModule.updateMark=-1}static getID(){return ReflectionProbe.reflectionCount++}get boxProjection(){return this._dataModule.boxProjection}set boxProjection(e){e!=this._dataModule.boxProjection&&(this._dataModule.updateMark=ILaya3D.Scene3D._updateMark),this._dataModule.boxProjection=e}get importance(){return this._importance}set importance(e){this._importance=e}get ambientIntensity(){return this._dataModule.ambientIntensity}set ambientIntensity(e){e!=this._dataModule.ambientIntensity&&(this._dataModule.ambientIntensity=e,this._dataModule.updateMark=ILaya3D.Scene3D._updateMark)}get reflectionIntensity(){return this._dataModule.reflectionIntensity}set reflectionIntensity(e){e!=this._dataModule.reflectionIntensity&&(e=Math.max(e,0),this._dataModule.reflectionIntensity=e,this._dataModule.updateMark=ILaya3D.Scene3D._updateMark)}_reCaculateBoundBox(){super._reCaculateBoundBox(),this.owner&&this._dataModule.setProbePosition(this.owner.transform.position)}get bounds(){return this._bounds}set boundsMax(e){super.boundsMax=e,this.boxProjection&&(this._dataModule.updateMark=ILaya3D.Scene3D._updateMark)}get boundsMax(){return this._primitiveBounds.getMax()}set boundsMin(e){super.boundsMin=e,this.boxProjection&&(this._dataModule.updateMark=ILaya3D.Scene3D._updateMark)}get boundsMin(){return this._primitiveBounds.getMin()}get probePosition(){return this.owner.transform.position}get ambientColor(){return this._ambientColor}set ambientColor(t){t&&!t.equal(this._ambientColor)&&(t.cloneTo(this._ambientColor),this._dataModule.setAmbientColor(this._ambientColor),this.ambientMode==e.AmbientMode.SolidColor&&(this._dataModule.updateMark=ILaya3D.Scene3D._updateMark))}get ambientSH(){return this._ambientSH}set ambientSH(t){this.ambientMode==e.AmbientMode.SphericalHarmonics&&(this._dataModule.updateMark=ILaya3D.Scene3D._updateMark),this._ambientSH=t,this._dataModule.setAmbientSH(this._ambientSH)}get ambientMode(){return this._dataModule.ambientMode}set ambientMode(e){e!=this.ambientMode&&(this._dataModule.ambientMode=e,this._dataModule.updateMark=ILaya3D.Scene3D._updateMark)}get iblTex(){return this._iblTex}set iblTex(e){this._iblTex!=e&&(this._iblTex&&this._iblTex._removeReference(),this._iblTex=e,this._dataModule.iblTex=null,e&&(e._addReference(),this._dataModule.iblTex=e._texture),this._dataModule.updateMark=ILaya3D.Scene3D._updateMark)}get iblTexRGBD(){return this._dataModule.iblTexRGBD}set iblTexRGBD(e){e!=this._dataModule.iblTexRGBD&&(this._dataModule.iblTexRGBD=e,this._dataModule.updateMark=ILaya3D.Scene3D._updateMark)}_onEnable(){super._onEnable(),this._dataModule.updateMark=ILaya3D.Scene3D._updateMark}_onDisable(){super._onDisable()}_onDestroy(){this.iblTex=null,this._dataModule.destroy()}_cloneTo(e){}}ReflectionProbe.reflectionCount=0,ReflectionProbe.TEMPVECTOR3=new t.Vector3,ReflectionProbe.defaultTextureHDRDecodeValues=new t.Vector4(1,1,0,0),e.RenderBitFlag=void 0,(c=e.RenderBitFlag||(e.RenderBitFlag={}))[c.RenderBitFlag_CullFlag=0]="RenderBitFlag_CullFlag",c[c.RenderBitFlag_Batch=1]="RenderBitFlag_Batch",c[c.RenderBitFlag_Editor=2]="RenderBitFlag_Editor",c[c.RenderBitFlag_InstanceBatch=3]="RenderBitFlag_InstanceBatch",c[c.RenderBitFlag_VertexMergeBatch=4]="RenderBitFlag_VertexMergeBatch",e.IrradianceMode=void 0,(u=e.IrradianceMode||(e.IrradianceMode={}))[u.LightMap=0]="LightMap",u[u.VolumetricGI=1]="VolumetricGI",u[u.Common=2]="Common";class BaseRender extends t.Component{constructor(){super(),this._sharedMaterials=[],this._sceneUpdateMark=-1,this._updateMark=-1,this._surportReflectionProbe=!1,this._surportVolumetricGI=!1,this._motionIndexList=-1,this._LOD=-1,this._lightmapScaleOffset=new t.Vector4,this._renderElements=[],this._baseRenderNode=this._createBaseRenderNode(),this._baseRenderNode.setCommonUniformMap(this._getcommonUniformMap()),this._baseRenderNode.shaderData=t.LayaGL.renderDeviceFactory.createShaderData(null),this._renderid=++BaseRender._uniqueIDCounter,this._baseRenderNode.bounds=this._bounds=new Bounds(t.Vector3.ZERO,t.Vector3.ZERO),this._enabled=!0,this._baseRenderNode.enable=!0,this._materialsInstance=[],this.lightmapIndex=-1,this.receiveShadow=!1,this._baseRenderNode.sortingFudge=0,this.reflectionMode=e.ReflectionProbeMode.simple,this._calculateBoundingBox&&this._baseRenderNode.set_caculateBoundingBox(this,this._calculateBoundingBox),this._renderUpdate&&this._baseRenderNode.set_renderUpdatePreCall(this,this._renderUpdate),this.runInEditor=!0,this._asynNative=!0,this.boundsChange=!0,this._baseRenderNode.renderbitFlag=0,this._baseRenderNode.staticMask=1,this.castShadow=!1,this._baseRenderNode.renderNodeType=0}static __init__(){BaseRender.shaderValueInit()}static getMeshDefine(e,a){a.length=0;for(var r=0,n=e._subMeshes.length;r<n;r++)for(var i=e.getSubMesh(r)._vertexBuffer.vertexDeclaration._vertexElements,o=0,s=i.length;o<s;o++){switch(i[o]._elementUsage){case t.VertexMesh.MESH_COLOR0:a.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_COLOR);break;case t.VertexMesh.MESH_TEXTURECOORDINATE0:a.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV0);break;case t.VertexMesh.MESH_TEXTURECOORDINATE1:a.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV1);break;case t.VertexMesh.MESH_TANGENT0:a.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_TANGENT)}}}static changeVertexDefine(e,t,a){var r=e;if(r){BaseRender.getMeshDefine(r,BaseRender._meshVerticeDefine);for(var n=0,i=BaseRender._meshVerticeDefine.length;n<i;n++)a.removeDefine(BaseRender._meshVerticeDefine[n])}if(t){BaseRender.getMeshDefine(t,BaseRender._meshVerticeDefine);for(n=0,i=BaseRender._meshVerticeDefine.length;n<i;n++)a.addDefine(BaseRender._meshVerticeDefine[n])}}static shaderValueInit(){Sprite3DRenderDeclaration.SHADERDEFINE_GI_LEGACYIBL=t.Shader3D.getDefineByName("GI_LEGACYIBL"),Sprite3DRenderDeclaration.SHADERDEFINE_GI_IBL=t.Shader3D.getDefineByName("GI_IBL"),Sprite3DRenderDeclaration.SHADERDEFINE_IBL_RGBD=t.Shader3D.getDefineByName("IBL_RGBD"),Sprite3DRenderDeclaration.SHADERDEFINE_SPECCUBE_BOX_PROJECTION=t.Shader3D.getDefineByName("SPECCUBE_BOX_PROJECTION"),Sprite3DRenderDeclaration.SHADERDEFINE_VOLUMETRICGI=t.Shader3D.getDefineByName("VOLUMETRICGI")}set enabled(e){super.enabled=e,this._baseRenderNode.enable=e}get enabled(){return super.enabled}set sortingFudge(e){this._baseRenderNode.sortingFudge=e}get sortingFudge(){return this._baseRenderNode.sortingFudge}get renderbitFlag(){return this._baseRenderNode.renderbitFlag}set boundsChange(e){this._baseRenderNode.boundsChange=e}get boundsChange(){return this._baseRenderNode.boundsChange}get renderNode(){return this._baseRenderNode}set distanceForSort(e){this._baseRenderNode.distanceForSort=e}get distanceForSort(){return this._baseRenderNode.distanceForSort}set geometryBounds(e){this._baseRenderNode.baseGeometryBounds=e}get geometryBounds(){return this._baseRenderNode.baseGeometryBounds}get lightmapIndex(){return this._baseRenderNode.lightmapIndex}set lightmapIndex(e){this._baseRenderNode.lightmapIndex=e}setLightmapIndex(e){-1!=e&&(this._baseRenderNode.lightmap=this._scene.lightmaps[e]._dataModule),this._getIrradientMode()}get irradientMode(){return this._baseRenderNode.irradientMode}get lightmapScaleOffset(){return this._lightmapScaleOffset}set lightmapScaleOffset(e){e.cloneTo(this._lightmapScaleOffset),this._baseRenderNode.setLightmapScaleOffset(this._lightmapScaleOffset)}get sharedMaterial(){return this._sharedMaterials[0]}set sharedMaterial(e){var t=this._sharedMaterials[0];t!==e&&(this._sharedMaterials[0]=e,this._materialsInstance[0]=!1,this._changeMaterialReference(t,e),this._renderElements[0]&&(this._renderElements[0].material=e)),this._isSupportRenderFeature()}get sharedMaterials(){return this._sharedMaterials.slice()}set sharedMaterials(e){for(var t=this._materialsInstance,a=this._sharedMaterials,r=0,n=a.length;r<n;r++){var i=a[r];i&&i._removeReference()}if(!e)throw new Error("BaseRender: shadredMaterials value can't be null.");var o=e.length;for(t.length=o,a.length=o,r=0;r<o;r++){i=a[r];var s=e[r];i!==s&&(t[r]=!1,this._renderElements[r]&&(this._renderElements[r].material=s)),s&&s._addReference(),a[r]=s}this._isSupportRenderFeature()}get bounds(){return this._baseRenderNode.bounds}get receiveShadow(){return this._receiveShadow}set receiveShadow(e){this._receiveShadow!==e&&(this._receiveShadow=e,e?this._baseRenderNode.shaderData.addDefine(RenderableSprite3D.SHADERDEFINE_RECEIVE_SHADOW):this._baseRenderNode.shaderData.removeDefine(RenderableSprite3D.SHADERDEFINE_RECEIVE_SHADOW)),this._baseRenderNode.receiveShadow=e}get castShadow(){return this._baseRenderNode.castShadow}set castShadow(e){this._baseRenderNode.castShadow=e}get reflectionMode(){return this._baseRenderNode.reflectionMode}set reflectionMode(e){this._baseRenderNode.reflectionMode=e}get volume(){return this._volume}set volume(e){if(e)return this._volume!=e?(e._addRenderNode&&e._addRenderNode(this),void(this._volume=e)):void(e._motionInVolume&&e._motionInVolume(this));this._volume&&(this._volume._removeRenderNode&&this._volume._removeRenderNode(this),this._volume=null)}get probReflection(){return this._probReflection}set probReflection(a){this._probReflection!=a&&(this._baseRenderNode.probeReflectionUpdateMark=-1,this._probReflection=a,this._baseRenderNode.probeReflection=a._dataModule,this._baseRenderNode.reflectionMode==e.ReflectionProbeMode.off&&(this._baseRenderNode.shaderData.removeDefine(Sprite3DRenderDeclaration.SHADERDEFINE_SPECCUBE_BOX_PROJECTION),this._baseRenderNode.shaderData.addDefine(Sprite3DRenderDeclaration.SHADERDEFINE_GI_IBL),this._baseRenderNode.shaderData.setTexture(RenderableSprite3D.IBLTEX,t.TextureCube.blackTexture),this._baseRenderNode.shaderData.setNumber(RenderableSprite3D.IBLROUGHNESSLEVEL,0)),this._getIrradientMode())}get lightProbe(){return this._lightProb}set lightProb(e){this._lightProb!=e&&(this._baseRenderNode.lightProbUpdateMark=-1,this._lightProb=e,this._getIrradientMode())}_setRenderElements(){let e=[];this._renderElements.forEach((t=>{e.push(t._renderElementOBJ)})),this._baseRenderNode.setRenderelements(e)}_onWorldMatNeedChange(e){this.boundsChange=!0,this._addReflectionProbeUpdate(),this._batchRender&&this._batchRender._updateOneRender(this)}_getcommonUniformMap(){return["Sprite3D"]}_createBaseRenderNode(){return Laya3DRender.Render3DModuleDataFactory.createBaseRenderNode()}renderUpdate(e){}_onAdded(){this._transform=this.owner.transform,this.owner._isRenderNode++,this.setRenderbitFlag(e.RenderBitFlag.RenderBitFlag_Editor,this.owner._getBit(t.NodeFlags.HIDE_BY_EDITOR)),this._baseRenderNode.transform=this._transform,this._changeLayer(this.owner.layer),this._changeStaticMask(this.owner._isStatic)}_onEnable(){super._onEnable(),this.owner&&(this.owner.transform.on(t.Event.TRANSFORM_CHANGED,this,this._onWorldMatNeedChange),this.owner.on(t.Event.LAYERCHANGE,this,this._changeLayer),this.owner.on(t.Event.staticMask,this,this._changeStaticMask),this._changeLayer(this.owner.layer),this._changeStaticMask(this.owner._isStatic)),this.owner.scene._addRenderObject(this),this._setBelongScene(this.owner.scene)}_onDisable(){this.owner&&(this.owner.transform.off(t.Event.TRANSFORM_CHANGED,this,this._onWorldMatNeedChange),this.owner.off(t.Event.LAYERCHANGE,this,this._changeLayer),this.owner.off(t.Event.staticMask,this,this._changeStaticMask)),this.owner.scene._removeRenderObject(this),this._setUnBelongScene(),this.volume=null}_onDestroy(){this.owner&&this.owner._isRenderNode--,-1!==this._motionIndexList&&this._scene._sceneRenderManager.removeMotionObject(this),this._scene&&this._scene.sceneRenderableManager.removeRenderObject(this),this._baseRenderNode.destroy();var e,t=0;for(t=0,e=this._sharedMaterials.length;t<e;t++){let e=this._sharedMaterials[t];e&&!e.destroyed&&e._removeReference()}this._sharedMaterials=null,this._bounds=null,this._lightmapScaleOffset=null,this._scene=null,this._transform=null,this._batchRender=null}_getIrradientMode(){this.lightmapIndex>=0?this._baseRenderNode.irradientMode=e.IrradianceMode.LightMap:this.lightProb&&(this._baseRenderNode.irradientMode=e.IrradianceMode.VolumetricGI)}_changeLayer(e){this._baseRenderNode.layer=e}_changeStaticMask(e){this._baseRenderNode.staticMask=e}_changeMaterialReference(e,t){e&&e._removeReference(),t&&t._addReference()}_getInstanceMaterial(e,t){var a=e.clone();return a.name=a.name+"(Instance)",this._materialsInstance[t]=!0,this._changeMaterialReference(this._sharedMaterials[t],a),this._sharedMaterials[t]=a,a}_isSupportRenderFeature(){let e=this._surportReflectionProbe,t=this._surportVolumetricGI;this._surportReflectionProbe=!1,this._surportVolumetricGI=!1;for(var a=this._sharedMaterials,r=0,n=a.length;r<n;r++){var i=a[r];this._surportReflectionProbe||(this._surportReflectionProbe=this._surportReflectionProbe||i&&i._shader._supportReflectionProbe),this._surportVolumetricGI||(this._surportVolumetricGI=this._surportVolumetricGI||i&&i._shader._surportVolumetricGI)}(!e&&this._surportReflectionProbe||!t&&this._surportVolumetricGI)&&this._addReflectionProbeUpdate()}_addReflectionProbeUpdate(){this._scene&&this._scene._volumeManager.addMotionObject(this)}_setBelongScene(e){this._scene=e,this._onWorldMatNeedChange(1),this._isSupportRenderFeature(),this._batchRender&&this._batchRender._batchOneRender(this),this.setLightmapIndex(this.lightmapIndex),t.Stat.renderNode++}_setUnBelongScene(){t.Stat.renderNode--,this._scene._volumeManager.removeMotionObject(this);let e=this._batchRender;this._batchRender&&this._batchRender._removeOneRender(this),this._batchRender=e,this._scene=null}_needRender(e,t){return!e||e.intersects(this.bounds)}_cloneTo(e){super._cloneTo(e);let t=e;t.receiveShadow=this.receiveShadow,t.sharedMaterials=this.sharedMaterials,t.reflectionMode=this.reflectionMode,t.castShadow=this.castShadow,t.sortingFudge=this.sortingFudge}setRenderbitFlag(e,t){t?this._baseRenderNode.renderbitFlag|=1<<e:this._baseRenderNode.renderbitFlag&=~(1<<e)}get material(){var e=this._sharedMaterials[0];if(e&&!this._materialsInstance[0]){var t=this._getInstanceMaterial(e,0),a=this._renderElements[0];a&&(a.material=t)}return this._sharedMaterials[0]}set material(e){this.sharedMaterial=e,this._isSupportRenderFeature()}get materials(){for(var e=0,t=this._sharedMaterials.length;e<t;e++)if(!this._materialsInstance[e]){var a=this._getInstanceMaterial(this._sharedMaterials[e],e),r=this._renderElements[e];r&&(r.material=a)}return this._sharedMaterials.slice()}set materials(e){this.sharedMaterials=e,this._isSupportRenderFeature()}}BaseRender._meshVerticeDefine=[],BaseRender._uniqueIDCounter=0,BaseRender._tempBoundBoxCorners=[new t.Vector3,new t.Vector3,new t.Vector3,new t.Vector3,new t.Vector3,new t.Vector3,new t.Vector3,new t.Vector3],BaseRender._defaultLightmapScaleOffset=new t.Vector4(1,1,0,0);class GeometryElement{constructor(e,a){this._destroyed=!1,this._geometryElementOBj=t.LayaGL.renderDeviceFactory.createRenderGeometryElement(e,a),this._id=++GeometryElement._uniqueIDCounter}set bufferState(e){this._geometryElementOBj.bufferState=e._deviceBufferState,this._bufferState=e}get bufferState(){return this._bufferState}set mode(e){this._geometryElementOBj.mode=e}get mode(){return this._geometryElementOBj.mode}set drawType(e){this._geometryElementOBj.drawType=e}get drawType(){return this._geometryElementOBj.drawType}setDrawArrayParams(e,t){this._geometryElementOBj.setDrawArrayParams(e,t)}setDrawElemenParams(e,t){this._geometryElementOBj.setDrawElemenParams(e,t)}set instanceCount(e){this._geometryElementOBj.instanceCount=e}get instanceCount(){return this._geometryElementOBj.instanceCount}set indexFormat(e){this._geometryElementOBj.indexFormat=e}get indexFormat(){return this._geometryElementOBj.indexFormat}get destroyed(){return this._destroyed}_getType(){throw"GeometryElement:must override it."}_prepareRender(e){return!0}_updateRenderParams(e){throw"GeometryElement:must override it."}destroy(){this._destroyed||(this._destroyed=!0,this._geometryElementOBj.destroy())}clearRenderParams(){this._geometryElementOBj.clearRenderParams()}}GeometryElement._uniqueIDCounter=0,GeometryElement._typeCounter=0;class SkyBox extends GeometryElement{constructor(){super(t.MeshTopology.Triangles,t.DrawType.DrawElement);var e=new Float32Array([-1,1,-1,1,1,-1,1,1,1,-1,1,1,-1,-1,-1,1,-1,-1,1,-1,1,-1,-1,1]),a=new Uint16Array([0,2,1,2,0,3,4,6,7,6,4,5,0,7,3,7,0,4,1,6,5,6,1,2,3,6,2,6,3,7,0,5,4,5,0,1]),r=t.VertexMesh.getVertexDeclaration("POSITION");let n=Laya3DRender.renderOBJCreate.createVertexBuffer3D(8*r.vertexStride,t.BufferUsage.Static,!1);n.vertexDeclaration=r;let i=Laya3DRender.renderOBJCreate.createIndexBuffer3D(t.IndexFormat.UInt16,36,t.BufferUsage.Static,!1);n.setData(e),i.setData(a),this.bufferState=new t.BufferState,this.bufferState.applyState([n],i),this._geometryElementOBj.setDrawElemenParams(36,0),this.indexFormat=t.IndexFormat.UInt16}static __init__(){SkyBox.instance=new SkyBox}_updateRenderParams(e){}}class VertexPositionTexture0{constructor(e,t){this._position=e,this._textureCoordinate0=t}static get vertexDeclaration(){return VertexPositionTexture0._vertexDeclaration}static __init__(){VertexPositionTexture0._vertexDeclaration=new t.VertexDeclaration(20,[new t.VertexElement(0,t.VertexElementFormat.Vector3,t.VertexMesh.MESH_POSITION0),new t.VertexElement(12,t.VertexElementFormat.Vector2,t.VertexMesh.MESH_TEXTURECOORDINATE0)])}get position(){return this._position}get textureCoordinate0(){return this._textureCoordinate0}get vertexDeclaration(){return VertexPositionTexture0._vertexDeclaration}}class SkyDome extends GeometryElement{constructor(e=48,a=48){super(t.MeshTopology.Triangles,t.DrawType.DrawElement),this._stacks=e,this._slices=a;for(var r=VertexPositionTexture0.vertexDeclaration,n=r.vertexStride/4,i=(this._stacks+1)*(this._slices+1),o=3*this._stacks*(this._slices+1)*2,s=new Float32Array(i*n),l=new Uint16Array(o),h=Math.PI/this._stacks,d=2*Math.PI/this._slices,c=0,u=0,_=0,m=0;m<this._stacks+1;m++)for(var f=Math.sin(m*h),S=Math.cos(m*h),g=0;g<this._slices+1;g++){var p=f*Math.sin(g*d),D=f*Math.cos(g*d);s[u+0]=p*SkyDome._radius,s[u+1]=S*SkyDome._radius,s[u+2]=D*SkyDome._radius,s[u+3]=-g/this._slices+.75,s[u+4]=m/this._stacks,u+=n,m!=this._stacks-1&&(l[_++]=c+1,l[_++]=c,l[_++]=c+(this._slices+1),l[_++]=c+(this._slices+1),l[_++]=c,l[_++]=c+this._slices,c++)}let T=Laya3DRender.renderOBJCreate.createVertexBuffer3D(4*s.length,t.BufferUsage.Static,!1);T.vertexDeclaration=r;let E=Laya3DRender.renderOBJCreate.createIndexBuffer3D(t.IndexFormat.UInt16,l.length,t.BufferUsage.Static,!1);T.setData(s.buffer),E.setData(l);var x=new t.BufferState;x.applyState([T],E),this.bufferState=x,this.indexFormat=t.IndexFormat.UInt16,this._geometryElementOBj.setDrawElemenParams(E.indexCount,0)}static __init__(){SkyDome.instance=new SkyDome}get stacks(){return this._stacks}get slices(){return this._slices}_updateRenderParams(e){}}SkyDome._radius=1;class SkyRenderer{constructor(){this.mesh=SkyDome.instance,this._renderData=new BaseRender,this._baseRenderNode=Laya3DRender.Render3DModuleDataFactory.createBaseRenderNode(),this._baseRenderNode.transform=new Transform3D(null)}static __init__(){SkyRenderer.SUNLIGHTDIRECTION=t.Shader3D.propertyNameToID("u_SunLight_direction"),SkyRenderer.SUNLIGHTDIRCOLOR=t.Shader3D.propertyNameToID("u_SunLight_color"),SkyRenderer.SKYVIEWMATRIX=t.Shader3D.propertyNameToID("u_SkyViewMat"),SkyRenderer.SKYPROJECTIONMATRIX=t.Shader3D.propertyNameToID("u_SkyProjectionMat"),SkyRenderer.SKYPROJECTIONVIEWMATRIX=t.Shader3D.propertyNameToID("u_SkyProjectionViewMat");const a=t.LayaGL.renderDeviceFactory.createGlobalUniformMap("SkyRenderer");a.addShaderUniform(SkyRenderer.SUNLIGHTDIRECTION,"u_SunLight_direction",e.ShaderDataType.Vector3),a.addShaderUniform(SkyRenderer.SUNLIGHTDIRCOLOR,"u_SunLight_color",e.ShaderDataType.Color),a.addShaderUniform(SkyRenderer.SKYVIEWMATRIX,"u_SkyViewMat",e.ShaderDataType.Matrix4x4),a.addShaderUniform(SkyRenderer.SKYPROJECTIONMATRIX,"u_SkyProjectionMat",e.ShaderDataType.Matrix4x4),a.addShaderUniform(SkyRenderer.SKYPROJECTIONVIEWMATRIX,"u_SkyProjectionViewMat",e.ShaderDataType.Matrix4x4)}get material(){return this._material}set material(e){this._material!==e&&(this._material&&this._material._removeReference(),this._material=e,this._cacheRenderElement&&(this._cacheRenderElement.material=e),e&&e._addReference())}get mesh(){return this._mesh}set mesh(e){this._mesh!==e&&(this._mesh=e,this._cacheRenderElement&&this._cacheRenderElement.setGeometry(this.mesh))}get meshType(){return this.mesh==SkyBox.instance?"box":this.mesh==SkyDome.instance?"dome":""}set meshType(e){this.mesh="dome"==e?SkyDome.instance:SkyBox.instance}_isAvailable(){return!(!this._material||!this._mesh)}renderUpdate(e){let t=this.mesh;this._renderGeometry=t._prepareRender(e),t._updateRenderParams(e)}setRenderElement(e){this._cacheRenderElement!=e&&(e.setGeometry(this.mesh),e.material=this._material,e.render=this._renderData,e._renderElementOBJ.isRender=this._renderGeometry,this._baseRenderNode.setRenderelements([e._renderElementOBJ]),this._baseRenderNode.setCommonUniformMap(["Sprite3D","SkyRenderer"]),this._cacheRenderElement=e)}destroy(){this._material&&(this._material._removeReference(),this._material=null),this._renderData.destroy(),this._cacheRenderElement=null,this._baseRenderNode.setRenderelements([]),this._baseRenderNode.destroy()}}class RenderElement{constructor(){this._subShaderIndex=0,this._createRenderElementOBJ()}set transform(e){this._transform=e,this._renderElementOBJ.transform=e}get transform(){return this._renderElementOBJ.transform}set material(e){e&&(this._material=e,this._renderElementOBJ.materialShaderData=e.shaderData,this._renderElementOBJ.materialRenderQueue=e.renderQueue,this._renderElementOBJ.subShader=this._subShader=e.shader.getSubShaderAt(0),this._renderElementOBJ.materialId=e.id,e.ownerELement=this)}get material(){return this._material}set renderSubShader(e){this._subShader=e,this._renderElementOBJ.subShader=e}get renderSubShader(){return this._subShader}set subShaderIndex(e){this._subShaderIndex=e}get subShaderIndex(){return this._subShaderIndex}set render(e){this._baseRender=e,this._renderElementOBJ.renderShaderData=e._baseRenderNode.shaderData}get render(){return this._baseRender}_createRenderElementOBJ(){this._renderElementOBJ=Laya3DRender.Render3DPassFactory.createRenderElement3D()}setTransform(e){this.transform=e,this._renderElementOBJ.transform=e}setGeometry(e){this._geometry=e,this._renderElementOBJ.geometry=e._geometryElementOBj}destroy(){this._renderElementOBJ=null,this._renderElementOBJ=null,this._geometry=null,this._baseRender=null,this._material=null,this._baseRender=null,this._subShader=null}}const _=new t.Matrix4x4(1,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,1);class SkyRenderElement extends RenderElement{constructor(){super(),this._viewMatrix=new t.Matrix4x4,this._projectionMatrix=new t.Matrix4x4,this._projectViewMatrix=new t.Matrix4x4}calculateViewMatrix(e){e.cloneTo(this._viewMatrix),this._viewMatrix.setTranslationVector(t.Vector3.ZERO)}caluclateProjectionMatrix(e,a,r,n,i,o){if(o){let e=.2,a=e;t.Matrix4x4.createOrthoOffCenter(-e,e,-a,a,r,n,this._projectionMatrix)}else{e.cloneTo(this._projectionMatrix);let t=1e-6,r=1/Math.tan(Math.PI*i/180*.5);this._projectionMatrix.elements[0]=r/a,this._projectionMatrix.elements[5]=r,this._projectionMatrix.elements[10]=t-1,this._projectionMatrix.elements[11]=-1,this._projectionMatrix.elements[14]=-0}}renderpre(e){if(e.invertY){let e=t.Matrix4x4.TEMPMatrix0,a=t.Matrix4x4.TEMPMatrix1;t.Matrix4x4.multiply(_,this._projectionMatrix,e),t.Matrix4x4.multiply(e,this._viewMatrix,a),this._renderElementOBJ.renderShaderData.setMatrix4x4(SkyRenderer.SKYPROJECTIONMATRIX,e),this._renderElementOBJ.renderShaderData.setMatrix4x4(SkyRenderer.SKYPROJECTIONVIEWMATRIX,a)}else t.Matrix4x4.multiply(this._projectionMatrix,this._viewMatrix,this._projectViewMatrix),this._renderElementOBJ.renderShaderData.setMatrix4x4(SkyRenderer.SKYPROJECTIONMATRIX,this._projectionMatrix),this._renderElementOBJ.renderShaderData.setMatrix4x4(SkyRenderer.SKYPROJECTIONVIEWMATRIX,this._projectViewMatrix);this._renderElementOBJ.renderShaderData.setMatrix4x4(SkyRenderer.SKYVIEWMATRIX,this._viewMatrix),this._renderElementOBJ.renderShaderData.setColor(SkyRenderer.SUNLIGHTDIRCOLOR,e.scene._sunColor),this._renderElementOBJ.renderShaderData.setVector3(SkyRenderer.SUNLIGHTDIRECTION,e.scene._sundir)}}class BaseCamera extends Sprite3D{constructor(e=.3,a=1e3){super(),this._forward=new t.Vector3,this._up=new t.Vector3,this._shaderValues=t.LayaGL.renderDeviceFactory.createShaderData(null),this._linearClearColor=new t.Color,this.clearColor=new t.Color(100/255,149/255,237/255,1),this._fieldOfView=60,this._useUserProjectionMatrix=!1,this._orthographicVerticalSize=10,this.renderingOrder=0,this._nearPlane=e,this._farPlane=a,this.cullingMask=2147483647,this.staticMask=4294967295,this.useOcclusionCulling=!0,this._renderEngine=t.LayaGL.renderEngine,this._orthographic=!1,t.Config3D._uniformBlock&&(this._cameraUniformUBO=t.UniformBufferObject.getBuffer(t.UniformBufferObject.UBONAME_CAMERA,0),this._cameraUniformData=BaseCamera.createCameraUniformBlock(),this._cameraUniformUBO||(this._cameraUniformUBO=t.UniformBufferObject.create(t.UniformBufferObject.UBONAME_CAMERA,t.BufferUsage.Dynamic,this._cameraUniformData.getbyteLength(),!1)),this._shaderValues._addCheckUBO(t.UniformBufferObject.UBONAME_CAMERA,this._cameraUniformUBO,this._cameraUniformData),this._shaderValues.setUniformBuffer(BaseCamera.CAMERAUNIFORMBLOCK,this._cameraUniformUBO)),this._skyRenderElement=new SkyRenderElement}static shaderValueInit(){BaseCamera.SHADERDEFINE_DEPTH=t.Shader3D.getDefineByName("DEPTHMAP"),BaseCamera.SHADERDEFINE_DEPTHNORMALS=t.Shader3D.getDefineByName("DEPTHNORMALSMAP"),BaseCamera.SHADERDEFINE_ORTHOGRAPHIC=t.Shader3D.getDefineByName("CAMERAORTHOGRAPHIC"),BaseCamera.SHADERDEFINE_FXAA=t.Shader3D.getDefineByName("FXAA");let a=BaseCamera.cameraUniformMap=t.LayaGL.renderDeviceFactory.createGlobalUniformMap("BaseCamera");BaseCamera.CAMERAPOS=t.Shader3D.propertyNameToID("u_CameraPos"),BaseCamera.VIEWMATRIX=t.Shader3D.propertyNameToID("u_View"),BaseCamera.VIEWPROJECTMATRIX=t.Shader3D.propertyNameToID("u_ViewProjection"),BaseCamera.PROJECTMATRIX=t.Shader3D.propertyNameToID("u_Projection"),BaseCamera.CAMERADIRECTION=t.Shader3D.propertyNameToID("u_CameraDirection"),BaseCamera.CAMERAUP=t.Shader3D.propertyNameToID("u_CameraUp"),BaseCamera.VIEWPORT=t.Shader3D.propertyNameToID("u_Viewport"),BaseCamera.PROJECTION_PARAMS=t.Shader3D.propertyNameToID("u_ProjectionParams"),BaseCamera.DEPTHTEXTURE=t.Shader3D.propertyNameToID("u_CameraDepthTexture"),BaseCamera.DEPTHNORMALSTEXTURE=t.Shader3D.propertyNameToID("u_CameraDepthNormalsTexture"),BaseCamera.OPAQUETEXTURE=t.Shader3D.propertyNameToID("u_CameraOpaqueTexture"),BaseCamera.OPAQUETEXTUREPARAMS=t.Shader3D.propertyNameToID("u_OpaqueTextureParams"),BaseCamera.DEPTHZBUFFERPARAMS=t.Shader3D.propertyNameToID("u_ZBufferParams"),BaseCamera.CAMERAUNIFORMBLOCK=t.Shader3D.propertyNameToID(t.UniformBufferObject.UBONAME_CAMERA),t.Config3D._uniformBlock?a.addShaderBlockUniform(BaseCamera.CAMERAUNIFORMBLOCK,t.UniformBufferObject.UBONAME_CAMERA,[{id:BaseCamera.VIEWMATRIX,propertyName:"u_View",uniformtype:e.ShaderDataType.Matrix4x4},{id:BaseCamera.PROJECTMATRIX,propertyName:"u_Projection",uniformtype:e.ShaderDataType.Matrix4x4},{id:BaseCamera.VIEWPROJECTMATRIX,propertyName:"u_ViewProjection",uniformtype:e.ShaderDataType.Matrix4x4},{id:BaseCamera.PROJECTION_PARAMS,propertyName:"u_ProjectionParams",uniformtype:e.ShaderDataType.Vector4},{id:BaseCamera.VIEWPORT,propertyName:"u_Viewport",uniformtype:e.ShaderDataType.Vector4},{id:BaseCamera.CAMERADIRECTION,propertyName:"u_CameraDirection",uniformtype:e.ShaderDataType.Vector3},{id:BaseCamera.CAMERAUP,propertyName:"u_CameraUp",uniformtype:e.ShaderDataType.Vector3},{id:BaseCamera.CAMERAPOS,propertyName:"u_CameraPos",uniformtype:e.ShaderDataType.Vector3}]):(a.addShaderUniform(BaseCamera.CAMERAPOS,"u_CameraPos",e.ShaderDataType.Vector3),a.addShaderUniform(BaseCamera.VIEWMATRIX,"u_View",e.ShaderDataType.Matrix4x4),a.addShaderUniform(BaseCamera.PROJECTMATRIX,"u_Projection",e.ShaderDataType.Matrix4x4),a.addShaderUniform(BaseCamera.VIEWPROJECTMATRIX,"u_ViewProjection",e.ShaderDataType.Matrix4x4),a.addShaderUniform(BaseCamera.CAMERADIRECTION,"u_CameraDirection",e.ShaderDataType.Vector3),a.addShaderUniform(BaseCamera.CAMERAUP,"u_CameraUp",e.ShaderDataType.Vector3),a.addShaderUniform(BaseCamera.VIEWPORT,"u_Viewport",e.ShaderDataType.Vector4),a.addShaderUniform(BaseCamera.PROJECTION_PARAMS,"u_ProjectionParams",e.ShaderDataType.Vector4)),a.addShaderUniform(BaseCamera.DEPTHTEXTURE,"u_CameraDepthTexture",e.ShaderDataType.Texture2D),a.addShaderUniform(BaseCamera.DEPTHNORMALSTEXTURE,"u_CameraDepthNormalsTexture",e.ShaderDataType.Texture2D),a.addShaderUniform(BaseCamera.OPAQUETEXTURE,"u_CameraOpaqueTexture",e.ShaderDataType.Texture2D),a.addShaderUniform(BaseCamera.OPAQUETEXTUREPARAMS,"u_OpaqueTextureParams",e.ShaderDataType.Vector4),a.addShaderUniform(BaseCamera.DEPTHZBUFFERPARAMS,"u_ZBufferParams",e.ShaderDataType.Vector4)}static createCameraUniformBlock(){if(!BaseCamera.CameraUBOData){let e=new Map;e.set("u_View",t.UniformBufferParamsType.Matrix4x4),e.set("u_Projection",t.UniformBufferParamsType.Matrix4x4),e.set("u_ViewProjection",t.UniformBufferParamsType.Matrix4x4),e.set("u_ProjectionParams",t.UniformBufferParamsType.Vector4),e.set("u_Viewport",t.UniformBufferParamsType.Vector4),e.set("u_CameraDirection",t.UniformBufferParamsType.Vector3),e.set("u_CameraUp",t.UniformBufferParamsType.Vector3),e.set("u_CameraPos",t.UniformBufferParamsType.Vector3);let a=new Map;e.forEach(((e,r)=>{a.set(t.Shader3D.propertyNameToID(r),e)})),BaseCamera.CameraUBOData=new t.UnifromBufferData(a)}return BaseCamera.CameraUBOData}static __init__(){BaseCamera.shaderValueInit()}get clearColor(){return this._clearColor}set clearColor(e){this._clearColor=e,e.toLinear(this._linearClearColor)}get skyRenderElement(){return this._skyRenderElement}get fieldOfView(){return this._fieldOfView}set fieldOfView(e){this._fieldOfView=e,this._calculateProjectionMatrix(),this._caculateMaxLocalYRange()}get maxlocalYDistance(){return this._yrange}get nearPlane(){return this._nearPlane}set nearPlane(e){this._nearPlane=e,this._calculateProjectionMatrix()}get farPlane(){return this._farPlane}set farPlane(e){this._farPlane=e,this._calculateProjectionMatrix(),this._caculateMaxLocalYRange()}get orthographic(){return this._orthographic}set orthographic(e){this._orthographic=e,this._calculateProjectionMatrix(),e?this._shaderValues.addDefine(BaseCamera.SHADERDEFINE_ORTHOGRAPHIC):this._shaderValues.removeDefine(BaseCamera.SHADERDEFINE_ORTHOGRAPHIC)}get orthographicVerticalSize(){return this._orthographicVerticalSize}set orthographicVerticalSize(e){this._orthographicVerticalSize=e,this._calculateProjectionMatrix()}get cullingMask(){return this._cullingMask}set cullingMask(e){this._cullingMask=e}get renderingOrder(){return this._renderingOrder}set renderingOrder(e){this._renderingOrder=e,this._sortCamerasByRenderingOrder()}_caculateMaxLocalYRange(){let e=3.1416*this.fieldOfView/180/2,t=this.farPlane;this._yrange=Math.tan(e)*t*2}_calculateProjectionMatrix(){}_onScreenSizeChanged(){this._calculateProjectionMatrix()}_create(){return new BaseCamera}_sortCamerasByRenderingOrder(){if(this.displayedInStage)for(var e=this.scene._cameraPool,t=e.length-1,a=0;a<t;a++)if(e[a].renderingOrder>e[t].renderingOrder){var r=e[a];e[a]=e[t],e[t]=r}}_prepareCameraToRender(){this.transform.getForward(this._forward),this.transform.getUp(this._up),this._shaderValues.setVector3(BaseCamera.CAMERAPOS,this.transform.position),this._shaderValues.setVector3(BaseCamera.CAMERADIRECTION,this._forward),this._shaderValues.setVector3(BaseCamera.CAMERAUP,this._up)}render(e){}addLayer(e){this.cullingMask|=Math.pow(2,e)}removeLayer(e){this.cullingMask&=~Math.pow(2,e)}addAllLayers(){this.cullingMask=2147483647}removeAllLayers(){this.cullingMask=0}resetProjectionMatrix(){this._useUserProjectionMatrix=!1,this._calculateProjectionMatrix()}_onActive(){this._scene._addCamera(this),super._onActive()}_onInActive(){this._scene._removeCamera(this),super._onInActive()}_parse(e,a){super._parse(e,a),this.orthographic=e.orthographic,void 0!==e.orthographicVerticalSize&&(this.orthographicVerticalSize=e.orthographicVerticalSize),void 0!==e.fieldOfView&&(this.fieldOfView=e.fieldOfView),this.nearPlane=e.nearPlane,this.farPlane=e.farPlane;var r=e.clearColor;this.clearColor=new t.Color(r[0],r[1],r[2],r[3])}destroy(e=!0){this._skyRenderElement.destroy(),this._skyRenderElement=null,t.ILaya.stage.off(t.Event.RESIZE,this,this._onScreenSizeChanged),super.destroy(e)}}BaseCamera.RENDERINGTYPE_SHADERDEFINE_FXAA="FXAA",BaseCamera.RENDERINGTYPE_DEFERREDLIGHTING="DEFERREDLIGHTING",BaseCamera.RENDERINGTYPE_FORWARDRENDERING="FORWARDRENDERING",BaseCamera._invertYScaleMatrix=new t.Matrix4x4(1,0,0,0,0,-1,0,0,0,0,1,0,0,0,0,1),BaseCamera._invertYProjectionMatrix=new t.Matrix4x4,BaseCamera._invertYProjectionViewMatrix=new t.Matrix4x4,BaseCamera._tempMatrix4x40=new t.Matrix4x4;class RenderContext3D{constructor(){this.configPipeLineMode="Forward",this._contextOBJ=Laya3DRender.Render3DPassFactory.createRenderContext3D()}static __init__(){RenderContext3D._instance=new RenderContext3D,this.GammaCorrect=t.Shader3D.getDefineByName("GAMMACORRECT")}set destTarget(e){this._contextOBJ.setRenderTarget(e?e._renderTarget:null,t.RenderClearFlag.Nothing)}set viewport(e){this._contextOBJ.setViewPort(e)}set scissor(e){this._contextOBJ.setScissor(e)}get invertY(){return this._contextOBJ.invertY}set invertY(e){this._contextOBJ.invertY=e}get pipelineMode(){return this._contextOBJ.pipelineMode}set pipelineMode(e){this._contextOBJ.pipelineMode=e}get cameraShaderValue(){return this._contextOBJ.cameraData}set cameraShaderValue(e){this._contextOBJ.cameraData=e}set scene(e){e?(this._contextOBJ.sceneData=e._shaderValues,this._scene=e,this._contextOBJ.sceneModuleData=e._sceneModuleData):(this._contextOBJ.sceneModuleData=null,this._contextOBJ.sceneData=null,this._scene=null)}get scene(){return this._scene}changeViewport(e,a,r,n){t.Viewport._tempViewport.set(e,a,r,n),this.viewport=t.Viewport._tempViewport}changeScissor(e,a,r,n){t.Vector4.tempVec4.setValue(e,a,r,n),this.scissor=t.Vector4.tempVec4}applyContext(e){this._contextOBJ.cameraUpdateMask=e}drawRenderElement(e){this._contextOBJ.drawRenderElementOne(e)}}class ScreenQuad extends GeometryElement{constructor(){super(t.MeshTopology.TriangleStrip,t.DrawType.DrawArray),this._bufferState=new t.BufferState,this._bufferStateInvertUV=new t.BufferState,this.setDrawArrayParams(0,4),this._vertexBuffer=Laya3DRender.renderOBJCreate.createVertexBuffer3D(64,t.BufferUsage.Static,!1),this._vertexBuffer.vertexDeclaration=ScreenQuad._vertexDeclaration,this._vertexBuffer.setData(ScreenQuad._vertices.buffer),this._bufferState.applyState([this._vertexBuffer],null),this._vertexBufferInvertUV=Laya3DRender.renderOBJCreate.createVertexBuffer3D(64,t.BufferUsage.Static,!1),this._vertexBufferInvertUV.vertexDeclaration=ScreenQuad._vertexDeclaration,this._vertexBufferInvertUV.setData(ScreenQuad._verticesInvertUV.buffer),this._bufferStateInvertUV.applyState([this._vertexBufferInvertUV],null),this.invertY=!1}static __init__(){ScreenQuad._vertexDeclaration=new t.VertexDeclaration(16,[new t.VertexElement(0,t.VertexElementFormat.Vector4,ScreenQuad.SCREENQUAD_POSITION_UV)]),ScreenQuad.instance=new ScreenQuad,ScreenQuad.instance.invertY=!0,ScreenQuad.InvertInstance=new ScreenQuad,ScreenQuad.InvertInstance.invertY=!1}set invertY(e){e=t.LayaGL.renderEngine._screenInvertY?!e:e,this.bufferState=e?this._bufferStateInvertUV:this._bufferState}_updateRenderParams(e){}destroy(){super.destroy(),this._bufferState.destroy(),this._vertexBuffer.destroy(),this._bufferStateInvertUV.destroy(),this._vertexBufferInvertUV.destroy()}}ScreenQuad.SCREENQUAD_POSITION_UV=0,ScreenQuad._vertices=new Float32Array([1,1,1,1,1,-1,1,0,-1,1,0,1,-1,-1,0,0]),ScreenQuad._verticesInvertUV=new Float32Array([1,1,1,0,1,-1,1,1,-1,1,0,0,-1,-1,0,1]);class Command{constructor(){this._commandBuffer=null}static __init__(){Command._screenShaderData=t.LayaGL.renderDeviceFactory.createShaderData(null),Command._screenShader=t.Shader3D.find("BlitScreen"),Command.SCREENTEXTURE_ID=t.Shader3D.propertyNameToID(Command.SCREENTEXTURE_NAME),Command.SCREENTEXTUREOFFSETSCALE_ID=t.Shader3D.propertyNameToID(Command.SCREENTEXTUREOFFSETSCALE_NAME),Command.MAINTEXTURE_TEXELSIZE_ID=t.Shader3D.propertyNameToID(Command.MAINTEXTURE_TEXELSIZE_NAME)}recover(){this._commandBuffer=null}destroy(){this._commandBuffer=null,this._context=null}}Command.SCREENTEXTURE_NAME="u_MainTex",Command.SCREENTEXTUREOFFSETSCALE_NAME="u_OffsetScale",Command.MAINTEXTURE_TEXELSIZE_NAME="u_MainTex_TexelSize";class BlitScreenQuadCMD extends Command{constructor(){super(),this._source=null,this._dest=null,this._offsetScale=new t.Vector4,this._shader=null,this._shaderData=null,this._subShader=0,this._sourceTexelSize=new t.Vector4,this._blitQuadCMDData=Laya3DRender.Render3DPassFactory.createBlitQuadCMDData(),this._transform3D=Laya3DRender.Render3DModuleDataFactory.createTransform(null),this._renderElement=new RenderElement,this._renderElement.setTransform(this._transform3D),this._renderElement.setGeometry(ScreenQuad.instance),this._blitQuadCMDData.element=this._renderElement._renderElementOBJ,this._blitQuadCMDData.element.isRender=!0}static create(e,t,a=null,r=null,n=null,i=0,o=BlitScreenQuadCMD._SCREENTYPE_QUAD,s=null){var l;return(l=BlitScreenQuadCMD._pool.length>0?BlitScreenQuadCMD._pool.pop():new BlitScreenQuadCMD)._source=e,l.dest=t,l.offsetScale=a||BlitScreenQuadCMD._defaultOffsetScale,l.setshader(r,i,n),l._commandBuffer=s,l}get offsetScale(){return this._offsetScale}set offsetScale(e){e.cloneTo(this._offsetScale),this._blitQuadCMDData.offsetScale=e}get dest(){return this._dest}set dest(e){this._dest=e,this._blitQuadCMDData.dest=e?e._renderTarget:null}set shaderData(e){this._shaderData=e||Command._screenShaderData,this._renderElement._renderElementOBJ.materialShaderData=this._shaderData}getRenderCMD(){return this._blitQuadCMDData}setshader(e,t,a){this._shader=e||Command._screenShader,this._subShader=t||0,this.shaderData=a,this._renderElement.renderSubShader=this._shader.getSubShaderAt(this._subShader),this._renderElement._subShaderIndex=t}run(){var e;if(this._source)e=this._source;else{if(!this._commandBuffer._camera._internalRenderTexture)throw"camera internalRenderTexture is null,please set camera enableBuiltInRenderTexture";e=this._commandBuffer._camera._internalRenderTexture}this._blitQuadCMDData.source=e._texture;var a=this._dest?this._dest:this._commandBuffer._camera._internalRenderTexture;if(a!=this._dest&&(this._blitQuadCMDData.dest=a._renderTarget),a)t.Viewport._tempViewport.set(0,0,a.width,a.height),t.Vector4.tempVec4.setValue(0,0,a.width,a.height),this._blitQuadCMDData.viewport=t.Viewport._tempViewport,this._blitQuadCMDData.scissor=t.Vector4.tempVec4;else{let e=this._commandBuffer._camera.viewport,a=e.height,r=RenderContext3D.clientHeight-e.y-a;t.Viewport._tempViewport.set(e.x,r,e.width,a),t.Vector4.tempVec4.setValue(e.x,r,e.width,a),this._blitQuadCMDData.viewport=t.Viewport._tempViewport,this._blitQuadCMDData.scissor=t.Vector4.tempVec4}let r=!!a;this._renderElement.setGeometry(r?ScreenQuad.InvertInstance:ScreenQuad.instance),t.Stat.blitDrawCall++}recover(){BlitScreenQuadCMD._pool.push(this),this._source=null,this._dest=null,BlitScreenQuadCMD._defaultOffsetScale.cloneTo(this._offsetScale),this._shader=null,this._shaderData=null,super.recover()}destroy(){this._source=null,this.dest=null,this._offsetScale=null,this._shader=null,this._shaderData=null,this._renderElement.destroy()}}BlitScreenQuadCMD._SCREENTYPE_QUAD=0,BlitScreenQuadCMD._SCREENTYPE_TRIANGLE=1,BlitScreenQuadCMD._pool=[],BlitScreenQuadCMD._defaultOffsetScale=new t.Vector4(0,0,1,1);class SetShaderDataCMD extends Command{constructor(){super(),this._setRenderDataCMD=Laya3DRender.Render3DPassFactory.createSetRenderDataCMD()}static create(e,t,a,r,n){var i;return(i=SetShaderDataCMD._pool.length>0?SetShaderDataCMD._pool.pop():new SetShaderDataCMD)._setRenderDataCMD.dest=e,i._setRenderDataCMD.propertyID=t,i._setRenderDataCMD.dataType=r,i._setRenderDataCMD.value=a,i._commandBuffer=n,i}getRenderCMD(){return this._setRenderDataCMD}recover(){SetShaderDataCMD._pool.push(this)}}SetShaderDataCMD.ShaderDataType_define=-2,SetShaderDataCMD._pool=[];class SetDefineCMD extends Command{constructor(){super(),this._setRenderDefineCMD=Laya3DRender.Render3DPassFactory.createSetShaderDefineCMD()}static create(e,t,a,r){var n;return(n=SetDefineCMD._pool.length>0?SetDefineCMD._pool.pop():new SetDefineCMD)._setRenderDefineCMD.dest=e,n._setRenderDefineCMD.add=a,n._setRenderDefineCMD.define=t,n._commandBuffer=r,n}getRenderCMD(){return this._setRenderDefineCMD}recover(){SetDefineCMD._pool.push(this)}}var m,f,S,g,p,D,T;SetDefineCMD._pool=[],e.BaseRenderType=void 0,(m=e.BaseRenderType||(e.BaseRenderType={}))[m.BaseRender=0]="BaseRender",m[m.MeshRender=1]="MeshRender",m[m.ParticleRender=2]="ParticleRender",m[m.TrailRender=3]="TrailRender",m[m.LineRender=4]="LineRender",m[m.TerrainRender=5]="TerrainRender",m[m.SkyRender=7]="SkyRender",m[m.SimpleSkinRender=8]="SimpleSkinRender",m[m.SkinnedMeshRender=9]="SkinnedMeshRender";class MeshUtil{static getMeshDefine(e,a){a.length=0;let r=e._vertexBuffer.vertexDeclaration._vertexElements;for(const e of r)switch(e.elementUsage){case t.VertexMesh.MESH_COLOR0:a.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_COLOR);break;case t.VertexMesh.MESH_TEXTURECOORDINATE0:a.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV0);break;case t.VertexMesh.MESH_TEXTURECOORDINATE1:a.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV1);break;case t.VertexMesh.MESH_TANGENT0:a.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_TANGENT)}}}class MeshFilter extends t.Component{constructor(){super(),this.runInEditor=!0}_onEnable(){const e=this.owner.getComponent(MeshRenderer);e&&e._enabled&&e._onMeshChange(this._sharedMesh)}_onDisable(){this.owner.getComponent(MeshRenderer)}get sharedMesh(){return this._sharedMesh}set sharedMesh(e){if(this._sharedMesh!==e){var t=this._sharedMesh;t&&t._removeReference(),e&&e._addReference(),this._sharedMesh=e;const a=this.owner.getComponent(MeshRenderer);if(!a)return;a._onMeshChange(e),this._sharedMesh=e}}_onDestroy(){this._sharedMesh&&(this._sharedMesh._removeReference(),this._sharedMesh=null)}_cloneTo(e){e.sharedMesh=this.sharedMesh,super._cloneTo(e)}}MeshFilter._meshVerticeDefine=[];class RenderState{constructor(){this._stencilOp=new t.Vector3,this.createObj(),this.cull=RenderState.CULL_BACK,this.blend=RenderState.BLEND_DISABLE,this.srcBlend=RenderState.BLENDPARAM_ONE,this.dstBlend=RenderState.BLENDPARAM_ZERO,this.srcBlendRGB=RenderState.BLENDPARAM_ONE,this.dstBlendRGB=RenderState.BLENDPARAM_ZERO,this.srcBlendAlpha=RenderState.BLENDPARAM_ONE,this.dstBlendAlpha=RenderState.BLENDPARAM_ZERO,this.blendEquation=RenderState.BLENDEQUATION_ADD,this.blendEquationRGB=RenderState.BLENDEQUATION_ADD,this.blendEquationAlpha=RenderState.BLENDEQUATION_ADD,this.depthTest=RenderState.DEPTHTEST_LEQUAL,this.depthWrite=!0,this.stencilRef=1,this.stencilTest=RenderState.STENCILTEST_OFF,this.stencilWrite=!1,this.stencilOp=new t.Vector3(RenderState.STENCILOP_KEEP,RenderState.STENCILOP_KEEP,RenderState.STENCILOP_REPLACE)}get cull(){return this._cull}set cull(e){this._cull=e}get blend(){return this._blend}set blend(e){this._blend=e}get srcBlend(){return this._srcBlend}set srcBlend(e){this._srcBlend=e}get dstBlend(){return this._dstBlend}set dstBlend(e){this._dstBlend=e}get srcBlendRGB(){return this._srcBlendRGB}set srcBlendRGB(e){this._srcBlendRGB=e}get dstBlendRGB(){return this._dstBlendRGB}set dstBlendRGB(e){this._dstBlendRGB=e}get srcBlendAlpha(){return this._srcBlendAlpha}set srcBlendAlpha(e){this._srcBlendAlpha=e}get dstBlendAlpha(){return this._dstBlendAlpha}set dstBlendAlpha(e){this._dstBlendAlpha=e}get blendEquation(){return this._blendEquation}set blendEquation(e){this._blendEquation=e}get blendEquationRGB(){return this._blendEquationRGB}set blendEquationRGB(e){this._blendEquationRGB=e}get blendEquationAlpha(){return this._blendEquationAlpha}set blendEquationAlpha(e){this._blendEquationAlpha=e}get depthTest(){return this._depthTest}set depthTest(e){this._depthTest=e}get depthWrite(){return this._depthWrite}set depthWrite(e){this._depthWrite=e}get stencilWrite(){return this._stencilWrite}set stencilWrite(e){this._stencilWrite=e}get stencilTest(){return this._stencilTest}set stencilTest(e){this._stencilTest=e}get stencilRef(){return this._stencilRef}set stencilRef(e){this._stencilRef=e}get stencilOp(){return this._stencilOp}set stencilOp(e){this._stencilOp=e}createObj(){}setNull(){this.cull=null,this.blend=null,this.srcBlend=null,this.dstBlend=null,this.srcBlendRGB=null,this.dstBlendRGB=null,this.srcBlendAlpha=null,this.dstBlendAlpha=null,this.blendEquation=null,this.blendEquationRGB=null,this.blendEquationAlpha=null,this.depthTest=null,this.depthWrite=null,this.stencilRef=null,this.stencilTest=null,this.stencilWrite=null,this.stencilOp.set(null,null,null)}cloneTo(e){e.cull=this.cull,e.blend=this.blend,e.srcBlend=this.srcBlend,e.dstBlend=this.dstBlend,e.srcBlendRGB=this.srcBlendRGB,e.dstBlendRGB=this.dstBlendRGB,e.srcBlendAlpha=this.srcBlendAlpha,e.dstBlendAlpha=this.dstBlendAlpha,e.blendEquation=this.blendEquation,e.blendEquationRGB=this.blendEquationRGB,e.blendEquationAlpha=this.blendEquationAlpha,e.depthTest=this.depthTest,e.depthWrite=this.depthWrite,e.stencilRef=this.stencilRef,e.stencilTest=this.stencilTest,e.stencilWrite=this.stencilWrite,this.stencilOp.cloneTo(e.stencilOp)}clone(){var e=new RenderState;return this.cloneTo(e),e}}RenderState.CULL_NONE=t.CullMode.Off,RenderState.CULL_FRONT=t.CullMode.Front,RenderState.CULL_BACK=t.CullMode.Back,RenderState.BLEND_DISABLE=t.BlendType.BLEND_DISABLE,RenderState.BLEND_ENABLE_ALL=t.BlendType.BLEND_ENABLE_ALL,RenderState.BLEND_ENABLE_SEPERATE=t.BlendType.BLEND_ENABLE_SEPERATE,RenderState.BLENDPARAM_ZERO=t.BlendFactor.Zero,RenderState.BLENDPARAM_ONE=t.BlendFactor.One,RenderState.BLENDPARAM_SRC_COLOR=t.BlendFactor.SourceColor,RenderState.BLENDPARAM_ONE_MINUS_SRC_COLOR=t.BlendFactor.OneMinusSourceColor,RenderState.BLENDPARAM_DST_COLOR=t.BlendFactor.DestinationColor,RenderState.BLENDPARAM_ONE_MINUS_DST_COLOR=t.BlendFactor.OneMinusDestinationColor,RenderState.BLENDPARAM_SRC_ALPHA=t.BlendFactor.SourceAlpha,RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA=t.BlendFactor.OneMinusSourceAlpha,RenderState.BLENDPARAM_DST_ALPHA=t.BlendFactor.DestinationAlpha,RenderState.BLENDPARAM_ONE_MINUS_DST_ALPHA=t.BlendFactor.OneMinusDestinationAlpha,RenderState.BLENDPARAM_SRC_ALPHA_SATURATE=t.BlendFactor.SourceAlphaSaturate,RenderState.BLENDPARAM_BLENDCOLOR=t.BlendFactor.BlendColor,RenderState.BLENDPARAM_BLEND_ONEMINUS_COLOR=t.BlendFactor.OneMinusBlendColor,RenderState.BLENDEQUATION_ADD=t.BlendEquationSeparate.ADD,RenderState.BLENDEQUATION_SUBTRACT=t.BlendEquationSeparate.SUBTRACT,RenderState.BLENDEQUATION_REVERSE_SUBTRACT=t.BlendEquationSeparate.REVERSE_SUBTRACT,RenderState.BLENDEQUATION_MIN=t.BlendEquationSeparate.MIN,RenderState.BLENDEQUATION_MAX=t.BlendEquationSeparate.MAX,RenderState.DEPTHTEST_OFF=t.CompareFunction.Off,RenderState.DEPTHTEST_NEVER=t.CompareFunction.Never,RenderState.DEPTHTEST_LESS=t.CompareFunction.Less,RenderState.DEPTHTEST_EQUAL=t.CompareFunction.Equal,RenderState.DEPTHTEST_LEQUAL=t.CompareFunction.LessEqual,RenderState.DEPTHTEST_GREATER=t.CompareFunction.Greater,RenderState.DEPTHTEST_NOTEQUAL=t.CompareFunction.NotEqual,RenderState.DEPTHTEST_GEQUAL=t.CompareFunction.GreaterEqual,RenderState.DEPTHTEST_ALWAYS=t.CompareFunction.Always,RenderState.STENCILTEST_OFF=t.CompareFunction.Off,RenderState.STENCILTEST_NEVER=t.CompareFunction.Never,RenderState.STENCILTEST_LESS=t.CompareFunction.Less,RenderState.STENCILTEST_EQUAL=t.CompareFunction.Equal,RenderState.STENCILTEST_LEQUAL=t.CompareFunction.LessEqual,RenderState.STENCILTEST_GREATER=t.CompareFunction.Greater,RenderState.STENCILTEST_NOTEQUAL=t.CompareFunction.NotEqual,RenderState.STENCILTEST_GEQUAL=t.CompareFunction.GreaterEqual,RenderState.STENCILTEST_ALWAYS=t.CompareFunction.Always,RenderState.STENCILOP_KEEP=t.StencilOperation.Keep,RenderState.STENCILOP_ZERO=t.StencilOperation.Zero,RenderState.STENCILOP_REPLACE=t.StencilOperation.Replace,RenderState.STENCILOP_INCR=t.StencilOperation.IncrementSaturate,RenderState.STENCILOP_INCR_WRAP=t.StencilOperation.IncrementWrap,RenderState.STENCILOP_DECR=t.StencilOperation.DecrementSaturate,RenderState.STENCILOP_DECR_WRAP=t.StencilOperation.DecrementWrap,RenderState.STENCILOP_INVERT=t.StencilOperation.Invert,RenderState.Default=new RenderState;class BlinnPhongMaterial extends t.Material{constructor(){super(),this.setShaderName("BLINNPHONG"),this.renderMode=BlinnPhongMaterial.RENDERMODE_OPAQUE}static __initDefine__(){BlinnPhongMaterial.SHADERDEFINE_DIFFUSEMAP=t.Shader3D.getDefineByName("DIFFUSEMAP"),BlinnPhongMaterial.SHADERDEFINE_NORMALMAP=t.Shader3D.getDefineByName("NORMALMAP"),BlinnPhongMaterial.SHADERDEFINE_SPECULARMAP=t.Shader3D.getDefineByName("SPECULARMAP"),BlinnPhongMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR=t.Shader3D.getDefineByName("ENABLEVERTEXCOLOR"),BlinnPhongMaterial.SHADERDEFINE_ENABLETRANSMISSION=t.Shader3D.getDefineByName("ENABLETRANSMISSION"),BlinnPhongMaterial.SHADERDEFINE_THICKNESSMAP=t.Shader3D.getDefineByName("THICKNESSMAP"),BlinnPhongMaterial.ALBEDOTEXTURE=t.Shader3D.propertyNameToID("u_DiffuseTexture"),BlinnPhongMaterial.NORMALTEXTURE=t.Shader3D.propertyNameToID("u_NormalTexture"),BlinnPhongMaterial.SPECULARTEXTURE=t.Shader3D.propertyNameToID("u_SpecularTexture"),BlinnPhongMaterial.ALBEDOCOLOR=t.Shader3D.propertyNameToID("u_DiffuseColor"),BlinnPhongMaterial.MATERIALSPECULAR=t.Shader3D.propertyNameToID("u_MaterialSpecular"),BlinnPhongMaterial.SHININESS=t.Shader3D.propertyNameToID("u_Shininess"),BlinnPhongMaterial.TILINGOFFSET=t.Shader3D.propertyNameToID("u_TilingOffset"),BlinnPhongMaterial.TRANSMISSIONRATE=t.Shader3D.propertyNameToID("u_TransmissionRate"),BlinnPhongMaterial.IBACKDIFFUSE=t.Shader3D.propertyNameToID("u_BackDiffuse"),BlinnPhongMaterial.IBACKSCALE=t.Shader3D.propertyNameToID("u_BackScale"),BlinnPhongMaterial.THINKNESSTEXTURE=t.Shader3D.propertyNameToID("u_ThinknessTexture"),BlinnPhongMaterial.TRANSMISSIONCOLOR=t.Shader3D.propertyNameToID("u_TransmissionColor"),BlinnPhongMaterial.AlbedoIntensity=t.Shader3D.propertyNameToID("u_AlbedoIntensity")}set renderMode(e){switch(e){case BlinnPhongMaterial.RENDERMODE_OPAQUE:this.alphaTest=!1,this.renderQueue=t.Material.RENDERQUEUE_OPAQUE,this.depthWrite=!0,this.cull=RenderState.CULL_BACK,this.blend=RenderState.BLEND_DISABLE,this.depthTest=RenderState.DEPTHTEST_LESS;break;case BlinnPhongMaterial.RENDERMODE_CUTOUT:this.renderQueue=t.Material.RENDERQUEUE_ALPHATEST,this.alphaTest=!0,this.depthWrite=!0,this.cull=RenderState.CULL_BACK,this.blend=RenderState.BLEND_DISABLE,this.depthTest=RenderState.DEPTHTEST_LESS;break;case BlinnPhongMaterial.RENDERMODE_TRANSPARENT:this.renderQueue=t.Material.RENDERQUEUE_TRANSPARENT,this.alphaTest=!1,this.depthWrite=!1,this.cull=RenderState.CULL_BACK,this.blend=RenderState.BLEND_ENABLE_ALL,this.blendSrc=RenderState.BLENDPARAM_SRC_ALPHA,this.blendDst=RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA,this.depthTest=RenderState.DEPTHTEST_LESS;break;default:throw new Error("Material:renderMode value error.")}}get enableVertexColor(){return this.hasDefine(BlinnPhongMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR)}set enableVertexColor(e){e?this.addDefine(BlinnPhongMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR):this.removeDefine(BlinnPhongMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR)}get tilingOffset(){return this.getVector4ByIndex(BlinnPhongMaterial.TILINGOFFSET)}set tilingOffset(e){e?this.setVector4ByIndex(BlinnPhongMaterial.TILINGOFFSET,e):this.getVector4ByIndex(BlinnPhongMaterial.TILINGOFFSET).setValue(1,1,0,0)}get albedoColor(){return this.getColorByIndex(BlinnPhongMaterial.ALBEDOCOLOR)}set albedoColor(e){this.setColorByIndex(BlinnPhongMaterial.ALBEDOCOLOR,e)}get albedoIntensity(){return this.getFloatByIndex(BlinnPhongMaterial.AlbedoIntensity)}set albedoIntensity(e){this.setFloatByIndex(BlinnPhongMaterial.AlbedoIntensity,e)}get specularColor(){return this.getColorByIndex(BlinnPhongMaterial.MATERIALSPECULAR)}set specularColor(e){this.setColorByIndex(BlinnPhongMaterial.MATERIALSPECULAR,e)}get shininess(){return this.getFloatByIndex(BlinnPhongMaterial.SHININESS)}set shininess(e){e=Math.max(0,Math.min(1,e)),this.setFloatByIndex(BlinnPhongMaterial.SHININESS,e)}get albedoTexture(){return this.getTextureByIndex(BlinnPhongMaterial.ALBEDOTEXTURE)}set albedoTexture(e){e?this.addDefine(BlinnPhongMaterial.SHADERDEFINE_DIFFUSEMAP):this.removeDefine(BlinnPhongMaterial.SHADERDEFINE_DIFFUSEMAP),this.setTextureByIndex(BlinnPhongMaterial.ALBEDOTEXTURE,e)}get normalTexture(){return this.getTextureByIndex(BlinnPhongMaterial.NORMALTEXTURE)}set normalTexture(e){e?this.addDefine(BlinnPhongMaterial.SHADERDEFINE_NORMALMAP):this.removeDefine(BlinnPhongMaterial.SHADERDEFINE_NORMALMAP),this.setTextureByIndex(BlinnPhongMaterial.NORMALTEXTURE,e)}get specularTexture(){return this.getTextureByIndex(BlinnPhongMaterial.SPECULARTEXTURE)}set specularTexture(e){e?this.addDefine(BlinnPhongMaterial.SHADERDEFINE_SPECULARMAP):this.removeDefine(BlinnPhongMaterial.SHADERDEFINE_SPECULARMAP),this.setTextureByIndex(BlinnPhongMaterial.SPECULARTEXTURE,e)}get enableTransmission(){return this.hasDefine(BlinnPhongMaterial.SHADERDEFINE_ENABLETRANSMISSION)}set enableTransmission(e){e?this.addDefine(BlinnPhongMaterial.SHADERDEFINE_ENABLETRANSMISSION):this.removeDefine(BlinnPhongMaterial.SHADERDEFINE_ENABLETRANSMISSION)}get transmissionRata(){return this.getFloatByIndex(BlinnPhongMaterial.TRANSMISSIONRATE)}set transmissionRata(e){this.setFloatByIndex(BlinnPhongMaterial.TRANSMISSIONRATE,e)}get backDiffuse(){return this.getFloatByIndex(BlinnPhongMaterial.IBACKDIFFUSE)}set backDiffuse(e){this.setFloatByIndex(BlinnPhongMaterial.IBACKDIFFUSE,Math.max(e,1))}get backScale(){return this.getFloatByIndex(BlinnPhongMaterial.IBACKSCALE)}set backScale(e){this.setFloatByIndex(BlinnPhongMaterial.IBACKSCALE,e)}get thinknessTexture(){return this.getTextureByIndex(BlinnPhongMaterial.THINKNESSTEXTURE)}set thinknessTexture(e){e?this.addDefine(BlinnPhongMaterial.SHADERDEFINE_THICKNESSMAP):this.removeDefine(BlinnPhongMaterial.SHADERDEFINE_THICKNESSMAP),this.setTextureByIndex(BlinnPhongMaterial.THINKNESSTEXTURE,e)}get transmissionColor(){return this.getColorByIndex(BlinnPhongMaterial.TRANSMISSIONCOLOR)}set transmissionColor(e){this.setColorByIndex(BlinnPhongMaterial.TRANSMISSIONCOLOR,e)}get transmissionRate(){return this.getFloatByIndex(BlinnPhongMaterial.TRANSMISSIONRATE)}clone(){var e=new BlinnPhongMaterial;return this.cloneTo(e),e}cloneTo(e){super.cloneTo(e);var t=e;t.albedoIntensity=this.albedoIntensity,t.enableVertexColor=this.enableVertexColor,this.albedoColor.cloneTo(t.albedoColor)}}BlinnPhongMaterial.RENDERMODE_OPAQUE=0,BlinnPhongMaterial.RENDERMODE_CUTOUT=1,BlinnPhongMaterial.RENDERMODE_TRANSPARENT=2;class SubMeshRenderElement extends RenderElement{constructor(){super(),this._dynamicWorldPositionNormalNeedUpdate=!0,this._renderElementOBJ.canDynamicBatch=!0}_onWorldMatrixChanged(){this._dynamicWorldPositionNormalNeedUpdate=!0}setTransform(e){this.transform!==e&&(this.transform&&this.transform.off(t.Event.TRANSFORM_CHANGED,this,this._onWorldMatrixChanged),e&&e.on(t.Event.TRANSFORM_CHANGED,this,this._onWorldMatrixChanged),this._dynamicWorldPositionNormalNeedUpdate=!0,this.transform=e)}setGeometry(e){this._geometry!==e&&(this._geometry=e,this._renderElementOBJ.geometry=e._geometryElementOBj)}destroy(){this._renderElementOBJ&&(this.transform&&this.transform.off(t.Event.TRANSFORM_CHANGED,this,this._onWorldMatrixChanged),super.destroy(),this.instanceSubMesh=null,this.staticBatchElementList&&this.staticBatchElementList.destroy(),this.instanceBatchElementList&&this.instanceBatchElementList.destroy(),this.vertexBatchElementList&&this.vertexBatchElementList.destroy(),this.vertexBatchVertexDeclaration=null)}}class MeshRenderer extends BaseRender{constructor(){super(),this._revertStaticBatchDefineUV1=!1,this.morphTargetActiveCount=0,this._morphWeightChange=!0,this._morphTargetValues={},this._projectionViewWorldMatrix=new t.Matrix4x4,this._baseRenderNode.renderNodeType=e.BaseRenderType.MeshRender}static __init__(){MeshSprite3DShaderDeclaration.SHADERDEFINE_UV0=t.Shader3D.getDefineByName("UV"),MeshSprite3DShaderDeclaration.SHADERDEFINE_COLOR=t.Shader3D.getDefineByName("COLOR"),MeshSprite3DShaderDeclaration.SHADERDEFINE_UV1=t.Shader3D.getDefineByName("UV1"),MeshSprite3DShaderDeclaration.SHADERDEFINE_TANGENT=t.Shader3D.getDefineByName("TANGENT"),MeshSprite3DShaderDeclaration.SHADERDEFINE_GPU_INSTANCE=t.Shader3D.getDefineByName("GPU_INSTANCE")}_createBaseRenderNode(){return Laya3DRender.Render3DModuleDataFactory.createMeshRenderNode()}_createRenderElement(){return new SubMeshRenderElement}getMesh(){return this._mesh}_onEnable(){super._onEnable();const e=this.owner.getComponent(MeshFilter);e&&e._enabled&&this._onMeshChange(e.sharedMesh)}_getMeshDefine(e,t){t.length=0,MeshUtil.getMeshDefine(e,t)}_changeVertexDefine(e){var t=this._baseRenderNode.shaderData,a=this._mesh;if(a){this._getMeshDefine(a,MeshFilter._meshVerticeDefine);for(var r=0,n=MeshFilter._meshVerticeDefine.length;r<n;r++)t.removeDefine(MeshFilter._meshVerticeDefine[r])}if(e){this._getMeshDefine(e,MeshFilter._meshVerticeDefine);for(r=0,n=MeshFilter._meshVerticeDefine.length;r<n;r++)t.addDefine(MeshFilter._meshVerticeDefine[r])}}get morphTargetValues(){return this._morphTargetValues}set morphTargetValues(e){this._morphTargetValues=e}_changeMorphTargetValue(e){this._morphWeightChange=!0}setMorphChannelWeight(e,t){let a=this._mesh;if(a&&a.morphTargetData){let r=a.morphTargetData.getMorphChannel(e);this.morphTargetValues[r.name]=t,this._morphWeightChange=!0}}_applyMorphdata(){let e=this._mesh,a=this._baseRenderNode.shaderData;if(this._morphWeightChange&&e){let r=e.morphTargetData,n=r.channelCount;for(let e=0;e<n;e++){let t=r.getMorphChannelbyIndex(e),a=this.morphTargetValues[t.name],n=0;t.targets.forEach((e=>{a<=e.fullWeight?this.morphTargetWeight[e._index]=(a-n)/(e.fullWeight-n):this.morphTargetWeight[e._index]=1,n=e.fullWeight}))}let i=0;this.morphTargetWeight.forEach(((e,t)=>{e>0&&(this.morphTargetActiveIndex[i]=t,this.morphTargetActiveWeight[i]=e,i++)})),this.morphTargetActiveCount=Math.min(i,t.Config3D.maxMorphTargetCount),t.LayaGL.renderEngine.getCapable(t.RenderCapable.Texture3D)&&(a.setInt(RenderableSprite3D.MorphActiveCount,this.morphTargetActiveCount),a.setBuffer(RenderableSprite3D.MorphActiceTargets,this.morphTargetActiveIndex),a.setBuffer(RenderableSprite3D.MorphActiveWeights,this.morphTargetActiveWeight)),this._morphWeightChange=!1}}_setBelongScene(e){super._setBelongScene(e),t.Stat.meshRenderNode++}_setUnBelongScene(){super._setUnBelongScene(),t.Stat.meshRenderNode--}_changeMorphData(e){let a=this._baseRenderNode.shaderData,r=this._mesh;let n=t.Config3D.maxMorphTargetCount;if(this.morphTargetActiveIndex=new Float32Array(n),this.morphTargetActiveWeight=new Float32Array(n),t.LayaGL.renderEngine.getCapable(t.RenderCapable.Texture3D)){if(r&&r.morphTargetData){let e=r.morphTargetData;a.removeDefine(RenderableSprite3D.SHADERDEFINE_MORPHTARGET),e.vertexDec._vertexElements.forEach((e=>{switch(e.elementUsage){case t.VertexMesh.MESH_POSITION0:a.removeDefine(RenderableSprite3D.SHADERDEFINE_MORPHTARGET_POSITION);break;case t.VertexMesh.MESH_NORMAL0:a.removeDefine(RenderableSprite3D.SHADERDEFINE_MORPHTARGET_NORMAL);break;case t.VertexMesh.MESH_TANGENT0:a.removeDefine(RenderableSprite3D.SHADERDEFINE_MORPHTARGET_TANGENT)}}))}if(e&&e.morphTargetData){let r=e.morphTargetData;a.addDefine(RenderableSprite3D.SHADERDEFINE_MORPHTARGET),r.vertexDec._vertexElements.forEach((e=>{switch(e.elementUsage){case t.VertexMesh.MESH_POSITION0:a.addDefine(RenderableSprite3D.SHADERDEFINE_MORPHTARGET_POSITION);break;case t.VertexMesh.MESH_NORMAL0:a.addDefine(RenderableSprite3D.SHADERDEFINE_MORPHTARGET_NORMAL);break;case t.VertexMesh.MESH_TANGENT0:a.addDefine(RenderableSprite3D.SHADERDEFINE_MORPHTARGET_TANGENT)}})),a.setVector(RenderableSprite3D.MorphAttriOffset,e.morphTargetData.attributeOffset),a.setTexture(RenderableSprite3D.MorphTex,e.morphTargetData.targetTexture),a.setVector(RenderableSprite3D.MorphParams,r.params),a.setBuffer(RenderableSprite3D.MorphActiceTargets,this.morphTargetActiveIndex),a.setBuffer(RenderableSprite3D.MorphActiveWeights,this.morphTargetActiveWeight)}}if(r&&r.morphTargetData&&(this.morphTargetWeight=null,this.morphtargetChannels=null,this._morphTargetValues={}),e&&e.morphTargetData){let t=e.morphTargetData,a=t.channelCount;this.morphTargetWeight=new Float32Array(t.targetCount),this.morphtargetChannels=new Array(a);for(let e=0;e<a;e++){let a=t.getMorphChannelbyIndex(e);this.morphtargetChannels[e]=a,this._morphTargetValues[a.name]=0}}}_onMeshChange(e){if(e&&this._mesh!=e){this._changeVertexDefine(e),this._changeMorphData(e),this._mesh=e,e.morphTargetData?this.geometryBounds=e.morphTargetData.bounds:this.geometryBounds=e.bounds;var t=e.subMeshCount;this._renderElements.length=t;for(var a=0;a<t;a++){var r=this._renderElements[a];if(!r){var n=this.sharedMaterials[a];r=this._renderElements[a]=this._renderElements[a]?this._renderElements[a]:this._createRenderElement(),this.owner&&r.setTransform(this.owner._transform),r.render=this,r.material=n||BlinnPhongMaterial.defaultMaterial}r.setGeometry(e.getSubMesh(a))}this.boundsChange=!0}else e||(this._renderElements.forEach,this._renderElements.forEach((e=>{e._renderElementOBJ.destroy(),e.destroy()})),this._renderElements.length=0,this._mesh=null,this._changeVertexDefine(null),this._changeMorphData(null),this.boundsChange=!1);this._setRenderElements()}_onWorldMatNeedChange(e){super._onWorldMatNeedChange(e),this._mesh||(this.boundsChange=!1)}renderUpdate(e){var t,a,r;if(this._mesh)if(this._mesh.morphTargetData&&this._applyMorphdata(),1==this._renderElements.length){this._renderElements[0]._renderElementOBJ.isRender=this._renderElements[0]._geometry._prepareRender(e),this._renderElements[0]._geometry._updateRenderParams(e);let a=null!==(t=this.sharedMaterial)&&void 0!==t?t:BlinnPhongMaterial.defaultMaterial;this._renderElements[0]._renderElementOBJ.materialRenderQueue=a.renderQueue,this._renderElements[0].material=this.sharedMaterial}else for(var n=0,i=this._renderElements.length;n<i;n++){this._renderElements[n]._renderElementOBJ.isRender=this._renderElements[n]._geometry._prepareRender(e),this._renderElements[n]._geometry._updateRenderParams(e);let t=null!==(a=this.sharedMaterial)&&void 0!==a?a:BlinnPhongMaterial.defaultMaterial;t=null!==(r=this.sharedMaterials[n])&&void 0!==r?r:t,this._renderElements[n].material=t,this._renderElements[n]._renderElementOBJ.materialRenderQueue=t.renderQueue}}updateMulPassRender(){const e=this.owner.getComponent(MeshFilter);if(!e)return;const t=e.sharedMesh;if(t){var a=t.subMeshCount,r=this._sharedMaterials.length;if(a>r){let e=a;this._renderElements.length=e;for(var n=0;n<e;n++){if(!(o=this._renderElements[n])){var i=this.sharedMaterials[n];(o=this._renderElements[n]=this._renderElements[n]?this._renderElements[n]:this._createRenderElement()).setTransform(this.owner._transform),o.render=this,o.material=i||BlinnPhongMaterial.defaultMaterial}o.setGeometry(t.getSubMesh(n))}}else{let e=r;this._renderElements.length=e;for(n=0;n<e;n++){var o;if(!(o=this._renderElements[n])){i=this.sharedMaterials[n];(o=this._renderElements[n]=this._renderElements[n]?this._renderElements[n]:this._createRenderElement()).setTransform(this.owner._transform),o.render=this,o.material=i||BlinnPhongMaterial.defaultMaterial}}o.setGeometry(t.getSubMesh(e%a))}}else this._renderElements.length=0;this.boundsChange=!0,this._setRenderElements()}_onDestroy(){super._onDestroy(),this._morphTargetValues=null}_cloneTo(e){super._cloneTo(e),e._onMeshChange(this._mesh),this.morphTargetWeight&&(e.morphTargetWeight=new Float32Array(this.morphTargetWeight));for(const t in this._morphTargetValues)e._morphTargetValues[t]=this._morphTargetValues[t]}}class DrawMeshCMD extends Command{constructor(){super(),this._drawRenderCMDDData=Laya3DRender.Render3DPassFactory.createDrawNodeCMDData(),this._transform=Laya3DRender.Render3DModuleDataFactory.createTransform(null),this._meshRender=new MeshRenderer}static create(e,t,a,r,n,i){var o;return(o=DrawMeshCMD._pool.length>0?DrawMeshCMD._pool.pop():new DrawMeshCMD)._matrix=t,o._transform.worldMatrix=o._matrix,o.material=a,o.subMeshIndex=r,o._subShaderIndex=n,o.mesh=e,o._commandBuffer=i,o}get subMeshIndex(){return this._subMeshIndex}set subMeshIndex(e){this._subMeshIndex=e,this._drawRenderCMDDData.subMeshIndex=e}set material(e){this._material&&this._material._removeReference(1),this._material=e,this._material&&this._material._addReference(1)}get material(){return this._material}set mesh(e){this._mesh!=e&&(this._mesh=e,this._meshRender._onMeshChange(this._mesh),this._renderElemnts=this._meshRender._renderElements,this._renderElemnts.forEach((e=>{e.material=this._material,e.setTransform(this._transform),e.renderSubShader=this._material._shader.getSubShaderAt(this._subShaderIndex),e._subShaderIndex=this._subShaderIndex})))}getRenderCMD(){return this._drawRenderCMDDData}run(){this._meshRender.sharedMaterial=this.material,this._meshRender._baseRenderNode.transform=this._transform,this._meshRender.renderUpdate(RenderContext3D._instance),this._meshRender.probReflection=RenderContext3D._instance.scene.sceneReflectionProb,this._drawRenderCMDDData.destSubShader=this.material.shader.getSubShaderAt(this._subShaderIndex),this._drawRenderCMDDData.destShaderData=this.material.shaderData,this._drawRenderCMDDData.node=this._meshRender._baseRenderNode}recover(){DrawMeshCMD._pool.push(this),super.recover(),this._material&&(this.material=null),this._mesh&&(this.mesh=null)}destroy(){super.destroy(),this._renderElemnts.forEach((e=>{e.destroy()})),this._material&&this._material._removeReference(1),this._material=null,this._renderElemnts=null,this._transform=null,this._material=null,this._matrix=null}}DrawMeshCMD._pool=[];class DrawRenderCMD extends Command{constructor(){super(),this._drawNodeCMDData=Laya3DRender.Render3DPassFactory.createDrawNodeCMDData()}static create(e,t,a,r){var n;return(n=DrawRenderCMD._pool.length>0?DrawRenderCMD._pool.pop():new DrawRenderCMD).render=e,n.material=t,n.subMeshIndex=a,n._commandBuffer=r,n}set render(e){this._drawNodeCMDData.node=e._baseRenderNode,this._render=e}get render(){return this._render}set material(e){this._material&&this._material._removeReference(1),e&&(e._addReference(1),this._drawNodeCMDData.destShaderData=e.shaderData,this._drawNodeCMDData.destSubShader=e.shader.getSubShaderAt(0)),this._material=e}get material(){return this._material}get subMeshIndex(){return this._subMeshIndex}set subMeshIndex(e){this._subMeshIndex=e,this._drawNodeCMDData.subMeshIndex=e}getRenderCMD(){return this._drawNodeCMDData}run(){this.render&&(this.render.renderUpdate(this._context),this._prematerial=this.render.sharedMaterials[this.subMeshIndex])}recover(){DrawRenderCMD._pool.push(this),super.recover(),this.material=null,this.render.sharedMaterials[this.subMeshIndex]=this._prematerial,this._render=null,this.subMeshIndex=0}destroy(){super.destroy(),this.material=null}}DrawRenderCMD._pool=[];class SetGlobalShaderDataCMD extends Command{static create(e,a,r,n){let i=RenderContext3D._instance,o=i._contextOBJ.globalShaderData;return o||(o=i._contextOBJ.globalShaderData=t.LayaGL.renderDeviceFactory.createShaderData(null)),SetShaderDataCMD.create(o,e,a,r,n)}}class MeshInstanceGeometry extends GeometryElement{constructor(e){super(e?e._geometryElementOBj.mode:t.MeshTopology.Triangles,t.DrawType.DrawElementInstance),this._subMesh=e,e&&(this.indexFormat=e._mesh.indexFormat)}set subMesh(e){this._subMesh=e,e&&(this.indexFormat=e._mesh.indexFormat),this.mode=e._geometryElementOBj.mode}get subMesh(){return this._subMesh}_updateRenderParams(e){this.clearRenderParams(),this.setDrawElemenParams(this._subMesh.indexCount,2*this._subMesh._indexStart)}}class DrawMeshInstancedCMD extends Command{constructor(){super(),this._subShaderIndex=0,this._transform=Laya3DRender.Render3DModuleDataFactory.createTransform(null),this._instanceRenderElementArray=[],this._instanceGeometryArray=[],this._instanceWorldMatrixData=new Float32Array(16*DrawMeshInstancedCMD.maxInstanceCount),this._instanceWorldMatrixBuffer=Laya3DRender.renderOBJCreate.createVertexBuffer3D(4*this._instanceWorldMatrixData.length,t.BufferUsage.Dynamic,!1),this._instanceWorldMatrixBuffer.vertexDeclaration=t.VertexMesh.instanceWorldMatrixDeclaration,this._instanceWorldMatrixBuffer.instanceBuffer=!0,this._render=new BaseRender,this._render._baseRenderNode.shaderData.addDefine(MeshSprite3DShaderDeclaration.SHADERDEFINE_GPU_INSTANCE),this._instanceBufferState=new t.BufferState,this._drawElementCMDData=Laya3DRender.Render3DPassFactory.createDrawElementCMDData()}static create(e,t,a,r,n,i,o,s){var l;if(a&&a.length>DrawMeshInstancedCMD.maxInstanceCount||o>DrawMeshInstancedCMD.maxInstanceCount)throw"the number of renderings exceeds the maximum number of merges";return(l=DrawMeshInstancedCMD._pool.length>0?DrawMeshInstancedCMD._pool.pop():new DrawMeshInstancedCMD)._matrixs=a,l.material=r,l._subMeshIndex=t,l._subShaderIndex=n,l._commandBuffer=s,l._instanceProperty=i,l._drawnums=o,l.mesh=e,a&&l._updateWorldMatrixBuffer(),l._setInstanceBuffer(),l}set material(e){this._material&&this._material._removeReference(1),this._material=e,this._material&&this._material._addReference(1)}get bufferState(){return this._instanceWorldMatrixBuffer}set mesh(e){if(this._mesh==e)return;if(BaseRender.changeVertexDefine(this._mesh,e,this._render._baseRenderNode.shaderData),this._mesh=e,!this._mesh)return;let t=this._mesh._subMeshes;if(-1==this._subMeshIndex)for(let e=0,a=t.length;e<a;e++){let a=this._instanceRenderElementArray[e]=this._instanceRenderElementArray[e]?this._instanceRenderElementArray[e]:new RenderElement,r=this._instanceGeometryArray[e]=this._instanceGeometryArray[e]?this._instanceGeometryArray[e]:new MeshInstanceGeometry(t[e]);a.setGeometry(r),a.transform=this._transform,a.material=this._material,a._subShaderIndex=this._subShaderIndex,a.render=this._render,a._renderElementOBJ.owner=this._render._baseRenderNode,r.bufferState=this._instanceBufferState,r.instanceCount=this._drawnums}else{let e=this._instanceRenderElementArray[0]=this._instanceRenderElementArray[0]?this._instanceRenderElementArray[0]:new RenderElement,a=this._instanceGeometryArray[0]=this._instanceGeometryArray[0]?this._instanceGeometryArray[0]:new MeshInstanceGeometry(t[this._subMeshIndex]);e.setGeometry(a),e.transform=this._transform,e.material=this._material,e.render=this._render,a.bufferState=this._instanceBufferState,a.instanceCount=this._drawnums,e._renderElementOBJ.owner=this._render._baseRenderNode}}get mesh(){return this._mesh}_setInstanceBuffer(){let e=this._instanceBufferState,t=[];this._mesh._bufferState._vertexBuffers.forEach((e=>{t.push(e)})),t.push(this._instanceWorldMatrixBuffer);let a=this._instanceProperty._propertyMap;for(let e in a)t.push(a[e]._vertexBuffer);e.applyState(t,this._mesh._indexBuffer),this._instanceGeometryArray.forEach((t=>{t.bufferState=e}))}_updateWorldMatrixBuffer(){let e=this._instanceWorldMatrixData,t=this._drawnums;for(let a=0;a<t;a++)e.set(this._matrixs[a].elements,16*a);this._instanceWorldMatrixBuffer.setData(e.buffer,0,0,64*t)}setWorldMatrix(e){if(e.length<this._drawnums)throw"worldMatrixArray length is less then drawnums";this._matrixs=e,this._matrixs&&this._updateWorldMatrixBuffer()}setDrawNums(e){if(this._matrixs&&this._matrixs.length<e)throw"worldMatrixArray length is less then drawnums";this._drawnums=e;let t=this._mesh._subMeshes;if(-1==this._subMeshIndex)for(let e=0,a=t.length;e<a;e++){(this._instanceGeometryArray[e]?this._instanceGeometryArray[e]:new MeshInstanceGeometry(t[e])).instanceCount=this._drawnums}else{(this._instanceGeometryArray[0]?this._instanceGeometryArray[0]:new MeshInstanceGeometry(t[0])).instanceCount=this._drawnums}this._matrixs&&this._updateWorldMatrixBuffer()}getRenderCMD(){return this._drawElementCMDData}renderUpdateElement(e,t){let a=e._renderElementOBJ;return a.isRender=e._geometry._prepareRender(t),e._geometry._updateRenderParams(t),a}run(){let e=RenderContext3D._instance;e._contextOBJ.cameraUpdateMask=Camera._updateMark;let t=this._instanceProperty._propertyMap;for(let e in t)t[e].updateVertexBufferData(this._drawnums);let a=this.mesh._subMeshes;if(-1==this._subMeshIndex){let t=[];for(let r=0,n=a.length;r<n;r++){let a=this._instanceRenderElementArray[r],n=this.renderUpdateElement(a,e);t.push(n)}this._drawElementCMDData.setRenderelements(t)}else{let t=this._instanceRenderElementArray[this._subMeshIndex],a=this.renderUpdateElement(t,e);this._drawElementCMDData.setRenderelements([a])}}recover(){DrawMeshInstancedCMD._pool.push(this),super.recover(),this._material&&this._material._removeReference(1),this._material=null,this._instanceBufferState.destroy(),this._instanceBufferState=null,delete this._instanceRenderElementArray,this._instanceRenderElementArray=[],delete this._instanceGeometryArray,this._instanceGeometryArray=[],this.mesh=null}destroy(){super.destroy(),this._material&&this._material._removeReference(1),this._material=null,this._instanceBufferState.destroy(),this._instanceBufferState=null,delete this._instanceRenderElementArray,this._instanceRenderElementArray=[],delete this._instanceGeometryArray,this._instanceGeometryArray=[],this.mesh=null}}DrawMeshInstancedCMD._pool=[],DrawMeshInstancedCMD.maxInstanceCount=1024;class SetRTCMD extends Command{constructor(){super(),this._renderTexture=null,this._setRenderTargetCMD=Laya3DRender.Render3DPassFactory.createSetRenderTargetCMD()}static create(e,a,r,n,i,o=1,s=0,l){var h;(h=SetRTCMD._pool.length>0?SetRTCMD._pool.pop():new SetRTCMD).renderTexture=e;let d=0;return a&&(d|=t.RenderClearFlag.Color,h._setRenderTargetCMD.clearColorValue=i),r&&(d|=t.RenderClearFlag.Depth,h._setRenderTargetCMD.clearDepthValue=o),s&&(d|=t.RenderClearFlag.Stencil,h._setRenderTargetCMD.clearStencilValue=s),h._setRenderTargetCMD.clearFlag=d,h}get renderTexture(){return this._renderTexture}set renderTexture(e){this._renderTexture=e,this._setRenderTargetCMD.rt=e._renderTarget}getRenderCMD(){return this._setRenderTargetCMD}recover(){SetRTCMD._pool.push(this),this._renderTexture=null}}SetRTCMD._pool=[];class CommandBuffer{constructor(e=null,t=!1){this._shadow=!1,this._camera=null,this._commands=[],this._renderCMDs=[],this._name=e,this._shadow=t}get name(){return this._name}get casterShadow(){return this._shadow}set context(e){this._context=e}get context(){return this._context}_apply(e=!1){for(var a=0,r=this._commands.length;a<r;a++){let e=this._commands[a];e.run&&e.run()}e&&this.context._contextOBJ.runCMDList(this._renderCMDs),t.Stat.cmdDrawCall+=this._renderCMDs.length}_applyOne(){if(this._commands.length){var e=this._commands.shift();e.run&&e.run(),e.getRenderCMD&&this.context._contextOBJ.runOneCMD(this._renderCMDs.shift()),e.recover()}return this._commands.length>0}getCommandsSize(){return this._commands.length}setShaderDataTexture(t,a,r){let n=SetShaderDataCMD.create(t,a,r,e.ShaderDataType.Texture2D,this);this._commands.push(n),n.getRenderCMD&&this._renderCMDs.push(n.getRenderCMD())}setGlobalTexture(t,a){let r=SetGlobalShaderDataCMD.create(t,a,e.ShaderDataType.Texture2D,this);this._commands.push(r),r.getRenderCMD&&this._renderCMDs.push(r.getRenderCMD())}setShaderDataColor(t,a,r){let n=SetShaderDataCMD.create(t,a,r,e.ShaderDataType.Color,this);this._commands.push(n),n.getRenderCMD&&this._renderCMDs.push(n.getRenderCMD())}setGlobalColor(t,a){let r=SetGlobalShaderDataCMD.create(t,a,e.ShaderDataType.Color,this);this._commands.push(r),r.getRenderCMD&&this._renderCMDs.push(r.getRenderCMD())}setShaderDataVector(t,a,r){let n=SetShaderDataCMD.create(t,a,r,e.ShaderDataType.Vector4,this);this._commands.push(n),n.getRenderCMD&&this._renderCMDs.push(n.getRenderCMD())}setGlobalVector(t,a){let r=SetGlobalShaderDataCMD.create(t,a,e.ShaderDataType.Vector4,this);this._commands.push(r),r.getRenderCMD&&this._renderCMDs.push(r.getRenderCMD())}setShaderDataVector3(t,a,r){let n=SetShaderDataCMD.create(t,a,r,e.ShaderDataType.Vector3,this);this._commands.push(n),n.getRenderCMD&&this._renderCMDs.push(n.getRenderCMD())}setGlobalVector3(t,a){let r=SetGlobalShaderDataCMD.create(t,a,e.ShaderDataType.Vector3,this);this._commands.push(r),r.getRenderCMD&&this._renderCMDs.push(r.getRenderCMD())}setShaderDataVector2(t,a,r){let n=SetShaderDataCMD.create(t,a,r,e.ShaderDataType.Vector2,this);this._commands.push(n),n.getRenderCMD&&this._renderCMDs.push(n.getRenderCMD())}setGlobalVector2(t,a){let r=SetGlobalShaderDataCMD.create(t,a,e.ShaderDataType.Vector2,this);this._commands.push(r),r.getRenderCMD&&this._renderCMDs.push(r.getRenderCMD())}setShaderDataNumber(t,a,r){let n=SetShaderDataCMD.create(t,a,r,e.ShaderDataType.Float,this);this._commands.push(n),n.getRenderCMD&&this._renderCMDs.push(n.getRenderCMD())}setGlobalNumber(t,a){let r=SetGlobalShaderDataCMD.create(t,a,e.ShaderDataType.Float,this);this._commands.push(r),r.getRenderCMD&&this._renderCMDs.push(r.getRenderCMD())}setShaderDataInt(t,a,r){let n=SetShaderDataCMD.create(t,a,r,e.ShaderDataType.Int,this);this._commands.push(n),n.getRenderCMD&&this._renderCMDs.push(n.getRenderCMD())}setGlobalInt(t,a){let r=SetGlobalShaderDataCMD.create(t,a,e.ShaderDataType.Int,this);this._commands.push(r),r.getRenderCMD&&this._renderCMDs.push(r.getRenderCMD())}setShaderDataMatrix(t,a,r){let n=SetShaderDataCMD.create(t,a,r,e.ShaderDataType.Matrix4x4,this);this._commands.push(n),n.getRenderCMD&&this._renderCMDs.push(n.getRenderCMD())}setShaderDefine(e,t,a){let r=SetDefineCMD.create(e,t,a,this);this._commands.push(r),r.getRenderCMD&&this._renderCMDs.push(r.getRenderCMD())}setGlobalMatrix(t,a){let r=SetGlobalShaderDataCMD.create(t,a,e.ShaderDataType.Matrix4x4,this);this._commands.push(r),r.getRenderCMD&&this._renderCMDs.push(r.getRenderCMD())}blitScreenQuad(e,t,a=null,r=null,n=null,i=0){let o=BlitScreenQuadCMD.create(e,t,a,r,n,i,BlitScreenQuadCMD._SCREENTYPE_QUAD,this);this._commands.push(o),o.getRenderCMD&&this._renderCMDs.push(o.getRenderCMD())}blitScreenQuadByMaterial(e,t,a=null,r=null,n=0){var i,o;r&&(i=r._shader,o=r.shaderData);let s=BlitScreenQuadCMD.create(e,t,a,i,o,n,BlitScreenQuadCMD._SCREENTYPE_QUAD,this);this._commands.push(s),s.getRenderCMD&&this._renderCMDs.push(s.getRenderCMD())}blitScreenTriangle(e,t,a=null,r=null,n=null,i=0){let o=BlitScreenQuadCMD.create(e,t,a,r,n,i,BlitScreenQuadCMD._SCREENTYPE_TRIANGLE,this);this._commands.push(o),o.getRenderCMD&&this._renderCMDs.push(o.getRenderCMD())}setRenderTarget(e,a,r,n=t.Color.BLACK,i=1){let o=SetRTCMD.create(e,a,r,!1,n,i,0,this);this._commands.push(o),o.getRenderCMD&&this._renderCMDs.push(o.getRenderCMD())}drawMesh(e,t,a,r,n){let i=DrawMeshCMD.create(e,t,a,r,n,this);this._commands.push(i),i.getRenderCMD&&this._renderCMDs.push(i.getRenderCMD())}drawRender(e,t,a=0){let r=DrawRenderCMD.create(e,t,a,this);this._commands.push(r),r.getRenderCMD&&this._renderCMDs.push(r.getRenderCMD())}drawMeshInstance(e,a=0,r,n,i=0,o,s){if(!t.LayaGL.renderEngine.getCapable(t.RenderCapable.DrawElement_Instance))return null;var l=DrawMeshInstancedCMD.create(e,a,r,n,i,o,s,this);return this._commands.push(l),l.getRenderCMD&&this._renderCMDs.push(l.getRenderCMD()),l}addCustomCMD(e){e._commandBuffer=this,this._commands.push(e),e.getRenderCMD&&this._renderCMDs.push(e.getRenderCMD())}clear(){for(var e=0,t=this._commands.length;e<t;e++)this._commands[e].recover();this._commands.length=0,this._renderCMDs.length=0}}class ClusterData{constructor(){this.updateMark=-1,this.pointLightCount=0,this.spotLightCount=0,this.indices=[]}}class Cluster{constructor(e,a,r,n){this._updateMark=0,this._depthSliceParam=new t.Vector2,this._xSlices=e,this._ySlices=a,this._zSlices=r;var i=e*a,o=r*(1+Math.ceil(n/4));this._clusterTexture=Utils3D._createFloatTextureBuffer(i,o),this._clusterTexture.lock=!0,this._clusterPixels=new Float32Array(i*o*4);for(var s=new Array(this._zSlices),l=0;l<this._zSlices;l++){s[l]=new Array(this._ySlices);for(var h=0;h<this._ySlices;h++){s[l][h]=new Array(this._xSlices);for(var d=0;d<this._xSlices;d++)s[l][h][d]=new ClusterData}}this._clusterDatas=s}_placePointLightToClusters(e,t){for(var a=this._clusterDatas,r=this._updateMark,n=t.zMin,i=t.zMax;n<i;n++)for(var o=t.yMin,s=t.yMax;o<s;o++)for(var l=t.xMin,h=t.xMax;l<h;l++){var d=a[n][o][l];d.updateMark!=r&&(d.pointLightCount=0,d.spotLightCount=0,d.updateMark=r);var c=d.indices,u=d.pointLightCount++;u<c.length?c[u]=e:c.push(e)}}_placeSpotLightToClusters(e,t){for(var a=this._clusterDatas,r=this._updateMark,n=t.zMin,i=t.zMax;n<i;n++)for(var o=t.yMin,s=t.yMax;o<s;o++)for(var l=t.xMin,h=t.xMax;l<h;l++){var d=a[n][o][l];d.updateMark!=r&&(d.pointLightCount=0,d.spotLightCount=0,d.updateMark=r);var c=d.indices,u=d.pointLightCount+d.spotLightCount++;u<c.length?c[u]=e:c.push(e)}}_insertConePlane(e,a,r,n,i){var o=Cluster._tempVector36,s=Cluster._tempVector37;t.Vector3.cross(i,a,o),t.Vector3.cross(o,a,s),t.Vector3.normalize(s,s);var l=r*Math.tan(n),h=e.x+r*a.x+l*s.x,d=e.y+r*a.y+l*s.y,c=e.z+r*a.z+l*s.z;return h*i.x+d*i.y+c*i.z<=0||e.x*i.x+e.y*i.y+e.z*i.z<=0}_shrinkSphereLightZPerspective(e,t,a,r,n){var i=a.z,o=i-r,s=i+r;if(o>t||s<=e)return!1;var l=this._depthSliceParam;return n.zMin=Math.floor(Math.log2(Math.max(o,e))*l.x-l.y),n.zMax=Math.min(Math.ceil(Math.log2(s)*l.x-l.y),this._zSlices),!0}_shrinkSpotLightZPerspective(e,t,a,r,n,i,o){var s=r.x,l=r.y,h=r.z,d=Math.tan(i)*n,c=a.x,u=a.y,_=a.z,m=s-c,f=l-u,S=h-_,g=m*m+f*f+S*S,p=Math.sqrt(1-S*S/g),D=Math.max(Math.min(_,h-p*d),a.z-n),T=Math.min(Math.max(_,h+p*d),a.z+n);if(D>t||T<=e)return!1;var E=this._depthSliceParam;return o.zMin=Math.floor(Math.log2(Math.max(D,e))*E.x-E.y),o.zMax=Math.min(Math.ceil(Math.log2(T)*E.x-E.y),this._zSlices),!0}_shrinkSphereLightByBoundOrth(e,t,a,r,n,i,o){var s=n.z,l=s-i,h=s+i;if(l>r||h<=a)return!1;var d=n.x,c=d-i,u=d+i;if(c>e||u<=-e)return!1;var _=n.y,m=_-i,f=_+i;if(m>t||f<=-t)return!1;var S=this._xSlices,g=this._ySlices,p=this._depthSliceParam,D=2*e/S,T=2*t/g;return o.xMin=Math.max(Math.floor((c+e)/D),0),o.xMax=Math.min(Math.ceil((u+e)/D),S),o.yMin=Math.max(Math.floor((t-f)/T),0),o.yMax=Math.min(Math.ceil((t-m)/T),g),o.zMin=Math.floor(Math.log2(Math.max(l,a))*p.x-p.y),o.zMax=Math.min(Math.ceil(Math.log2(h)*p.x-p.y),this._zSlices),!0}_shrinkSpotLightByBoundOrth(e,t,a,r,n,i,o,s,l){var h=i.x,d=i.y,c=i.z,u=Math.tan(s)*o,_=n.x,m=n.y,f=n.z,S=h-_,g=d-m,p=c-f,D=S*S+g*g+p*p,T=Math.sqrt(1-p*p/D),E=Math.max(Math.min(f,c-T*u),n.z-o),x=Math.min(Math.max(f,c+T*u),n.z+o);if(E>r||x<=a)return!1;var M=Math.sqrt(1-S*S/D),R=Math.max(Math.min(_,h-M*u),n.x-o),A=Math.min(Math.max(_,h+M*u),n.x+o);if(R>e||A<=-e)return!1;var C=Math.sqrt(1-g*g/D),y=Math.max(Math.min(m,d-C*u),n.y-o),v=Math.min(Math.max(m,d+C*u),n.y+o);if(y>t||v<=-t)return!1;var I=this._xSlices,L=this._ySlices,P=this._depthSliceParam,B=2*e/I,O=2*t/L;return l.xMin=Math.max(Math.floor((R+e)/B),0),l.xMax=Math.min(Math.ceil((A+e)/B),I),l.yMin=Math.max(Math.floor((t-v)/O),0),l.yMax=Math.min(Math.ceil((t-y)/O),L),l.zMin=Math.floor(Math.log2(Math.max(E,a))*P.x-P.y),l.zMax=Math.min(Math.ceil(Math.log2(x)*P.x-P.y),this._zSlices),!0}_shrinkXYByRadiusPerspective(e,t,a,r,n){var i,o,s,l,h,d=e.x,c=e.y,u=e.z,_=this._ySlices+1;for(h=0;h<_;h++){if(c*(m=n[h]).y+u*m.z<t){o=Math.max(0,h-1);break}}if(h==_)return!1;for(l=this._ySlices,h=o+1;h<_;h++){if(c*(m=n[h]).y+u*m.z<=-t){l=Math.max(0,h);break}}for(_=this._xSlices+1,h=0;h<_;h++){if(d*(m=r[h]).x+u*m.z<t){i=Math.max(0,h-1);break}}for(s=this._xSlices,h=i+1;h<_;h++){var m;if(d*(m=r[h]).x+u*m.z<=-t){s=Math.max(0,h);break}}return a.xMin=i,a.xMax=s,a.yMin=o,a.yMax=l,!0}_shrinkSpotXYByConePerspective(e,t,a,r,n,i,o){for(var s,l,h,d,c=Cluster._tempVector32,u=n.yMax+1,_=n.yMin+1;_<u;_++)if(this._insertConePlane(e,t,a,r,o[_])){l=Math.max(0,_-1);break}d=n.yMax;for(_=l+1;_<u;_++){var m=o[_];if(c.setValue(0,-m.y,-m.z),!this._insertConePlane(e,t,a,r,c)){d=Math.max(0,_);break}}u=n.xMax+1;for(_=n.xMin+1;_<u;_++)if(this._insertConePlane(e,t,a,r,i[_])){s=Math.max(0,_-1);break}h=n.xMax;for(_=s+1;_<u;_++){m=i[_];if(c.setValue(-m.x,0,-m.z),!this._insertConePlane(e,t,a,r,c)){h=Math.max(0,_);break}}n.xMin=s,n.xMax=h,n.yMin=l,n.yMax=d}_updatePointLightPerspective(e,a,r,n,i,o,s){var l=Cluster._tempLightBound,h=Cluster._tempVector30;t.Vector3.transformV3ToV3(n.owner._transform.position,r,h),h.z*=-1,this._shrinkSphereLightZPerspective(e,a,h,n.range,l)&&this._shrinkXYByRadiusPerspective(h,n.range,l,o,s)&&this._placePointLightToClusters(i,l)}_updateSpotLightPerspective(e,a,r,n,i,o,s){var l=Cluster._tempLightBound,h=Cluster._tempVector30,d=Cluster._tempVector31,c=Cluster._tempVector34,u=n.owner._transform.position,_=n.range;n.owner._transform.worldMatrix.getForward(d),t.Vector3.normalize(d,d),t.Vector3.scale(d,_,c),t.Vector3.add(u,c,c),t.Vector3.transformV3ToV3(u,r,h),t.Vector3.transformV3ToV3(c,r,c),h.z*=-1,c.z*=-1;var m=n.spotAngle/2*Math.PI/180;if(this._shrinkSpotLightZPerspective(e,a,h,c,_,m,l)&&this._shrinkXYByRadiusPerspective(h,_,l,o,s)){var f=Cluster._tempVector33;f.x=c.x-h.x,f.y=c.y-h.y,f.z=c.z-h.z,t.Vector3.normalize(f,f),this._shrinkSpotXYByConePerspective(h,f,_,m,l,o,s),this._placeSpotLightToClusters(i,l)}}_updatePointLightOrth(e,a,r,n,i,o,s){var l=Cluster._tempLightBound,h=Cluster._tempVector30;t.Vector3.transformV3ToV3(o.owner._transform.position,i,h),h.z*=-1,this._shrinkSphereLightByBoundOrth(e,a,r,n,h,o.range,l)&&this._placePointLightToClusters(s,l)}_updateSpotLightOrth(e,a,r,n,i,o,s){var l=Cluster._tempLightBound,h=Cluster._tempVector30,d=Cluster._tempVector31,c=Cluster._tempVector34,u=o.owner._transform.position,_=o.range;o.owner._transform.worldMatrix.getForward(d),t.Vector3.normalize(d,d),t.Vector3.scale(d,_,c),t.Vector3.add(u,c,c),t.Vector3.transformV3ToV3(u,i,h),t.Vector3.transformV3ToV3(c,i,c),h.z*=-1,c.z*=-1;var m=o.spotAngle/2*Math.PI/180;this._shrinkSpotLightByBoundOrth(e,a,r,n,h,c,_,m,l)&&this._placeSpotLightToClusters(s,l)}update(e,a){this._updateMark++;var r=e.nearPlane;this._depthSliceParam.x=t.Config3D.lightClusterCount.z/Math.log2(e.farPlane/r),this._depthSliceParam.y=Math.log2(r)*this._depthSliceParam.x;var n=e.nearPlane,i=e.farPlane,o=e.viewMatrix,s=a._directionLights._length,l=a._pointLights,h=l._length,d=l._elements,c=a._spotLights,u=c._length,_=c._elements;if(e.orthographic){for(var m=e.orthographicVerticalSize/2,f=m*e.aspectRatio,S=0;S<h;S++,s++)this._updatePointLightOrth(f,m,n,i,o,d[S],s);for(S=0;S<u;S++,s++)this._updateSpotLightOrth(f,m,n,i,o,_[S],s)}else{e._updateClusterPlaneXY();var g=e._clusterXPlanes,p=e._clusterYPlanes;for(S=0;S<h;S++,s++)this._updatePointLightPerspective(n,i,o,d[S],s,g,p);for(S=0;S<u;S++,s++)this._updateSpotLightPerspective(n,i,o,_[S],s,g,p)}if(h+u>0){for(var D=this._xSlices,T=this._ySlices,E=this._zSlices,x=D*T*4,M=x*E,R=this._clusterPixels,A=R.length,C=this._clusterDatas,y=this._updateMark,v=!0,I=0;I<E;I++)for(var L=0;L<T;L++)for(var P=0;P<D;P++){var B=C[I][L][P],O=4*(P+L*D+I*D*T);if(B.updateMark!==y)R[O]=0,R[O+1]=0;else if(v){var V=B.indices,w=B.pointLightCount,b=B.spotLightCount,N=w+b;if(M+N<A){R[O]=w,R[O+1]=b,R[O+2]=Math.floor(M/x),R[O+3]=M%x;for(S=0;S<N;S++)R[M++]=V[S]}else{N=A-(M+N),w=Math.min(w,N),R[O]=w,R[O+1]=Math.min(b,N-w),R[O+2]=Math.floor(M/x),R[O+3]=M%x;for(S=0;S<N;S++)R[M++]=V[S];v=!1}}}var F=this._clusterTexture.width;this._clusterTexture.setSubPixelsData(0,0,F,Math.ceil(M/(4*F)),R,0,!1,!1,!1)}}}Cluster._tempVector30=new t.Vector3,Cluster._tempVector31=new t.Vector3,Cluster._tempVector32=new t.Vector3,Cluster._tempVector33=new t.Vector3,Cluster._tempVector34=new t.Vector3,Cluster._tempVector35=new t.Vector3,Cluster._tempVector36=new t.Vector3,Cluster._tempVector37=new t.Vector3,Cluster._tempLightBound=new class{};class PhysicsSettings{constructor(){this.flags=0,this.maxSubSteps=1,this.fixedTimeStep=1/60,this.enableCCD=!1,this.ccdThreshold=1e-4,this.ccdSphereRadius=1e-4}}class LightQueue{constructor(){this._length=0,this._elements=[]}add(e){let t=this._elements.indexOf(e);-1!=t&&t<this._length||(this._length===this._elements.length?this._elements.push(e):this._elements[this._length]=e,this._length++)}remove(e){var t=this._elements.indexOf(e);if(-1!=t&&(this._length--,t!==this._length)){var a=this._elements[this._length];this._elements[t]=a}}shift(){return this._length--,this._elements.shift()}getBrightestLight(){for(var e,t=-1,a=this._elements,r=0;r<this._length;r++){var n=a[r]._intensity;t<n&&(t=n,e=r)}return e}normalLightOrdering(e){var t=this._elements[0];this._elements[0]=this._elements[e],this._elements[e]=t}}class AlternateLightQueue extends LightQueue{remove(e){var t=this._elements.indexOf(e);this._elements.splice(t,1),this._length--}}class Lightmap{constructor(){this._dataModule=Laya3DRender.Render3DModuleDataFactory.createLightmapData()}get lightmapColor(){return this._lightmapColor}set lightmapColor(e){this._lightmapColor!=e&&(this._lightmapColor&&this._lightmapColor._removeReference(),this._lightmapColor=e,e?(e._addReference(),this._dataModule.lightmapColor=e._texture):this._dataModule.lightmapColor=null)}get lightmapDirection(){return this._lightmapDirection}set lightmapDirection(e){this._lightmapDirection!=e&&(this._lightmapDirection&&this._lightmapDirection._removeReference(),this._lightmapDirection=e,e?(e._addReference(),this._dataModule.lightmapDirection=e._texture):this._dataModule.lightmapDirection=null)}}Lightmap.ApplyLightmapEvent="ApplyLightmap";class Scene3DShaderDeclaration{}e.ShadowCascadesMode=void 0,(f=e.ShadowCascadesMode||(e.ShadowCascadesMode={}))[f.NoCascades=0]="NoCascades",f[f.TwoCascades=1]="TwoCascades",f[f.FourCascades=2]="FourCascades",e.ShadowMode=void 0,(S=e.ShadowMode||(e.ShadowMode={}))[S.None=0]="None",S[S.Hard=1]="Hard",S[S.SoftLow=2]="SoftLow",S[S.SoftHigh=3]="SoftHigh",e.LightType=void 0,(g=e.LightType||(e.LightType={}))[g.Directional=0]="Directional",g[g.Spot=1]="Spot",g[g.Point=2]="Point",g[g.Area=3]="Area",e.LightMode=void 0,(p=e.LightMode||(e.LightMode={}))[p.mix=0]="mix",p[p.realTime=1]="realTime",p[p.bakeOnly=2]="bakeOnly";class Light extends t.Component{constructor(){super(),this._shadowMode=e.ShadowMode.None,this._isAlternate=!1,this._lightWoldMatrix=new t.Matrix4x4,this._creatModuleData(),this.runInEditor=!0,this._intensity=1,this._intensityColor=new t.Vector3,this.color=new t.Color(1,1,1,1),this._lightmapBakedType=e.LightMode.realTime,this.shadowResolution=2048,this.shadowDistance=50,this.shadowDepthBias=1,this.shadowNormalBias=1,this.shadowNearPlane=.1,this.shadowStrength=1,this.shadowMode=e.ShadowMode.None}get intensity(){return this._intensity}set intensity(e){this._intensity=e}get shadowMode(){return this._dataModule.shadowMode}set shadowMode(e){this._dataModule.shadowMode=e}get shadowDistance(){return this._dataModule.shadowDistance}set shadowDistance(e){this._dataModule.shadowDistance=e}get shadowResolution(){return this._dataModule.shadowResolution}set shadowResolution(e){this._dataModule.shadowResolution=e}get shadowDepthBias(){return this._dataModule.shadowDepthBias}set shadowDepthBias(e){this._dataModule.shadowDepthBias=e}get shadowNormalBias(){return this._dataModule.shadowNormalBias}set shadowNormalBias(e){this._dataModule.shadowNormalBias=e}get shadowStrength(){return this._dataModule.shadowStrength}set shadowStrength(e){this._dataModule.shadowStrength=e}get shadowNearPlane(){return this._dataModule.shadowNearPlane}set shadowNearPlane(e){this._dataModule.shadowNearPlane=e}get lightmapBakedType(){return this._lightmapBakedType}set lightmapBakedType(t){let a=this._lightmapBakedType;this._lightmapBakedType!==t&&(this._lightmapBakedType=t,this._enabled&&(t==e.LightMode.bakeOnly?this._removeFromScene():a==e.LightMode.bakeOnly&&this._addToScene()))}get lightWorldMatrix(){var e=this.owner.transform.position,a=this.owner.transform.rotation;return t.Matrix4x4.createAffineTransformation(e,a,t.Vector3.ONE,this._lightWoldMatrix),this._lightWoldMatrix}get lightType(){return this._lightType}_creatModuleData(){}_setOwner(e){super._setOwner(e),this._dataModule.transform=this.owner.transform}_getRenderDataModule(){return this._dataModule}_parse(e,t){super._parse(e,t);var a=e.color;this.color.r=a[0],this.color.g=a[1],this.color.b=a[2],this.intensity=e.intensity,this.lightmapBakedType=e.lightmapBakedType}_cloneTo(e){super._cloneTo(e);var t=e;t.color=this.color.clone(),t.intensity=this.intensity,t.lightmapBakedType=this.lightmapBakedType}_addToScene(){var e=this.owner.scene,a=t.Config3D.maxLightCount;e._lightCount<a?(e._lightCount++,this._addToLightQueue(),this._isAlternate=!1):(e._alternateLights.add(this),this._isAlternate=!0,console.warn("LightSprite:light count has large than maxLightCount,the latest added light will be ignore."))}_removeFromScene(){var e=this.owner._scene;if(e)if(this._isAlternate)e._alternateLights.remove(this);else if(e._lightCount--,this._removeFromLightQueue(),e._alternateLights._length>0){var t=e._alternateLights.shift();t._addToLightQueue(),t._isAlternate=!1,e._lightCount++}}_addToLightQueue(){}_removeFromLightQueue(){}_onEnable(){this.lightmapBakedType!==e.LightMode.bakeOnly&&this._addToScene()}_onDisable(){this.lightmapBakedType!==e.LightMode.bakeOnly&&this._removeFromScene()}_onDestroy(){}_create(){return new Light}}!function(e){e[e.Near=0]="Near",e[e.Far=1]="Far",e[e.Left=2]="Left",e[e.Right=3]="Right",e[e.Bottom=4]="Bottom",e[e.Top=5]="Top"}(D||(D={})),e.ShadowMapFormat=void 0,(T=e.ShadowMapFormat||(e.ShadowMapFormat={}))[T.bit16=0]="bit16",T[T.bit24_8=1]="bit24_8",T[T.bit32=2]="bit32";class ShadowUtils{static init(){ShadowUtils._adjustNearPlane=new Plane(new t.Vector3,0),ShadowUtils._adjustFarPlane=new Plane(new t.Vector3,0)}static supportShadow(){return t.LayaGL.renderEngine.getCapable(t.RenderCapable.RenderTextureFormat_Depth)}static getTemporaryShadowTexture(a,r,n){let i=t.RenderTargetFormat.DEPTH_16;switch(n){case e.ShadowMapFormat.bit16:i=t.RenderTargetFormat.DEPTH_16;break;case e.ShadowMapFormat.bit24_8:i=t.RenderTargetFormat.DEPTHSTENCIL_24_8;break;case e.ShadowMapFormat.bit32:i=t.RenderTargetFormat.DEPTH_32}var o=t.RenderTexture.createFromPool(a,r,i,t.RenderTargetFormat.None,!1,1);return o.compareMode=t.TextureCompareMode.LESS,o.filterMode=t.FilterMode.Bilinear,o.wrapModeU=t.WrapMode.Clamp,o.wrapModeV=t.WrapMode.Clamp,o}static getShadowBias(a,r,n,i){var o;a._lightType==e.LightType.Directional?o=2/r.elements[0]:a._lightType==e.LightType.Spot?o=Math.tan(.5*a.spotAngle*t.MathUtils3D.Deg2Rad)*a.range:(console.warn("ShadowUtils:Only spot and directional shadow casters are supported now."),o=0);var s=o/n,l=-a.shadowDepthBias*s,h=-a.shadowNormalBias*s;if(a.shadowMode==e.ShadowMode.SoftHigh){const e=2.5;l*=e,h*=e}i.setValue(l,h,0,0)}static getCameraFrustumPlanes(e,t){BoundFrustum.getPlanesFromMatrix(e,t[D.Near],t[D.Far],t[D.Left],t[D.Right],t[D.Top],t[D.Bottom])}static getFarWithRadius(e,t){return Math.sqrt(e*e/t)}static getCascadesSplitDistance(t,a,r,n,i,o,s,l){l[0]=r;var h=n-r,d=Math.tan(.5*i),c=1+d*d*(o*o+1);switch(s){case e.ShadowCascadesMode.NoCascades:l[1]=ShadowUtils.getFarWithRadius(n,c);break;case e.ShadowCascadesMode.TwoCascades:l[1]=ShadowUtils.getFarWithRadius(r+h*t,c),l[2]=ShadowUtils.getFarWithRadius(n,c);break;case e.ShadowCascadesMode.FourCascades:l[1]=ShadowUtils.getFarWithRadius(r+h*a.x,c),l[2]=ShadowUtils.getFarWithRadius(r+h*a.y,c),l[3]=ShadowUtils.getFarWithRadius(r+h*a.z,c),l[4]=ShadowUtils.getFarWithRadius(n,c)}}static applySliceTransform(e,t,a,r,n){var i=ShadowUtils._tempMatrix0.elements,o=1/t,s=1/a;i[0]=e.resolution*o,i[5]=e.resolution*s,i[12]=e.offsetX*o,i[13]=e.offsetY*s,i[1]=i[2]=i[2]=i[4]=i[6]=i[7]=i[8]=i[9]=i[11]=i[14]=0,i[10]=i[15]=1;var l=16*r;Utils3D._mulMatrixArray(i,n,l,n,l)}static getDirectionLightShadowCullPlanes(a,r,n,i,o,s){var l=ShadowUtils._frustumCorners,h=ShadowUtils._backPlaneFaces,d=ShadowUtils._frustumPlaneNeighbors,c=ShadowUtils._frustumTwoPlaneCorners,u=ShadowUtils._edgePlanePoint2,_=s.cullPlanes,m=a[D.Near],f=a[D.Far],S=a[D.Left],g=a[D.Right],p=a[D.Bottom],T=a[D.Top],E=n[r]-i,x=ShadowUtils._adjustNearPlane,M=ShadowUtils._adjustFarPlane;x.normal=m.normal,M.normal=f.normal,x.distance=m.distance-E,M.distance=Math.min(-m.distance+s.sphereCenterZ+s.splitBoundSphere.radius,f.distance),BoundFrustum.get3PlaneInterPoint(x,p,g,l[e.FrustumCorner.nearBottomRight]),BoundFrustum.get3PlaneInterPoint(x,T,g,l[e.FrustumCorner.nearTopRight]),BoundFrustum.get3PlaneInterPoint(x,T,S,l[e.FrustumCorner.nearTopLeft]),BoundFrustum.get3PlaneInterPoint(x,p,S,l[e.FrustumCorner.nearBottomLeft]),BoundFrustum.get3PlaneInterPoint(M,p,g,l[e.FrustumCorner.FarBottomRight]),BoundFrustum.get3PlaneInterPoint(M,T,g,l[e.FrustumCorner.FarTopRight]),BoundFrustum.get3PlaneInterPoint(M,T,S,l[e.FrustumCorner.FarTopLeft]),BoundFrustum.get3PlaneInterPoint(M,p,S,l[e.FrustumCorner.FarBottomLeft]);for(var R=0,A=0;A<6;A++){var C;switch(A){case D.Near:C=x;break;case D.Far:C=M;break;default:C=a[A]}t.Vector3.dot(C.normal,o)<0&&(C.cloneTo(_[R]),h[R]=A,R++)}var y=R;for(A=0;A<R;A++)for(var v=h[A],I=d[v],L=0;L<4;L++){for(var P=I[L],B=!0,O=0;O<R;O++)if(P==h[O]){B=!1;break}if(B){var V=c[v][P],w=l[V[0]],b=l[V[1]];t.Vector3.add(w,o,u),Plane.createPlaneBy3P(w,b,u,_[y++])}}s.cullPlaneCount=y}static getBoundSphereByFrustum(e,a,r,n,i,o,s){var l,h,d=Math.sqrt(1+n*n)*Math.tan(r/2),c=d*d,u=a-e,_=a+e;c>u/_?(l=a,h=a*d):(l=.5*_*(1+c),h=.5*Math.sqrt(u*u+2*(a*a+e*e)*c+_*_*c*c));var m=s.center;return s.radius=h,t.Vector3.scale(o,l,m),t.Vector3.add(i,m,m),s.center=m,l}static getMaxTileResolutionInAtlas(e,t,a){for(var r=Math.min(e,t),n=Math.floor(e/r)*Math.floor(t/r);n<a;)r=Math.floor(r>>1),n=Math.floor(e/r)*Math.floor(t/r);return r}static getDirectionalLightMatrices(e,a,r,n,i,o,s,l){var h=s.splitBoundSphere,d=h.center,c=h.radius,u=o/2,_=c*u/(u-ShadowUtils.atlasBorderSize),m=2*_,f=o/m,S=m/o,g=Math.ceil(t.Vector3.dot(d,e)*f)*S,p=Math.ceil(t.Vector3.dot(d,a)*f)*S,D=t.Vector3.dot(d,r);d.x=e.x*g+a.x*p+r.x*D,d.y=e.y*g+a.y*p+r.y*D,d.z=e.z*g+a.z*p+r.z*D,h.center=d;var T=s.position,E=s.viewMatrix,x=s.projectionMatrix,M=s.viewProjectMatrix;s.resolution=o,s.offsetX=n%2*o,s.offsetY=Math.floor(n/2)*o,t.Vector3.scale(r,c+i,T),t.Vector3.subtract(d,T,T),t.Matrix4x4.createLookAt(T,d,e,E),t.Matrix4x4.createOrthoOffCenter(-_,_,-_,_,0,2*c+i,x),t.Matrix4x4.multiply(x,E,M);let R=ShadowUtils._shadowMapScaleOffsetMatrix.elements;t.LayaGL.renderEngine._screenInvertY&&(R=ShadowUtils._shadowMapInvertScaleOffsetMatrix.elements),Utils3D._mulMatrixArray(R,M.elements,0,l,16*n)}static prepareShadowReceiverShaderValues(e,t,a,r,n,i,o){if(n.setValue(1/e,1/t,e,t),r>1){const e=16;for(var s=r*e,l=4*e;s<l;s++)i[s]=0;for(s=0;s<r;s++){var h=a[s].splitBoundSphere,d=h.center,c=h.radius,u=4*s;o[u]=d.x,o[u+1]=d.y,o[u+2]=d.z,o[u+3]=c*c}const t=4;for(s=r*t,l=4*t;s<l;s++)o[s]=0}}}ShadowUtils._tempMatrix0=new t.Matrix4x4,ShadowUtils._shadowMapScaleOffsetMatrix=new t.Matrix4x4(.5,0,0,0,0,.5,0,0,0,0,1,0,.5,.5,0,1),ShadowUtils._shadowMapInvertScaleOffsetMatrix=new t.Matrix4x4(.5,0,0,0,0,-.5,0,0,0,0,1,0,.5,.5,0,1),ShadowUtils._frustumCorners=[new t.Vector3,new t.Vector3,new t.Vector3,new t.Vector3,new t.Vector3,new t.Vector3,new t.Vector3,new t.Vector3],ShadowUtils._backPlaneFaces=new Array(5),ShadowUtils._edgePlanePoint2=new t.Vector3,ShadowUtils._frustumPlaneNeighbors=[[D.Left,D.Right,D.Top,D.Bottom],[D.Left,D.Right,D.Top,D.Bottom],[D.Near,D.Far,D.Top,D.Bottom],[D.Near,D.Far,D.Top,D.Bottom],[D.Near,D.Far,D.Left,D.Right],[D.Near,D.Far,D.Left,D.Right]],ShadowUtils._frustumTwoPlaneCorners=[[[e.FrustumCorner.unknown,e.FrustumCorner.unknown],[e.FrustumCorner.unknown,e.FrustumCorner.unknown],[e.FrustumCorner.nearBottomLeft,e.FrustumCorner.nearTopLeft],[e.FrustumCorner.nearTopRight,e.FrustumCorner.nearBottomRight],[e.FrustumCorner.nearBottomRight,e.FrustumCorner.nearBottomLeft],[e.FrustumCorner.nearTopLeft,e.FrustumCorner.nearTopRight]],[[e.FrustumCorner.unknown,e.FrustumCorner.unknown],[e.FrustumCorner.unknown,e.FrustumCorner.unknown],[e.FrustumCorner.FarTopLeft,e.FrustumCorner.FarBottomLeft],[e.FrustumCorner.FarBottomRight,e.FrustumCorner.FarTopRight],[e.FrustumCorner.FarBottomLeft,e.FrustumCorner.FarBottomRight],[e.FrustumCorner.FarTopRight,e.FrustumCorner.FarTopLeft]],[[e.FrustumCorner.nearTopLeft,e.FrustumCorner.nearBottomLeft],[e.FrustumCorner.FarBottomLeft,e.FrustumCorner.FarTopLeft],[e.FrustumCorner.unknown,e.FrustumCorner.unknown],[e.FrustumCorner.unknown,e.FrustumCorner.unknown],[e.FrustumCorner.nearBottomLeft,e.FrustumCorner.FarBottomLeft],[e.FrustumCorner.FarTopLeft,e.FrustumCorner.nearTopLeft]],[[e.FrustumCorner.nearBottomRight,e.FrustumCorner.nearTopRight],[e.FrustumCorner.FarTopRight,e.FrustumCorner.FarBottomRight],[e.FrustumCorner.unknown,e.FrustumCorner.unknown],[e.FrustumCorner.unknown,e.FrustumCorner.unknown],[e.FrustumCorner.FarBottomRight,e.FrustumCorner.nearBottomRight],[e.FrustumCorner.nearTopRight,e.FrustumCorner.FarTopRight]],[[e.FrustumCorner.nearBottomLeft,e.FrustumCorner.nearBottomRight],[e.FrustumCorner.FarBottomRight,e.FrustumCorner.FarBottomLeft],[e.FrustumCorner.FarBottomLeft,e.FrustumCorner.nearBottomLeft],[e.FrustumCorner.nearBottomRight,e.FrustumCorner.FarBottomRight],[e.FrustumCorner.unknown,e.FrustumCorner.unknown],[e.FrustumCorner.unknown,e.FrustumCorner.unknown]],[[e.FrustumCorner.nearTopRight,e.FrustumCorner.nearTopLeft],[e.FrustumCorner.FarTopLeft,e.FrustumCorner.FarTopRight],[e.FrustumCorner.nearTopLeft,e.FrustumCorner.FarTopLeft],[e.FrustumCorner.FarTopRight,e.FrustumCorner.nearTopRight],[e.FrustumCorner.unknown,e.FrustumCorner.unknown],[e.FrustumCorner.unknown,e.FrustumCorner.unknown]]],ShadowUtils.atlasBorderSize=4;class ShadowCasterPass{constructor(){t.Config3D._uniformBlock&&(this._castDepthBufferData=DepthCasterData.createDepthCasterUniformBlock(),this._castDepthBufferOBJ=t.UniformBufferObject.getBuffer(t.UniformBufferObject.UBONAME_SHADOW,0),this._castDepthBufferOBJ||(this._castDepthBufferOBJ=t.UniformBufferObject.create(t.UniformBufferObject.UBONAME_SHADOW,t.BufferUsage.Dynamic,this._castDepthBufferData.getbyteLength(),!0)),BaseCamera.createCameraUniformBlock(),this._castDepthCameraBufferData=BaseCamera.CameraUBOData.clone(),this._castDepthCameraBufferOBJ=t.UniformBufferObject.getBuffer(t.UniformBufferObject.UBONAME_CAMERA,1),this._castDepthCameraBufferOBJ||(this._castDepthCameraBufferOBJ=t.UniformBufferObject.create(t.UniformBufferObject.UBONAME_CAMERA,t.BufferUsage.Dynamic,this._castDepthCameraBufferData.getbyteLength(),!1)))}static __init__(){ShadowCasterPass.SHADOW_BIAS=t.Shader3D.propertyNameToID("u_ShadowBias"),ShadowCasterPass.SHADOW_LIGHT_DIRECTION=t.Shader3D.propertyNameToID("u_ShadowLightDirection"),ShadowCasterPass.SHADOW_SPLIT_SPHERES=t.Shader3D.propertyNameToID("u_ShadowSplitSpheres"),ShadowCasterPass.SHADOW_MATRICES=t.Shader3D.propertyNameToID("u_ShadowMatrices"),ShadowCasterPass.SHADOW_MAP_SIZE=t.Shader3D.propertyNameToID("u_ShadowMapSize"),ShadowCasterPass.SHADOW_MAP=t.Shader3D.propertyNameToID("u_ShadowMap"),ShadowCasterPass.SHADOW_PARAMS=t.Shader3D.propertyNameToID("u_ShadowParams"),ShadowCasterPass.SHADOW_SPOTMAP_SIZE=t.Shader3D.propertyNameToID("u_SpotShadowMapSize"),ShadowCasterPass.SHADOW_SPOTMAP=t.Shader3D.propertyNameToID("u_SpotShadowMap"),ShadowCasterPass.SHADOW_SPOTMATRICES=t.Shader3D.propertyNameToID("u_SpotViewProjectMatrix");const a=t.LayaGL.renderDeviceFactory.createGlobalUniformMap("Scene3D");t.Config3D._uniformBlock?a.addShaderBlockUniform(t.Shader3D.propertyNameToID(t.UniformBufferObject.UBONAME_SHADOW),t.UniformBufferObject.UBONAME_SHADOW,[{id:ShadowCasterPass.SHADOW_BIAS,propertyName:"u_ShadowBias",uniformtype:e.ShaderDataType.Vector4},{id:ShadowCasterPass.SHADOW_LIGHT_DIRECTION,propertyName:"u_ShadowLightDirection",uniformtype:e.ShaderDataType.Vector3}]):(a.addShaderUniform(ShadowCasterPass.SHADOW_BIAS,"u_ShadowBias",e.ShaderDataType.Vector4),a.addShaderUniform(ShadowCasterPass.SHADOW_LIGHT_DIRECTION,"u_ShadowLightDirection",e.ShaderDataType.Vector3)),a.addShaderUniformArray(ShadowCasterPass.SHADOW_SPLIT_SPHERES,"u_ShadowSplitSpheres",e.ShaderDataType.Vector4,4),a.addShaderUniformArray(ShadowCasterPass.SHADOW_MATRICES,"u_ShadowMatrices",e.ShaderDataType.Matrix4x4,4),a.addShaderUniform(ShadowCasterPass.SHADOW_MAP_SIZE,"u_ShadowMapSize",e.ShaderDataType.Vector4),a.addShaderUniform(ShadowCasterPass.SHADOW_MAP,"u_ShadowMap",e.ShaderDataType.Texture2D),a.addShaderUniform(ShadowCasterPass.SHADOW_PARAMS,"u_ShadowParams",e.ShaderDataType.Vector4),a.addShaderUniform(ShadowCasterPass.SHADOW_SPOTMAP_SIZE,"u_SpotShadowMapSize",e.ShaderDataType.Vector4),a.addShaderUniform(ShadowCasterPass.SHADOW_SPOTMAP,"u_SpotShadowMap",e.ShaderDataType.Texture2D),a.addShaderUniform(ShadowCasterPass.SHADOW_SPOTMATRICES,"u_SpotViewProjectMatrix",e.ShaderDataType.Matrix4x4)}getDirectLightShadowMap(a){var r,n,i,o,s=a.shadowResolution,l=a.shadowCascadesMode;return l==e.ShadowCascadesMode.NoCascades?(o=s,r=s,n=s):(i=l==e.ShadowCascadesMode.TwoCascades?2:4,r=2*(o=ShadowUtils.getMaxTileResolutionInAtlas(s,s,i)),n=l==e.ShadowCascadesMode.TwoCascades?o:2*o),this._shadowDirectLightMap&&t.RenderTexture.recoverToPool(this._shadowDirectLightMap),this._shadowDirectLightMap=ShadowUtils.getTemporaryShadowTexture(r,n,e.ShadowMapFormat.bit16),this._shadowDirectLightMap}getSpotLightShadowPassData(a){this._shadowSpotLightMap&&t.RenderTexture.recoverToPool(this._shadowSpotLightMap);var r=a.shadowResolution,n=r,i=r;return this._shadowSpotLightMap=ShadowUtils.getTemporaryShadowTexture(n,i,e.ShadowMapFormat.bit16),this._shadowSpotLightMap}getPointLightShadowPassData(){}cleanUp(){this._shadowDirectLightMap&&t.RenderTexture.recoverToPool(this._shadowDirectLightMap),this._shadowSpotLightMap&&t.RenderTexture.recoverToPool(this._shadowSpotLightMap),this._shadowDirectLightMap=null,this._shadowSpotLightMap=null}}class BlitFrameBufferCMD{constructor(){this._source=null,this._dest=null,this._offsetScale=null,this._texture_size=null,this._shader=null,this._shaderData=null,this._subShader=0,this._viewPort=null,this._transform3D=Laya3DRender.Render3DModuleDataFactory.createTransform(null),this._renderElement=new RenderElement,this._renderElement.setTransform(this._transform3D),this._renderElement.setGeometry(ScreenQuad.instance),this._renderElement._renderElementOBJ.isRender=!0,this._texture_size=new t.Vector4}static __init__(){BlitFrameBufferCMD.shaderdata=t.LayaGL.renderDeviceFactory.createShaderData(null)}static create(e,t,a,r=null,n=null,i=null,o=0){var s;return(s=BlitFrameBufferCMD._pool.length>0?BlitFrameBufferCMD._pool.pop():new BlitFrameBufferCMD)._source=e,s._dest=t,s._offsetScale=r,s.setshader(n,o,i),s._source&&s._texture_size.setValue(e.width,e.height,1/e.width,1/e.height),s._viewPort=a,s}set shaderData(e){this._shaderData=e||BlitFrameBufferCMD.shaderdata,this._renderElement._renderElementOBJ.materialShaderData=this._shaderData}setshader(e,t,a){this._shader=e||Command._screenShader,this._subShader=t||0,this.shaderData=a,this._renderElement.renderSubShader=this._shader.getSubShaderAt(this._subShader)}run(){if(!this._source||!this._viewPort)return;var e=this._source,a=this._dest,r=this._shaderData;let n=RenderContext3D._instance;var i=this._viewPort;let o=RenderContext3D.clientHeight-i.y-i.height;t.LayaGL.renderEngine._screenInvertY?(n.changeViewport(i.x,i.y,i.width,i.height),n.changeScissor(i.x,i.y,i.width,i.height)):(n.changeViewport(i.x,o,i.width,i.height),n.changeScissor(i.x,o,i.width,i.height)),r.setTexture(Command.SCREENTEXTURE_ID,e),r.setVector(Command.SCREENTEXTUREOFFSETSCALE_ID,this._offsetScale||BlitFrameBufferCMD._defaultOffsetScale),e&&r.setVector(Command.MAINTEXTURE_TEXELSIZE_ID,this._texture_size),a?r.removeDefine(RenderContext3D.GammaCorrect):r.addDefine(RenderContext3D.GammaCorrect),this._renderElement.setGeometry(ScreenQuad.InvertInstance),n.destTarget=a,n._contextOBJ.cameraUpdateMask=Camera._updateMark,n.drawRenderElement(this._renderElement._renderElementOBJ)}recover(){BlitFrameBufferCMD._pool.push(this),this._source=null,this._dest=null,this._offsetScale=null,this._shader=null,this._shaderData=null,this._viewPort=null}}BlitFrameBufferCMD._pool=[],BlitFrameBufferCMD._defaultOffsetScale=new t.Vector4(0,0,1,1);class SceneRenderManager{constructor(){this._sceneManagerOBJ=Laya3DRender.Render3DPassFactory.createSceneRenderManager()}get list(){return this._sceneManagerOBJ.list}set list(e){this._sceneManagerOBJ.list=e}get renderBaselist(){return this._sceneManagerOBJ.baseRenderList}addRenderObject(e){this._sceneManagerOBJ.addRenderObject(e)}removeRenderObject(e){this._sceneManagerOBJ.removeRenderObject(e)}removeMotionObject(e){this._sceneManagerOBJ.removeMotionObject(e)}updateMotionObjects(){this._sceneManagerOBJ.updateMotionObjects()}renderUpdate(){var e=RenderContext3D._instance;let t=this._sceneManagerOBJ.list.elements;for(let a=0,r=this.list.length;a<r;a++)t[a].renderUpdate(e)}addMotionObject(e){this._sceneManagerOBJ.addMotionObject(e)}destroy(){this._sceneManagerOBJ.destroy()}}class UI3DManager{constructor(){this._UI3Dlist=new t.SingletonList}add(e){this._UI3Dlist.add(e)}remove(e){this._UI3Dlist.remove(e)}update(){let e=this._UI3Dlist.elements;for(var t=0,a=this._UI3Dlist.length;t<a;t++)e[t]._submitRT()}rayCast(e){let t=e.origin;this._UI3Dlist.clean(),this._UI3Dlist.elements.sort(((e,a)=>e._getCameraDistance(t)-a._getCameraDistance(t)));let a=this._UI3Dlist.elements;for(var r=0,n=this._UI3Dlist.length;r<n;r++){let t=a[r]._checkUIPos(e);if(t)return t}return null}destory(){this._UI3Dlist.destroy()}}class PostProcessRenderContext{constructor(){this.source=null,this.indirectTarget=null,this.destination=null,this.camera=null,this.compositeShaderData=null,this.command=null,this.deferredReleaseTextures=[]}createRTByContextReleaseTexture(e,t,a,r,n=!1,i=1,o=!1,s=!1){let l=this.deferredReleaseTextures.length;for(let h=0;h<l;h++){let d=this.deferredReleaseTextures[h];if(d.width==e&&d.height==t&&d.colorFormat==a&&d.depthStencilFormat==r&&d._generateMipmap==n&&d.multiSamples==i&&d.generateDepthTexture==o&&d._gammaSpace==s){d._inPool=!1;let e=this.deferredReleaseTextures[l-1];return this.deferredReleaseTextures[h]=e,this.deferredReleaseTextures.length-=1,d}}return null}}class PostProcessEffect{constructor(){this._active=!0,this._singleton=!0}set singleton(e){this._singleton=e}get singleton(){return this._singleton}get active(){return this._active}set active(e){this._active=e}getCameraDepthTextureModeFlag(){return 0}effectInit(e){}release(e){}render(e){}}var E,x,M="#define SHADER_NAME BlitVS\n\nvarying vec2 v_Texcoord0;\n\nvoid main()\n{\n    gl_Position = vec4(u_OffsetScale.x * 2.0 - 1.0 + (a_PositionTexcoord.x + 1.0) * u_OffsetScale.z, (1.0 - ((u_OffsetScale.y * 2.0 - 1.0 + (-a_PositionTexcoord.y + 1.0) * u_OffsetScale.w) + 1.0) / 2.0) * 2.0 - 1.0, 0.0, 1.0);\n\n    v_Texcoord0 = a_PositionTexcoord.zw;\n}";e.ToneMappingType=void 0,(E=e.ToneMappingType||(e.ToneMappingType={}))[E.None=0]="None",E[E.ACES=1]="ACES";class ColorGradEffect extends PostProcessEffect{constructor(){super(),this._needBuildLUT=!1,this._lutBuilderMat=new t.Material,this._lutSize=32,this._enableSplitTone=!1,this._splitShadow=new t.Vector3(.5,.5,.5),this._splitBalance=0,this._splithighlights=new t.Vector3(.5,.5,.5),this._u_SplitShadow=new t.Vector4(0,0,0),this._enableSMH=!1,this._shadows=new t.Vector3(1,1,1),this._midtones=new t.Vector3(1,1,1),this._highlights=new t.Vector3(1,1,1),this._limits=new t.Vector4(0,.33,.55,1),this._enableLiftGammaGain=!1,this._lift=new t.Vector3(0,0,0),this._gamma=new t.Vector3(1,1,1),this._gain=new t.Vector3(1,1,1),this._enableBalance=!1,this._balance=new t.Vector3,this._tint=0,this._temperature=0,this._enableColorAdjust=!1,this._postExposure=1,this._contrast=1,this._colorFilter=new t.Color(1,1,1),this._HueShift=0,this._saturation=1,this._HueSatCon=new t.Vector4(0,1,1,0),this.default_balance=new t.Vector3(1,1,1),this.default_splitShadow=new t.Vector4(.5,.5,.5,0),this.default_splithighlights=new t.Vector3(.5,.5,.5),this.default_shadow=new t.Vector3(1,1,1),this.default_midtones=new t.Vector3(1,1,1),this.default_highlight=new t.Vector3(1,1,1),this.default_limint=new t.Vector4(0,.3,.55,1),this.default_lift=new t.Vector3(0,0,0),this.default_gamma=new t.Vector3(1,1,1),this.default_gain=new t.Vector3(1,1,1),this.default_ColorFilter=new t.Color(1,1,1,1),this.default_HueSatCon=new t.Vector4(0,1,1,0),this.singleton=!0,this.active=!0,this._needBuildLUT=!0,this._toneMapping=e.ToneMappingType.None,this._blitlutParams=new t.Vector4,this._lutShaderData=t.LayaGL.renderDeviceFactory.createShaderData(null),this.lutSize=32,this._lutBuilderMat=new t.Material}static init(){ColorGradEffect.__initDefine__();let a={a_PositionTexcoord:[t.VertexMesh.MESH_POSITION0,e.ShaderDataType.Vector4]},r={u_OffsetScale:e.ShaderDataType.Vector4,u_MainTex:e.ShaderDataType.Texture2D,u_MainTex_TexelSize:e.ShaderDataType.Vector4},n=t.Shader3D.add("blitLUTShader");n.shaderType=t.ShaderFeatureType.PostProcess;let i=new t.SubShader(a,r);n.addSubShader(i);let o=i.addShaderPass(M,'#define SHADER_NAME BlitLUTFS\n\n#include "Color.glsl";\n\n#include "ColorGrading.glsl";\n#include "LUT.glsl";\n\nuniform sampler2D u_Lut;\nuniform vec4 u_LutParams; // w postExposure\n\n#ifdef CUSTOMLUT\nuniform sampler2D u_CustomLut;\nuniform vec4 u_CustomLutParams;\n#endif // CUSTOMLUT\n\nvarying vec2 v_Texcoord0;\n\nvoid main()\n{\n    gl_FragColor = texture2D(u_MainTex, v_Texcoord0);\n#ifdef Gamma_u_MainTex\n    gl_FragColor = gammaToLinear(gl_FragColor);\n#endif // Gamma_u_MainTex\n\n    vec3 color = gl_FragColor.rgb;\n    // gl_FragColor.rgb = applyLut(color, 1.0, u_Lut, u_LutParams);\n    color *= u_LutParams.w;\n    color = applyLut(u_Lut, linearToLogC(color), u_LutParams.xyz);\n\n#ifdef CUSTOMLUT\n\n    float contrib = u_CustomLutParams.w;\n    vec3 gamma = linearToGamma(color);\n    vec3 userLut = applyLut(u_CustomLut, gamma, u_CustomLutParams);\n    gamma = mix(gamma, userLut, contrib);\n    color = gammaToLinear(gamma);\n\n#endif // CUSTOMLUT\n\n    gl_FragColor.rgb = color;\n\n    gl_FragColor = outputTransform(gl_FragColor);\n}\n');o.renderState.depthTest=RenderState.DEPTHTEST_ALWAYS,o.renderState.depthWrite=!1,o.renderState.cull=RenderState.CULL_NONE,o.renderState.blend=RenderState.BLEND_DISABLE}static __initDefine__(){ColorGradEffect.SHADERDEFINE_ACES=t.Shader3D.getDefineByName("ACES"),ColorGradEffect.SHADERDEFINE_CUSTOMLUT=t.Shader3D.getDefineByName("CUSTOMLUT"),ColorGradEffect.SHADERVALUE_LUT=t.Shader3D.propertyNameToID("u_Lut"),ColorGradEffect.SHADERVALUE_LUTPARAMS=t.Shader3D.propertyNameToID("u_LutParams"),ColorGradEffect.SHADERVALUE_CUSTOMLUT=t.Shader3D.propertyNameToID("u_CustomLut"),ColorGradEffect.SHADERVALUE_CUSTOMLUTPARAMS=t.Shader3D.propertyNameToID("u_CustomLutParams")}get toneMapping(){return this._toneMapping}set toneMapping(e){e!=this._toneMapping&&(this._needBuildLUT=!0,this._toneMapping=e)}get enableSplitTone(){return this._enableSplitTone}set enableSplitTone(e){this._enableSplitTone=e,this._needBuildLUT=!0}get splitShadow(){return this._splitShadow}set splitShadow(e){this._needBuildLUT=!0,e.cloneTo(this._splitShadow)}get splithighlights(){return this._splithighlights}set splithighlights(e){this._splithighlights.equal(e)||(this._needBuildLUT=!0,e.cloneTo(this._splithighlights))}get splitBalance(){return this._splitBalance}set splitBalance(e){this._needBuildLUT=!0,this._splitBalance=e}get enableSMH(){return this._enableSMH}set enableSMH(e){this._needBuildLUT=!0,this._enableSMH=e}get shadows(){return this._shadows}set shadows(e){this._shadows.equal(e)||(this._needBuildLUT=!0,e.cloneTo(this._shadows))}get midtones(){return this._midtones}set midtones(e){this._midtones.equal(e)||(this._needBuildLUT=!0,e.cloneTo(this._midtones))}get highlights(){return this._highlights}set highlights(e){this._highlights.equal(e)||(this._needBuildLUT=!0,e.cloneTo(this._highlights))}get shadowLimitStart(){return this._limits.x}set shadowLimitStart(e){this._needBuildLUT=!0,this._limits.x=Math.min(e,this.shadowLimitEnd)}get shadowLimitEnd(){return this._limits.y}set shadowLimitEnd(e){this._needBuildLUT=!0,this._limits.y=Math.max(e,this.shadowLimitStart)}get highLightLimitStart(){return this._limits.z}set highLightLimitStart(e){this._needBuildLUT=!0,this._limits.z=Math.min(e,this.highLightLimitEnd)}get highLightLimitEnd(){return this._limits.w}set highLightLimitEnd(e){this._needBuildLUT=!0,this._limits.w=Math.max(this.highLightLimitStart,e)}get enableLiftGammaGain(){return this._enableLiftGammaGain}set enableLiftGammaGain(e){this._needBuildLUT=!0,this._enableLiftGammaGain=e}get lift(){return this._lift}set lift(e){this.lift.equal(e)||(this._needBuildLUT=!0,e.cloneTo(this._lift))}get gamma(){return this._gamma}set gamma(e){this._gamma.equal(e)||(this._needBuildLUT=!0,e.cloneTo(this._gamma))}get gain(){return this._gain}set gain(e){this._gain.equal(e)||(this._needBuildLUT=!0,e.cloneTo(this._gain))}_StandardIlluminantY(e){return 2.87*e-3*e*e-.27509507}_CIExyToLMS(e,a){let r=1*e/a,n=1*(1-e-a)/a,i=.7328*r+.4296-.1624*n,o=-.7036*r+1.6975+.0061*n,s=.003*r+.0136+.9834*n;return new t.Vector3(i,o,s)}_ColorBalanceToLMSCoeffs(e,a){let r=e/65,n=a/65,i=.31271-r*(r<0?.1:.05),o=this._StandardIlluminantY(i)+.05*n,s=new t.Vector3(.949237,1.03542,1.08728),l=this._CIExyToLMS(i,o);this._balance.set(s.x/l.x,s.y/l.y,s.z/l.z)}get enableBalance(){return this._enableBalance}set enableBalance(e){this._needBuildLUT=!0,this._enableBalance=e}get tint(){return this._tint}set tint(e){this._needBuildLUT=!0,this._tint=e,this._ColorBalanceToLMSCoeffs(this._temperature,this._tint)}get temperature(){return this._temperature}set temperature(e){this._needBuildLUT=!0,this._temperature=e,this._ColorBalanceToLMSCoeffs(this._temperature,this._tint)}get enableColorAdjust(){return this._enableColorAdjust}set enableColorAdjust(e){this._needBuildLUT=!0,this._enableColorAdjust=e}get postExposure(){return this._postExposure}set postExposure(e){this._postExposure=e}get contrast(){return this._contrast}set contrast(e){this._needBuildLUT=!0,this._contrast=e}get colorFilter(){return this._colorFilter}set colorFilter(e){this._needBuildLUT=!0,e.cloneTo(this._colorFilter)}get HueShift(){return this._HueShift}set HueShift(e){this._needBuildLUT=!0,this._HueShift=e}get saturation(){return this._saturation}set saturation(e){this._needBuildLUT=!0,this._saturation=e}get lutSize(){return this._lutSize}set lutSize(e){e>32||(this._lutSize=e,this._lutTex&&this._lutTex.destroy(),this._lutTex=new t.RenderTexture(this._lutSize*this._lutSize,this._lutSize,t.RenderTargetFormat.R16G16B16A16,null,!1,1,!1,!1),this._lutTex.anisoLevel=1,this._lutTex.wrapModeU=t.WrapMode.Clamp,this._lutTex.wrapModeV=t.WrapMode.Clamp,this._lutTex.filterMode=t.FilterMode.Bilinear)}_buildLUT(){if(!this._needBuildLUT)return;let a=this.lutSize,r=this.lutSize*this.lutSize,n=new t.Vector4(a,.5/r,.5/a,a/(a-1));this._lutBuilderMat.setVector4("u_LutParams",n),this.enableBalance?(this._ColorBalanceToLMSCoeffs(this.temperature,this.tint),this._lutBuilderMat.setVector3("u_ColorBalance",this._balance)):this._lutBuilderMat.setVector3("u_ColorBalance",this.default_balance),this.enableSplitTone?(this._u_SplitShadow.setValue(this._splitShadow.x,this._splitShadow.y,this._splitShadow.z,this.splitBalance),this._lutBuilderMat.setVector4("u_SplitShadows",this._u_SplitShadow),this._lutBuilderMat.setVector3("u_Splithighlights",this._splithighlights)):(this._lutBuilderMat.setVector4("u_SplitShadows",this.default_splitShadow),this._lutBuilderMat.setVector3("u_Splithighlights",this.default_splithighlights)),this.enableSMH?(this._lutBuilderMat.setVector3("u_Shadows",this._shadows),this._lutBuilderMat.setVector3("u_Midtones",this._midtones),this._lutBuilderMat.setVector3("u_Highlights",this._highlights),this._lutBuilderMat.setVector4("u_Limits",this._limits)):(this._lutBuilderMat.setVector3("u_Shadows",this.default_shadow),this._lutBuilderMat.setVector3("u_Midtones",this.default_midtones),this._lutBuilderMat.setVector3("u_Highlights",this.default_highlight),this._lutBuilderMat.setVector4("u_Limits",this.default_limint)),this._enableLiftGammaGain?(this._lutBuilderMat.setVector3("u_Lift",this._lift),this._lutBuilderMat.setVector3("u_Gamma",this._gamma),this._lutBuilderMat.setVector3("u_Gain",this._gain)):(this._lutBuilderMat.setVector3("u_Lift",this.default_lift),this._lutBuilderMat.setVector3("u_Gamma",this.default_gamma),this._lutBuilderMat.setVector3("u_Gain",this.default_gain)),this.enableColorAdjust?(this._HueSatCon.setValue(this._HueShift,this.saturation,this._contrast,0),this._lutBuilderMat.setColor("u_ColorFilter",this._colorFilter),this._lutBuilderMat.setVector4("u_HueSatCon",this._HueSatCon)):(this._lutBuilderMat.setColor("u_ColorFilter",this.default_ColorFilter),this._lutBuilderMat.setVector4("u_HueSatCon",this.default_HueSatCon)),this._toneMapping==e.ToneMappingType.ACES?this._lutBuilderMat.addDefine(ColorGradEffect.SHADERDEFINE_ACES):this._lutBuilderMat.removeDefine(ColorGradEffect.SHADERDEFINE_ACES),this._postProcess._context.command.blitScreenQuadByMaterial(t.Texture2D.whiteTexture,this._lutTex,null,this._lutBuilderMat)}effectInit(e){super.effectInit(e),this._lutBuilderMat.setShaderName("LUTBuilder"),this._LUTShader=t.Shader3D.find("blitLUTShader"),e._enableColorGrad=!0,e._ColorGradEffect=this,this._postProcess=e}release(e){super.release(e),e._enableColorGrad=!1,e._ColorGradEffect=null}render(e){let t=e.command,a=e.indirectTarget;this._blitlutParams.setValue(1/this._lutTex.width,1/this._lutTex.height,this._lutTex.height-1,this.enableColorAdjust?this._postExposure:1),this._lutBuilderMat.removeDefine(ColorGradEffect.SHADERDEFINE_CUSTOMLUT),this._lutShaderData.setTexture(ColorGradEffect.SHADERVALUE_LUT,this._lutTex),this._lutShaderData.setVector(ColorGradEffect.SHADERVALUE_LUTPARAMS,this._blitlutParams),t.blitScreenTriangle(a,e.destination,null,this._LUTShader,this._lutShaderData)}}class PostProcess{constructor(){this._compositeShader=t.Shader3D.find("PostProcessComposite"),this._compositeShaderData=t.LayaGL.renderDeviceFactory.createShaderData(null),this._effects=[],this._enable=!0,this._enableColorGrad=!1,this._context=new PostProcessRenderContext,this._context.compositeShaderData=this._compositeShaderData,this._context.command=new CommandBuffer,this._depthtextureFlag=0}static __init__(){PostProcess.SHADERDEFINE_BLOOM_LOW=t.Shader3D.getDefineByName("BLOOM_LOW"),PostProcess.SHADERDEFINE_BLOOM=t.Shader3D.getDefineByName("BLOOM"),PostProcess.SHADERDEFINE_FINALPASS=t.Shader3D.getDefineByName("FINALPASS"),PostProcess.SHADERVALUE_MAINTEX=t.Shader3D.propertyNameToID("u_MainTex"),PostProcess.SHADERVALUE_BLOOMTEX=t.Shader3D.propertyNameToID("u_BloomTex"),PostProcess.SHADERVALUE_AUTOEXPOSURETEX=t.Shader3D.propertyNameToID("u_AutoExposureTex"),PostProcess.SHADERVALUE_BLOOM_DIRTTEX=t.Shader3D.propertyNameToID("u_Bloom_DirtTex"),PostProcess.SHADERVALUE_BLOOMTEX_TEXELSIZE=t.Shader3D.propertyNameToID("u_BloomTex_TexelSize"),PostProcess.SHADERVALUE_BLOOM_DIRTTILEOFFSET=t.Shader3D.propertyNameToID("u_Bloom_DirtTileOffset"),PostProcess.SHADERVALUE_BLOOM_SETTINGS=t.Shader3D.propertyNameToID("u_Bloom_Settings"),PostProcess.SHADERVALUE_BLOOM_COLOR=t.Shader3D.propertyNameToID("u_Bloom_Color")}recaculateCameraFlag(){this._depthtextureFlag=t.DepthTextureMode.None;let e=this.effects.length;for(let t=0;t<e;t++)this._depthtextureFlag|=this.effects[t].getCameraDepthTextureModeFlag()}get enable(){return this._enable}set enable(e){this._enable=e}set commandContext(e){this._context.command._context=e}set effects(e){this.clearEffect();for(var t=0,a=e.length;t<a;t++)e[t]&&this.addEffect(e[t])}get effects(){return this._effects}get cameraDepthTextureMode(){return this._depthtextureFlag}_init(e){this._context.camera=e,this._context.command._camera=e}_render(e){this._init(e);let a=this._context;var r=(e=a.camera).viewport,n=e._needInternalRenderTexture(),i=n?e._internalRenderTexture:t.RenderTexture.createFromPool(e._offScreenRenderTexture.width,e._offScreenRenderTexture.height,e._getRenderTextureFormat(),t.RenderTargetFormat.None,!1,1,!1,!0),o=t.RenderTexture.createFromPool(i.width,i.height,e._getRenderTextureFormat(),t.RenderTargetFormat.None,!1,1,!1,!0),s=[t.RenderTexture.createFromPool(i.width,i.height,e._getRenderTextureFormat(),t.RenderTargetFormat.None,!1,1,!1,!0),t.RenderTexture.createFromPool(i.width,i.height,e._getRenderTextureFormat(),t.RenderTargetFormat.None,!1,1,!1,!0)];a.command.clear(),a.source=o,a.indirectTarget=o,a.destination=2==this._effects.length?s[0]:i,a.compositeShaderData.clearDefine(),n?a.command.blitScreenTriangle(e._internalRenderTexture,o):a.command.blitScreenTriangle(e._offScreenRenderTexture,o),a.compositeShaderData.setTexture(PostProcess.SHADERVALUE_AUTOEXPOSURETEX,t.Texture2D.whiteTexture),this._enableColorGrad&&this._ColorGradEffect._buildLUT();for(var l=0,h=this._effects.length;l<h;l++)this._effects[l].active?(this._effects[l].render(a),l==h-2?(a.indirectTarget=a.destination,a.destination=i):(a.indirectTarget=a.destination,a.destination=s[(l+1)%2])):l==h-1&&a.command.blitScreenTriangle(a.indirectTarget,i);if(this._compositeShaderData.addDefine(PostProcess.SHADERDEFINE_FINALPASS),e._offScreenRenderTexture&&n){a.destination=e._offScreenRenderTexture;var d=e._getCanvasWidth(),c=e._getCanvasHeight();t.LayaGL.renderEngine._screenInvertY?e._screenOffsetScale.setValue(r.x/d,r.y/c,r.width/d,r.height/c):e._screenOffsetScale.setValue(r.x/d,1-r.y/c,r.width/d,-r.height/c),a.command.blitScreenTriangle(i,e._offScreenRenderTexture,e._screenOffsetScale,null,this._compositeShaderData,0)}n&&t.RenderTexture.recoverToPool(i),t.RenderTexture.recoverToPool(o),t.RenderTexture.recoverToPool(s[0]),t.RenderTexture.recoverToPool(s[1]);var u=a.deferredReleaseTextures;for(l=0,h=u.length;l<h;l++)t.RenderTexture.recoverToPool(u[l]);u.length=0}addEffect(e){e.singleton&&this.getEffect(e.constructor)?console.error("无法增加已经存在的Effect"):(!this._enableColorGrad||e instanceof ColorGradEffect?this._effects.push(e):this._effects.splice(this._effects.length-1,0,e),this.recaculateCameraFlag(),e.effectInit(this))}getEffect(e){let t=this._effects.length;for(let a=0;a<t;a++){let t=this._effects[a];if(t instanceof e)return t}return null}removeEffect(e){var t=this._effects.indexOf(e);-1!==t&&(this._effects.splice(t,1),e.release(this),this.recaculateCameraFlag())}clearEffect(){let e=this.effects.length-1;for(;e>=0;e--)this.removeEffect(this.effects[e])}_applyPostProcessCommandBuffers(){this._context.command._apply()}}e.PBRRenderQuality=void 0,(x=e.PBRRenderQuality||(e.PBRRenderQuality={}))[x.High=0]="High",x[x.Low=1]="Low";class PBRDefaultDFG{static get defaultDFG(){return PBRDefaultDFG._defaultDFG}static set defaultDFG(e){PBRDefaultDFG._defaultDFG=e}static DefaultDfgTexture(){let e,a=t.Base64Tool.decode(""),r=t.HDRTextureInfo.getHDRInfo(a),n=t.LayaGL.renderEngine.getCapable(t.RenderCapable.TextureFormat_R32G32B32A32),i=t.LayaGL.renderEngine.getCapable(t.RenderCapable.Texture_FloatLinearFiltering);if(n&&i)e=new t.Texture2D(r.width,r.height,r.format,!1,!1,!1),e.setHDRData(r);else{e=new t.Texture2D(r.width,r.height,t.TextureFormat.R8G8B8A8,!1,!1,!1);let a=r.width*r.height,n=r.readScanLine(),i=new Uint8Array(4*a);for(let e=0;e<a;e++){let t=n[4*e],a=n[4*e+1],r=n[4*e+2],o=Math.max(t,a,r,1e-5),s=Math.max(1,255/o);s=Math.min(1,Math.max(0,s/255)),i[4*e]=255*Math.min(1,Math.max(0,t*s)),i[4*e+1]=255*Math.min(1,Math.max(0,a*s)),i[4*e+2]=255*Math.min(1,Math.max(0,r*s)),i[4*e+3]=255*s}e.setPixelsData(i,!1,!1)}e.lock=!0,e.wrapModeU=t.WrapMode.Clamp,e.wrapModeV=t.WrapMode.Clamp,e.anisoLevel=1,this._defaultDFG=e}}class PBRShaderLib{static init(){PBRShaderLib.DEFINE_EMISSION=t.Shader3D.getDefineByName("EMISSION"),PBRShaderLib.DEFINE_CLEARCOAT=t.Shader3D.getDefineByName("CLEARCOAT"),PBRShaderLib.DEFINE_CLEARCOAT_NORMAL=t.Shader3D.getDefineByName("CLEARCOAT_NORMAL"),PBRShaderLib.DEFINE_ANISOTROPY=t.Shader3D.getDefineByName("ANISOTROPIC"),PBRShaderLib.DEFINE_IOR=t.Shader3D.getDefineByName("IOR"),PBRShaderLib.DEFINE_IRIDESCENCE=t.Shader3D.getDefineByName("IRIDESCENCE"),PBRShaderLib.DEFINE_SHEEN=t.Shader3D.getDefineByName("SHEEN"),PBRShaderLib.DEFINE_TRANSMISSION=t.Shader3D.getDefineByName("TRANSMISSION"),PBRShaderLib.DEFINE_THICKNESS=t.Shader3D.getDefineByName("THICKNESS"),t.Shader3D.addInclude("BRDF.glsl",'#if !defined(BRDF)\n    #define BRDF\n\n// Specular implementations\nfloat D_GGX(float roughness, float NoH, vec3 h, vec3 n)\n{\n    // todo 精度\n    #if !defined(GL_FRAGMENT_PRECISION_HIGH)\n    vec3 NxH = cross(n, h);\n    float oneMinusNoHSquared = dot(NxH, NxH);\n    #else\n    float oneMinusNoHSquared = 1.0 - NoH * NoH;\n    #endif\n\n    float a = NoH * roughness;\n    float k = roughness / (oneMinusNoHSquared + a * a);\n    float d = k * k * INVERT_PI;\n\n    return saturateMediump(d);\n}\n\nfloat D_GGX_Anisotropic(float NoH, const vec3 h, const vec3 t, const vec3 b, float at, float ab)\n{\n    float ToH = dot(t, h);\n    float BoH = dot(b, h);\n    float a2 = at * ab;\n    highp vec3 v = vec3(ab * ToH, at * BoH, a2 * NoH);\n    highp float v2 = dot(v, v);\n    float w2 = a2 / v2;\n    return a2 * w2 * w2 * INVERT_PI;\n}\n\nfloat D_Charlie(float roughness, float NoH)\n{\n    float invR = 1.0 / roughness;\n    float cos2h = NoH * NoH;\n    float sin2h = max(1.0 - cos2h, 0.0078125);\n    return (2.0 + invR) * pow(sin2h, invR * 0.5) * 0.5 * INVERT_PI;\n}\n\nfloat V_SmithGGXCorrelated(float roughness, float NoV, float NoL)\n{\n    float a2 = roughness * roughness;\n    float lambdaV = NoL * sqrt((NoV - a2 * NoV) * NoV + a2);\n    float lambdaL = NoV * sqrt((NoL - a2 * NoL) * NoL + a2);\n    float v = 0.5 / (lambdaV + lambdaL);\n\n    return saturateMediump(v);\n}\n\nfloat V_SmithGGXCorrelated_Fast(float roughness, float NoV, float NoL)\n{\n    float v = 0.5 / mix(2.0 * NoL * NoV, NoL + NoV, roughness);\n    return saturateMediump(v);\n}\n\n// Kelemen 2001, "A Microfacet Based Coupled Specular-Matte BRDF Model with Importance Sampling"\nfloat V_kelemen(float LoH)\n{\n    return saturateMediump(0.25 / (LoH * LoH));\n}\n\nfloat lCharlieNumericHelper(float x, float alphaG)\n{\n    float oneMinusAlphaSq = (1.0 - alphaG) * (1.0 - alphaG);\n    float a = mix(21.5473, 25.3245, oneMinusAlphaSq);\n    float b = mix(3.82987, 3.32435, oneMinusAlphaSq);\n    float c = mix(0.19823, 0.16801, oneMinusAlphaSq);\n    float d = mix(-1.97760, -1.27393, oneMinusAlphaSq);\n    float e = mix(-4.32054, -4.85967, oneMinusAlphaSq);\n    return a / (1.0 + b * pow(x, c)) + d * x + e;\n}\n\nfloat lCharlie(float cosTheta, float alphaG)\n{\n    if (abs(cosTheta) < 0.5)\n\t{\n\t    return exp(lCharlieNumericHelper(cosTheta, alphaG));\n\t}\n    else\n\t{\n\t    return exp(2.0 * lCharlieNumericHelper(0.5, alphaG) - lCharlieNumericHelper(1.0 - cosTheta, alphaG));\n\t}\n}\n\nfloat V_Charlie(float NoL, float NoV, float roughness)\n{\n    float alphaG = roughness * roughness;\n    return clamp(1.0 / ((1.0 + lCharlie(NoV, alphaG) + lCharlie(NoL, alphaG)) * (4.0 * NoV * NoL)), 0.0, 1.0);\n}\n\n// Neubelt and Pettineo 2013, "Crafting a Next-gen Material Pipeline for The Order: 1886"\nfloat V_Neubelt(float NoV, float NoL)\n{\n    return saturateMediump(1.0 / (4.0 * (NoL + NoV - NoL * NoV)));\n}\n\nfloat V_SmithGGXCorrelated_Anisotropic(float at, float ab, float ToV, float BoV, float ToL, float BoL, float NoV, float NoL)\n{\n    float lambdaV = NoL * length(vec3(at * ToV, ab * BoV, NoV));\n    float lambdaL = NoV * length(vec3(at * ToL, ab * BoL, NoL));\n    float v = 0.5 / (lambdaV + lambdaL);\n    return saturateMediump(v);\n}\n\nvec3 F_Schlick(vec3 f0, float f90, float VoH)\n{\n    return f0 + (f90 - f0) * pow5(1.0 - VoH);\n}\n\nvec3 F_Schlick(vec3 f0, float VoH)\n{\n    return f0 + (1.0 - f0) * pow5(1.0 - VoH);\n}\n\nfloat F_Schlick(float f0, float f90, float VoH)\n{\n    return f0 + (f90 - f0) * pow5(1.0 - VoH);\n}\n\nfloat F_Schlick(float f0, float VoH)\n{\n    return f0 + (1.0 - f0) * pow5(1.0 - VoH);\n}\n\nvec3 F_Schlick(vec3 f0, vec3 f90, float VoH)\n{\n    return f0 + (f90 - f0) * pow5(1.0 - VoH);\n}\n\n    #ifdef IRIDESCENCE\n\n// CIE XYZ to REC.709\nconst mat3 XYZ_to_REC709_MAT = mat3(\n    vec3(3.2409699419, -0.9692436363, 0.0556300797),\n    vec3(-1.5373831776, 1.8759675015, -0.2039769589),\n    vec3(-0.498610760, 0.0415550574, 1.0569715142));\n\nfloat IorToFresnel0(float iorT, float iorI)\n{\n    return pow2((iorT - iorI) / (iorT + iorI));\n}\n\nvec3 IorToFresnel0(vec3 iorT, float iorI)\n{\n    return pow2((iorT - vec3(iorI)) / (iorT + vec3(iorI)));\n}\n\n// air to surfaceR0 ior\nvec3 Fresnel0ToIor(vec3 f0)\n{\n    vec3 sqrtF0 = sqrt(f0);\n    return (1.0 + sqrtF0) / (1.0 - sqrtF0);\n}\n\nvec3 evalSensitivity(float OPD, vec3 shift)\n{\n    float phase = 2.0 * PI * OPD * 1.0e-9;\n    vec3 val = vec3(5.4856e-13, 4.4201e-13, 5.2481e-13);\n    vec3 pos = vec3(1.6810e+06, 1.7953e+06, 2.2084e+06);\n    vec3 var = vec3(4.3278e+09, 9.3046e+09, 6.6121e+09);\n    vec3 xyz = val * sqrt(2.0 * PI * var) * cos(pos * phase + shift) * exp(-pow2(phase) * var);\n    xyz.x += 9.7470e-14 * sqrt(2.0 * PI * 4.5282e+09) * cos(2.2399e+06 * phase + shift[0]) * exp(-4.5282e+09 * pow2(phase));\n    xyz /= 1.0685e-7;\n    vec3 srgb = XYZ_to_REC709_MAT * xyz;\n    return srgb;\n}\n\n// https://belcour.github.io/blog/research/publication/2017/05/01/brdf-thin-film.html\nvec3 evalIridescence(float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0)\n{\n    vec3 I;\n    float iridescenceIor = mix(outsideIOR, eta2, smoothstep(0.0, 0.03, thinFilmThickness));\n\n    float sinTheta2Sq = pow2(outsideIOR / iridescenceIor) * (1.0 - pow2(cosTheta1));\n\n    float cosTheta2Sq = 1.0 - sinTheta2Sq;\n    if (cosTheta2Sq < 0.0)\n\t{\n\t    return vec3(1.0);\n\t}\n    float cosTheta2 = sqrt(cosTheta2Sq);\n\n    float R0 = IorToFresnel0(iridescenceIor, outsideIOR);\n    float R12 = F_Schlick(R0, cosTheta1);\n    float R21 = R12;\n    float T121 = 1.0 - R12;\n    float phi12 = 0.0;\n    if (iridescenceIor < outsideIOR)\n\tphi12 = PI;\n    float phi21 = PI - phi12;\n\n    vec3 baseIOR = Fresnel0ToIor(clamp(baseF0, 0.0, 0.9999));\n\n    vec3 R1 = IorToFresnel0(baseIOR, iridescenceIor);\n    vec3 R23 = F_Schlick(R1, cosTheta2);\n    vec3 phi23 = vec3(0.0);\n\n    if (baseIOR[0] < iridescenceIor)\n\tphi23[0] = PI;\n    if (baseIOR[1] < iridescenceIor)\n\tphi23[1] = PI;\n    if (baseIOR[2] < iridescenceIor)\n\tphi23[2] = PI;\n\n    float OPD = 2.0 * iridescenceIor * thinFilmThickness * cosTheta2;\n    vec3 phi = vec3(phi21) + phi23;\n\n    vec3 R123 = clamp(R12 * R23, 1e-5, 0.9999);\n    vec3 r123 = sqrt(R123);\n    vec3 Rs = pow2(T121) * R23 / (vec3(1.0) - R123);\n\n    vec3 C0 = R12 + Rs;\n    I = C0;\n\n    vec3 Cm = Rs - T121;\n    for (int m = 1; m <= 2; ++m)\n\t{\n\t    Cm *= r123;\n\t    vec3 Sm = 2.0 * evalSensitivity(float(m) * OPD, float(m) * phi);\n\t    I += Cm * Sm;\n\t}\n\n    return max(I, vec3(0.0));\n}\n    #endif // IRIDESCENCE\n\n// Specular dispatch\n\n// D\nfloat distribution(float roughness, float NoH, vec3 h, vec3 n)\n{\n    return D_GGX(roughness, NoH, h, n);\n}\n\n// V\nfloat visibility(float roughness, float NoV, float NoL)\n{\n    return V_SmithGGXCorrelated(roughness, NoV, NoL);\n}\n\n// F\nvec3 fresnel(vec3 f0, float LoH)\n{\n    float f90 = saturate(dot(f0, vec3(50.0 * 0.33)));\n    return F_Schlick(f0, f90, LoH);\n\n    // return F_Schlick(f0, LoH);\n}\n\nvec3 fresnel(vec3 f0, vec3 f90, float LoH)\n{\n    return F_Schlick(f0, f90, LoH);\n}\n\n// diffuse BRDF implementations\n\nfloat Fd_Lambert()\n{\n    // https://seblagarde.wordpress.com/2012/01/08/pi-or-not-to-pi-in-game-lighting-equation/\n    // return INVERT_PI;\n    return 1.0;\n}\n\nfloat Fd_Burley(float roughness, float NoV, float NoL, float LoH)\n{\n    float f90 = 0.5 + 2.0 * roughness * LoH * LoH;\n    float lightScatter = F_Schlick(1.0, f90, NoL);\n    float veiwScatter = F_Schlick(1.0, f90, NoV);\n    return lightScatter * veiwScatter * INVERT_PI;\n}\n\n    #ifdef IRIDESCENCE\nvec3 Fd_IridescenceLambert(vec3 f0, vec3 f90, vec3 iridescenceFresnel, float iridescenceFactor, float VoH)\n{\n    vec3 iridescenceFresnelMax = vec3(vecmax(iridescenceFresnel));\n    vec3 schlickFresnel = F_Schlick(f0, f90, VoH);\n\n    vec3 F = mix(schlickFresnel, iridescenceFresnelMax, iridescenceFactor);\n\n    return (1.0 - F) * Fd_Lambert();\n}\n    #endif // IRIDESCENCE\n\n#endif // BRDF'),t.Shader3D.addInclude("PBRGI.glsl",'#if !defined(pbrGI_lib)\n    #define pbrGI_lib\n\n    #include "globalIllumination.glsl";\n\n    #ifdef ANISOTROPIC\nvec3 anisotropyBentNormal(const in Surface surface, const in PixelInfo info)\n{\n    float anisotropy = surface.anisotropy;\n    vec3 anisotropyDirection = info.anisotropicB;\n\n    vec3 n = info.normalWS;\n    vec3 v = info.viewDir;\n\n    // float tangentRoughness = mix(roughness, 1.0, anisotropy * anisotropy);\n    float roughness = surface.perceptualRoughness;\n    vec3 anisotropicTangent = cross(anisotropyDirection, v);\n    vec3 anisotropicNormal = cross(anisotropicTangent, anisotropyDirection);\n    float bendFactor = 1.0 - anisotropy * (1.0 - roughness);\n    float bendFactorPow4 = pow2(bendFactor) * pow2(bendFactor);\n    vec3 bentNormal = normalize(mix(anisotropicNormal, n, bendFactorPow4));\n\n    return bentNormal;\n}\n    #endif // ANISOTROPIC\n\n// 获取反射向量\nvec3 getReflectedVector(const in vec3 n, const in vec3 v, const in vec3 positionWS)\n{\n    vec3 r;\n    r = reflect(-v, n);\n\n    #ifdef SPECCUBE_BOX_PROJECTION\n    r = getBoxProjectionReflectedVector(r, positionWS);\n    #endif // SPECCUBE_BOX_PROJECTION\n\n    return r;\n}\n\n    #ifdef IRIDESCENCE\nvoid iridescenceIBL(const in Surface surface, const in PixelInfo info, in vec3 E, inout vec3 Fd, inout vec3 Fr)\n{\n    vec3 dfg = info.dfg;\n    float NoV = info.NoV;\n    vec3 n = info.normalWS;\n    vec3 v = info.viewDir;\n    vec3 positionWS = info.positionWS;\n    vec3 iridescenceFresnel = info.iridescenceFresnel;\n\n    vec3 diffuseColor = surface.diffuseColor;\n    float roughness = surface.perceptualRoughness;\n    float occlusion = surface.occlusion;\n    float iridescenceFactor = surface.iridescence;\n\n    // diffuse\n    vec3 irradiance = diffuseIrradiance(n, positionWS, info.viewDir);\n    Fd += diffuseColor * irradiance * (1.0 - E) * occlusion;\n\n    // specular\n    vec3 iridescenceF0 = mix(surface.f0, iridescenceFresnel, vec3(iridescenceFactor));\n    vec3 Er = mix(dfg.xxx, dfg.yyy, iridescenceF0);\n\n\t#ifdef ANISOTROPIC\n    vec3 bentNormal = anisotropyBentNormal(surface, info);\n    vec3 r = getReflectedVector(bentNormal, v, positionWS);\n\t#else // ANISOTROPIC\n    vec3 r = getReflectedVector(n, v, positionWS);\n\t#endif // ANISOTROPIC\n\n    vec3 indirectSpecular = specularRadiance(r, roughness);\n    Fr += Er * indirectSpecular * occlusion * (1.0 + Er * (1.0 / dfg.y - 1.0));\n}\n    #endif // IRIDESCENCE\n\n    #ifdef SHEEN\nvoid sheenIBL(const in Surface surface, const in PixelInfo info, inout vec3 Fd, inout vec3 Fr)\n{\n    vec3 v = info.viewDir;\n    vec3 n = info.normalWS;\n    vec3 positionWS = info.positionWS;\n\n    float occlusion = surface.occlusion;\n    float roughness = surface.sheenPerceptualRoughness;\n\n    Fd *= info.sheenScaling;\n    Fr *= info.sheenScaling;\n\n    vec3 r = getReflectedVector(n, v, positionWS);\n    vec3 indirectSpecular = specularRadiance(r, roughness);\n\n    Fr += indirectSpecular * info.sheenDfg * surface.sheenColor * occlusion;\n}\n    #endif // SHEEN\n\n    #ifdef CLEARCOAT\nvoid clearCoatIBL(const in Surface surface, const in PixelInfo info, inout vec3 Fd, inout vec3 Fr)\n{\n    vec3 v = info.viewDir;\n    vec3 n = info.clearCoatNormal;\n    float NoV = info.clearCoatNoV;\n    vec3 positionWS = info.positionWS;\n\n    float clearCoat = surface.clearCoat;\n    float roughness = surface.clearCoatPerceptualRoughness;\n    float occlusion = surface.occlusion;\n\n    float Fc = F_Schlick(0.04, 1.0, NoV) * clearCoat;\n    float attenuation = 1.0 - Fc;\n    Fd *= attenuation;\n    Fr *= attenuation;\n\n    vec3 r = getReflectedVector(n, v, positionWS);\n    vec3 indirectSpecular = specularRadiance(r, roughness);\n\n    Fr += indirectSpecular * Fc * occlusion;\n}\n    #endif // CLEARCOAT\n\n    #ifdef TRANSMISSION\nvec3 getRefraction(const in Surface surface, const in PixelInfo info)\n{\n    vec3 position = info.positionWS;\n\n\t#ifdef THICKNESS\n\n    vec3 n = info.normalWS;\n    vec3 r = -info.viewDir;\n    float airIOR = 1.0;\n    float etaIR = airIOR / surface.ior;\n\n    vec3 refractionV = normalize(refract(r, n, etaIR)) * surface.thickness * info.worldScale.xyz;\n\n    position += refractionV;\n\n\t#endif // THICKNESS\n\n    vec4 p = u_ViewProjection * vec4(position, 1.0);\n    vec2 refractionUV = (p.xy / p.w) * 0.5 + 0.5;\n\n    float refractionLOD = u_OpaqueTextureParams.z * surface.perceptualRoughness * saturate(surface.ior * 2.0 - 2.0);\n    vec3 refraction = texture2DLodEXT(u_CameraOpaqueTexture, refractionUV, refractionLOD).xyz;\n\n    return refraction;\n}\n\nvec3 transmissionIBL(const in Surface surface, const in PixelInfo info, in vec3 E)\n{\n    // refraction\n    vec3 refraction = getRefraction(surface, info);\n\n\t#ifndef THICKNESS\n    E *= 1.0 + surface.transmission * (1.0 - E.g) / (1.0 + E.g);\n\t#endif // THICKNESS\n\n\t#ifdef THICKNESS\n\n    // ABSORPTION\n    vec3 attenuationColor = surface.attenuationColor;\n    float attenuationDistance = surface.attenuationDistance;\n    vec3 absorption = -log(attenuationColor) / (attenuationDistance);\n    vec3 T = exp(-absorption * info.worldScale.xyz * surface.thickness);\n\n\t#endif // THICKNESS\n\n    vec3 Ft = refraction;\n\n    Ft *= surface.diffuseColor;\n\n    Ft *= 1.0 - E;\n\n\t#ifdef THICKNESS\n    Ft *= T;\n\t#endif // THICKNESS\n\n    return Ft * surface.transmission;\n}\n\n    #endif // TRANSMISSION\n\nvoid baseIBL(const in Surface surface, const in PixelInfo info, in vec3 E, inout vec3 Fd, inout vec3 Fr)\n{\n    vec3 dfg = info.dfg;\n    float NoV = info.NoV;\n    vec3 n = info.normalWS;\n    vec3 v = info.viewDir;\n    vec3 positionWS = info.positionWS;\n\n    vec3 diffuseColor = surface.diffuseColor;\n    float roughness = surface.perceptualRoughness;\n    float occlusion = surface.occlusion;\n\n    #ifdef ANISOTROPIC\n    vec3 bentNormal = anisotropyBentNormal(surface, info);\n    vec3 r = getReflectedVector(bentNormal, v, positionWS);\n    #else // ANISOTROPIC\n    vec3 r = getReflectedVector(n, v, positionWS);\n    #endif // ANISOTROPIC\n\n    vec3 indirectSpecular = specularRadiance(r, roughness);\n\n    // todo\n    float specularAO = occlusion;\n    Fr += E * indirectSpecular * specularAO * info.energyCompensation;\n\n    #if defined(USELIGHTMAP)\n\n    vec2 lightmapUV = info.lightmapUV;\n    vec3 bakedlight = getBakedLightmapColor(lightmapUV, n);\n    Fd += bakedlight * diffuseColor;\n\n    #else // USELIGHTMAP\n\n    vec3 irradiance = diffuseIrradiance(n, positionWS, info.viewDir);\n    Fd += diffuseColor * irradiance * (1.0 - E) * occlusion;\n\n    #endif // USELIGHTMAP\n}\n\nvec3 getE(const in Surface surface, const in PixelInfo info)\n{\n    #ifdef IRIDESCENCE\n\n    vec3 dfg = info.dfg;\n    float NoV = info.NoV;\n    vec3 iridescenceFresnel = info.iridescenceFresnel;\n    vec3 f0 = surface.f0;\n    float iridescenceFactor = surface.iridescence;\n    vec3 iridescenceFresnelMax = vec3(vecmax(iridescenceFresnel));\n    vec3 schlickFresnel = F_Schlick(f0, vec3(1.0), NoV);\n    vec3 F = mix(schlickFresnel, iridescenceFresnelMax, iridescenceFactor);\n    vec3 E = mix(dfg.xxx, dfg.yyy, F);\n\n    #else // IRIDESCENCE\n\n    vec3 dfg = info.dfg;\n    vec3 f0 = surface.f0;\n    vec3 f90 = surface.f90;\n    // vec3 E = mix(dfg.xxx, dfg.yyy, f0);\n    vec3 E = (f90 - f0) * dfg.x + f0 * dfg.y;\n\n    #endif // IRIDESCENCE\n    return E;\n}\n\nvec3 PBRGI(const in Surface surface, const in PixelInfo info)\n{\n    vec3 Fd = vec3(0.0);\n    vec3 Fr = vec3(0.0);\n\n    vec3 E = getE(surface, info);\n\n    #ifdef IRIDESCENCE\n    iridescenceIBL(surface, info, E, Fd, Fr);\n    #else // IRIDESCENCE\n    baseIBL(surface, info, E, Fd, Fr);\n    #endif // IRIDESCENCE\n\n    // sheen\n    #ifdef SHEEN\n    sheenIBL(surface, info, Fd, Fr);\n    #endif // SHEEN\n\n    // clear coat\n    #ifdef CLEARCOAT\n    clearCoatIBL(surface, info, Fd, Fr);\n    #endif // CLEARCOAT\n\n    #ifdef TRANSMISSION\n    Fd *= (1.0 - surface.transmission);\n    vec3 Ft = transmissionIBL(surface, info, E);\n    #endif // TRANSMISSION\n\n    vec3 gi = Fd + Fr;\n\n    #ifdef TRANSMISSION\n    gi += Ft;\n    #endif // TRANSMISSION\n\n    return gi;\n}\n\n#endif // pbrGI_lib'),t.Shader3D.addInclude("PBRCommon.glsl","#if !defined(pbrCommon_lib)\n    #define pbrCommon_lib\n\n// varying\nvarying vec3 v_PositionWS;\n\n// todo\nvarying vec3 v_NormalWS;\nvarying vec3 v_TangentWS;\nvarying vec3 v_BiNormalWS;\n\n    #ifdef UV\nvarying vec2 v_Texcoord0;\n    #endif // UV\n\n    #ifdef UV1\n\t#ifdef LIGHTMAP\nvarying vec2 v_Texcoord1;\n\t#endif // LIGHTMAP\n    #endif // UV1\n\n    #ifdef COLOR\nvarying vec4 v_VertexColor;\n    #endif // COLOR\n\n// 记录顶点信息, 用于由vs向fs传递数据\nstruct PixelParams {\n\n    vec3 positionWS;\n\n    vec3 normalWS;\n    vec3 tangentWS;\n    vec3 biNormalWS;\n    mat3 TBN;\n\n    #ifdef UV\n    vec2 uv0;\n    #endif // UV\n\n    #ifdef UV1\n\t#ifdef LIGHTMAP\n    vec2 uv1;\n\t#endif // LIGHTMAP\n    #endif // UV1\n\n    #ifdef COLOR\n    vec4 vertexColor;\n    #endif // COLOR\n};\n\n#endif // pbrCommon_lib"),t.Shader3D.addInclude("PBRVertex.glsl",'#if !defined(pbrVertex_lib)\n    #define pbrVertex_lib\n\n    #include "ShadingVertex.glsl";\n\n    #ifdef THICKNESS\n// xyz: world scale, w: length(xyz)\nvarying vec4 v_WorldScale;\n    #endif // THICKNESS\n\nvoid initPixelParams(inout PixelParams params, in Vertex vertex)\n{\n    shadingPixelParams(params, vertex);\n    sharePixelParams(params);\n\n    #ifdef THICKNESS\n    mat4 worldMat = getWorldMatrix();\n    v_WorldScale.x = length(vec3(worldMat[0].xyz));\n    v_WorldScale.y = length(vec3(worldMat[1].xyz));\n    v_WorldScale.z = length(vec3(worldMat[2].xyz));\n    v_WorldScale.w = length(v_WorldScale.xyz);\n    #endif // THICKNESS\n}\n\n#endif // pbrVertex_lib'),t.Shader3D.addInclude("PBRFrag.glsl",'//兼容WGSL\n#if !defined(pbrFrag_lib)\n    #define pbrFrag_lib\n\n    #include "PBRLighting.glsl";\n\n    #ifdef THICKNESS\n// xyz: world scale, w: length(xyz)\nvarying vec4 v_WorldScale;\n    #endif // THICKNESS\n\nvoid getPixelInfo(inout PixelInfo info, const in PixelParams pixel, const in Surface surface)\n{\n    info.positionWS = pixel.positionWS;\n    info.vertexNormalWS = pixel.normalWS;\n\n    #ifdef TANGENT\n    info.normalWS = normalize(pixel.TBN * surface.normalTS);\n    #else // TANGENT\n    info.normalWS = pixel.normalWS;\n    #endif // TANGENT\n\n    info.tangentWS = pixel.tangentWS;\n    info.biNormalWS = pixel.biNormalWS;\n\n    info.viewDir = normalize(u_CameraPos - info.positionWS);\n    info.NoV = min(max(dot(info.normalWS, info.viewDir), MIN_N_DOT_V), 1.0);\n\n    info.dfg = prefilteredDFG_LUT(surface.perceptualRoughness, info.NoV);\n\n    #ifdef SHEEN\n    info.energyCompensation = vec3(1.0);\n    #else // SHEEN\n    info.energyCompensation = (1.0 + surface.f0 * (1.0 / info.dfg.y - 1.0));\n    #endif // SHEEN\n\n    #ifdef IRIDESCENCE\n    info.iridescenceFresnel = evalIridescence(1.0, surface.iridescenceIor, info.NoV, surface.iridescenceThickness, surface.f0);\n    #endif // IRIDESCENCE\n\n    #ifdef SHEEN\n    info.sheenDfg = prefilteredDFG_LUT(surface.sheenPerceptualRoughness, info.NoV).z;\n    info.sheenScaling = 1.0 - vecmax(surface.sheenColor) * info.sheenDfg;\n    #endif // SHEEN\n\n    #ifdef CLEARCOAT\n\t#ifdef CLEARCOAT_NORMAL\n    info.clearCoatNormal = normalize(pixel.TBN * surface.clearCoatNormalTS);\n\t#else // CLEARCOAT_NORMAL\n    info.clearCoatNormal = info.vertexNormalWS;\n\t#endif // CLEARCOAT_NORMAL\n    info.clearCoatNoV = min(max(dot(info.clearCoatNormal, info.viewDir), MIN_N_DOT_V), 1.0);\n    #endif // CLEARCOAT\n\n    #ifdef ANISOTROPIC\n    mat3 anisotropyTBN = mat3(info.tangentWS, info.biNormalWS * -1.0, info.normalWS);\n    info.anisotropicT = anisotropyTBN * normalize(vec3(surface.anisotropyDirection, 0.0));\n    info.anisotropicB = cross(info.vertexNormalWS, info.anisotropicT);\n    info.ToV = dot(info.anisotropicT, info.viewDir);\n    info.BoV = dot(info.anisotropicB, info.viewDir);\n    info.at = mix(surface.roughness, 1.0, pow2(surface.anisotropy));\n    info.ab = surface.roughness;\n    #endif // ANISOTROPIC\n\n    #ifdef THICKNESS\n    info.worldScale = v_WorldScale;\n    #endif // THICKNESS\n\n    #ifdef LIGHTMAP\n\t#ifdef UV1\n    info.lightmapUV = pixel.uv1;\n\t#endif // UV1\n    #endif // LIGHTMAP\n}\n\nvec3 PBRLighting(const in Surface surface, const in PixelInfo info)\n{\n    vec3 lightColor = vec3(0.0);\n    #ifdef DIRECTIONLIGHT\n    for (int i = 0; i < CalculateLightCount; i++)\n\t{\n\t    if (i >= DirectionCount) break;\n\t    DirectionLight directionLight = getDirectionLight(i, info.positionWS);\n\t    // if (directionLight.lightMode == LightMode_Mix)\n\t\t// {\n\t\t//     continue;\n\t\t// }\n        if (directionLight.lightMode != LightMode_Mix) {\n\t        Light light = getLight(directionLight);\n\t        lightColor += PBRLighting(surface, info, light) * light.attenuation;\n        }\n\t}\n    #endif // DIRECTIONLIGHT\n\n    #if defined(POINTLIGHT) || defined(SPOTLIGHT)\n    ivec4 clusterInfo = getClusterInfo(u_View, u_Viewport, info.positionWS, gl_FragCoord, u_ProjectionParams);\n    #endif // POINTLIGHT || SPOTLIGHT\n\n    #ifdef POINTLIGHT\n    for (int i = 0; i < CalculateLightCount; i++)\n\t{\n        #ifdef BREAK_TEXTURE_SAMPLE\n\t    if (i >= clusterInfo.x) break; //兼容WGSL\n        #endif\n\t    PointLight pointLight = getPointLight(i, clusterInfo, info.positionWS);\n\t    // if (pointLight.lightMode == LightMode_Mix)\n\t\t// {\n\t\t//     continue;\n\t\t// }\n        if (pointLight.lightMode != LightMode_Mix) {\n\t        Light light = getLight(pointLight, info.normalWS, info.positionWS);\n            #ifndef BREAK_TEXTURE_SAMPLE\n            if (i < clusterInfo.x)\n            #endif\n\t            lightColor += PBRLighting(surface, info, light) * light.attenuation;\n        }\n\t}\n    #endif // POINTLIGHT\n\n    #ifdef SPOTLIGHT\n    for (int i = 0; i < CalculateLightCount; i++)\n\t{\n        #ifdef BREAK_TEXTURE_SAMPLE\n\t    if (i >= clusterInfo.y) break; //兼容WGSL\n        #endif\n\t    SpotLight spotLight = getSpotLight(i, clusterInfo, info.positionWS);\n\t    // if (spotLight.lightMode == LightMode_Mix)\n\t\t// {\n\t\t//     continue;\n\t\t// }\n        if (spotLight.lightMode != LightMode_Mix) {\n\t        Light light = getLight(spotLight, info.normalWS, info.positionWS);\n            #ifndef BREAK_TEXTURE_SAMPLE\n            if (i < clusterInfo.y)\n            #endif\n\t            lightColor += PBRLighting(surface, info, light) * light.attenuation;\n        }\n\t}\n    #endif // SPOTLIGHT\n\n    vec3 giColor = PBRGI(surface, info);\n\n    vec3 color = lightColor + giColor;\n\n    #ifdef EMISSION\n    color += surface.emissionColor;\n    #endif //  EMISSION\n    return color;\n}\n\n#endif // pbrFrag_lib'),PBRDefaultDFG.DefaultDfgTexture(),t.SubShader.regIncludeBindUnifrom("PBRGI.glsl",{u_IBLDFG:e.ShaderDataType.Texture2D},{u_IBLDFG:PBRDefaultDFG.defaultDFG}),t.Shader3D.addInclude("PBRMetallicFrag.glsl",'#if !defined(PBRMetallic_lib)\n    #define PBRMetallic_lib\n\n    #include "ShadingFrag.glsl";\n\n    #include "PBRFrag.glsl";\n\nstruct SurfaceInputs {\n    vec3 diffuseColor;\n    float alpha;\n    float alphaTest;\n    float metallic;\n    float smoothness;\n    float occlusion;\n    vec3 emissionColor;\n    vec3 normalTS;\n\n    #ifdef CLEARCOAT\n    float clearCoat;\n    float clearCoatRoughness;\n\t#ifdef CLEARCOAT_NORMAL\n    vec3 clearCoatNormalTS;\n\t#endif // CLEARCOAT_NORMAL\n    #endif // CLEARCOAT\n\n    #ifdef ANISOTROPIC\n    float anisotropy;\n    vec2 anisotropyDirection;\n    #endif // ANISOTROPIC\n};\n\nvoid initSurface(inout Surface surface, const in SurfaceInputs inputs, const in PixelParams pixel)\n{\n    surface.alpha = inputs.alpha;\n\n    surface.normalTS = inputs.normalTS;\n\n    vec3 baseColor = inputs.diffuseColor;\n    float metallic = inputs.metallic;\n    float perceptualRoughness = 1.0 - inputs.smoothness;\n\n    // default ior 1.5\n    float ior = 1.5;\n    surface.ior = 1.5;\n    vec3 f0 = vec3(0.04, 0.04, 0.04);\n\n    surface.perceptualRoughness = clamp(perceptualRoughness, MIN_PERCEPTUAL_ROUGHNESS, 1.0);\n    surface.roughness = surface.perceptualRoughness * surface.perceptualRoughness;\n    surface.diffuseColor = computeDiffuse(baseColor, metallic);\n    surface.f0 = computeF0(f0, baseColor, metallic);\n    surface.f90 = computeF90(surface.f0);\n\n    surface.occlusion = inputs.occlusion;\n\n    #ifdef EMISSION\n    surface.emissionColor = inputs.emissionColor;\n    #endif // EMISSION\n\n    #ifdef CLEARCOAT\n    surface.clearCoat = inputs.clearCoat;\n    surface.clearCoatPerceptualRoughness = clamp(inputs.clearCoatRoughness, MIN_PERCEPTUAL_ROUGHNESS, 1.0);\n    surface.clearCoatRoughness = surface.clearCoatPerceptualRoughness * surface.clearCoatPerceptualRoughness;\n\t#ifdef CLEARCOAT_NORMAL\n    surface.clearCoatNormalTS = inputs.clearCoatNormalTS;\n\t#endif // CLEARCOAT_NORMAL\n    #endif // CLEARCOAT\n\n    #ifdef ANISOTROPIC\n    surface.anisotropy = inputs.anisotropy;\n    surface.anisotropyDirection = inputs.anisotropyDirection;\n    #endif // ANISOTROPIC\n}\n\nvec4 PBR_Metallic_Flow(const in SurfaceInputs inputs, in PixelParams pixel)\n{\n    #ifdef ALPHATEST\n    if (inputs.alpha < inputs.alphaTest)\n\t{\n\t    discard;\n\t}\n    #endif // ALPHATEST\n\n    Surface surface;\n    initSurface(surface, inputs, pixel);\n\n    PixelInfo info;\n    getPixelInfo(info, pixel, surface);\n\n    vec3 surfaceColor = vec3(0.0);\n    surfaceColor += PBRLighting(surface, info);\n\n    return vec4(surfaceColor, surface.alpha);\n}\n\n#endif // PBRMetallic_lib\n')}}var R,A,C,y;e.PBRRenderMode=void 0,(R=e.PBRRenderMode||(e.PBRRenderMode={}))[R.Opaque=0]="Opaque",R[R.Cutout=1]="Cutout",R[R.Fade=2]="Fade",R[R.Transparent=3]="Transparent";class PBRMaterial extends t.Material{constructor(){super(),this._shaderValues.setColor(PBRMaterial.ALBEDOCOLOR,new t.Color(1,1,1,1)),this._shaderValues.setColor(PBRMaterial.EMISSIONCOLOR,new t.Color(1,1,1,1)),this._shaderValues.setVector(PBRMaterial.TILINGOFFSET,new t.Vector4(1,1,0,0)),this._shaderValues.setNumber(PBRMaterial.SMOOTHNESS,.5),this._shaderValues.setNumber(PBRMaterial.OCCLUSIONSTRENGTH,1),this._shaderValues.setNumber(PBRMaterial.NORMALSCALE,1),this._shaderValues.setNumber(PBRMaterial.PARALLAXSCALE,.001),this._shaderValues.setNumber(t.Material.ALPHATESTVALUE,.5),this.renderMode=e.PBRRenderMode.Opaque}static __init__(){PBRMaterial.SHADERDEFINE_ALBEDOTEXTURE=t.Shader3D.getDefineByName("ALBEDOTEXTURE"),PBRMaterial.SHADERDEFINE_NORMALTEXTURE=t.Shader3D.getDefineByName("NORMALTEXTURE"),PBRMaterial.SHADERDEFINE_PARALLAXTEXTURE=t.Shader3D.getDefineByName("PARALLAXTEXTURE"),PBRMaterial.SHADERDEFINE_OCCLUSIONTEXTURE=t.Shader3D.getDefineByName("OCCLUSIONTEXTURE"),PBRMaterial.SHADERDEFINE_EMISSIONTEXTURE=t.Shader3D.getDefineByName("EMISSIONTEXTURE"),PBRMaterial.SHADERDEFINE_TRANSPARENTBLEND=t.Shader3D.getDefineByName("TRANSPARENTBLEND"),PBRMaterial.SHADERDEFINE_LAYA_PBR_BRDF_HIGH=t.Shader3D.getDefineByName("LAYA_PBR_BRDF_HIGH"),PBRMaterial.SHADERDEFINE_LAYA_PBR_BRDF_LOW=t.Shader3D.getDefineByName("LAYA_PBR_BRDF_LOW"),PBRMaterial.SHADERDEFINE_DETAILALBEDO=t.Shader3D.getDefineByName("DETAILTEXTURE"),PBRMaterial.SHADERDEFINE_DETAILNORMAL=t.Shader3D.getDefineByName("DETAILNORMAL"),PBRMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR=t.Shader3D.getDefineByName("ENABLEVERTEXCOLOR"),PBRMaterial.ALBEDOTEXTURE=t.Shader3D.propertyNameToID("u_AlbedoTexture"),PBRMaterial.ALBEDOCOLOR=t.Shader3D.propertyNameToID("u_AlbedoColor"),PBRMaterial.TILINGOFFSET=t.Shader3D.propertyNameToID("u_TilingOffset"),PBRMaterial.NORMALTEXTURE=t.Shader3D.propertyNameToID("u_NormalTexture"),PBRMaterial.NORMALSCALE=t.Shader3D.propertyNameToID("u_NormalScale"),PBRMaterial.SMOOTHNESS=t.Shader3D.propertyNameToID("u_Smoothness"),PBRMaterial.OCCLUSIONTEXTURE=t.Shader3D.propertyNameToID("u_OcclusionTexture"),PBRMaterial.OCCLUSIONSTRENGTH=t.Shader3D.propertyNameToID("u_OcclusionStrength"),PBRMaterial.PARALLAXTEXTURE=t.Shader3D.propertyNameToID("u_ParallaxTexture"),PBRMaterial.PARALLAXSCALE=t.Shader3D.propertyNameToID("u_ParallaxScale"),PBRMaterial.EMISSIONTEXTURE=t.Shader3D.propertyNameToID("u_EmissionTexture"),PBRMaterial.EMISSIONCOLOR=t.Shader3D.propertyNameToID("u_EmissionColor"),PBRMaterial.EMISSIONIntensity=t.Shader3D.propertyNameToID("u_EmissionIntensity"),PBRMaterial.DETAILALBEDOTEXTURE=t.Shader3D.propertyNameToID("u_DetailAlbedoTexture"),PBRMaterial.DETAILNORMALTEXTURE=t.Shader3D.propertyNameToID("u_DetailNormalTexture"),PBRMaterial.DETAILTILLINGOFFSET=t.Shader3D.propertyNameToID("u_DetailTillingOffset"),PBRMaterial.DETAILNORMALSCALE=t.Shader3D.propertyNameToID("u_DetailNormalScale"),PBRMaterial.CLEARCOAT=t.Shader3D.propertyNameToID("u_ClearCoatFactor"),PBRMaterial.SHADERDEFINE_CLEARCOATTEXTURE=t.Shader3D.getDefineByName("CLEARCOATMAP"),PBRMaterial.CLEARCOATTEXTURE=t.Shader3D.propertyNameToID("u_ClearCoatTexture"),PBRMaterial.CLEARCOATROUGHNESS=t.Shader3D.propertyNameToID("u_ClearCoatRoughness"),PBRMaterial.SHADERDEFINE_CLEARCOATROUGHNESSTEXTURE=t.Shader3D.getDefineByName("CLEARCOAT_ROUGHNESSMAP"),PBRMaterial.CLEARCOATROUGHNESSTEXTURE=t.Shader3D.propertyNameToID("u_ClearCoatRoughnessTexture"),PBRMaterial.CLEARCOATNORMALTEXTURE=t.Shader3D.propertyNameToID("u_ClearCoatNormalTexture"),PBRMaterial.ANISOTROPY=t.Shader3D.propertyNameToID("u_AnisotropyStrength"),PBRMaterial.SHADERDEFINE_ANISOTROPYTEXTURE=t.Shader3D.getDefineByName("ANISOTROPYMAP"),PBRMaterial.ANISOTROPYTEXTURE=t.Shader3D.propertyNameToID("u_AnisotropyTexture"),PBRMaterial.ANISOTROPYROTATION=t.Shader3D.propertyNameToID("u_AnisotropyRotation")}get albedoColor(){return this._shaderValues.getColor(PBRMaterial.ALBEDOCOLOR)}set albedoColor(e){this._shaderValues.setColor(PBRMaterial.ALBEDOCOLOR,e)}get albedoTexture(){return this.hasDefine(PBRMaterial.SHADERDEFINE_ALBEDOTEXTURE)?this._shaderValues.getTexture(PBRMaterial.ALBEDOTEXTURE):null}set albedoTexture(e){e?this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_ALBEDOTEXTURE):this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_ALBEDOTEXTURE),this.setTextureByIndex(PBRMaterial.ALBEDOTEXTURE,e)}get normalTexture(){return this.hasDefine(PBRMaterial.SHADERDEFINE_NORMALTEXTURE)?this._shaderValues.getTexture(PBRMaterial.NORMALTEXTURE):null}set normalTexture(e){e?this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_NORMALTEXTURE):this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_NORMALTEXTURE),this.setTextureByIndex(PBRMaterial.NORMALTEXTURE,e)}get normalTextureScale(){return this._shaderValues.getNumber(PBRMaterial.NORMALSCALE)}set normalTextureScale(e){this._shaderValues.setNumber(PBRMaterial.NORMALSCALE,e)}get parallaxTexture(){return this._shaderValues.getTexture(PBRMaterial.PARALLAXTEXTURE)}set parallaxTexture(e){e?this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_PARALLAXTEXTURE):this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_PARALLAXTEXTURE),this.setTextureByIndex(PBRMaterial.PARALLAXTEXTURE,e)}get parallaxTextureScale(){return this._shaderValues.getNumber(PBRMaterial.PARALLAXSCALE)}set parallaxTextureScale(e){this._shaderValues.setNumber(PBRMaterial.PARALLAXSCALE,Math.max(.005,Math.min(.08,e)))}get occlusionTexture(){return this._shaderValues.getTexture(PBRMaterial.OCCLUSIONTEXTURE)}set occlusionTexture(e){e?this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_OCCLUSIONTEXTURE):this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_OCCLUSIONTEXTURE),this.setTextureByIndex(PBRMaterial.OCCLUSIONTEXTURE,e)}get occlusionTextureStrength(){return this._shaderValues.getNumber(PBRMaterial.OCCLUSIONSTRENGTH)}set occlusionTextureStrength(e){this._shaderValues.setNumber(PBRMaterial.OCCLUSIONSTRENGTH,Math.max(0,Math.min(1,e)))}get smoothness(){return this._shaderValues.getNumber(PBRMaterial.SMOOTHNESS)}set smoothness(e){this._shaderValues.setNumber(PBRMaterial.SMOOTHNESS,Math.max(0,Math.min(1,e)))}get enableVertexColor(){return this.hasDefine(PBRMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR)}set enableVertexColor(e){e?this.addDefine(PBRMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR):this.removeDefine(PBRMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR)}get enableEmission(){return this._shaderValues.hasDefine(PBRShaderLib.DEFINE_EMISSION)}set enableEmission(e){e?this._shaderValues.addDefine(PBRShaderLib.DEFINE_EMISSION):this._shaderValues.removeDefine(PBRShaderLib.DEFINE_EMISSION)}get emissionColor(){return this._shaderValues.getColor(PBRMaterial.EMISSIONCOLOR)}set emissionColor(e){this._shaderValues.setColor(PBRMaterial.EMISSIONCOLOR,e)}set emissionIntensity(e){this._shaderValues.setNumber(PBRMaterial.EMISSIONIntensity,e)}get emissionIntensity(){return this._shaderValues.getNumber(PBRMaterial.EMISSIONIntensity)}get emissionTexture(){return this._shaderValues.getTexture(PBRMaterial.EMISSIONTEXTURE)}set emissionTexture(e){e?this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_EMISSIONTEXTURE):this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_EMISSIONTEXTURE),this.setTextureByIndex(PBRMaterial.EMISSIONTEXTURE,e)}get tilingOffset(){return this._shaderValues.getVector(PBRMaterial.TILINGOFFSET)}set tilingOffset(e){e?this._shaderValues.setVector(PBRMaterial.TILINGOFFSET,e):this._shaderValues.getVector(PBRMaterial.TILINGOFFSET).setValue(1,1,0,0)}get detailAlbedoTexture(){return this._shaderValues.getTexture(PBRMaterial.DETAILALBEDOTEXTURE)}set detailAlbedoTexture(e){e?this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_DETAILALBEDO):this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_DETAILALBEDO),this.setTextureByIndex(PBRMaterial.DETAILALBEDOTEXTURE,e)}get detailNormalTexture(){return this._shaderValues.getTexture(PBRMaterial.DETAILNORMALTEXTURE)}set detailNormalTexture(e){e?this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_DETAILNORMAL):this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_DETAILNORMAL),this.setTextureByIndex(PBRMaterial.DETAILNORMALTEXTURE,e)}get detailTilingOffset(){return this._shaderValues.getVector(PBRMaterial.DETAILTILLINGOFFSET)}set detailTilingOffset(e){e?this._shaderValues.setVector(PBRMaterial.DETAILTILLINGOFFSET,e):this._shaderValues.getVector(PBRMaterial.DETAILTILLINGOFFSET).setValue(1,1,0,0)}get detailNormalScale(){return this._shaderValues.getNumber(PBRMaterial.DETAILNORMALSCALE)}set detailNormalScale(e){this._shaderValues.setNumber(PBRMaterial.DETAILNORMALSCALE,e)}set renderMode(a){switch(a){case e.PBRRenderMode.Opaque:this.alphaTest=!1,this.renderQueue=t.Material.RENDERQUEUE_OPAQUE,this.depthWrite=!0,this.cull=RenderState.CULL_BACK,this.blend=RenderState.BLEND_DISABLE,this.depthTest=RenderState.DEPTHTEST_LESS,this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_TRANSPARENTBLEND);break;case e.PBRRenderMode.Cutout:this.renderQueue=t.Material.RENDERQUEUE_ALPHATEST,this.alphaTest=!0,this.depthWrite=!0,this.cull=RenderState.CULL_BACK,this.blend=RenderState.BLEND_DISABLE,this.depthTest=RenderState.DEPTHTEST_LESS,this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_TRANSPARENTBLEND);break;case e.PBRRenderMode.Fade:this.renderQueue=t.Material.RENDERQUEUE_TRANSPARENT,this.alphaTest=!1,this.depthWrite=!1,this.cull=RenderState.CULL_BACK,this.blend=RenderState.BLEND_ENABLE_ALL,this.blendSrc=RenderState.BLENDPARAM_SRC_ALPHA,this.blendDst=RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA,this.depthTest=RenderState.DEPTHTEST_LESS,this._shaderValues.removeDefine(PBRMaterial.SHADERDEFINE_TRANSPARENTBLEND);break;case e.PBRRenderMode.Transparent:this.renderQueue=t.Material.RENDERQUEUE_TRANSPARENT,this.alphaTest=!1,this.depthWrite=!1,this.cull=RenderState.CULL_BACK,this.blend=RenderState.BLEND_ENABLE_ALL,this.blendSrc=RenderState.BLENDPARAM_ONE,this.blendDst=RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA,this.depthTest=RenderState.DEPTHTEST_LESS,this._shaderValues.addDefine(PBRMaterial.SHADERDEFINE_TRANSPARENTBLEND);break;default:throw new Error("PBRMaterial:unknown renderMode value.")}}get anisotropyEnable(){return this.shaderData.hasDefine(PBRShaderLib.DEFINE_ANISOTROPY)}set anisotropyEnable(e){e?this.shaderData.addDefine(PBRShaderLib.DEFINE_ANISOTROPY):this.shaderData.removeDefine(PBRShaderLib.DEFINE_ANISOTROPY)}get anisotropy(){return this.getFloatByIndex(PBRMaterial.ANISOTROPY)}set anisotropy(e){this.setFloatByIndex(PBRMaterial.ANISOTROPY,Math.min(1,Math.max(-1,e)))}get anisotropyTexture(){return this.getTextureByIndex(PBRMaterial.ANISOTROPYTEXTURE)}set anisotropyTexture(e){this.setTextureByIndex(PBRMaterial.ANISOTROPYTEXTURE,e),e?this.addDefine(PBRMaterial.SHADERDEFINE_ANISOTROPYTEXTURE):this.removeDefine(PBRMaterial.SHADERDEFINE_ANISOTROPYTEXTURE)}get anisotropyRotation(){return this.getFloatByIndex(PBRMaterial.ANISOTROPYROTATION)}set anisotropyRotation(e){e=Math.max(Math.min(e,1),0),this.setFloatByIndex(PBRMaterial.ANISOTROPYROTATION,e)}get clearCoatEnable(){return this.shaderData.hasDefine(PBRShaderLib.DEFINE_CLEARCOAT)}set clearCoatEnable(e){e?this.shaderData.addDefine(PBRShaderLib.DEFINE_CLEARCOAT):this.shaderData.removeDefine(PBRShaderLib.DEFINE_CLEARCOAT)}get clearCoat(){return this.shaderData.getNumber(PBRMaterial.CLEARCOAT)}set clearCoat(e){this.shaderData.setNumber(PBRMaterial.CLEARCOAT,e)}get clearCoatTexture(){return this.shaderData.getTexture(PBRMaterial.CLEARCOATTEXTURE)}set clearCoatTexture(e){e?this.shaderData.addDefine(PBRMaterial.SHADERDEFINE_CLEARCOATTEXTURE):this.shaderData.removeDefine(PBRMaterial.SHADERDEFINE_CLEARCOATTEXTURE),this.setTextureByIndex(PBRMaterial.CLEARCOATTEXTURE,e)}get clearCoatRoughness(){return this.shaderData.getNumber(PBRMaterial.CLEARCOATROUGHNESS)}set clearCoatRoughness(e){this.shaderData.setNumber(PBRMaterial.CLEARCOATROUGHNESS,e)}get clearCoatRoughnessTexture(){return this.shaderData.getTexture(PBRMaterial.CLEARCOATROUGHNESSTEXTURE)}set clearCoatRoughnessTexture(e){e?this.shaderData.addDefine(PBRMaterial.SHADERDEFINE_CLEARCOATROUGHNESSTEXTURE):this.shaderData.removeDefine(PBRMaterial.SHADERDEFINE_CLEARCOATROUGHNESSTEXTURE),this.setTextureByIndex(PBRMaterial.CLEARCOATROUGHNESSTEXTURE,e)}get clearCoatNormalTexture(){return this.shaderData.getTexture(PBRMaterial.CLEARCOATNORMALTEXTURE)}set clearCoatNormalTexture(e){e?this.shaderData.addDefine(PBRShaderLib.DEFINE_CLEARCOAT_NORMAL):this.shaderData.removeDefine(PBRShaderLib.DEFINE_CLEARCOAT_NORMAL),this.setTextureByIndex(PBRMaterial.CLEARCOATNORMALTEXTURE,e)}get smoothnessTextureScale(){return this._shaderValues.getNumber(PBRMaterial.SMOOTHNESS)}set smoothnessTextureScale(e){this._shaderValues.setNumber(PBRMaterial.SMOOTHNESS,Math.max(0,Math.min(1,e)))}}PBRMaterial.renderQuality=e.PBRRenderQuality.High,e.PBRMetallicSmoothnessSource=void 0,(A=e.PBRMetallicSmoothnessSource||(e.PBRMetallicSmoothnessSource={}))[A.MetallicGlossTextureAlpha=0]="MetallicGlossTextureAlpha",A[A.AlbedoTextureAlpha=1]="AlbedoTextureAlpha";class PBRStandardMaterial extends PBRMaterial{constructor(){super(),this._smoothnessSource=0,this.setShaderName("PBR")}static __init__(){PBRStandardMaterial.SHADERDEFINE_METALLICGLOSSTEXTURE=t.Shader3D.getDefineByName("METALLICGLOSSTEXTURE"),PBRStandardMaterial.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA=t.Shader3D.getDefineByName("SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA"),PBRStandardMaterial.METALLICGLOSSTEXTURE=t.Shader3D.propertyNameToID("u_MetallicGlossTexture"),PBRStandardMaterial.METALLIC=t.Shader3D.propertyNameToID("u_Metallic")}get metallicGlossTexture(){return this._shaderValues.getTexture(PBRStandardMaterial.METALLICGLOSSTEXTURE)}set metallicGlossTexture(e){e?this._shaderValues.addDefine(PBRStandardMaterial.SHADERDEFINE_METALLICGLOSSTEXTURE):this._shaderValues.removeDefine(PBRStandardMaterial.SHADERDEFINE_METALLICGLOSSTEXTURE),this._shaderValues.setTexture(PBRStandardMaterial.METALLICGLOSSTEXTURE,e)}get metallic(){return this._shaderValues.getNumber(PBRStandardMaterial.METALLIC)}set metallic(e){this._shaderValues.setNumber(PBRStandardMaterial.METALLIC,Math.max(0,Math.min(1,e)))}get smoothnessSource(){return this._smoothnessSource}set smoothnessSource(e){e?this._shaderValues.addDefine(PBRStandardMaterial.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA):this._shaderValues.removeDefine(PBRStandardMaterial.SHADERDEFINE_SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA),this._smoothnessSource=e}clone(){var e=new PBRStandardMaterial;return this.cloneTo(e),e}}class SkyBoxMaterial extends t.Material{constructor(){super(),this.setShaderName("SkyBox")}static __initDefine__(){SkyBoxMaterial.TINTCOLOR=t.Shader3D.propertyNameToID("u_TintColor"),SkyBoxMaterial.EXPOSURE=t.Shader3D.propertyNameToID("u_Exposure"),SkyBoxMaterial.ROTATION=t.Shader3D.propertyNameToID("u_Rotation"),SkyBoxMaterial.TEXTURECUBE=t.Shader3D.propertyNameToID("u_CubeTexture")}get tintColor(){return this._shaderValues.getColor(SkyBoxMaterial.TINTCOLOR)}set tintColor(e){this._shaderValues.setColor(SkyBoxMaterial.TINTCOLOR,e)}get exposure(){return this._shaderValues.getNumber(SkyBoxMaterial.EXPOSURE)}set exposure(e){this._shaderValues.setNumber(SkyBoxMaterial.EXPOSURE,e)}get rotation(){return this._shaderValues.getNumber(SkyBoxMaterial.ROTATION)}set rotation(e){this._shaderValues.setNumber(SkyBoxMaterial.ROTATION,e)}get textureCube(){return this._shaderValues.getTexture(SkyBoxMaterial.TEXTURECUBE)}set textureCube(e){this._shaderValues.setTexture(SkyBoxMaterial.TEXTURECUBE,e)}clone(){var e=new SkyBoxMaterial;return this.cloneTo(e),e}}class SkyProceduralMaterial extends t.Material{constructor(){super(),this.setShaderName("SkyProcedural"),this.sunDisk=SkyProceduralMaterial.SUN_HIGH_QUALITY,this.sunSize=.04,this.sunSizeConvergence=5,this.atmosphereThickness=1,this.skyTint=new t.Color(.5,.5,.5,1),this.groundTint=new t.Color(.369,.349,.341,1),this.exposure=1.3}static __initDefine__(){SkyProceduralMaterial.SHADERDEFINE_SUN_HIGH_QUALITY=t.Shader3D.getDefineByName("SUN_HIGH_QUALITY"),SkyProceduralMaterial.SHADERDEFINE_SUN_SIMPLE=t.Shader3D.getDefineByName("SUN_SIMPLE"),SkyProceduralMaterial.SUNSIZE=t.Shader3D.propertyNameToID("u_SunSize"),SkyProceduralMaterial.SUNSIZECONVERGENCE=t.Shader3D.propertyNameToID("u_SunSizeConvergence"),SkyProceduralMaterial.ATMOSPHERETHICKNESS=t.Shader3D.propertyNameToID("u_AtmosphereThickness"),SkyProceduralMaterial.SKYTINT=t.Shader3D.propertyNameToID("u_SkyTint"),SkyProceduralMaterial.GROUNDTINT=t.Shader3D.propertyNameToID("u_GroundTint"),SkyProceduralMaterial.EXPOSURE=t.Shader3D.propertyNameToID("u_Exposure")}get sunDisk(){return this._sunDisk}set sunDisk(e){switch(e){case SkyProceduralMaterial.SUN_HIGH_QUALITY:this._shaderValues.removeDefine(SkyProceduralMaterial.SHADERDEFINE_SUN_SIMPLE),this._shaderValues.addDefine(SkyProceduralMaterial.SHADERDEFINE_SUN_HIGH_QUALITY);break;case SkyProceduralMaterial.SUN_SIMPLE:this._shaderValues.removeDefine(SkyProceduralMaterial.SHADERDEFINE_SUN_HIGH_QUALITY),this._shaderValues.addDefine(SkyProceduralMaterial.SHADERDEFINE_SUN_SIMPLE);break;case SkyProceduralMaterial.SUN_NODE:this._shaderValues.removeDefine(SkyProceduralMaterial.SHADERDEFINE_SUN_HIGH_QUALITY),this._shaderValues.removeDefine(SkyProceduralMaterial.SHADERDEFINE_SUN_SIMPLE);break;default:throw"SkyBoxProceduralMaterial: unknown sun value."}this._sunDisk=e}get sunSize(){return this._shaderValues.getNumber(SkyProceduralMaterial.SUNSIZE)}set sunSize(e){e=Math.min(Math.max(0,e),1),this._shaderValues.setNumber(SkyProceduralMaterial.SUNSIZE,e)}get sunSizeConvergence(){return this._shaderValues.getNumber(SkyProceduralMaterial.SUNSIZECONVERGENCE)}set sunSizeConvergence(e){e=Math.min(Math.max(0,e),20),this._shaderValues.setNumber(SkyProceduralMaterial.SUNSIZECONVERGENCE,e)}get atmosphereThickness(){return this._shaderValues.getNumber(SkyProceduralMaterial.ATMOSPHERETHICKNESS)}set atmosphereThickness(e){e=Math.min(Math.max(0,e),5),this._shaderValues.setNumber(SkyProceduralMaterial.ATMOSPHERETHICKNESS,e)}get skyTint(){return this._shaderValues.getColor(SkyProceduralMaterial.SKYTINT)}set skyTint(e){this._shaderValues.setColor(SkyProceduralMaterial.SKYTINT,e)}get groundTint(){return this._shaderValues.getColor(SkyProceduralMaterial.GROUNDTINT)}set groundTint(e){this._shaderValues.setColor(SkyProceduralMaterial.GROUNDTINT,e)}get exposure(){return this._shaderValues.getNumber(SkyProceduralMaterial.EXPOSURE)}set exposure(e){e=Math.min(Math.max(0,e),8),this._shaderValues.setNumber(SkyProceduralMaterial.EXPOSURE,e)}clone(){var e=new SkyProceduralMaterial;return this.cloneTo(e),e}}SkyProceduralMaterial.SUN_NODE=0,SkyProceduralMaterial.SUN_SIMPLE=1,SkyProceduralMaterial.SUN_HIGH_QUALITY=2;class UnlitMaterial extends t.Material{constructor(){super(),this.setShaderName("Unlit"),this.renderMode=UnlitMaterial.RENDERMODE_OPAQUE,this.albedoIntensity=1}static __initDefine__(){UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE=t.Shader3D.getDefineByName("ALBEDOTEXTURE"),UnlitMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR=t.Shader3D.getDefineByName("ENABLEVERTEXCOLOR"),UnlitMaterial.ALBEDOTEXTURE=t.Shader3D.propertyNameToID("u_AlbedoTexture"),UnlitMaterial.ALBEDOCOLOR=t.Shader3D.propertyNameToID("u_AlbedoColor"),UnlitMaterial.TILINGOFFSET=t.Shader3D.propertyNameToID("u_TilingOffset")}get albedoColor(){return this.getColorByIndex(UnlitMaterial.ALBEDOCOLOR)}set albedoColor(e){this.setColorByIndex(UnlitMaterial.ALBEDOCOLOR,e.scale(this._albedoIntensity))}get albedoIntensity(){return this._albedoIntensity}set albedoIntensity(e){this._albedoIntensity=e}get albedoTexture(){return this.getTextureByIndex(UnlitMaterial.ALBEDOTEXTURE)}set albedoTexture(e){e?this.addDefine(UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE):this.removeDefine(UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE),this.setTextureByIndex(UnlitMaterial.ALBEDOTEXTURE,e)}get tilingOffset(){return this.getVector4ByIndex(UnlitMaterial.TILINGOFFSET)}set tilingOffset(e){e?this.setVector4ByIndex(UnlitMaterial.TILINGOFFSET,e):this.setVector4ByIndex(UnlitMaterial.TILINGOFFSET,new t.Vector4(1,1,0,0))}get enableVertexColor(){return this.hasDefine(UnlitMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR)}set enableVertexColor(e){e?this.addDefine(UnlitMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR):this.removeDefine(UnlitMaterial.SHADERDEFINE_ENABLEVERTEXCOLOR)}clone(){var e=new UnlitMaterial;return this.cloneTo(e),e}set renderMode(e){switch(e){case UnlitMaterial.RENDERMODE_OPAQUE:this.alphaTest=!1,this.renderQueue=t.Material.RENDERQUEUE_OPAQUE,this.depthWrite=!0,this.cull=RenderState.CULL_BACK,this.blend=RenderState.BLEND_DISABLE,this.depthTest=RenderState.DEPTHTEST_LESS;break;case UnlitMaterial.RENDERMODE_CUTOUT:this.renderQueue=t.Material.RENDERQUEUE_ALPHATEST,this.alphaTest=!0,this.depthWrite=!0,this.cull=RenderState.CULL_BACK,this.blend=RenderState.BLEND_DISABLE,this.depthTest=RenderState.DEPTHTEST_LESS;break;case UnlitMaterial.RENDERMODE_TRANSPARENT:this.renderQueue=t.Material.RENDERQUEUE_TRANSPARENT,this.alphaTest=!1,this.depthWrite=!1,this.cull=RenderState.CULL_BACK,this.blend=RenderState.BLEND_ENABLE_ALL,this.blendSrc=RenderState.BLENDPARAM_SRC_ALPHA,this.blendDst=RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA,this.depthTest=RenderState.DEPTHTEST_LESS;break;default:throw new Error("UnlitMaterial : renderMode value error.")}}}UnlitMaterial.RENDERMODE_OPAQUE=0,UnlitMaterial.RENDERMODE_CUTOUT=1,UnlitMaterial.RENDERMODE_TRANSPARENT=2,UnlitMaterial.RENDERMODE_ADDTIVE=3;class MeshSprite3D extends RenderableSprite3D{constructor(e=null,t=null){super(t),this._meshFilter=this.addComponent(MeshFilter),this._render=this.addComponent(MeshRenderer),e&&(this._meshFilter.sharedMesh=e)}get meshFilter(){return this._meshFilter}get meshRenderer(){return this._render}_parse(e,a){super._parse(e,a);var r=this.meshRenderer,n=e.lightmapIndex;null!=n&&(r.lightmapIndex=n);var i=e.lightmapScaleOffset;i&&(r.lightmapScaleOffset=new t.Vector4(i[0],i[1],i[2],i[3])),null!=e.meshPath&&(this.meshFilter.sharedMesh=t.Loader.getRes(e.meshPath)),null!=e.enableRender&&(r._enabled=e.enableRender),null!=e.receiveShadows&&(r.receiveShadow=e.receiveShadows),null!=e.castShadow&&(r.castShadow=e.castShadow);var o=e.materials;if(o){var s=r.sharedMaterials,l=o.length;s.length=l;for(var h=0;h<l;h++)s[h]=t.Loader.getRes(o[h].path);r.sharedMaterials=s}}_cloneTo(e,t,a){super._cloneTo(e,t,a)}_create(){return new Sprite3D}}class GradientMode{}GradientMode.Blend=0,GradientMode.Fixed=1;class Gradient{constructor(e,a){this._mode=0,this._maxColorRGBKeysCount=0,this._maxColorAlphaKeysCount=0,this._colorRGBKeysCount=0,this._colorAlphaKeysCount=0,this._keyRanges=new t.Vector4(1,0,1,0),this._alphaElements=null,this._rgbElements=null,this.__alphaElements=null,this.__rgbElements=null,this._maxColorRGBKeysCount=e,this._maxColorAlphaKeysCount=a,this._rgbElements=new Float32Array(4*e),this._alphaElements=new Float32Array(2*a)}get rgbElements(){if(this._colorRGBKeysCount<2){null==this.__rgbElements&&(this.__rgbElements=new Float32Array(8));let e=this.__rgbElements;return e[1]=e[5]=this._rgbElements[1],e[2]=e[6]=this._rgbElements[2],e[3]=e[7]=this._rgbElements[3],e[0]=0,e[4]=1,e}return this._rgbElements}get alphaElements(){if(this._colorAlphaKeysCount<2){null==this.__alphaElements&&(this.__alphaElements=new Float32Array(4));let e=this.__alphaElements;return e[1]=e[3]=this._alphaElements[1],e[0]=0,e[2]=1,e}return this._alphaElements}get mode(){return this._mode}set mode(e){this._mode=e}get colorRGBKeysCount(){return this._colorRGBKeysCount}get colorAlphaKeysCount(){return this._colorAlphaKeysCount}get maxColorRGBKeysCount(){return this._maxColorRGBKeysCount}get maxColorAlphaKeysCount(){return this._maxColorAlphaKeysCount}addColorRGB(e,t){if(this._colorRGBKeysCount<this._maxColorRGBKeysCount){var a=4*this._colorRGBKeysCount;this._rgbElements[a]=e,this._rgbElements[a+1]=t.r,this._rgbElements[a+2]=t.g,this._rgbElements[a+3]=t.b,this._colorRGBKeysCount++}else console.warn("Gradient:warning:data count must lessEqual than "+this._maxColorRGBKeysCount)}addColorAlpha(e,t){if(this._colorAlphaKeysCount<this._maxColorAlphaKeysCount){var a=2*this._colorAlphaKeysCount;this._alphaElements[a]=e,this._alphaElements[a+1]=t,this._colorAlphaKeysCount++}else console.warn("Gradient:warning:data count must lessEqual than "+this._maxColorAlphaKeysCount)}updateColorRGB(e,t,a){if(e<this._colorRGBKeysCount){var r=4*e;this._rgbElements[r]=t,this._rgbElements[r+1]=a.r,this._rgbElements[r+2]=a.g,this._rgbElements[r+3]=a.b}else console.warn("Gradient:warning:index must lessEqual than colorRGBKeysCount:"+this._colorRGBKeysCount)}updateColorAlpha(e,t,a){if(e<this._colorAlphaKeysCount){var r=2*e;this._alphaElements[r]=t,this._alphaElements[r+1]=a}else console.warn("Gradient:warning:index must lessEqual than colorAlphaKeysCount:"+this._colorAlphaKeysCount)}evaluateColorRGB(e,t,a=0,r=!1){e=Math.min(Math.max(e,0),1);var n=this._rgbElements,i=a;if(r)for(var o=i;o>=0;o--){var s=4*o;if(e===(_=n[s]))return t.r=n[s+1],t.g=n[s+2],t.b=n[s+3],i;var l=n[s+4];switch(this._mode){case GradientMode.Blend:if(e>_&&l){if(e>l)continue;var h=l-_,d=l-e,c=e-_;return t.r=(d*n[s+1]+c*n[s+5])/h,t.g=(d*n[s+2]+c*n[s+6])/h,t.b=(d*n[s+3]+c*n[s+7])/h,i}i--;continue;case GradientMode.Fixed:if(e>_){if(e>n[s+4])throw"Gradient:wrong startSearchIndex.";return t.r=n[s+5],t.g=n[s+6],t.b=n[s+7],i}i--;continue;default:throw"Gradient:unknown mode."}}else{o=0;for(var u=this._rgbElements.length;o<u;o++){if(e===(l=n[s=4*o]))return t.r=n[s+1],t.g=n[s+2],t.b=n[s+3],i;switch(this._mode){case GradientMode.Blend:if(e<l){var _;if(e<(_=n[s-4]))throw"Gradient:wrong startSearchIndex.";h=l-_,d=l-e,c=e-_;return t.r=(d*n[s-3]+c*n[s+1])/h,t.g=(d*n[s-2]+c*n[s+2])/h,t.b=(d*n[s-1]+c*n[s+3])/h,i}i++;continue;case GradientMode.Fixed:if(e<l){if(e<n[s-4])throw"Gradient:wrong startSearchIndex.";return t.r=n[s+1],t.g=n[s+2],t.b=n[s+3],i}i++;continue;default:throw"Gradient:unknown mode."}}}return i}evaluateColorAlpha(e,t,a=0,r=!1){e=Math.min(Math.max(e,0),1);var n=this._alphaElements,i=a;if(r)for(var o=i;o>=0;o--){if(e===(_=n[u=2*o]))return t.a=n[u+1],i;var s=n[u+2];switch(this._mode){case GradientMode.Blend:if(e>_&&s){if(e>s)continue;var l=s-_,h=s-e,d=e-_;return t.a=(h*n[u+1]+d*n[u+3])/l,i}i--;continue;case GradientMode.Fixed:if(e>_){if(e>n[u+2])throw"Gradient:wrong startSearchIndex.";return t.a=n[u+3],i}i--;continue;default:throw"Gradient:unknown mode."}}else{o=i;for(var c=this._alphaElements.length;o<c;o++){var u;if(e===(s=n[u=2*o]))return t.a=n[u+1],i;switch(this._mode){case GradientMode.Blend:if(e<s){var _;if(e<(_=n[u-2]))throw"Gradient:wrong startSearchIndex.";l=s-_,h=s-e,d=e-_;return t.a=(h*n[u-1]+d*n[u+1])/l,i}i++;continue;case GradientMode.Fixed:if(e<s){if(e<n[u-2])throw"Gradient:wrong startSearchIndex.";return t.a=n[u+1],i}i++;continue;default:throw"Gradient:unknown mode."}}}return i}cloneTo(e){var t,a,r=e;r._colorAlphaKeysCount=this._colorAlphaKeysCount;let n=r._alphaElements=new Float32Array(this._alphaElements.length);for(t=0,a=this._alphaElements.length;t<a;t++)n[t]=this._alphaElements[t];r._colorRGBKeysCount=this._colorRGBKeysCount;var i=r._rgbElements=new Float32Array(this._rgbElements.length);for(t=0,a=this._rgbElements.length;t<a;t++)i[t]=this._rgbElements[t]}clone(){var e=new Gradient(this._maxColorRGBKeysCount,this._maxColorAlphaKeysCount);return this.cloneTo(e),e}}class Burst{constructor(e=0,t=0,a=0){this._time=e,this._minCount=t,this._maxCount=a}get time(){return this._time}get minCount(){return this._minCount}get maxCount(){return this._maxCount}cloneTo(e){var t=e;t._time=this._time,t._minCount=this._minCount,t._maxCount=this._maxCount}clone(){var e=new Burst(this._time,this._minCount,this._maxCount);return this.cloneTo(e),e}}class GradientColor{constructor(){this._type=0,this._constant=null,this._constantMin=null,this._constantMax=null,this._gradient=null,this._gradientMin=null,this._gradientMax=null}static createByConstant(e){var t=new GradientColor;return t._type=0,t._constant=e,t}static createByGradient(e){var t=new GradientColor;return t._type=1,t._gradient=e,t}static createByRandomTwoConstant(e,t){var a=new GradientColor;return a._type=2,a._constantMin=e,a._constantMax=t,a}static createByRandomTwoGradient(e,t){var a=new GradientColor;return a._type=3,a._gradientMin=e,a._gradientMax=t,a}get type(){return this._type}get constant(){return this._constant}get constantMin(){return this._constantMin}get constantMax(){return this._constantMax}get gradient(){return this._gradient}get gradientMin(){return this._gradientMin}get gradientMax(){return this._gradientMax}cloneTo(e){var t=e;t._type=this._type,this._constant.cloneTo(t._constant),this._constantMin.cloneTo(t._constantMin),this._constantMax.cloneTo(t._constantMax),this._gradient.cloneTo(t._gradient),this._gradientMin.cloneTo(t._gradientMin),this._gradientMax.cloneTo(t._gradientMax)}clone(){var e=new GradientColor;return this.cloneTo(e),e}}class ColorOverLifetime{constructor(e){this._color=e}get color(){return this._color}cloneTo(e){var t=e;this._color.cloneTo(t._color),t.enable=this.enable}clone(){var e;switch(this._color.type){case 0:e=GradientColor.createByConstant(this._color.constant.clone());break;case 1:e=GradientColor.createByGradient(this._color.gradient.clone());break;case 2:e=GradientColor.createByRandomTwoConstant(this._color.constantMin.clone(),this._color.constantMax.clone());break;case 3:e=GradientColor.createByRandomTwoGradient(this._color.gradientMin.clone(),this._color.gradientMax.clone())}var t=new ColorOverLifetime(e);return t.enable=this.enable,t}}class FrameOverTime{constructor(){this._type=0,this._constant=0,this._overTime=null,this._constantMin=0,this._constantMax=0,this._overTimeMin=null,this._overTimeMax=null}static createByConstant(e=0){var t=new FrameOverTime;return t._type=0,t._constant=e,t}static createByOverTime(e){var t=new FrameOverTime;return t._type=1,t._overTime=e,t}static createByRandomTwoConstant(e=0,t=0){var a=new FrameOverTime;return a._type=2,a._constantMin=e,a._constantMax=t,a}static createByRandomTwoOverTime(e,t){var a=new FrameOverTime;return a._type=3,a._overTimeMin=e,a._overTimeMax=t,a}get type(){return this._type}get constant(){return this._constant}get frameOverTimeData(){return this._overTime}get constantMin(){return this._constantMin}get constantMax(){return this._constantMax}get frameOverTimeDataMin(){return this._overTimeMin}get frameOverTimeDataMax(){return this._overTimeMax}cloneTo(e){var t=e;t._type=this._type,t._constant=this._constant,this._overTime&&this._overTime.cloneTo(t._overTime),t._constantMin=this._constantMin,t._constantMax=this._constantMax,this._overTimeMin&&this._overTimeMin.cloneTo(t._overTimeMin),this._overTimeMax&&this._overTimeMax.cloneTo(t._overTimeMax)}clone(){var e=new FrameOverTime;return this.cloneTo(e),e}}class GradientDataNumber{constructor(){this._currentLength=0,this._elements=new Float32Array(8)}static createConstantData(e){let t=new GradientDataNumber;return t.add(0,e),t.add(1,e),t}get gradientCount(){return this._currentLength/2}_formatData(){8!=this._currentLength&&1!==this._elements[this._currentLength-2]&&(this._elements[this._currentLength]=1,this._elements[this._currentLength+1]=this._elements[this._currentLength-1])}add(e,t){this._currentLength<8?(6===this._currentLength&&1!==e&&(e=1,console.log("GradientDataNumber warning:the forth key is  be force set to 1.")),this._elements[this._currentLength++]=e,this._elements[this._currentLength++]=t):console.log("GradientDataNumber warning:data count must lessEqual than 4")}getKeyByIndex(e){return this._elements[2*e]}getValueByIndex(e){return this._elements[2*e+1]}getAverageValue(){for(var e=0,t=0,a=0,r=this._currentLength-2;a<r;a+=2){var n=this._elements[a+1];n+=this._elements[a+3],e+=n*=this._elements[a+2]-this._elements[a],t++}return e/t}cloneTo(e){var t=e;t._currentLength=this._currentLength;for(var a=t._elements,r=0,n=this._elements.length;r<n;r++)a[r]=this._elements[r]}clone(){var e=new GradientDataNumber;return this.cloneTo(e),e}}class GradientAngularVelocity{constructor(){this._type=0,this._separateAxes=!1,this.__constantSeparate=null,this._gradient=null,this._gradientX=null,this._gradientY=null,this._gradientZ=null,this._gradientW=null,this._constantGradientDdata=null,this._constantMinGradientDdata=null,this._constantMaxGradientDdata=null,this.__constant=0,this.__constantMin=0,this.__constantMax=0,this.__constantMinSeparate=null,this.__constantMaxSeparate=null,this._constantXGradientDdata=null,this._constantYGradientDdata=null,this._constantZGradientDdata=null,this._constantXMinGradientDdata=null,this._constantYMinGradientDdata=null,this._constantZMinGradientDdata=null,this._constantXMaxGradientDdata=null,this._constantYMaxGradientDdata=null,this._constantZMaxGradientDdata=null,this._gradientMin=null,this._gradientMax=null,this._gradientXMin=null,this._gradientXMax=null,this._gradientYMin=null,this._gradientYMax=null,this._gradientZMin=null,this._gradientZMax=null,this._gradientWMin=null,this._gradientWMax=null}static createByConstant(e){var t=new GradientAngularVelocity;return t._type=0,t._separateAxes=!1,t._constant=e,t}static createByConstantSeparate(e){var t=new GradientAngularVelocity;return t._type=0,t._separateAxes=!0,t._constantSeparate=e,t}static createByGradient(e){var t=new GradientAngularVelocity;return t._type=1,t._separateAxes=!1,t._gradient=e,t}static createByGradientSeparate(e,t,a){var r=new GradientAngularVelocity;return r._type=1,r._separateAxes=!0,r._gradientX=e,r._gradientY=t,r._gradientZ=a,r}static createByRandomTwoConstant(e,t){var a=new GradientAngularVelocity;return a._type=2,a._separateAxes=!1,a._constantMin=e,a._constantMax=t,a}static createByRandomTwoConstantSeparate(e,t){var a=new GradientAngularVelocity;return a._type=2,a._separateAxes=!0,a._constantMinSeparate=e,a._constantMaxSeparate=t,a}static createByRandomTwoGradient(e,t){var a=new GradientAngularVelocity;return a._type=3,a._separateAxes=!1,a._gradientMin=e,a._gradientMax=t,a}static createByRandomTwoGradientSeparate(e,t,a,r,n,i,o,s){var l=new GradientAngularVelocity;return l._type=3,l._separateAxes=!0,l._gradientXMin=e,l._gradientXMax=t,l._gradientYMin=a,l._gradientYMax=r,l._gradientZMin=n,l._gradientZMax=i,l._gradientWMin=o,l._gradientWMax=s,l}get _constantSeparate(){return this.__constantSeparate}set _constantSeparate(e){this.__constantSeparate=e.clone(),this._constantXGradientDdata=GradientDataNumber.createConstantData(e.x),this._constantYGradientDdata=GradientDataNumber.createConstantData(e.y),this._constantZGradientDdata=GradientDataNumber.createConstantData(e.z)}get _constant(){return this.__constant}set _constant(e){this.__constant=e,this._constantGradientDdata=GradientDataNumber.createConstantData(e)}set _constantMin(e){this.__constantMin=e,this._constantMinGradientDdata=GradientDataNumber.createConstantData(e)}get _constantMin(){return this.__constantMin}get _constantMax(){return this.__constantMax}set _constantMax(e){this.__constantMax=e,this._constantMaxGradientDdata=GradientDataNumber.createConstantData(e)}get _constantMinSeparate(){return this.__constantMinSeparate}set _constantMinSeparate(e){this.__constantMinSeparate=e.clone(),this._constantXMinGradientDdata=GradientDataNumber.createConstantData(e.x),this._constantYMinGradientDdata=GradientDataNumber.createConstantData(e.y),this._constantZMinGradientDdata=GradientDataNumber.createConstantData(e.z)}get _constantMaxSeparate(){return this.__constantMaxSeparate}set _constantMaxSeparate(e){this.__constantMaxSeparate=e,this._constantXMaxGradientDdata=GradientDataNumber.createConstantData(e.x),this._constantYMaxGradientDdata=GradientDataNumber.createConstantData(e.y),this._constantZMaxGradientDdata=GradientDataNumber.createConstantData(e.z)}get type(){return this._type}get separateAxes(){return this._separateAxes}get constant(){return this._constant}get constantSeparate(){return this._constantSeparate}get gradient(){return this._gradient}get gradientX(){return this._gradientX}get gradientY(){return this._gradientY}get gradientZ(){return this._gradientZ}get gradientW(){return this._gradientW}get constantMin(){return this._constantMin}get constantMax(){return this._constantMax}get constantMinSeparate(){return this._constantMinSeparate}get constantMaxSeparate(){return this._constantMaxSeparate}get gradientMin(){return this._gradientMin}get gradientMax(){return this._gradientMax}get gradientXMin(){return this._gradientXMin}get gradientXMax(){return this._gradientXMax}get gradientYMin(){return this._gradientYMin}get gradientYMax(){return this._gradientYMax}get gradientZMin(){return this._gradientZMin}get gradientZMax(){return this._gradientZMax}get gradientWMin(){return this._gradientWMin}get gradientWMax(){return this._gradientWMax}cloneTo(e){var t=e;t._type=this._type,t._separateAxes=this._separateAxes,t._constant=this._constant,this._constantSeparate.cloneTo(t._constantSeparate),this._gradient.cloneTo(t._gradient),this._gradientX.cloneTo(t._gradientX),this._gradientY.cloneTo(t._gradientY),this._gradientZ.cloneTo(t._gradientZ),t._constantMin=this._constantMin,t._constantMax=this._constantMax,this._constantMinSeparate.cloneTo(t._constantMinSeparate),this._constantMaxSeparate.cloneTo(t._constantMaxSeparate),this._gradientMin.cloneTo(t._gradientMin),this._gradientMax.cloneTo(t._gradientMax),this._gradientXMin.cloneTo(t._gradientXMin),this._gradientXMax.cloneTo(t._gradientXMax),this._gradientYMin.cloneTo(t._gradientYMin),this._gradientYMax.cloneTo(t._gradientYMax),this._gradientZMin.cloneTo(t._gradientZMin),this._gradientZMax.cloneTo(t._gradientZMax)}clone(){var e=new GradientAngularVelocity;return this.cloneTo(e),e}}class GradientDataInt{constructor(){this._currentLength=0,this._curveMin=0,this._curveMax=1,this._elements=new Float32Array(8)}get gradientCount(){return this._currentLength/2}_formatData(){8!=this._currentLength&&1!==this._elements[this._currentLength-2]&&(this._elements[this._currentLength]=1,this._elements[this._currentLength+1]=this._elements[this._currentLength-1])}add(e,t){this._currentLength<8?(6===this._currentLength&&1!==e&&(e=1,console.log("Warning:the forth key is  be force set to 1.")),this._elements[this._currentLength++]=e,this._elements[this._currentLength++]=t):console.log("Warning:data count must lessEqual than 4")}cloneTo(e){var t=e;t._currentLength=this._currentLength;for(var a=t._elements,r=0,n=this._elements.length;r<n;r++)a[r]=this._elements[r]}clone(){var e=new GradientDataInt;return this.cloneTo(e),e}}class GradientSize{constructor(){this._type=0,this._separateAxes=!1,this._gradient=null,this._gradientX=null,this._gradientY=null,this._gradientZ=null,this._constantMin=0,this._constantMax=0,this._constantMinSeparate=null,this._constantMaxSeparate=null,this._gradientMin=null,this._gradientMax=null,this._gradientXMin=null,this._gradientXMax=null,this._gradientYMin=null,this._gradientYMax=null,this._gradientZMin=null,this._gradientZMax=null}static createByGradient(e){var t=new GradientSize;return t._type=0,t._separateAxes=!1,t._gradient=e,t}static createByGradientSeparate(e,t,a){var r=new GradientSize;return r._type=0,r._separateAxes=!0,r._gradientX=e,r._gradientY=t,r._gradientZ=a,r}static createByRandomTwoConstant(e,t){var a=new GradientSize;return a._type=1,a._separateAxes=!1,a._constantMin=e,a._constantMax=t,a}static createByRandomTwoConstantSeparate(e,t){var a=new GradientSize;return a._type=1,a._separateAxes=!0,a._constantMinSeparate=e,a._constantMaxSeparate=t,a}static createByRandomTwoGradient(e,t){var a=new GradientSize;return a._type=2,a._separateAxes=!1,a._gradientMin=e,a._gradientMax=t,a}static createByRandomTwoGradientSeparate(e,t,a,r,n,i){var o=new GradientSize;return o._type=2,o._separateAxes=!0,o._gradientXMin=e,o._gradientXMax=t,o._gradientYMin=a,o._gradientYMax=r,o._gradientZMin=n,o._gradientZMax=i,o}get type(){return this._type}get separateAxes(){return this._separateAxes}get gradient(){return this._gradient}get gradientX(){return this._gradientX}get gradientY(){return this._gradientY}get gradientZ(){return this._gradientZ}get constantMin(){return this._constantMin}get constantMax(){return this._constantMax}get constantMinSeparate(){return this._constantMinSeparate}get constantMaxSeparate(){return this._constantMaxSeparate}get gradientMin(){return this._gradientMin}get gradientMax(){return this._gradientMax}get gradientXMin(){return this._gradientXMin}get gradientXMax(){return this._gradientXMax}get gradientYMin(){return this._gradientYMin}get gradientYMax(){return this._gradientYMax}get gradientZMin(){return this._gradientZMin}get gradientZMax(){return this._gradientZMax}getMaxSizeInGradient(e=!1){var t,a,r=-Number.MAX_VALUE;switch(this._type){case 0:if(this._separateAxes){for(t=0,a=this._gradientX.gradientCount;t<a;t++)r=Math.max(r,this._gradientX.getValueByIndex(t));for(t=0,a=this._gradientY.gradientCount;t<a;t++)r=Math.max(r,this._gradientY.getValueByIndex(t));if(e)for(t=0,a=this._gradientZ.gradientCount;t<a;t++)r=Math.max(r,this._gradientZ.getValueByIndex(t))}else for(t=0,a=this._gradient.gradientCount;t<a;t++)r=Math.max(r,this._gradient.getValueByIndex(t));break;case 1:this._separateAxes?(r=Math.max(this._constantMinSeparate.x,this._constantMaxSeparate.x),r=Math.max(r,this._constantMinSeparate.y),e&&(r=r=Math.max(r,this._constantMaxSeparate.z))):r=Math.max(this._constantMin,this._constantMax);break;case 2:if(this._separateAxes){for(t=0,a=this._gradientXMin.gradientCount;t<a;t++)r=Math.max(r,this._gradientXMin.getValueByIndex(t));for(t=0,a=this._gradientXMax.gradientCount;t<a;t++)r=Math.max(r,this._gradientXMax.getValueByIndex(t));for(t=0,a=this._gradientYMin.gradientCount;t<a;t++)r=Math.max(r,this._gradientYMin.getValueByIndex(t));for(t=0,a=this._gradientZMax.gradientCount;t<a;t++)r=Math.max(r,this._gradientZMax.getValueByIndex(t));if(e){for(t=0,a=this._gradientZMin.gradientCount;t<a;t++)r=Math.max(r,this._gradientZMin.getValueByIndex(t));for(t=0,a=this._gradientZMax.gradientCount;t<a;t++)r=Math.max(r,this._gradientZMax.getValueByIndex(t))}}else{for(t=0,a=this._gradientMin.gradientCount;t<a;t++)r=Math.max(r,this._gradientMin.getValueByIndex(t));for(t=0,a=this._gradientMax.gradientCount;t<a;t++)r=Math.max(r,this._gradientMax.getValueByIndex(t))}}return r}cloneTo(e){var t=e;t._type=this._type,t._separateAxes=this._separateAxes,this._gradient.cloneTo(t._gradient),this._gradientX.cloneTo(t._gradientX),this._gradientY.cloneTo(t._gradientY),this._gradientZ.cloneTo(t._gradientZ),t._constantMin=this._constantMin,t._constantMax=this._constantMax,this._constantMinSeparate.cloneTo(t._constantMinSeparate),this._constantMaxSeparate.cloneTo(t._constantMaxSeparate),this._gradientMin.cloneTo(t._gradientMin),this._gradientMax.cloneTo(t._gradientMax),this._gradientXMin.cloneTo(t._gradientXMin),this._gradientXMax.cloneTo(t._gradientXMax),this._gradientYMin.cloneTo(t._gradientYMin),this._gradientYMax.cloneTo(t._gradientYMax),this._gradientZMin.cloneTo(t._gradientZMin),this._gradientZMax.cloneTo(t._gradientZMax)}clone(){var e=new GradientSize;return this.cloneTo(e),e}}class GradientVelocity{constructor(){this._type=0,this.__constant=null,this.__constantMin=null,this.__constantMax=null,this._gradientConstantX=null,this._gradientConstantY=null,this._gradientConstantZ=null,this._gradientConstantXMin=null,this._gradientConstantXMax=null,this._gradientConstantYMin=null,this._gradientConstantYMax=null,this._gradientConstantZMin=null,this._gradientConstantZMax=null,this._gradientX=null,this._gradientY=null,this._gradientZ=null,this._gradientXMin=null,this._gradientXMax=null,this._gradientYMin=null,this._gradientYMax=null,this._gradientZMin=null,this._gradientZMax=null}static createByConstant(e){var t=new GradientVelocity;return t._type=0,t._constant=e,t._gradientConstantXMin=GradientDataNumber.createConstantData(e.x),t._gradientConstantYMin=GradientDataNumber.createConstantData(e.y),t._gradientConstantZMin=GradientDataNumber.createConstantData(e.z),t}static createByGradient(e,t,a){var r=new GradientVelocity;return r._type=1,r._gradientX=e,r._gradientY=t,r._gradientZ=a,r}static createByRandomTwoConstant(e,t){var a=new GradientVelocity;return a._type=2,a._constantMin=e,a._constantMax=t,a._gradientConstantXMin=GradientDataNumber.createConstantData(e.x),a._gradientConstantXMax=GradientDataNumber.createConstantData(t.x),a._gradientConstantYMin=GradientDataNumber.createConstantData(e.y),a._gradientConstantYMax=GradientDataNumber.createConstantData(t.y),a._gradientConstantZMin=GradientDataNumber.createConstantData(e.z),a._gradientConstantZMax=GradientDataNumber.createConstantData(t.z),a}static createByRandomTwoGradient(e,t,a,r,n,i){var o=new GradientVelocity;return o._type=3,o._gradientXMin=e,o._gradientXMax=t,o._gradientYMin=a,o._gradientYMax=r,o._gradientZMin=n,o._gradientZMax=i,o}get _constant(){return this.__constant}set _constant(e){this.__constant=e,this._gradientConstantX=GradientDataNumber.createConstantData(e.x),this._gradientConstantY=GradientDataNumber.createConstantData(e.y),this._gradientConstantZ=GradientDataNumber.createConstantData(e.z)}get _constantMin(){return this.__constantMin}set _constantMin(e){this.__constantMin=e,this._gradientConstantXMin=GradientDataNumber.createConstantData(e.x),this._gradientConstantYMin=GradientDataNumber.createConstantData(e.y),this._gradientConstantZMin=GradientDataNumber.createConstantData(e.z)}get _constantMax(){return this.__constantMax}set _constantMax(e){this.__constantMax=e,this._gradientConstantXMax=GradientDataNumber.createConstantData(e.x),this._gradientConstantYMax=GradientDataNumber.createConstantData(e.y),this._gradientConstantZMax=GradientDataNumber.createConstantData(e.z)}get type(){return this._type}get constant(){return this._constant}get gradientX(){return this._gradientX}get gradientY(){return this._gradientY}get gradientZ(){return this._gradientZ}get constantMin(){return this._constantMin}get constantMax(){return this._constantMax}get gradientConstantX(){return this._gradientConstantX}get gradientConstantY(){return this._gradientConstantY}get gradientConstantZ(){return this._gradientConstantZ}get gradientConstantXMin(){return this._gradientConstantXMin}get gradientConstantXMax(){return this._gradientConstantXMax}get gradientConstantYMin(){return this._gradientConstantYMin}get gradientConstantYMax(){return this._gradientConstantYMax}get gradientConstantZMin(){return this._gradientConstantZMin}get gradientConstantZMax(){return this._gradientConstantZMax}get gradientXMin(){return this._gradientXMin}get gradientXMax(){return this._gradientXMax}get gradientYMin(){return this._gradientYMin}get gradientYMax(){return this._gradientYMax}get gradientZMin(){return this._gradientZMin}get gradientZMax(){return this._gradientZMax}cloneTo(e){var t=e;t._type=this._type,this._constant.cloneTo(t._constant),this._gradientX.cloneTo(t._gradientX),this._gradientY.cloneTo(t._gradientY),this._gradientZ.cloneTo(t._gradientZ),this._constantMin.cloneTo(t._constantMin),this._constantMax.cloneTo(t._constantMax),this._gradientXMin.cloneTo(t._gradientXMin),this._gradientXMax.cloneTo(t._gradientXMax),this._gradientYMin.cloneTo(t._gradientYMin),this._gradientYMax.cloneTo(t._gradientYMax),this._gradientZMin.cloneTo(t._gradientZMin),this._gradientZMax.cloneTo(t._gradientZMax)}clone(){var e=new GradientVelocity;return this.cloneTo(e),e}}class RotationOverLifetime{constructor(e){this._angularVelocity=e}get angularVelocity(){return this._angularVelocity}cloneTo(e){var t=e;this._angularVelocity.cloneTo(t._angularVelocity),t.enable=this.enable}clone(){var e;switch(this._angularVelocity.type){case 0:e=this._angularVelocity.separateAxes?GradientAngularVelocity.createByConstantSeparate(this._angularVelocity.constantSeparate.clone()):GradientAngularVelocity.createByConstant(this._angularVelocity.constant);break;case 1:e=this._angularVelocity.separateAxes?GradientAngularVelocity.createByGradientSeparate(this._angularVelocity.gradientX.clone(),this._angularVelocity.gradientY.clone(),this._angularVelocity.gradientZ.clone()):GradientAngularVelocity.createByGradient(this._angularVelocity.gradient.clone());break;case 2:e=this._angularVelocity.separateAxes?GradientAngularVelocity.createByRandomTwoConstantSeparate(this._angularVelocity.constantMinSeparate.clone(),this._angularVelocity.constantMaxSeparate.clone()):GradientAngularVelocity.createByRandomTwoConstant(this._angularVelocity.constantMin,this._angularVelocity.constantMax);break;case 3:e=this._angularVelocity.separateAxes?GradientAngularVelocity.createByRandomTwoGradientSeparate(this._angularVelocity.gradientXMin.clone(),this._angularVelocity.gradientXMax.clone(),this._angularVelocity.gradientYMin.clone(),this._angularVelocity.gradientYMax.clone(),this._angularVelocity.gradientZMin.clone(),this._angularVelocity.gradientZMax.clone(),this._angularVelocity.gradientWMin.clone(),this._angularVelocity.gradientWMax.clone()):GradientAngularVelocity.createByRandomTwoGradient(this._angularVelocity.gradientMin.clone(),this._angularVelocity.gradientMax.clone())}var t=new RotationOverLifetime(e);return t.enable=this.enable,t}}class BoundBox{constructor(e,t){this.min=e,this.max=t}_rotateExtents(e,t,a){var r=e.x,n=e.y,i=e.z,o=t.elements;a.x=Math.abs(o[0]*r)+Math.abs(o[4]*n)+Math.abs(o[8]*i),a.y=Math.abs(o[1]*r)+Math.abs(o[5]*n)+Math.abs(o[9]*i),a.z=Math.abs(o[2]*r)+Math.abs(o[6]*n)+Math.abs(o[10]*i)}getCorners(e){e.length=8;var a=this.min.x,r=this.min.y,n=this.min.z,i=this.max.x,o=this.max.y,s=this.max.z;e[0]=new t.Vector3(a,o,s),e[1]=new t.Vector3(i,o,s),e[2]=new t.Vector3(i,r,s),e[3]=new t.Vector3(a,r,s),e[4]=new t.Vector3(a,o,n),e[5]=new t.Vector3(i,o,n),e[6]=new t.Vector3(i,r,n),e[7]=new t.Vector3(a,r,n)}getCenter(e){t.Vector3.add(this.min,this.max,e),t.Vector3.scale(e,.5,e)}getExtent(e){t.Vector3.subtract(this.max,this.min,e),t.Vector3.scale(e,.5,e)}setCenterAndExtent(e,a){t.Vector3.subtract(e,a,this.min),t.Vector3.add(e,a,this.max)}tranform(e,a){var r=BoundBox._tempVector30,n=BoundBox._tempVector31;this.getCenter(r),this.getExtent(n),t.Vector3.transformCoordinate(r,e,r),this._rotateExtents(n,e,n),a.setCenterAndExtent(r,n)}toDefault(){this.min.toDefault(),this.max.toDefault()}static createfromPoints(e,a){if(null==e)throw new Error("points");var r=a.min,n=a.max;r.x=Number.MAX_VALUE,r.y=Number.MAX_VALUE,r.z=Number.MAX_VALUE,n.x=-Number.MAX_VALUE,n.y=-Number.MAX_VALUE,n.z=-Number.MAX_VALUE;for(var i=0,o=e.length;i<o;++i)t.Vector3.min(r,e[i],r),t.Vector3.max(n,e[i],n)}static merge(e,a,r){t.Vector3.min(e.min,a.min,r.min),t.Vector3.max(e.max,a.max,r.max)}cloneTo(e){var t=e;this.min.cloneTo(t.min),this.max.cloneTo(t.max)}clone(){var e=new BoundBox(new t.Vector3,new t.Vector3);return this.cloneTo(e),e}}BoundBox._tempVector30=new t.Vector3,BoundBox._tempVector31=new t.Vector3,e.ParticleSystemShapeType=void 0,(C=e.ParticleSystemShapeType||(e.ParticleSystemShapeType={}))[C.Box=0]="Box",C[C.Circle=1]="Circle",C[C.Cone=2]="Cone",C[C.Hemisphere=3]="Hemisphere",C[C.Sphere=4]="Sphere";class BaseShape{constructor(){this.enable=!0,this.randomDirection=0}_getShapeBoundBox(e){throw new Error("BaseShape: must override it.")}_getSpeedBoundBox(e){throw new Error("BaseShape: must override it.")}generatePositionAndDirection(e,t,a=null,r=null){throw new Error("BaseShape: must override it.")}_calculateProceduralBounds(e,a,r){this._getShapeBoundBox(e);var n=e.min,i=e.max;t.Vector3.multiply(n,a,n),t.Vector3.multiply(i,a,i);var o=new BoundBox(new t.Vector3,new t.Vector3);this.randomDirection?(o.min=new t.Vector3(-1,-1,-1),o.max=new t.Vector3(1,1,1)):this._getSpeedBoundBox(o);var s=new BoundBox(new t.Vector3,new t.Vector3),l=s.min,h=s.max;t.Vector3.scale(o.min,r.y,l),t.Vector3.scale(o.max,r.y,h),t.Vector3.add(e.min,l,l),t.Vector3.add(e.max,h,h),t.Vector3.min(e.min,l,e.min),t.Vector3.max(e.max,l,e.max);var d=new BoundBox(new t.Vector3,new t.Vector3),c=d.min,u=d.max;t.Vector3.scale(o.min,r.x,c),t.Vector3.scale(o.max,r.x,u),t.Vector3.min(d.min,u,l),t.Vector3.max(d.min,u,h),t.Vector3.min(e.min,l,e.min),t.Vector3.max(e.max,l,e.max)}cloneTo(e){e.enable=this.enable}clone(){var e=new BaseShape;return this.cloneTo(e),e}}class ShapeUtils{static _randomPointUnitArcCircle(e,t,a=null){var r;r=a?a.getFloat()*e:Math.random()*e,t.x=Math.cos(r),t.y=Math.sin(r)}static _randomPointInsideUnitArcCircle(e,t,a=null){var r;ShapeUtils._randomPointUnitArcCircle(e,t,a),r=a?Math.pow(a.getFloat(),.5):Math.pow(Math.random(),.5),t.x=t.x*r,t.y=t.y*r}static _randomPointUnitCircle(e,t=null){var a;a=t?t.getFloat()*Math.PI*2:Math.random()*Math.PI*2,e.x=Math.cos(a),e.y=Math.sin(a)}static _randomPointInsideUnitCircle(e,t=null){var a;ShapeUtils._randomPointUnitCircle(e),a=t?Math.pow(t.getFloat(),.5):Math.pow(Math.random(),.5),e.x=e.x*a,e.y=e.y*a}static _randomPointUnitSphere(e,t=null){var a,r;t?(a=e.z=2*t.getFloat()-1,r=t.getFloat()*Math.PI*2):(a=e.z=2*Math.random()-1,r=Math.random()*Math.PI*2);var n=Math.sqrt(1-a*a);e.x=n*Math.cos(r),e.y=n*Math.sin(r)}static _randomPointInsideUnitSphere(e,t=null){var a;ShapeUtils._randomPointUnitSphere(e),a=t?Math.pow(t.getFloat(),1/3):Math.pow(Math.random(),1/3),e.x=e.x*a,e.y=e.y*a,e.z=e.z*a}static _randomPointInsideHalfUnitBox(e,t=null){t?(e.x=t.getFloat()-.5,e.y=t.getFloat()-.5,e.z=t.getFloat()-.5):(e.x=Math.random()-.5,e.y=Math.random()-.5,e.z=Math.random()-.5)}constructor(){}}class BoxShape extends BaseShape{constructor(){super(),this.shapeType=e.ParticleSystemShapeType.Box,this.x=1,this.y=1,this.z=1}_getShapeBoundBox(e){var t=e.min;t.x=.5*-this.x,t.y=.5*-this.y,t.z=.5*-this.z;var a=e.max;a.x=.5*this.x,a.y=.5*this.y,a.z=.5*this.z}_getSpeedBoundBox(e){var t=e.min;t.x=0,t.y=0,t.z=0;var a=e.max;a.x=0,a.y=1,a.z=0}generatePositionAndDirection(e,t,a=null,r=null){a?(a.seed=r[16],ShapeUtils._randomPointInsideHalfUnitBox(e,a),r[16]=a.seed):ShapeUtils._randomPointInsideHalfUnitBox(e),e.x=this.x*e.x,e.y=this.y*e.y,e.z=this.z*e.z,this.randomDirection?a?(a.seed=r[17],ShapeUtils._randomPointUnitSphere(t,a),r[17]=a.seed):ShapeUtils._randomPointUnitSphere(t):(t.x=0,t.y=0,t.z=1)}cloneTo(e){super.cloneTo(e);var t=e;t.x=this.x,t.y=this.y,t.z=this.z,t.randomDirection=this.randomDirection}clone(){var e=new BoxShape;return this.cloneTo(e),e}}class CircleShape extends BaseShape{constructor(){super(),this.shapeType=e.ParticleSystemShapeType.Circle,this.radius=1,this.arc=2*Math.PI,this.emitFromEdge=!1}set arcDEG(e){this.arc=e/180*Math.PI}get arcDEG(){return 180*this.arc/Math.PI}_getShapeBoundBox(e){var t=e.min;t.x=t.z=-this.radius,t.y=0;var a=e.max;a.x=a.z=this.radius,a.y=0}_getSpeedBoundBox(e){var t=e.min;t.x=t.y=-1,t.z=0;var a=e.max;a.x=a.y=1,a.z=0}generatePositionAndDirection(e,a,r=null,n=null){var i=CircleShape._tempPositionPoint;r?(r.seed=n[16],this.emitFromEdge?ShapeUtils._randomPointUnitArcCircle(this.arc,CircleShape._tempPositionPoint,r):ShapeUtils._randomPointInsideUnitArcCircle(this.arc,CircleShape._tempPositionPoint,r),n[16]=r.seed):this.emitFromEdge?ShapeUtils._randomPointUnitArcCircle(this.arc,CircleShape._tempPositionPoint):ShapeUtils._randomPointInsideUnitArcCircle(this.arc,CircleShape._tempPositionPoint),e.x=-i.x,e.y=i.y,e.z=0,t.Vector3.scale(e,this.radius,e),this.randomDirection?r?(r.seed=n[17],ShapeUtils._randomPointUnitSphere(a,r),n[17]=r.seed):ShapeUtils._randomPointUnitSphere(a):e.cloneTo(a)}cloneTo(e){super.cloneTo(e);var t=e;t.radius=this.radius,t.arc=this.arc,t.emitFromEdge=this.emitFromEdge,t.randomDirection=this.randomDirection}clone(){var e=new CircleShape;return this.cloneTo(e),e}}CircleShape._tempPositionPoint=new t.Vector2;class ConeShape extends BaseShape{constructor(){super(),this.shapeType=e.ParticleSystemShapeType.Cone,this.angle=25/180*Math.PI,this.radius=1,this.length=5,this.emitType=0}set angleDEG(e){this.angle=e/180*Math.PI}get angleDEG(){return 180*this.angle/Math.PI}_getShapeBoundBox(e){const t=this.radius+this.length*Math.sin(this.angle),a=this.length*Math.cos(this.angle);var r=e.min;r.x=r.y=-t,r.z=0;var n=e.max;n.x=n.y=t,n.z=a}_getSpeedBoundBox(e){const t=Math.sin(this.angle);var a=e.min;a.x=a.y=-t,a.z=0;var r=e.max;r.x=r.y=t,r.z=1}generatePositionAndDirection(e,a,r=null,n=null){var i,o,s,l=ConeShape._tempPositionPoint,h=Math.cos(this.angle),d=Math.sin(this.angle);switch(this.emitType){case 0:r?(r.seed=n[16],ShapeUtils._randomPointInsideUnitCircle(ConeShape._tempPositionPoint,r),n[16]=r.seed):ShapeUtils._randomPointInsideUnitCircle(ConeShape._tempPositionPoint),i=l.x,o=l.y,e.x=i*this.radius,e.y=o*this.radius,e.z=0,this.randomDirection?(r?(r.seed=n[17],ShapeUtils._randomPointInsideUnitCircle(ConeShape._tempDirectionPoint,r),n[17]=r.seed):ShapeUtils._randomPointInsideUnitCircle(ConeShape._tempDirectionPoint),s=ConeShape._tempDirectionPoint,a.x=s.x*d,a.y=s.y*d):(a.x=i*d,a.y=o*d),a.z=h;break;case 1:r?(r.seed=n[16],ShapeUtils._randomPointUnitCircle(ConeShape._tempPositionPoint,r),n[16]=r.seed):ShapeUtils._randomPointUnitCircle(ConeShape._tempPositionPoint),i=l.x,o=l.y,e.x=i*this.radius,e.y=o*this.radius,e.z=0,this.randomDirection?(r?(r.seed=n[17],ShapeUtils._randomPointInsideUnitCircle(ConeShape._tempDirectionPoint,r),n[17]=r.seed):ShapeUtils._randomPointInsideUnitCircle(ConeShape._tempDirectionPoint),s=ConeShape._tempDirectionPoint,a.x=s.x*d,a.y=s.y*d):(a.x=i*d,a.y=o*d),a.z=h;break;case 2:r?(r.seed=n[16],ShapeUtils._randomPointInsideUnitCircle(ConeShape._tempPositionPoint,r)):ShapeUtils._randomPointInsideUnitCircle(ConeShape._tempPositionPoint),i=l.x,o=l.y,e.x=i*this.radius,e.y=o*this.radius,e.z=0,a.x=i*d,a.y=o*d,a.z=h,t.Vector3.normalize(a,a),r?(t.Vector3.scale(a,this.length*r.getFloat(),a),n[16]=r.seed):t.Vector3.scale(a,this.length*Math.random(),a),t.Vector3.add(e,a,e),this.randomDirection&&(r?(r.seed=n[17],ShapeUtils._randomPointUnitSphere(a,r),n[17]=r.seed):ShapeUtils._randomPointUnitSphere(a));break;case 3:r?(r.seed=n[16],ShapeUtils._randomPointUnitCircle(ConeShape._tempPositionPoint,r)):ShapeUtils._randomPointUnitCircle(ConeShape._tempPositionPoint),i=l.x,o=l.y,e.x=i*this.radius,e.y=o*this.radius,e.z=0,a.x=i*d,a.y=o*d,a.z=h,t.Vector3.normalize(a,a),r?(t.Vector3.scale(a,this.length*r.getFloat(),a),n[16]=r.seed):t.Vector3.scale(a,this.length*Math.random(),a),t.Vector3.add(e,a,e),this.randomDirection&&(r?(r.seed=n[17],ShapeUtils._randomPointUnitSphere(a,r),n[17]=r.seed):ShapeUtils._randomPointUnitSphere(a));break;default:throw new Error("ConeShape:emitType is invalid.")}}cloneTo(e){super.cloneTo(e);var t=e;t.angle=this.angle,t.radius=this.radius,t.length=this.length,t.emitType=this.emitType,t.randomDirection=this.randomDirection}clone(){var e=new ConeShape;return this.cloneTo(e),e}}ConeShape._tempPositionPoint=new t.Vector2,ConeShape._tempDirectionPoint=new t.Vector2;class HemisphereShape extends BaseShape{constructor(){super(),this.shapeType=e.ParticleSystemShapeType.Hemisphere,this.radius=1,this.emitFromShell=!1}_getShapeBoundBox(e){var t=e.min;t.x=t.y=t.z=-this.radius;var a=e.max;a.x=a.y=this.radius,a.z=0}_getSpeedBoundBox(e){var t=e.min;t.x=t.y=-1,t.z=0;var a=e.max;a.x=a.y=a.z=1}generatePositionAndDirection(e,a,r=null,n=null){r?(r.seed=n[16],this.emitFromShell?ShapeUtils._randomPointUnitSphere(e,r):ShapeUtils._randomPointInsideUnitSphere(e,r),n[16]=r.seed):this.emitFromShell?ShapeUtils._randomPointUnitSphere(e):ShapeUtils._randomPointInsideUnitSphere(e),t.Vector3.scale(e,this.radius,e);var i=e.z;i<0&&(e.z=-1*i),this.randomDirection?r?(r.seed=n[17],ShapeUtils._randomPointUnitSphere(a,r),n[17]=r.seed):ShapeUtils._randomPointUnitSphere(a):e.cloneTo(a)}cloneTo(e){super.cloneTo(e);var t=e;t.radius=this.radius,t.emitFromShell=this.emitFromShell,t.randomDirection=this.randomDirection}clone(){var e=new HemisphereShape;return this.cloneTo(e),e}}class SphereShape extends BaseShape{constructor(){super(),this.shapeType=e.ParticleSystemShapeType.Sphere,this.radius=1,this.emitFromShell=!1}_getShapeBoundBox(e){var t=e.min;t.x=t.y=t.z=-this.radius;var a=e.max;a.x=a.y=a.z=this.radius}_getSpeedBoundBox(e){var t=e.min;t.x=t.y=t.z=-1;var a=e.max;a.x=a.y=a.z=1}generatePositionAndDirection(e,a,r=null,n=null){r?(r.seed=n[16],this.emitFromShell?ShapeUtils._randomPointUnitSphere(e,r):ShapeUtils._randomPointInsideUnitSphere(e,r),n[16]=r.seed):this.emitFromShell?ShapeUtils._randomPointUnitSphere(e):ShapeUtils._randomPointInsideUnitSphere(e),t.Vector3.scale(e,this.radius,e),this.randomDirection?r?(r.seed=n[17],ShapeUtils._randomPointUnitSphere(a,r),n[17]=r.seed):ShapeUtils._randomPointUnitSphere(a):e.cloneTo(a)}cloneTo(e){super.cloneTo(e);var t=e;t.radius=this.radius,t.emitFromShell=this.emitFromShell,t.randomDirection=this.randomDirection}clone(){var e=new SphereShape;return this.cloneTo(e),e}}class SizeOverLifetime{constructor(e){this._size=e}get size(){return this._size}cloneTo(e){var t=e;this._size.cloneTo(t._size),t.enable=this.enable}clone(){var e;switch(this._size.type){case 0:e=this._size.separateAxes?GradientSize.createByGradientSeparate(this._size.gradientX.clone(),this._size.gradientY.clone(),this._size.gradientZ.clone()):GradientSize.createByGradient(this._size.gradient.clone());break;case 1:e=this._size.separateAxes?GradientSize.createByRandomTwoConstantSeparate(this._size.constantMinSeparate.clone(),this._size.constantMaxSeparate.clone()):GradientSize.createByRandomTwoConstant(this._size.constantMin,this._size.constantMax);break;case 2:e=this._size.separateAxes?GradientSize.createByRandomTwoGradientSeparate(this._size.gradientXMin.clone(),this._size.gradientYMin.clone(),this._size.gradientZMin.clone(),this._size.gradientXMax.clone(),this._size.gradientYMax.clone(),this._size.gradientZMax.clone()):GradientSize.createByRandomTwoGradient(this._size.gradientMin.clone(),this._size.gradientMax.clone())}var t=new SizeOverLifetime(e);return t.enable=this.enable,t}}class StartFrame{constructor(){this._type=0,this._constant=0,this._constantMin=0,this._constantMax=0}static createByConstant(e=0){var t=new StartFrame;return t._type=0,t._constant=e,t}static createByRandomTwoConstant(e=0,t=0){var a=new StartFrame;return a._type=1,a._constantMin=e,a._constantMax=t,a}get type(){return this._type}get constant(){return this._constant}get constantMin(){return this._constantMin}get constantMax(){return this._constantMax}cloneTo(e){var t=e;t._type=this._type,t._constant=this._constant,t._constantMin=this._constantMin,t._constantMax=this._constantMax}clone(){var e=new StartFrame;return this.cloneTo(e),e}}class TextureSheetAnimation{constructor(e,a){this.type=0,this.randomRow=!1,this.rowIndex=0,this.cycles=0,this.enableUVChannels=0,this.enable=!1,this.tiles=new t.Vector2(1,1),this.type=0,this.randomRow=!0,this.rowIndex=0,this.cycles=1,this.enableUVChannels=1,this._frame=e,this._startFrame=a}get frame(){return this._frame}get startFrame(){return this._startFrame}cloneTo(e){var t=e;this.tiles.cloneTo(t.tiles),t.type=this.type,t.randomRow=this.randomRow,t.rowIndex=this.rowIndex,t.cycles=this.cycles,t.enableUVChannels=this.enableUVChannels,t.enable=this.enable,this._frame.cloneTo(t._frame),this._startFrame.cloneTo(t._startFrame)}clone(){var e,t;switch(this._frame.type){case 0:e=FrameOverTime.createByConstant(this._frame.constant);break;case 1:e=FrameOverTime.createByOverTime(this._frame.frameOverTimeData.clone());break;case 2:e=FrameOverTime.createByRandomTwoConstant(this._frame.constantMin,this._frame.constantMax);break;case 3:e=FrameOverTime.createByRandomTwoOverTime(this._frame.frameOverTimeDataMin.clone(),this._frame.frameOverTimeDataMax.clone())}switch(this._startFrame.type){case 0:t=StartFrame.createByConstant(this._startFrame.constant);break;case 1:t=StartFrame.createByRandomTwoConstant(this._startFrame.constantMin,this._startFrame.constantMax)}var a=new TextureSheetAnimation(e,t);return this.cloneTo(a),a}}class VelocityOverLifetime{constructor(e){this.enable=!1,this.space=0,this._velocity=e}get velocity(){return this._velocity}cloneTo(e){var t=e;this._velocity.cloneTo(t._velocity),t.enable=this.enable,t.space=this.space}clone(){var e;switch(this._velocity.type){case 0:e=GradientVelocity.createByConstant(this._velocity.constant.clone());break;case 1:e=GradientVelocity.createByGradient(this._velocity.gradientX.clone(),this._velocity.gradientY.clone(),this._velocity.gradientZ.clone());break;case 2:e=GradientVelocity.createByRandomTwoConstant(this._velocity.constantMin.clone(),this._velocity.constantMax.clone());break;case 3:e=GradientVelocity.createByRandomTwoGradient(this._velocity.gradientXMin.clone(),this._velocity.gradientXMax.clone(),this._velocity.gradientYMin.clone(),this._velocity.gradientYMax.clone(),this._velocity.gradientZMin.clone(),this._velocity.gradientZMax.clone())}var t=new VelocityOverLifetime(e);return t.enable=this.enable,t.space=this.space,t}}class VertexShuriKenParticle{constructor(){}}VertexShuriKenParticle.PARTICLE_DIRECTIONTIME=0,VertexShuriKenParticle.PARTICLE_POSITION0=1,VertexShuriKenParticle.PARTICLE_COLOR0=2,VertexShuriKenParticle.PARTICLE_TEXTURECOORDINATE0=3,VertexShuriKenParticle.PARTICLE_SHAPEPOSITIONSTARTLIFETIME=4,VertexShuriKenParticle.PARTICLE_CORNERTEXTURECOORDINATE0=5,VertexShuriKenParticle.PARTICLE_STARTCOLOR0=6,VertexShuriKenParticle.PARTICLE_ENDCOLOR0=7,VertexShuriKenParticle.PARTICLE_STARTSIZE=8,VertexShuriKenParticle.PARTICLE_STARTROTATION=9,VertexShuriKenParticle.PARTICLE_STARTSPEED=10,VertexShuriKenParticle.PARTICLE_RANDOM0=11,VertexShuriKenParticle.PARTICLE_RANDOM1=12,VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDPOSTION=13,VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDROTATION=14,VertexShuriKenParticle.PARTICLE_SIMULATIONUV=15;class VertexShurikenParticleBillboard extends VertexShuriKenParticle{constructor(e,t,a,r,n,i,o,s,l,h,d,c,u,_){super(),this._cornerTextureCoordinate=e,this._positionStartLifeTime=t,this._velocity=a,this._startColor=r,this._startSize=n,this._startRotation0=i,this._startRotation1=o,this._startRotation2=s,this._startLifeTime=l,this._time=h,this._startSpeed=d,this._randoms0=c,this._randoms1=u,this._simulationWorldPostion=_}static get vertexDeclaration(){return VertexShurikenParticleBillboard._vertexDeclaration}static get vertexInstanceMeshDeclaration(){return VertexShurikenParticleBillboard._vertexInstanceMeshDeclaration}static get vertexInstanceParticleDeclaration(){return VertexShurikenParticleBillboard._vertexInstanceParticleDeclaration}static get billboardVertexArray(){return VertexShurikenParticleBillboard._billboardVertexArray}static get billboardIndexArray(){return VertexShurikenParticleBillboard._billboardIndexArray}static set billboardIndexArray(e){VertexShurikenParticleBillboard._billboardIndexArray=e}static __init__(){VertexShurikenParticleBillboard._vertexDeclaration=new t.VertexDeclaration(168,[new t.VertexElement(0,t.VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_CORNERTEXTURECOORDINATE0),new t.VertexElement(16,t.VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_SHAPEPOSITIONSTARTLIFETIME),new t.VertexElement(32,t.VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_DIRECTIONTIME),new t.VertexElement(48,t.VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_STARTCOLOR0),new t.VertexElement(64,t.VertexElementFormat.Vector3,VertexShuriKenParticle.PARTICLE_STARTSIZE),new t.VertexElement(76,t.VertexElementFormat.Vector3,VertexShuriKenParticle.PARTICLE_STARTROTATION),new t.VertexElement(88,t.VertexElementFormat.Single,VertexShuriKenParticle.PARTICLE_STARTSPEED),new t.VertexElement(92,t.VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_RANDOM0),new t.VertexElement(108,t.VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_RANDOM1),new t.VertexElement(124,t.VertexElementFormat.Vector3,VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDPOSTION),new t.VertexElement(136,t.VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDROTATION),new t.VertexElement(152,t.VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_SIMULATIONUV)]),VertexShurikenParticleBillboard._vertexInstanceMeshDeclaration=new t.VertexDeclaration(16,[new t.VertexElement(0,t.VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_CORNERTEXTURECOORDINATE0)]),VertexShurikenParticleBillboard._vertexInstanceParticleDeclaration=new t.VertexDeclaration(152,[new t.VertexElement(0,t.VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_SHAPEPOSITIONSTARTLIFETIME),new t.VertexElement(16,t.VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_DIRECTIONTIME),new t.VertexElement(32,t.VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_STARTCOLOR0),new t.VertexElement(48,t.VertexElementFormat.Vector3,VertexShuriKenParticle.PARTICLE_STARTSIZE),new t.VertexElement(60,t.VertexElementFormat.Vector3,VertexShuriKenParticle.PARTICLE_STARTROTATION),new t.VertexElement(72,t.VertexElementFormat.Single,VertexShuriKenParticle.PARTICLE_STARTSPEED),new t.VertexElement(76,t.VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_RANDOM0),new t.VertexElement(92,t.VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_RANDOM1),new t.VertexElement(108,t.VertexElementFormat.Vector3,VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDPOSTION),new t.VertexElement(120,t.VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDROTATION),new t.VertexElement(136,t.VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_SIMULATIONUV)]),VertexShurikenParticleBillboard._billboardIndexArray=new Uint16Array([0,2,1,0,3,2]),VertexShurikenParticleBillboard._billboardVertexArray=new Float32Array([-.5,-.5,0,1,.5,-.5,1,1,.5,.5,1,0,-.5,.5,0,0])}get cornerTextureCoordinate(){return this._cornerTextureCoordinate}get positionStartLifeTime(){return this._positionStartLifeTime}get velocity(){return this._velocity}get startColor(){return this._startColor}get startSize(){return this._startSize}get startRotation0(){return this._startRotation0}get startRotation1(){return this._startRotation1}get startRotation2(){return this._startRotation2}get startLifeTime(){return this._startLifeTime}get time(){return this._time}get startSpeed(){return this._startSpeed}get random0(){return this._randoms0}get random1(){return this._randoms1}get simulationWorldPostion(){return this._simulationWorldPostion}}class VertexShurikenParticleMesh extends VertexShuriKenParticle{constructor(e,t,a,r,n,i,o,s,l,h,d,c,u,_){super(),this._cornerTextureCoordinate=e,this._positionStartLifeTime=t,this._velocity=a,this._startColor=r,this._startSize=n,this._startRotation0=i,this._startRotation1=o,this._startRotation2=s,this._startLifeTime=l,this._time=h,this._startSpeed=d,this._randoms0=c,this._randoms1=u,this._simulationWorldPostion=_}static __init__(){VertexShurikenParticleMesh._vertexDeclaration=new t.VertexDeclaration(188,[new t.VertexElement(0,t.VertexElementFormat.Vector3,VertexShuriKenParticle.PARTICLE_POSITION0),new t.VertexElement(12,t.VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_COLOR0),new t.VertexElement(28,t.VertexElementFormat.Vector2,VertexShuriKenParticle.PARTICLE_TEXTURECOORDINATE0),new t.VertexElement(36,t.VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_SHAPEPOSITIONSTARTLIFETIME),new t.VertexElement(52,t.VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_DIRECTIONTIME),new t.VertexElement(68,t.VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_STARTCOLOR0),new t.VertexElement(84,t.VertexElementFormat.Vector3,VertexShuriKenParticle.PARTICLE_STARTSIZE),new t.VertexElement(96,t.VertexElementFormat.Vector3,VertexShuriKenParticle.PARTICLE_STARTROTATION),new t.VertexElement(108,t.VertexElementFormat.Single,VertexShuriKenParticle.PARTICLE_STARTSPEED),new t.VertexElement(112,t.VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_RANDOM0),new t.VertexElement(128,t.VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_RANDOM1),new t.VertexElement(144,t.VertexElementFormat.Vector3,VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDPOSTION),new t.VertexElement(156,t.VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDROTATION),new t.VertexElement(172,t.VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_SIMULATIONUV)]),VertexShurikenParticleMesh._vertexInstanceMeshDeclaration=new t.VertexDeclaration(36,[new t.VertexElement(0,t.VertexElementFormat.Vector3,VertexShuriKenParticle.PARTICLE_POSITION0),new t.VertexElement(12,t.VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_COLOR0),new t.VertexElement(28,t.VertexElementFormat.Vector2,VertexShuriKenParticle.PARTICLE_TEXTURECOORDINATE0)]),VertexShurikenParticleMesh._vertexInstanceParticleDeclaration=new t.VertexDeclaration(152,[new t.VertexElement(0,t.VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_SHAPEPOSITIONSTARTLIFETIME),new t.VertexElement(16,t.VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_DIRECTIONTIME),new t.VertexElement(32,t.VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_STARTCOLOR0),new t.VertexElement(48,t.VertexElementFormat.Vector3,VertexShuriKenParticle.PARTICLE_STARTSIZE),new t.VertexElement(60,t.VertexElementFormat.Vector3,VertexShuriKenParticle.PARTICLE_STARTROTATION),new t.VertexElement(72,t.VertexElementFormat.Single,VertexShuriKenParticle.PARTICLE_STARTSPEED),new t.VertexElement(76,t.VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_RANDOM0),new t.VertexElement(92,t.VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_RANDOM1),new t.VertexElement(108,t.VertexElementFormat.Vector3,VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDPOSTION),new t.VertexElement(120,t.VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDROTATION),new t.VertexElement(136,t.VertexElementFormat.Vector4,VertexShuriKenParticle.PARTICLE_SIMULATIONUV)])}static get vertexDeclaration(){return VertexShurikenParticleMesh._vertexDeclaration}static get vertexInstanceMeshDeclaration(){return VertexShurikenParticleMesh._vertexInstanceMeshDeclaration}static get vertexInstanceParticleDeclaration(){return VertexShurikenParticleMesh._vertexInstanceParticleDeclaration}get cornerTextureCoordinate(){return this._cornerTextureCoordinate}get position(){return this._positionStartLifeTime}get velocity(){return this._velocity}get startColor(){return this._startColor}get startSize(){return this._startSize}get startRotation0(){return this._startRotation0}get startRotation1(){return this._startRotation1}get startRotation2(){return this._startRotation2}get startLifeTime(){return this._startLifeTime}get time(){return this._time}get startSpeed(){return this._startSpeed}get random0(){return this._randoms0}get random1(){return this._randoms1}get simulationWorldPostion(){return this._simulationWorldPostion}}class Rand{constructor(e){this._temp=new Uint32Array(1),this.seeds=new Uint32Array(4),this.seeds[0]=e,this.seeds[1]=1812433253*this.seeds[0]+1,this.seeds[2]=1812433253*this.seeds[1]+1,this.seeds[3]=1812433253*this.seeds[2]+1}static getFloatFromInt(e){return 1/8388607*(8388607&e)}static getByteFromInt(e){return(8388607&e)>>>15}get seed(){return this.seeds[0]}set seed(e){this.seeds[0]=e,this.seeds[1]=1812433253*this.seeds[0]+1,this.seeds[2]=1812433253*this.seeds[1]+1,this.seeds[3]=1812433253*this.seeds[2]+1}getUint(){return this._temp[0]=this.seeds[0]^this.seeds[0]<<11,this.seeds[0]=this.seeds[1],this.seeds[1]=this.seeds[2],this.seeds[2]=this.seeds[3],this.seeds[3]=this.seeds[3]^this.seeds[3]>>>19^this._temp[0]^this._temp[0]>>>8,this.seeds[3]}getFloat(){return this.getUint(),(8388607&this.seeds[3])*(1/8388607)}getSignedFloat(){return 2*this.getFloat()-1}}class Emission{constructor(){this._emissionRate=10,this._emissionRateOverDistance=0,this._destroyed=!1,this._bursts=[]}set emissionRate(e){if(e<0)throw new Error("ParticleBaseShape:emissionRate value must large or equal than 0.");this._emissionRate=e}get emissionRate(){return this._emissionRate}get emissionRateOverDistance(){return this._emissionRateOverDistance}set emissionRateOverDistance(e){e=Math.max(0,e),this._emissionRateOverDistance=e}get destroyed(){return this._destroyed}destroy(){this._bursts=null,this._destroyed=!0}getBurstsCount(){return this._bursts.length}getBurstByIndex(e){return this._bursts[e]}addBurst(e){var t=this._bursts.length;if(t>0)for(var a=0;a<t;a++)this._bursts[a].time>e.time&&this._bursts.splice(a,0,e);this._bursts.push(e)}removeBurst(e){var t=this._bursts.indexOf(e);-1!==t&&this._bursts.splice(t,1)}removeBurstByIndex(e){this._bursts.splice(e,1)}clearBurst(){this._bursts.length=0}cloneTo(e){var t=e,a=t._bursts;a.length=this._bursts.length;for(var r=0,n=this._bursts.length;r<n;r++){var i=a[r];i?this._bursts[r].cloneTo(i):a[r]=this._bursts[r].clone()}t._emissionRate=this._emissionRate,t._emissionRateOverDistance=this._emissionRateOverDistance,t.enable=this.enable}clone(){var e=new Emission;return this.cloneTo(e),e}}class ShuriKenParticle3DShaderDeclaration{static __init__(){ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_BILLBOARD=t.Shader3D.getDefineByName("SPHERHBILLBOARD"),ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD=t.Shader3D.getDefineByName("STRETCHEDBILLBOARD"),ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD=t.Shader3D.getDefineByName("HORIZONTALBILLBOARD"),ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD=t.Shader3D.getDefineByName("VERTICALBILLBOARD"),ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_COLORKEYCOUNT_8=t.Shader3D.getDefineByName("COLORKEYCOUNT_8"),ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RANDOMCOLOROVERLIFETIME=t.Shader3D.getDefineByName("RANDOMCOLOROVERLIFETIME"),ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE=t.Shader3D.getDefineByName("VELOCITYOVERLIFETIMERANDOMCURVE"),ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE=t.Shader3D.getDefineByName("TEXTURESHEETANIMATIONRANDOMCURVE"),ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIME=t.Shader3D.getDefineByName("ROTATIONOVERLIFETIME"),ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE=t.Shader3D.getDefineByName("ROTATIONOVERLIFETIMESEPERATE"),ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES=t.Shader3D.getDefineByName("SIZEOVERLIFETIMERANDOMCURVES"),ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE=t.Shader3D.getDefineByName("SIZEOVERLIFETIMERANDOMCURVESSEPERATE"),ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_MESH=t.Shader3D.getDefineByName("RENDERMODE_MESH"),ShuriKenParticle3DShaderDeclaration.WORLDPOSITION=t.Shader3D.propertyNameToID("u_WorldPosition"),ShuriKenParticle3DShaderDeclaration.WORLDROTATION=t.Shader3D.propertyNameToID("u_WorldRotation"),ShuriKenParticle3DShaderDeclaration.POSITIONSCALE=t.Shader3D.propertyNameToID("u_PositionScale"),ShuriKenParticle3DShaderDeclaration.SIZESCALE=t.Shader3D.propertyNameToID("u_SizeScale"),ShuriKenParticle3DShaderDeclaration.SCALINGMODE=t.Shader3D.propertyNameToID("u_ScalingMode"),ShuriKenParticle3DShaderDeclaration.GRAVITY=t.Shader3D.propertyNameToID("u_Gravity"),ShuriKenParticle3DShaderDeclaration.THREEDSTARTROTATION=t.Shader3D.propertyNameToID("u_ThreeDStartRotation"),ShuriKenParticle3DShaderDeclaration.STRETCHEDBILLBOARDLENGTHSCALE=t.Shader3D.propertyNameToID("u_StretchedBillboardLengthScale"),ShuriKenParticle3DShaderDeclaration.STRETCHEDBILLBOARDSPEEDSCALE=t.Shader3D.propertyNameToID("u_StretchedBillboardSpeedScale"),ShuriKenParticle3DShaderDeclaration.SIMULATIONSPACE=t.Shader3D.propertyNameToID("u_SimulationSpace"),ShuriKenParticle3DShaderDeclaration.CURRENTTIME=t.Shader3D.propertyNameToID("u_CurrentTime"),ShuriKenParticle3DShaderDeclaration.DRAG=t.Shader3D.propertyNameToID("u_DragConstanct"),ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTX=t.Shader3D.propertyNameToID("u_VOLVelocityGradientX"),ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTY=t.Shader3D.propertyNameToID("u_VOLVelocityGradientY"),ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZ=t.Shader3D.propertyNameToID("u_VOLVelocityGradientZ"),ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTXMAX=t.Shader3D.propertyNameToID("u_VOLVelocityGradientMaxX"),ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTYMAX=t.Shader3D.propertyNameToID("u_VOLVelocityGradientMaxY"),ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZMAX=t.Shader3D.propertyNameToID("u_VOLVelocityGradientMaxZ"),ShuriKenParticle3DShaderDeclaration.VOLSPACETYPE=t.Shader3D.propertyNameToID("u_VOLSpaceType"),ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTALPHAS=t.Shader3D.propertyNameToID("u_ColorOverLifeGradientAlphas"),ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTCOLORS=t.Shader3D.propertyNameToID("u_ColorOverLifeGradientColors"),ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTRANGES=t.Shader3D.propertyNameToID("u_ColorOverLifeGradientRanges"),ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTALPHAS=t.Shader3D.propertyNameToID("u_MaxColorOverLifeGradientAlphas"),ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTCOLORS=t.Shader3D.propertyNameToID("u_MaxColorOverLifeGradientColors"),ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTRANGES=t.Shader3D.propertyNameToID("u_MaxColorOverLifeGradientRanges"),ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENT=t.Shader3D.propertyNameToID("u_SOLSizeGradient"),ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTX=t.Shader3D.propertyNameToID("u_SOLSizeGradientX"),ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTY=t.Shader3D.propertyNameToID("u_SOLSizeGradientY"),ShuriKenParticle3DShaderDeclaration.SOLSizeGradientZ=t.Shader3D.propertyNameToID("u_SOLSizeGradientZ"),ShuriKenParticle3DShaderDeclaration.SOLSizeGradientMax=t.Shader3D.propertyNameToID("u_SOLSizeGradientMax"),ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTXMAX=t.Shader3D.propertyNameToID("u_SOLSizeGradientMaxX"),ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTYMAX=t.Shader3D.propertyNameToID("u_SOLSizeGradientMaxY"),ShuriKenParticle3DShaderDeclaration.SOLSizeGradientZMAX=t.Shader3D.propertyNameToID("u_SOLSizeGradientMaxZ"),ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENT=t.Shader3D.propertyNameToID("u_ROLAngularVelocityGradient"),ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTX=t.Shader3D.propertyNameToID("u_ROLAngularVelocityGradientX"),ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTY=t.Shader3D.propertyNameToID("u_ROLAngularVelocityGradientY"),ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZ=t.Shader3D.propertyNameToID("u_ROLAngularVelocityGradientZ"),ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTMAX=t.Shader3D.propertyNameToID("u_ROLAngularVelocityGradientMax"),ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTXMAX=t.Shader3D.propertyNameToID("u_ROLAngularVelocityGradientMaxX"),ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTYMAX=t.Shader3D.propertyNameToID("u_ROLAngularVelocityGradientMaxY"),ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZMAX=t.Shader3D.propertyNameToID("u_ROLAngularVelocityGradientMaxZ"),ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONCYCLES=t.Shader3D.propertyNameToID("u_TSACycles"),ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONSUBUVLENGTH=t.Shader3D.propertyNameToID("u_TSASubUVLength"),ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONGRADIENTUVS=t.Shader3D.propertyNameToID("u_TSAGradientUVs"),ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONGRADIENTMAXUVS=t.Shader3D.propertyNameToID("u_TSAMaxGradientUVs");let a=t.LayaGL.renderDeviceFactory.createGlobalUniformMap("ShurikenSprite3D");a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.WORLDPOSITION,"u_WorldPosition",e.ShaderDataType.Vector3),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.WORLDROTATION,"u_WorldRotation",e.ShaderDataType.Vector4),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.POSITIONSCALE,"u_PositionScale",e.ShaderDataType.Vector3),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SIZESCALE,"u_SizeScale",e.ShaderDataType.Vector3),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SCALINGMODE,"u_ScalingMode",e.ShaderDataType.Int),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.GRAVITY,"u_Gravity",e.ShaderDataType.Vector3),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.THREEDSTARTROTATION,"u_ThreeDStartRotation",e.ShaderDataType.Bool),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.STRETCHEDBILLBOARDLENGTHSCALE,"u_StretchedBillboardLengthScale",e.ShaderDataType.Float),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.STRETCHEDBILLBOARDSPEEDSCALE,"u_StretchedBillboardSpeedScale",e.ShaderDataType.Float),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SIMULATIONSPACE,"u_SimulationSpace",e.ShaderDataType.Int),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.CURRENTTIME,"u_CurrentTime",e.ShaderDataType.Vector2),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTALPHAS,"u_ColorOverLifeGradientAlphas",e.ShaderDataType.Buffer),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTCOLORS,"u_ColorOverLifeGradientColors",e.ShaderDataType.Buffer),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTRANGES,"u_ColorOverLifeGradientRanges",e.ShaderDataType.Vector4),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTALPHAS,"u_MaxColorOverLifeGradientAlphas",e.ShaderDataType.Buffer),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTCOLORS,"u_MaxColorOverLifeGradientColors",e.ShaderDataType.Buffer),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTRANGES,"u_MaxColorOverLifeGradientRanges",e.ShaderDataType.Vector4),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTX,"u_VOLVelocityGradientX",e.ShaderDataType.Buffer),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTY,"u_VOLVelocityGradientY",e.ShaderDataType.Buffer),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZ,"u_VOLVelocityGradientZ",e.ShaderDataType.Buffer),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTXMAX,"u_VOLVelocityGradientMaxX",e.ShaderDataType.Buffer),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTYMAX,"u_VOLVelocityGradientMaxY",e.ShaderDataType.Buffer),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZMAX,"u_VOLVelocityGradientMaxZ",e.ShaderDataType.Buffer),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.VOLSPACETYPE,"u_VOLSpaceType",e.ShaderDataType.Int),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENT,"u_SOLSizeGradient",e.ShaderDataType.Buffer),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTX,"u_SOLSizeGradientX",e.ShaderDataType.Buffer),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTY,"u_SOLSizeGradientY",e.ShaderDataType.Buffer),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientZ,"u_SOLSizeGradientZ",e.ShaderDataType.Buffer),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientMax,"u_SOLSizeGradientMax",e.ShaderDataType.Buffer),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTXMAX,"u_SOLSizeGradientMaxX",e.ShaderDataType.Buffer),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTYMAX,"u_SOLSizeGradientMaxY",e.ShaderDataType.Buffer),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientZMAX,"u_SOLSizeGradientMaxZ",e.ShaderDataType.Buffer),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENT,"u_ROLAngularVelocityGradient",e.ShaderDataType.Buffer),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTX,"u_ROLAngularVelocityGradientX",e.ShaderDataType.Buffer),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTY,"u_ROLAngularVelocityGradientY",e.ShaderDataType.Buffer),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZ,"u_ROLAngularVelocityGradientZ",e.ShaderDataType.Buffer),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTMAX,"u_ROLAngularVelocityGradientMax",e.ShaderDataType.Buffer),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTXMAX,"u_ROLAngularVelocityGradientMaxX",e.ShaderDataType.Buffer),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTYMAX,"u_ROLAngularVelocityGradientMaxY",e.ShaderDataType.Buffer),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZMAX,"u_ROLAngularVelocityGradientMaxZ",e.ShaderDataType.Buffer),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONCYCLES,"u_TSACycles",e.ShaderDataType.Float),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONSUBUVLENGTH,"u_TSASubUVLength",e.ShaderDataType.Vector2),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONGRADIENTUVS,"u_TSAGradientUVs",e.ShaderDataType.Buffer),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONGRADIENTMAXUVS,"u_TSAMaxGradientUVs",e.ShaderDataType.Buffer),a.addShaderUniform(ShuriKenParticle3DShaderDeclaration.DRAG,"u_DragConstanct",e.ShaderDataType.Vector2)}}class ShurikenParticleData{constructor(){}static _getStartLifetimeFromGradient(e,a){for(var r=1,n=e.gradientCount;r<n;r++){var i=e.getKeyByIndex(r);if(i>=a){var o=e.getKeyByIndex(r-1),s=(a-o)/(i-o);return t.MathUtil.lerp(e.getValueByIndex(r-1),e.getValueByIndex(r),s)}}throw new Error("ShurikenParticleData: can't get value foam startLifeTimeGradient.")}static _randomInvertRoationArray(e,t,a,r,n){var i;r?(r.seed=n[6],i=r.getFloat(),n[6]=r.seed):i=Math.random(),i<a?(t.x=-e.x,t.y=-e.y,t.z=-e.z):(t.x=e.x,t.y=e.y,t.z=e.z)}static _randomInvertRoation(e,t,a,r){var n;return a?(a.seed=r[6],n=a.getFloat(),r[6]=a.seed):n=Math.random(),n<t&&(e=-e),e}static create(e,a){var r=e.autoRandomSeed,n=e._rand,i=e._randomSeeds;switch(e.startColorType){case 0:var o=e.startColorConstant;ShurikenParticleData.startColor.x=o.x,ShurikenParticleData.startColor.y=o.y,ShurikenParticleData.startColor.z=o.z,ShurikenParticleData.startColor.w=o.w;break;case 2:r?t.Vector4.lerp(e.startColorConstantMin,e.startColorConstantMax,Math.random(),ShurikenParticleData.startColor):(n.seed=i[3],t.Vector4.lerp(e.startColorConstantMin,e.startColorConstantMax,n.getFloat(),ShurikenParticleData.startColor),i[3]=n.seed)}var s=e.colorOverLifetime;if(s&&s.enable){var l=s.color;switch(l.type){case 0:ShurikenParticleData.startColor.x=ShurikenParticleData.startColor.x*l.constant.x,ShurikenParticleData.startColor.y=ShurikenParticleData.startColor.y*l.constant.y,ShurikenParticleData.startColor.z=ShurikenParticleData.startColor.z*l.constant.z,ShurikenParticleData.startColor.w=ShurikenParticleData.startColor.w*l.constant.w;break;case 2:var h;r?h=Math.random():(n.seed=i[10],h=n.getFloat(),i[10]=n.seed);var d=l.constantMin,c=l.constantMax;ShurikenParticleData.startColor.x=ShurikenParticleData.startColor.x*t.MathUtil.lerp(d.x,c.x,h),ShurikenParticleData.startColor.y=ShurikenParticleData.startColor.y*t.MathUtil.lerp(d.y,c.y,h),ShurikenParticleData.startColor.z=ShurikenParticleData.startColor.z*t.MathUtil.lerp(d.z,c.z,h),ShurikenParticleData.startColor.w=ShurikenParticleData.startColor.w*t.MathUtil.lerp(d.w,c.w,h)}}var u=ShurikenParticleData.startSize;switch(e.startSizeType){case 0:if(e.threeDStartSize){var _=e.startSizeConstantSeparate;u[0]=_.x,u[1]=_.y,u[2]=_.z}else u[0]=u[1]=u[2]=e.startSizeConstant;break;case 2:if(e.threeDStartSize){var m=e.startSizeConstantMinSeparate,f=e.startSizeConstantMaxSeparate;r?(u[0]=t.MathUtil.lerp(m.x,f.x,Math.random()),u[1]=t.MathUtil.lerp(m.y,f.y,Math.random()),u[2]=t.MathUtil.lerp(m.z,f.z,Math.random())):(n.seed=i[4],u[0]=t.MathUtil.lerp(m.x,f.x,n.getFloat()),u[1]=t.MathUtil.lerp(m.y,f.y,n.getFloat()),u[2]=t.MathUtil.lerp(m.z,f.z,n.getFloat()),i[4]=n.seed)}else r?u[0]=u[1]=u[2]=t.MathUtil.lerp(e.startSizeConstantMin,e.startSizeConstantMax,Math.random()):(n.seed=i[4],u[0]=u[1]=u[2]=t.MathUtil.lerp(e.startSizeConstantMin,e.startSizeConstantMax,n.getFloat()),i[4]=n.seed)}var S=e.sizeOverLifetime;if(S&&S.enable&&1===S.size.type){var g,p=S.size;if(p.separateAxes)r?(u[0]=u[0]*t.MathUtil.lerp(p.constantMinSeparate.x,p.constantMaxSeparate.x,Math.random()),u[1]=u[1]*t.MathUtil.lerp(p.constantMinSeparate.y,p.constantMaxSeparate.y,Math.random()),u[2]=u[2]*t.MathUtil.lerp(p.constantMinSeparate.z,p.constantMaxSeparate.z,Math.random())):(n.seed=i[11],u[0]=u[0]*t.MathUtil.lerp(p.constantMinSeparate.x,p.constantMaxSeparate.x,n.getFloat()),u[1]=u[1]*t.MathUtil.lerp(p.constantMinSeparate.y,p.constantMaxSeparate.y,n.getFloat()),u[2]=u[2]*t.MathUtil.lerp(p.constantMinSeparate.z,p.constantMaxSeparate.z,n.getFloat()),i[11]=n.seed);else r?g=t.MathUtil.lerp(p.constantMin,p.constantMax,Math.random()):(n.seed=i[11],g=t.MathUtil.lerp(p.constantMin,p.constantMax,n.getFloat()),i[11]=n.seed),u[0]=u[0]*g,u[1]=u[1]*g,u[2]=u[2]*g}var D=a.renderMode;if(1!==D)switch(e.startRotationType){case 0:if(e.threeDStartRotation){var T=e.startRotationConstantSeparate,E=ShurikenParticleData._tempVector30;ShurikenParticleData._randomInvertRoationArray(T,E,e.randomizeRotationDirection,r?null:n,i),ShurikenParticleData.startRotation[0]=E.x,ShurikenParticleData.startRotation[1]=E.y,ShurikenParticleData.startRotation[2]=4!==D?-E.z:E.z}else ShurikenParticleData.startRotation[0]=ShurikenParticleData._randomInvertRoation(e.startRotationConstant,e.randomizeRotationDirection,r?null:n,i),ShurikenParticleData.startRotation[1]=0,ShurikenParticleData.startRotation[2]=0;break;case 2:if(e.threeDStartRotation){var x=e.startRotationConstantMinSeparate,M=e.startRotationConstantMaxSeparate,R=ShurikenParticleData._tempVector30;r?(R.x=t.MathUtil.lerp(x.x,M.x,Math.random()),R.y=t.MathUtil.lerp(x.y,M.y,Math.random()),R.z=t.MathUtil.lerp(x.z,M.z,Math.random())):(n.seed=i[5],R.x=t.MathUtil.lerp(x.x,M.x,n.getFloat()),R.y=t.MathUtil.lerp(x.y,M.y,n.getFloat()),R.z=t.MathUtil.lerp(x.z,M.z,n.getFloat()),i[5]=n.seed),ShurikenParticleData._randomInvertRoationArray(R,R,e.randomizeRotationDirection,r?null:n,i),ShurikenParticleData.startRotation[0]=R.x,ShurikenParticleData.startRotation[1]=R.y,ShurikenParticleData.startRotation[2]=4!==D?-R.z:R.z}else r?ShurikenParticleData.startRotation[0]=ShurikenParticleData._randomInvertRoation(t.MathUtil.lerp(e.startRotationConstantMin,e.startRotationConstantMax,Math.random()),e.randomizeRotationDirection,r?null:n,i):(n.seed=i[5],ShurikenParticleData.startRotation[0]=ShurikenParticleData._randomInvertRoation(t.MathUtil.lerp(e.startRotationConstantMin,e.startRotationConstantMax,n.getFloat()),e.randomizeRotationDirection,r?null:n,i),i[5]=n.seed)}switch(e.startLifetimeType){case 0:ShurikenParticleData.startLifeTime=e.startLifetimeConstant;break;case 1:ShurikenParticleData.startLifeTime=ShurikenParticleData._getStartLifetimeFromGradient(e.startLifeTimeGradient,e.emissionTime);break;case 2:r?ShurikenParticleData.startLifeTime=t.MathUtil.lerp(e.startLifetimeConstantMin,e.startLifetimeConstantMax,Math.random()):(n.seed=i[7],ShurikenParticleData.startLifeTime=t.MathUtil.lerp(e.startLifetimeConstantMin,e.startLifetimeConstantMax,n.getFloat()),i[7]=n.seed);break;case 3:var A=e.emissionTime;r?ShurikenParticleData.startLifeTime=t.MathUtil.lerp(ShurikenParticleData._getStartLifetimeFromGradient(e.startLifeTimeGradientMin,A),ShurikenParticleData._getStartLifetimeFromGradient(e.startLifeTimeGradientMax,A),Math.random()):(n.seed=i[7],ShurikenParticleData.startLifeTime=t.MathUtil.lerp(ShurikenParticleData._getStartLifetimeFromGradient(e.startLifeTimeGradientMin,A),ShurikenParticleData._getStartLifetimeFromGradient(e.startLifeTimeGradientMax,A),n.getFloat()),i[7]=n.seed)}var C=e.textureSheetAnimation;if(C&&C.enable){var y,v=C.tiles,I=v.x,L=v.y,P=1/I,B=1/L,O=C.startFrame;switch(O.type){case 0:y=O.constant;break;case 1:r?y=t.MathUtil.lerp(O.constantMin,O.constantMax,Math.random()):(n.seed=i[14],y=t.MathUtil.lerp(O.constantMin,O.constantMax,n.getFloat()),i[14]=n.seed)}var V=C.frame,w=C.cycles;switch(V.type){case 0:y+=V.constant*w;break;case 2:r?y+=t.MathUtil.lerp(V.constantMin,V.constantMax,Math.random())*w:(n.seed=i[15],y+=t.MathUtil.lerp(V.constantMin,V.constantMax,n.getFloat())*w,i[15]=n.seed)}var b=0;switch(C.type){case 0:b=Math.floor(y/I);break;case 1:C.randomRow?r?b=Math.floor(Math.random()*L):(n.seed=i[13],b=Math.floor(n.getFloat()*L),i[13]=n.seed):b=C.rowIndex}var N=Math.floor(y%I);ShurikenParticleData.startUVInfo=ShurikenParticleData.startUVInfo,ShurikenParticleData.startUVInfo[0]=P,ShurikenParticleData.startUVInfo[1]=B,ShurikenParticleData.startUVInfo[2]=N*P,ShurikenParticleData.startUVInfo[3]=b*B}else ShurikenParticleData.startUVInfo=ShurikenParticleData.startUVInfo,ShurikenParticleData.startUVInfo[0]=1,ShurikenParticleData.startUVInfo[1]=1,ShurikenParticleData.startUVInfo[2]=0,ShurikenParticleData.startUVInfo[3]=0}}ShurikenParticleData._tempVector30=new t.Vector3,ShurikenParticleData.startColor=new t.Vector4,ShurikenParticleData.startSize=new Float32Array(3),ShurikenParticleData.startRotation=new Float32Array(3),ShurikenParticleData.startUVInfo=new Float32Array(4);class ShurikenParticleSystem extends GeometryElement{constructor(e,a=t.MeshTopology.Triangles,r=t.DrawType.DrawElement){super(a,r),this._bounds=null,this._gravityOffset=new t.Vector2,this._customBounds=null,this._useCustomBounds=!1,this._owner=null,this._ownerRender=null,this._vertices=null,this._floatCountPerVertex=0,this._startLifeTimeIndex=0,this._timeIndex=0,this._simulationUV_Index=0,this._simulateUpdate=!1,this._firstActiveElement=0,this._firstNewElement=0,this._firstFreeElement=0,this._firstRetiredElement=0,this._drawCounter=0,this._bufferMaxParticles=0,this._emission=null,this._shape=null,this._isEmitting=!1,this._isPlaying=!1,this._isPaused=!1,this._playStartDelay=0,this._frameRateTime=0,this._emissionTime=0,this._totalDelayTime=0,this._emissionDistance=0,this._emissionLastPosition=new t.Vector3,this._burstsIndex=0,this._velocityOverLifetime=null,this._colorOverLifetime=null,this._sizeOverLifetime=null,this._rotationOverLifetime=null,this._textureSheetAnimation=null,this._startLifetimeType=0,this._startLifetimeConstant=0,this._startLifeTimeGradient=null,this._startLifetimeConstantMin=0,this._startLifetimeConstantMax=0,this._startLifeTimeGradientMin=null,this._startLifeTimeGradientMax=null,this._maxStartLifetime=0,this._uvLength=new t.Vector2,this._vertexStride=0,this._indexStride=0,this._vertexBuffer=null,this._indexBuffer=null,this._bufferState=new t.BufferState,this._updateMask=0,this._currentTime=0,this._startUpdateLoopCount=0,this._rand=null,this._randomSeeds=null,this.duration=0,this.looping=!1,this.prewarm=!1,this.startDelayType=0,this.startDelay=0,this.startDelayMin=0,this.startDelayMax=0,this.startSpeedType=0,this.startSpeedConstant=0,this.startSpeedConstantMin=0,this.startSpeedConstantMax=0,this.dragType=0,this.dragConstant=0,this.dragSpeedConstantMin=0,this.dragSpeedConstantMax=0,this.threeDStartSize=!1,this.startSizeType=0,this.startSizeConstant=0,this.startSizeConstantSeparate=null,this.startSizeConstantMin=0,this.startSizeConstantMax=0,this.startSizeConstantMinSeparate=null,this.startSizeConstantMaxSeparate=null,this.threeDStartRotation=!1,this.startRotationType=0,this.startRotationConstant=0,this.startRotationConstantSeparate=null,this.startRotationConstantMin=0,this.startRotationConstantMax=0,this.startRotationConstantMinSeparate=null,this.startRotationConstantMaxSeparate=null,this.randomizeRotationDirection=0,this.startColorType=0,this.startColorConstant=new t.Vector4(1,1,1,1),this.startColorConstantMin=new t.Vector4(0,0,0,0),this.startColorConstantMax=new t.Vector4(1,1,1,1),this.gravityModifier=0,this.simulationSpace=0,this.simulationSpeed=1,this.scaleMode=1,this.playOnAwake=!1,this.randomSeed=null,this.autoRandomSeed=!1,this.isPerformanceMode=!1,this.indexFormat=t.IndexFormat.UInt16,this._firstActiveElement=0,this._firstNewElement=0,this._firstFreeElement=0,this._firstRetiredElement=0,this._owner=e.owner,this._ownerRender=e,this._useCustomBounds=!1,this._currentTime=0,this._bounds=new Bounds(new t.Vector3(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE),new t.Vector3(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE)),this.bufferState=this._bufferState=new t.BufferState,this._isEmitting=!1,this._isPlaying=!1,this._isPaused=!1,this._burstsIndex=0,this._frameRateTime=0,this._emissionTime=0,this._totalDelayTime=0,this._simulateUpdate=!1,this._bufferMaxParticles=1,this.duration=5,this.looping=!0,this.prewarm=!1,this.startDelayType=0,this.startDelay=0,this.startDelayMin=0,this.startDelayMax=0,this._startLifetimeType=0,this._startLifetimeConstant=5,this._startLifeTimeGradient=new GradientDataNumber,this._startLifetimeConstantMin=0,this._startLifetimeConstantMax=5,this._startLifeTimeGradientMin=new GradientDataNumber,this._startLifeTimeGradientMax=new GradientDataNumber,this._maxStartLifetime=5,this.startSpeedType=0,this.startSpeedConstant=5,this.startSpeedConstantMin=0,this.startSpeedConstantMax=5,this.dragType=0,this.dragConstant=0,this.dragSpeedConstantMin=0,this.dragSpeedConstantMax=0,this.threeDStartSize=!1,this.startSizeType=0,this.startSizeConstant=1,this.startSizeConstantSeparate=new t.Vector3(1,1,1),this.startSizeConstantMin=0,this.startSizeConstantMax=1,this.startSizeConstantMinSeparate=new t.Vector3(0,0,0),this.startSizeConstantMaxSeparate=new t.Vector3(1,1,1),this.threeDStartRotation=!1,this.startRotationType=0,this.startRotationConstant=0,this.startRotationConstantSeparate=new t.Vector3(0,0,0),this.startRotationConstantMin=0,this.startRotationConstantMax=0,this.startRotationConstantMinSeparate=new t.Vector3(0,0,0),this.startRotationConstantMaxSeparate=new t.Vector3(0,0,0),this.gravityModifier=0,this.simulationSpace=1,this.scaleMode=1,this.playOnAwake=!0,this._rand=new Rand(0),this.autoRandomSeed=!0,this.randomSeed=new Uint32Array(1),this._randomSeeds=new Uint32Array(ShurikenParticleSystem._RANDOMOFFSET.length),this.isPerformanceMode=!0,this._emission=new Emission,this._emission.enable=!0}get maxParticles(){return this._bufferMaxParticles-1}set maxParticles(e){var t=e+1;t!==this._bufferMaxParticles&&(this._bufferMaxParticles=t,this._initBufferDatas()),this._updateParticlesSimulationRestart(0)}get emission(){return this._emission}get aliveParticleCount(){return this._firstNewElement>=this._firstRetiredElement?this._firstNewElement-this._firstRetiredElement:this._bufferMaxParticles-this._firstRetiredElement+this._firstNewElement}get emissionTime(){return this._emissionTime>this.duration?this.duration:this._emissionTime}get shape(){return this._shape}set shape(e){this._shape!==e&&(this._shape=e)}get isAlive(){return!!(this._isPlaying||this.aliveParticleCount>0)}get isEmitting(){return this._isEmitting}get isPlaying(){return this._isPlaying}get isPaused(){return this._isPaused}get startLifetimeType(){return this._startLifetimeType}set startLifetimeType(e){var t,a;switch(this.startLifetimeType){case 0:this._maxStartLifetime=this.startLifetimeConstant;break;case 1:this._maxStartLifetime=-Number.MAX_VALUE;var r=r;for(t=0,a=r.gradientCount;t<a;t++)this._maxStartLifetime=Math.max(this._maxStartLifetime,r.getValueByIndex(t));break;case 2:this._maxStartLifetime=Math.max(this.startLifetimeConstantMin,this.startLifetimeConstantMax);break;case 3:this._maxStartLifetime=-Number.MAX_VALUE;var n=n;for(t=0,a=n.gradientCount;t<a;t++)this._maxStartLifetime=Math.max(this._maxStartLifetime,n.getValueByIndex(t));var i=i;for(t=0,a=i.gradientCount;t<a;t++)this._maxStartLifetime=Math.max(this._maxStartLifetime,i.getValueByIndex(t))}this._startLifetimeType=e}get startLifetimeConstant(){return this._startLifetimeConstant}set startLifetimeConstant(e){0===this._startLifetimeType&&(this._maxStartLifetime=e),this._startLifetimeConstant=e}get startLifeTimeGradient(){return this._startLifeTimeGradient}set startLifeTimeGradient(e){if(1===this._startLifetimeType){this._maxStartLifetime=-Number.MAX_VALUE;for(var t=0,a=e.gradientCount;t<a;t++)this._maxStartLifetime=Math.max(this._maxStartLifetime,e.getValueByIndex(t))}this._startLifeTimeGradient=e}get startLifetimeConstantMin(){return this._startLifetimeConstantMin}set startLifetimeConstantMin(e){2===this._startLifetimeType&&(this._maxStartLifetime=Math.max(e,this._startLifetimeConstantMax)),this._startLifetimeConstantMin=e}get startLifetimeConstantMax(){return this._startLifetimeConstantMax}set startLifetimeConstantMax(e){2===this._startLifetimeType&&(this._maxStartLifetime=Math.max(this._startLifetimeConstantMin,e)),this._startLifetimeConstantMax=e}get startLifeTimeGradientMin(){return this._startLifeTimeGradientMin}set startLifeTimeGradientMin(e){if(3===this._startLifetimeType){var t,a;for(this._maxStartLifetime=-Number.MAX_VALUE,t=0,a=e.gradientCount;t<a;t++)this._maxStartLifetime=Math.max(this._maxStartLifetime,e.getValueByIndex(t));for(t=0,a=this._startLifeTimeGradientMax.gradientCount;t<a;t++)this._maxStartLifetime=Math.max(this._maxStartLifetime,this._startLifeTimeGradientMax.getValueByIndex(t))}this._startLifeTimeGradientMin=e}get startLifeTimeGradientMax(){return this._startLifeTimeGradientMax}set startLifeTimeGradientMax(e){if(3===this._startLifetimeType){var t,a;for(this._maxStartLifetime=-Number.MAX_VALUE,t=0,a=this._startLifeTimeGradientMin.gradientCount;t<a;t++)this._maxStartLifetime=Math.max(this._maxStartLifetime,this._startLifeTimeGradientMin.getValueByIndex(t));for(t=0,a=e.gradientCount;t<a;t++)this._maxStartLifetime=Math.max(this._maxStartLifetime,e.getValueByIndex(t))}this._startLifeTimeGradientMax=e}get velocityOverLifetime(){return this._velocityOverLifetime}set velocityOverLifetime(e){var t=this._ownerRender._baseRenderNode.shaderData;if(t.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE),this._velocityOverLifetime=e,e){var a=e.velocity,r=a.type;if(e.enable)switch(t.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_VELOCITYOVERLIFETIMERANDOMCURVE),r){case 0:a.gradientConstantX._formatData(),a.gradientConstantY._formatData(),a.gradientConstantZ._formatData(),t.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTX,a.gradientConstantX._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTY,a.gradientConstantY._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZ,a.gradientConstantZ._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTXMAX,a.gradientConstantX._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTYMAX,a.gradientConstantY._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZMAX,a.gradientConstantZ._elements);break;case 1:a.gradientX._formatData(),a.gradientY._formatData(),a.gradientZ._formatData(),t.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTX,a.gradientX._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTY,a.gradientY._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZ,a.gradientZ._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTXMAX,a.gradientX._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZMAX,a.gradientZ._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTYMAX,a.gradientY._elements);break;case 2:a.gradientConstantXMin._formatData(),a.gradientConstantYMin._formatData(),a.gradientConstantZMin._formatData(),a.gradientConstantXMax._formatData(),a.gradientConstantYMax._formatData(),a.gradientConstantZMax._formatData(),t.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTX,a.gradientConstantXMin._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTY,a.gradientConstantYMin._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZ,a.gradientConstantZMin._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTXMAX,a.gradientConstantXMax._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTYMAX,a.gradientConstantYMax._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZMAX,a.gradientConstantZMax._elements);break;case 3:a.gradientXMin._formatData(),a.gradientYMin._formatData(),a.gradientZMin._formatData(),a.gradientXMax._formatData(),a.gradientYMax._formatData(),a.gradientZMax._formatData(),t.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTX,a.gradientXMin._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTY,a.gradientYMin._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZ,a.gradientZMin._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTXMAX,a.gradientXMax._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTZMAX,a.gradientZMax._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.VOLVELOCITYGRADIENTYMAX,a.gradientYMax._elements)}t.setInt(ShuriKenParticle3DShaderDeclaration.VOLSPACETYPE,e.space)}}get colorOverLifetime(){return this._colorOverLifetime}set colorOverLifetime(e){var t=this._ownerRender._baseRenderNode.shaderData;if(t.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RANDOMCOLOROVERLIFETIME),this._colorOverLifetime=e,e){var a=e.color;if(e.enable)switch(a.type){case 1:t.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RANDOMCOLOROVERLIFETIME);let e=a.gradient,r=e.alphaElements,n=e.rgbElements;t.setBuffer(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTALPHAS,r),t.setBuffer(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTCOLORS,n),t.setBuffer(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTALPHAS,r),t.setBuffer(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTCOLORS,n);let i=e._keyRanges;i.setValue(1,0,1,0);for(let t=0,a=Math.max(2,e.colorRGBKeysCount);t<a;t++){let e=n[4*t];i.x=Math.min(i.x,e),i.y=Math.max(i.y,e)}for(let t=0,a=Math.max(2,e.colorAlphaKeysCount);t<a;t++){let e=r[2*t];i.z=Math.min(i.z,e),i.w=Math.max(i.w,e)}t.setVector(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTRANGES,i),t.setVector(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTRANGES,i),8==e.maxColorAlphaKeysCount?t.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_COLORKEYCOUNT_8):t.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_COLORKEYCOUNT_8);break;case 3:t.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RANDOMCOLOROVERLIFETIME);let o=a.gradientMin,s=a.gradientMax,l=o.alphaElements,h=o.rgbElements,d=s.alphaElements,c=s.rgbElements;t.setBuffer(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTALPHAS,l),t.setBuffer(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTCOLORS,h),t.setBuffer(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTALPHAS,d),t.setBuffer(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTCOLORS,c);let u=o._keyRanges;u.setValue(1,0,1,0);for(let e=0,t=Math.max(2,o.colorRGBKeysCount);e<t;e++){let t=h[4*e];u.x=Math.min(u.x,t),u.y=Math.max(u.y,t)}for(let e=0,t=Math.max(2,o.colorAlphaKeysCount);e<t;e++){let t=l[2*e];u.z=Math.min(u.z,t),u.w=Math.max(u.w,t)}t.setVector(ShuriKenParticle3DShaderDeclaration.COLOROVERLIFEGRADIENTRANGES,u);let _=s._keyRanges;_.setValue(1,0,1,0);for(let e=0,t=Math.max(2,s.colorRGBKeysCount);e<t;e++){let t=c[4*e];_.x=Math.min(_.x,t),_.y=Math.max(_.y,t)}for(let e=0,t=Math.max(2,s.colorAlphaKeysCount);e<t;e++){let t=d[2*e];_.z=Math.min(_.z,t),_.w=Math.max(_.w,t)}t.setVector(ShuriKenParticle3DShaderDeclaration.MAXCOLOROVERLIFEGRADIENTRANGES,_),8==Math.max(o.maxColorAlphaKeysCount,s.maxColorAlphaKeysCount)?t.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_COLORKEYCOUNT_8):t.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_COLORKEYCOUNT_8)}}}get sizeOverLifetime(){return this._sizeOverLifetime}set sizeOverLifetime(e){var t=this._ownerRender._baseRenderNode.shaderData;if(t.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES),t.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE),this._sizeOverLifetime=e,e){var a=e.size,r=a.separateAxes,n=a.type;if(e.enable)switch(n){case 0:r?(a.gradientX._formatData(),a.gradientY._formatData(),a.gradientZ._formatData(),t.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE),t.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTX,a.gradientX._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTY,a.gradientY._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientZ,a.gradientZ._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTXMAX,a.gradientX._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTYMAX,a.gradientY._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientZMAX,a.gradientZ._elements)):(t.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES),a.gradient._formatData(),t.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENT,a.gradient._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientMax,a.gradient._elements));break;case 2:r?(t.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVESSEPERATE),a.gradientXMin._formatData(),a.gradientXMax._formatData(),a.gradientYMin._formatData(),a.gradientYMax._formatData(),a.gradientZMin._formatData(),a.gradientZMax._formatData(),t.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTX,a.gradientXMin._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTXMAX,a.gradientXMax._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTY,a.gradientYMin._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENTYMAX,a.gradientYMax._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientZ,a.gradientZMin._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientZMAX,a.gradientZMax._elements)):(t.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_SIZEOVERLIFETIMERANDOMCURVES),a.gradientMin._formatData(),a.gradientMax._formatData(),t.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSIZEGRADIENT,a.gradientMin._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.SOLSizeGradientMax,a.gradientMax._elements))}}}get rotationOverLifetime(){return this._rotationOverLifetime}set rotationOverLifetime(e){var t=this._ownerRender._baseRenderNode.shaderData;if(t.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIME),t.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE),this._rotationOverLifetime=e,e){var a=e.angularVelocity;if(!a)return;var r=a.separateAxes,n=a.type;if(e.enable)switch(r?t.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIMESEPERATE):t.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_ROTATIONOVERLIFETIME),n){case 0:r?(a._constantXGradientDdata._formatData(),a._constantYGradientDdata._formatData(),a._constantZGradientDdata._formatData(),t.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTX,a._constantXGradientDdata._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTXMAX,a._constantXGradientDdata._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTY,a._constantYGradientDdata._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTYMAX,a._constantYGradientDdata._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZ,a._constantZGradientDdata._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZMAX,a._constantZGradientDdata._elements)):(a._constantGradientDdata._formatData(),t.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENT,a._constantGradientDdata._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTMAX,a._constantGradientDdata._elements));break;case 1:r?(a.gradientX._formatData(),a.gradientY._formatData(),a.gradientZ._formatData(),t.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTX,a.gradientX._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTXMAX,a.gradientX._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTY,a.gradientY._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTYMAX,a.gradientY._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZ,a.gradientZ._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZMAX,a.gradientZ._elements)):(a.gradient._formatData(),t.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENT,a.gradient._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTMAX,a.gradient._elements));break;case 2:r?(a._constantXMinGradientDdata._formatData(),a._constantXMaxGradientDdata._formatData(),a._constantYMinGradientDdata._formatData(),a._constantYMaxGradientDdata._formatData(),a._constantZMinGradientDdata._formatData(),a._constantZMaxGradientDdata._formatData(),t.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTX,a._constantXMinGradientDdata._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTXMAX,a._constantXMaxGradientDdata._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTY,a._constantYMinGradientDdata._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTYMAX,a._constantYMaxGradientDdata._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZ,a._constantZMinGradientDdata._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZMAX,a._constantZMaxGradientDdata._elements)):(a._constantMinGradientDdata._formatData(),a._constantMaxGradientDdata._formatData(),t.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENT,a._constantMinGradientDdata._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTMAX,a._constantMaxGradientDdata._elements));break;case 3:r?(a.gradientXMin._formatData(),a.gradientXMax._formatData(),a.gradientYMin._formatData(),a.gradientYMax._formatData(),a.gradientZMin._formatData(),a.gradientZMax._formatData(),t.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTX,a.gradientXMin._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTXMAX,a.gradientXMax._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTY,a.gradientYMin._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTYMAX,a.gradientYMax._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZ,a.gradientZMin._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTZMAX,a.gradientZMax._elements)):(a.gradientMin._formatData(),a.gradientMax._formatData(),t.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENT,a.gradientMin._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.ROLANGULARVELOCITYGRADIENTMAX,a.gradientMax._elements))}}}get textureSheetAnimation(){return this._textureSheetAnimation}set textureSheetAnimation(e){var t=this._ownerRender._baseRenderNode.shaderData;if(this._textureSheetAnimation=e,e){var a=e.frame,r=a.type;t.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE),t.setNumber(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONCYCLES,e.cycles);var n=e.tiles,i=this._uvLength;if(i.x=1/n.x,i.y=1/n.y,t.setVector2(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONSUBUVLENGTH,this._uvLength),e.enable)switch(r){case 1:a.frameOverTimeData._formatData(),t.setBuffer(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONGRADIENTUVS,a.frameOverTimeData._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONGRADIENTMAXUVS,a.frameOverTimeData._elements);break;case 3:a.frameOverTimeDataMin._formatData(),a.frameOverTimeDataMax._formatData(),t.setBuffer(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONGRADIENTUVS,a.frameOverTimeDataMin._elements),t.setBuffer(ShuriKenParticle3DShaderDeclaration.TEXTURESHEETANIMATIONGRADIENTMAXUVS,a.frameOverTimeDataMax._elements);break;default:t.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_TEXTURESHEETANIMATIONRANDOMCURVE)}}}_getVertexBuffer(e=0){return 0===e?this._vertexBuffer:null}_getIndexBuffer(){return this._indexBuffer}_generateBounds(){var a=this._ownerRender,r=this._bounds.getMin(),n=this._bounds.getMax(),i=0;switch(this.startLifetimeType){case 0:i=this._startLifetimeConstant;break;case 2:i=this._startLifetimeConstantMax}var o=0;switch(this.startSpeedType){case 0:o=this.startSpeedConstant;break;case 2:o=this.startSpeedConstantMax}var s=0;if(this.threeDStartSize)switch(this.startSizeType){case 0:s=Math.max(this.startSizeConstantSeparate.x,this.startSizeConstantSeparate.y,this.startSizeConstantSeparate.z);break;case 2:s=Math.max(this.startSizeConstantMaxSeparate.x,this.startSizeConstantMaxSeparate.y,this.startSizeConstantMaxSeparate.z)}else switch(this.startSizeType){case 0:s=this.startSizeConstant;break;case 2:s=this.startSizeConstantMax}var l=ShurikenParticleSystem._tempVector30,h=ShurikenParticleSystem._tempVector31,d=ShurikenParticleSystem._tempVector32,c=ShurikenParticleSystem._tempVector33;if(l.setValue(0,0,1),h.setValue(0,0,0),d.setValue(0,0,0),c.setValue(0,0,0),this.shape&&this.shape.enable)switch(this.shape.shapeType){case e.ParticleSystemShapeType.Sphere:var u=this.shape;l.setValue(1,1,1),h.setValue(1,1,1),d.setValue(u.radius,u.radius,u.radius),c.setValue(u.radius,u.radius,u.radius);break;case e.ParticleSystemShapeType.Hemisphere:var _=this.shape;l.setValue(1,1,1),h.setValue(1,1,1),d.setValue(_.radius,_.radius,_.radius),c.setValue(_.radius,_.radius,0);break;case e.ParticleSystemShapeType.Cone:var m=this.shape;if(0==m.emitType||1==m.emitType){var f=m.angle,S=Math.sin(f);l.setValue(S,S,1),h.setValue(S,S,0),d.setValue(m.radius,m.radius,0),c.setValue(m.radius,m.radius,0);break}if(2==m.emitType||3==m.emitType){f=m.angle,S=Math.sin(f);var g=m.length;l.setValue(S,S,1),h.setValue(S,S,0);var p=Math.tan(f),D=m.radius+g*p;d.setValue(D,D,g),c.setValue(D,D,0)}break;case e.ParticleSystemShapeType.Box:var T=this.shape;0!=this.shape.randomDirection&&(l.setValue(1,1,1),h.setValue(1,1,1)),d.setValue(T.x/2,T.y/2,T.z/2),c.setValue(T.x/2,T.y/2,T.z/2);break;case e.ParticleSystemShapeType.Circle:var E=this.shape;l.setValue(1,1,1),h.setValue(1,1,1),d.setValue(E.radius,E.radius,0),c.setValue(E.radius,E.radius,0)}var x=0,M=4==a.renderMode;switch(a.renderMode){case 0:case 1:case 2:case 3:x=ShurikenParticleSystem.halfKSqrtOf2;break;case 4:var R=a.mesh.bounds;x=Math.sqrt(Math.pow(R.getExtent().x,2)+Math.pow(R.getExtent().y,2)+Math.pow(R.getExtent().z,2))}var A=ShurikenParticleSystem._tempVector36;if(A.setValue(1,1,1),this.sizeOverLifetime&&this.sizeOverLifetime.enable){var C=this.sizeOverLifetime.size.getMaxSizeInGradient(M);A.setValue(C,C,C)}var y=x*s;t.Vector3.scale(A,y,A);var v=ShurikenParticleSystem._tempVector34,I=ShurikenParticleSystem._tempVector35;if(o>0?(t.Vector3.scale(l,o,v),t.Vector3.scale(h,o,I)):(t.Vector3.scale(l,-o,I),t.Vector3.scale(h,-o,v)),this.velocityOverLifetime&&this.velocityOverLifetime.enable){var L=this.velocityOverLifetime.velocity,P=ShurikenParticleSystem._tempVector37;switch(P.setValue(0,0,0),L.type){case 0:L.constant.cloneTo(P);break;case 2:L.constantMax.cloneTo(P);break;case 1:var B=L.gradientX.getAverageValue(),O=L.gradientY.getAverageValue(),V=L.gradientZ.getAverageValue();P.setValue(B,O,V);break;case 3:var w=L.gradientXMax.getAverageValue(),b=L.gradientYMax.getAverageValue(),N=L.gradientZMax.getAverageValue();P.setValue(w,b,N)}1==this.velocityOverLifetime.space&&t.Vector3.transformV3ToV3(P,this._owner.transform.worldMatrix,P),t.Vector3.add(v,P,v),t.Vector3.subtract(I,P,I),t.Vector3.max(v,t.Vector3.ZERO,v),t.Vector3.max(I,t.Vector3.ZERO,I)}t.Vector3.scale(v,i,v),t.Vector3.scale(I,i,I);var F=this.gravityModifier;if(0!=F){var U=.5*ShurikenParticleSystem.g*F*i*i,G=v.y-U,H=I.y+U;G=G>0?G:0,H=H>0?H:0,this._gravityOffset.setValue(v.y-G,H-I.y)}t.Vector3.add(v,A,n),t.Vector3.add(n,d,n),t.Vector3.add(I,A,r),t.Vector3.add(r,c,r),t.Vector3.scale(r,-1,r),this._bounds.setMin(r),this._bounds.setMax(n)}get customBounds(){return this._customBounds}set customBounds(e){e?(this._useCustomBounds=!0,this._customBounds||(this._customBounds=new Bounds(new t.Vector3,new t.Vector3),this._ownerRender.geometryBounds=this._customBounds),this._customBounds=e):(this._useCustomBounds=!1,this._customBounds=null,this._ownerRender.geometryBounds=null)}_simulationSupported(){return!(0==this.simulationSpace&&this.emission.emissionRateOverDistance>0)}_updateEmission(){if(this.isAlive)if(this._simulateUpdate)this._simulateUpdate=!1;else{var e=this._startUpdateLoopCount!==t.Stat.loopCount&&!this._isPaused&&this._owner._scene?this._owner._scene.timer._delta/1e3:0;e=Math.min(ShurikenParticleSystem._maxElapsedTime,e*this.simulationSpeed),this._updateParticles(e)}}_updateParticles(e){(4!==this._ownerRender.renderMode||this._ownerRender.mesh)&&(this._currentTime+=e,this._retireActiveParticles(),this._freeRetiredParticles(),this._totalDelayTime+=e,this._totalDelayTime<this._playStartDelay||this._emission.enable&&this._isEmitting&&!this._isPaused&&(this._advanceTime(e,this._currentTime),this.emission.emissionRateOverDistance>0&&this._advanceDistance(this._currentTime)))}_updateParticlesSimulationRestart(e){this._firstActiveElement=0,this._firstNewElement=0,this._firstFreeElement=0,this._firstRetiredElement=0,this._burstsIndex=0,this._frameRateTime=e,this._emissionTime=0,this._emissionDistance=0,this._totalDelayTime=0,this._currentTime=e;var t=e;t<this._playStartDelay?this._totalDelayTime=t:this._emission.enable&&(this._advanceTime(e,e),this.emission.emissionRateOverDistance>0&&this._advanceDistance(this._currentTime))}_retireActiveParticles(){for(;this._firstActiveElement!=this._firstNewElement;){var e=this._firstActiveElement*this._floatCountPerVertex*this._vertexStride,t=e+this._timeIndex;if(this._currentTime-this._vertices[t]+1e-4<this._vertices[e+this._startLifeTimeIndex])break;this._vertices[t]=this._drawCounter,this._firstActiveElement++,this._firstActiveElement>=this._bufferMaxParticles&&(this._firstActiveElement=0)}}_freeRetiredParticles(){for(;this._firstRetiredElement!=this._firstActiveElement;)this._drawCounter,this._vertices[this._firstRetiredElement*this._floatCountPerVertex*this._vertexStride+this._timeIndex],this._firstRetiredElement++,this._firstRetiredElement>=this._bufferMaxParticles&&(this._firstRetiredElement=0)}_burst(e,a){for(var r=0,n=this._emission._bursts,i=n.length;this._burstsIndex<i;this._burstsIndex++){var o,s=n[this._burstsIndex],l=s.time;if(!(e<=l&&l<a))break;this.autoRandomSeed?o=t.MathUtil.lerp(s.minCount,s.maxCount,Math.random()):(this._rand.seed=this._randomSeeds[0],o=t.MathUtil.lerp(s.minCount,s.maxCount,this._rand.getFloat()),this._randomSeeds[0]=this._rand.seed),r+=o}return r}_advanceTime(e,t){var a,r=this._emissionTime;this._emissionTime+=e;var n=0;if(this._emissionTime>this.duration){if(!this.looping){for(n=Math.min(this.maxParticles-this.aliveParticleCount,n),a=0;a<n;a++)this.emit(t);return this._isPlaying=!1,void this.stop()}n+=this._burst(r,this._emissionTime),this._emissionTime-=this.duration,this._burstsIndex=0,n+=this._burst(0,this._emissionTime)}else n+=this._burst(r,this._emissionTime);for(n=Math.min(this.maxParticles-this.aliveParticleCount,n),a=0;a<n;a++)this.emit(t);var i=this.emission.emissionRate;if(i>0){var o=1/i;for(this._frameRateTime+=o,this._frameRateTime=this._currentTime-(this._currentTime-this._frameRateTime)%this._maxStartLifetime;this._frameRateTime<=t&&this.emit(this._frameRateTime);)this._frameRateTime+=o;this._frameRateTime=Math.floor(t/o)*o}}_advanceDistance(e){let a=this._owner.transform.position,r=t.Vector3.distance(a,this._emissionLastPosition),n=this.emission.emissionRateOverDistance,i=this._emissionDistance+r;if(i>1/n){let t=i*n;t=Math.floor(t),t=Math.min(this.maxParticles-this.aliveParticleCount,t);for(let a=0;a<t;a++)this.emit(e);this._emissionDistance=0}else this._emissionDistance=i;a.cloneTo(this._emissionLastPosition)}_initBufferDatas(){if(this._vertexBuffer){var e=this._vertexBuffer._byteLength+2*this._indexBuffer.indexCount;this._vertexBuffer.destroy(),this._indexBuffer.destroy(),t.Resource._addMemory(-e,-e)}var a=this._ownerRender,r=a.renderMode;if(-1!==r&&this.maxParticles>0){var n,i,o,s,l,h,d,c=0,u=(e=0,a.mesh);if(4===r){if(u){d=VertexShurikenParticleMesh.vertexDeclaration,this._floatCountPerVertex=d.vertexStride/4,this._simulationUV_Index=d.getVertexElementByUsage(VertexShuriKenParticle.PARTICLE_SIMULATIONUV).offset/4,this._startLifeTimeIndex=12,this._timeIndex=16,this._vertexStride=u._vertexCount;var _=this._bufferMaxParticles*this._vertexStride,m=_%65535;if(Math.floor(_/65535)+1>1)throw new Error("ShurikenParticleSystem:the maxParticleCount multiply mesh vertexCount is large than 65535.");c=d.vertexStride*m,this._vertexBuffer=Laya3DRender.renderOBJCreate.createVertexBuffer3D(c,t.BufferUsage.Dynamic,!1),this._vertexBuffer.vertexDeclaration=d,this._vertices=new Float32Array(this._floatCountPerVertex*m),this._indexStride=u._indexBuffer.indexCount;var f=u._indexBuffer.getData(),S=this._bufferMaxParticles*this._indexStride;for(this._indexBuffer=Laya3DRender.renderOBJCreate.createIndexBuffer3D(t.IndexFormat.UInt16,S,t.BufferUsage.Static,!1),n=new Uint16Array(S),e=c+2*S,l=0,i=0;i<this._bufferMaxParticles;i++){var g=i*this._vertexStride;for(o=0,s=f.length;o<s;o++)n[l++]=g+f[o]}this._indexBuffer.setData(n),this._bufferState.applyState([this._vertexBuffer],this._indexBuffer),this.bufferState=this._bufferState}}else{for(d=VertexShurikenParticleBillboard.vertexDeclaration,this._floatCountPerVertex=d.vertexStride/4,this._startLifeTimeIndex=7,this._simulationUV_Index=d.getVertexElementByUsage(VertexShuriKenParticle.PARTICLE_SIMULATIONUV).offset/4,this._timeIndex=11,this._vertexStride=4,c=d.vertexStride*this._bufferMaxParticles*this._vertexStride,this._vertexBuffer=Laya3DRender.renderOBJCreate.createVertexBuffer3D(c,t.BufferUsage.Dynamic,!1),this._vertexBuffer.vertexDeclaration=d,this._vertices=new Float32Array(this._floatCountPerVertex*this._bufferMaxParticles*this._vertexStride),i=0;i<this._bufferMaxParticles;i++)h=i*this._floatCountPerVertex*this._vertexStride,this._vertices[h]=-.5,this._vertices[h+1]=-.5,this._vertices[h+2]=0,this._vertices[h+3]=1,h+=this._floatCountPerVertex,this._vertices[h]=.5,this._vertices[h+1]=-.5,this._vertices[h+2]=1,this._vertices[h+3]=1,h+=this._floatCountPerVertex,this._vertices[h]=.5,this._vertices[h+1]=.5,this._vertices[h+2]=1,this._vertices[h+3]=0,h+=this._floatCountPerVertex,this._vertices[h]=-.5,this._vertices[h+1]=.5,this._vertices[h+2]=0,this._vertices[h+3]=0;for(this._indexStride=6,this._indexBuffer=Laya3DRender.renderOBJCreate.createIndexBuffer3D(t.IndexFormat.UInt16,6*this._bufferMaxParticles,t.BufferUsage.Static,!1),n=new Uint16Array(6*this._bufferMaxParticles),i=0;i<this._bufferMaxParticles;i++){l=6*i;var p=i*this._vertexStride,D=p+2;n[l++]=p,n[l++]=D,n[l++]=p+1,n[l++]=p,n[l++]=p+3,n[l++]=D}this._indexBuffer.setData(n),e=c+6*this._bufferMaxParticles*2,this._bufferState.applyState([this._vertexBuffer],this._indexBuffer),this.bufferState=this._bufferState}t.Resource._addMemory(e,e)}}destroy(){if(super.destroy(),this._vertexBuffer){var e=this._vertexBuffer._byteLength;t.Resource._addMemory(-e,-e),this._vertexBuffer.destroy(),this._vertexBuffer=null}if(this._indexBuffer){e=this._indexBuffer._byteLength;t.Resource._addMemory(-e,-e),this._indexBuffer.destroy(),this._indexBuffer=null}this._emission.destroy(),this._bounds=null,this._customBounds=null,this._bufferState=null,this._owner=null,this._vertices=null,this._indexBuffer=null,this._emission=null,this._shape=null,this.startLifeTimeGradient=null,this.startLifeTimeGradientMin=null,this.startLifeTimeGradientMax=null,this.startSizeConstantSeparate=null,this.startSizeConstantMinSeparate=null,this.startSizeConstantMaxSeparate=null,this.startRotationConstantSeparate=null,this.startRotationConstantMinSeparate=null,this.startRotationConstantMaxSeparate=null,this.startColorConstant=null,this.startColorConstantMin=null,this.startColorConstantMax=null,this._velocityOverLifetime=null,this._colorOverLifetime=null,this._sizeOverLifetime=null,this._rotationOverLifetime=null,this._textureSheetAnimation=null}emit(e){var t=ShurikenParticleSystem._tempPosition,a=ShurikenParticleSystem._tempDirection;return this._shape&&this._shape.enable?this.autoRandomSeed?this._shape.generatePositionAndDirection(t,a):this._shape.generatePositionAndDirection(t,a,this._rand,this._randomSeeds):(t.x=t.y=t.z=0,a.x=a.y=0,a.z=1),this.addParticle(t,a,e)}addParticle(e,a,r){t.Vector3.normalize(a,a);var n=this._firstFreeElement+1;if(n>=this._bufferMaxParticles&&(n=0),n===this._firstRetiredElement)return!1;var i,o,s,l,h,d,c,u,_,m,f=this._owner.transform;if(ShurikenParticleData.create(this,this._ownerRender),this._currentTime-r>=ShurikenParticleData.startLifeTime)return!0;switch(0==this.simulationSpace&&(i=f.position,o=f.rotation),this.startSpeedType){case 0:s=this.startSpeedConstant;break;case 2:this.autoRandomSeed?s=t.MathUtil.lerp(this.startSpeedConstantMin,this.startSpeedConstantMax,Math.random()):(this._rand.seed=this._randomSeeds[8],s=t.MathUtil.lerp(this.startSpeedConstantMin,this.startSpeedConstantMax,this._rand.getFloat()),this._randomSeeds[8]=this._rand.seed)}var S=this._velocityOverLifetime&&this._velocityOverLifetime.enable;if(S){var g=this._velocityOverLifetime.velocity.type;2===g||3===g?this.autoRandomSeed?(l=Math.random(),h=Math.random(),d=Math.random()):(this._rand.seed=this._randomSeeds[9],l=this._rand.getFloat(),h=this._rand.getFloat(),d=this._rand.getFloat(),this._randomSeeds[9]=this._rand.seed):S=!1}else S=!1;var p=this._colorOverLifetime&&this._colorOverLifetime.enable;p?3===this._colorOverLifetime.color.type?this.autoRandomSeed?c=Math.random():(this._rand.seed=this._randomSeeds[10],c=this._rand.getFloat(),this._randomSeeds[10]=this._rand.seed):p=!1:p=!1;var D=this._sizeOverLifetime&&this._sizeOverLifetime.enable;D?3===this._sizeOverLifetime.size.type?this.autoRandomSeed?u=Math.random():(this._rand.seed=this._randomSeeds[11],u=this._rand.getFloat(),this._randomSeeds[11]=this._rand.seed):D=!1:D=!1;var T=this._rotationOverLifetime&&this._rotationOverLifetime.enable;if(T){var E=this._rotationOverLifetime.angularVelocity.type;2===E||3===E?this.autoRandomSeed?_=Math.random():(this._rand.seed=this._randomSeeds[12],_=this._rand.getFloat(),this._randomSeeds[12]=this._rand.seed):T=!1}else T=!1;var x=this._textureSheetAnimation&&this._textureSheetAnimation.enable;x?3===this._textureSheetAnimation.frame.type?this.autoRandomSeed?m=Math.random():(this._rand.seed=this._randomSeeds[15],m=this._rand.getFloat(),this._randomSeeds[15]=this._rand.seed):x=!1:x=!1;var M,R,A,C,y,v,I=this._firstFreeElement*this._floatCountPerVertex*this._vertexStride,L=ShurikenParticleData.startUVInfo[0],P=ShurikenParticleData.startUVInfo[1],B=ShurikenParticleData.startUVInfo[2],O=ShurikenParticleData.startUVInfo[3],V=this._ownerRender;if(4===V.renderMode){var w=V.mesh._vertexBuffer;M=w.getFloat32Data();var b=w.vertexDeclaration;A=b.getVertexElementByUsage(t.VertexMesh.MESH_POSITION0)._offset/4;var N=b.getVertexElementByUsage(t.VertexMesh.MESH_COLOR0);C=N?N._offset/4:-1;var F=b.getVertexElementByUsage(t.VertexMesh.MESH_TEXTURECOORDINATE0);y=F?F._offset/4:-1,R=b.vertexStride/4,v=0}for(var U=I,G=I+this._floatCountPerVertex*this._vertexStride;U<G;U+=this._floatCountPerVertex){var H;if(4===V.renderMode){H=U;var k=R*v++,z=k+A;this._vertices[H++]=M[z++],this._vertices[H++]=M[z++],this._vertices[H++]=M[z],-1===C?(this._vertices[H++]=1,this._vertices[H++]=1,this._vertices[H++]=1,this._vertices[H++]=1):(z=k+C,this._vertices[H++]=M[z++],this._vertices[H++]=M[z++],this._vertices[H++]=M[z++],this._vertices[H++]=M[z]),-1===y?(this._vertices[H++]=0,this._vertices[H++]=0):(z=k+y,this._vertices[H++]=M[z++],this._vertices[H++]=M[z])}else H=U+4;switch(this._vertices[H++]=e.x,this._vertices[H++]=e.y,this._vertices[H++]=e.z,this._vertices[H++]=ShurikenParticleData.startLifeTime,this._vertices[H++]=a.x,this._vertices[H++]=a.y,this._vertices[H++]=a.z,this._vertices[H++]=r,this._vertices[H++]=ShurikenParticleData.startColor.x,this._vertices[H++]=ShurikenParticleData.startColor.y,this._vertices[H++]=ShurikenParticleData.startColor.z,this._vertices[H++]=ShurikenParticleData.startColor.w,this._vertices[H++]=ShurikenParticleData.startSize[0],this._vertices[H++]=ShurikenParticleData.startSize[1],this._vertices[H++]=ShurikenParticleData.startSize[2],this._vertices[H++]=ShurikenParticleData.startRotation[0],this._vertices[H++]=ShurikenParticleData.startRotation[1],this._vertices[H++]=ShurikenParticleData.startRotation[2],this._vertices[H++]=s,p&&(this._vertices[H+1]=c),D&&(this._vertices[H+2]=u),T&&(this._vertices[H+3]=_),x&&(this._vertices[H+4]=m),S&&(this._vertices[H+5]=l,this._vertices[H+6]=h,this._vertices[H+7]=d),this.simulationSpace){case 0:H+=8,this._vertices[H++]=i.x,this._vertices[H++]=i.y,this._vertices[H++]=i.z,this._vertices[H++]=o.x,this._vertices[H++]=o.y,this._vertices[H++]=o.z,this._vertices[H++]=o.w;break;case 1:break;default:throw new Error("ShurikenParticleMaterial: SimulationSpace value is invalid.")}H=U+this._simulationUV_Index,this._vertices[H++]=B,this._vertices[H++]=O,this._vertices[H++]=L,this._vertices[H]=P}return this._firstFreeElement=n,!0}addNewParticlesToVertexBuffer(){var e,t=this._vertexStride*this._floatCountPerVertex*4;this._firstNewElement<this._firstFreeElement?(e=this._firstNewElement*t,this._vertexBuffer.setData(this._vertices.buffer,e,e,(this._firstFreeElement-this._firstNewElement)*t)):(e=this._firstNewElement*t,this._vertexBuffer.setData(this._vertices.buffer,e,e,(this._bufferMaxParticles-this._firstNewElement)*t),this._firstFreeElement>0&&this._vertexBuffer.setData(this._vertices.buffer,0,0,this._firstFreeElement*t)),this._firstNewElement=this._firstFreeElement}_getType(){return ShurikenParticleSystem._type}_prepareRender(e){return this._updateMask!=t.Stat.loopCount&&(this._updateMask=t.Stat.loopCount,this._updateEmission(),this._firstNewElement!=this._firstFreeElement&&this.addNewParticlesToVertexBuffer(),this._drawCounter++),this._firstActiveElement!=this._firstFreeElement}_updateRenderParams(e){var t;this.clearRenderParams(),this._firstActiveElement<this._firstFreeElement?(t=(this._firstFreeElement-this._firstActiveElement)*this._indexStride,this.setDrawElemenParams(t,2*this._firstActiveElement*this._indexStride)):(t=(this._bufferMaxParticles-this._firstActiveElement)*this._indexStride,this.setDrawElemenParams(t,2*this._firstActiveElement*this._indexStride),this._firstFreeElement>0&&(t=this._firstFreeElement*this._indexStride,this.setDrawElemenParams(t,0)))}play(){if(this._burstsIndex=0,this._isEmitting=!0,this._isPlaying=!0,this._isPaused=!1,this._emissionTime=0,this._emissionDistance=0,this._owner.transform.position.cloneTo(this._emissionLastPosition),this._totalDelayTime=0,!this.autoRandomSeed)for(var e=0,a=this._randomSeeds.length;e<a;e++)this._randomSeeds[e]=this.randomSeed[0]+ShurikenParticleSystem._RANDOMOFFSET[e];switch(this.startDelayType){case 0:this._playStartDelay=this.startDelay;break;case 1:this.autoRandomSeed?this._playStartDelay=t.MathUtil.lerp(this.startDelayMin,this.startDelayMax,Math.random()):(this._rand.seed=this._randomSeeds[2],this._playStartDelay=t.MathUtil.lerp(this.startDelayMin,this.startDelayMax,this._rand.getFloat()),this._randomSeeds[2]=this._rand.seed);break;default:throw new Error("Utils3D: startDelayType is invalid.")}this._frameRateTime=this._currentTime+this._playStartDelay,this._startUpdateLoopCount=t.Stat.loopCount}pause(){this._isPaused=!0}simulate(e,t=!0){this._simulateUpdate=!0,t?this._updateParticlesSimulationRestart(e):(this._isPaused=!1,this._updateParticles(e)),this.pause()}stop(){this._burstsIndex=0,this._isEmitting=!1,this._emissionTime=0}cloneTo(e){var t=e;t._useCustomBounds=this._useCustomBounds,this._customBounds&&this._customBounds.cloneTo(t._customBounds),t.duration=this.duration,t.looping=this.looping,t.prewarm=this.prewarm,t.startDelayType=this.startDelayType,t.startDelay=this.startDelay,t.startDelayMin=this.startDelayMin,t.startDelayMax=this.startDelayMax,t._maxStartLifetime=this._maxStartLifetime,t.startLifetimeType=this.startLifetimeType,t.startLifetimeConstant=this.startLifetimeConstant,this.startLifeTimeGradient.cloneTo(t.startLifeTimeGradient),t.startLifetimeConstantMin=this.startLifetimeConstantMin,t.startLifetimeConstantMax=this.startLifetimeConstantMax,this.startLifeTimeGradientMin.cloneTo(t.startLifeTimeGradientMin),this.startLifeTimeGradientMax.cloneTo(t.startLifeTimeGradientMax),t.startSpeedType=this.startSpeedType,t.startSpeedConstant=this.startSpeedConstant,t.startSpeedConstantMin=this.startSpeedConstantMin,t.startSpeedConstantMax=this.startSpeedConstantMax,t.dragType=this.dragType,t.dragConstant=this.dragConstant,t.dragSpeedConstantMax=this.dragSpeedConstantMax,t.dragSpeedConstantMin=this.dragSpeedConstantMin,t.threeDStartSize=this.threeDStartSize,t.startSizeType=this.startSizeType,t.startSizeConstant=this.startSizeConstant,this.startSizeConstantSeparate.cloneTo(t.startSizeConstantSeparate),t.startSizeConstantMin=this.startSizeConstantMin,t.startSizeConstantMax=this.startSizeConstantMax,this.startSizeConstantMinSeparate.cloneTo(t.startSizeConstantMinSeparate),this.startSizeConstantMaxSeparate.cloneTo(t.startSizeConstantMaxSeparate),t.threeDStartRotation=this.threeDStartRotation,t.startRotationType=this.startRotationType,t.startRotationConstant=this.startRotationConstant,this.startRotationConstantSeparate.cloneTo(t.startRotationConstantSeparate),t.startRotationConstantMin=this.startRotationConstantMin,t.startRotationConstantMax=this.startRotationConstantMax,this.startRotationConstantMinSeparate.cloneTo(t.startRotationConstantMinSeparate),this.startRotationConstantMaxSeparate.cloneTo(t.startRotationConstantMaxSeparate),t.randomizeRotationDirection=this.randomizeRotationDirection,t.startColorType=this.startColorType,this.startColorConstant.cloneTo(t.startColorConstant),this.startColorConstantMin.cloneTo(t.startColorConstantMin),this.startColorConstantMax.cloneTo(t.startColorConstantMax),t.gravityModifier=this.gravityModifier,t.simulationSpace=this.simulationSpace,t.simulationSpeed=this.simulationSpeed,t.scaleMode=this.scaleMode,t.playOnAwake=this.playOnAwake,t.autoRandomSeed=this.autoRandomSeed,t.randomSeed[0]=this.randomSeed[0],t.maxParticles=this.maxParticles,this._emission&&(t._emission=this._emission.clone()),this.shape&&(t.shape=this.shape.clone()),this.velocityOverLifetime&&(t.velocityOverLifetime=this.velocityOverLifetime.clone()),this.colorOverLifetime&&(t.colorOverLifetime=this.colorOverLifetime.clone()),this.sizeOverLifetime&&(t.sizeOverLifetime=this.sizeOverLifetime.clone()),this.rotationOverLifetime&&(t.rotationOverLifetime=this.rotationOverLifetime.clone()),this.textureSheetAnimation&&(t.textureSheetAnimation=this.textureSheetAnimation.clone()),t.isPerformanceMode=this.isPerformanceMode,t._isEmitting=this._isEmitting,t._isPlaying=this._isPlaying,t._isPaused=this._isPaused,t._playStartDelay=this._playStartDelay,t._frameRateTime=this._frameRateTime,t._emissionTime=this._emissionTime,t._totalDelayTime=this._totalDelayTime,t._burstsIndex=this._burstsIndex}clone(){var e=new ShurikenParticleSystem(null);return this.cloneTo(e),e}}ShurikenParticleSystem._RANDOMOFFSET=new Uint32Array([592910910,3276756734,322376503,306581307,1793934638,3737431713,2527743459,2368504881,4085612399,3774601268,326370691,1494990940,1089181156,3159510623,2941263940,2786374529,271901988,4233252447]),ShurikenParticleSystem.halfKSqrtOf2=.71,ShurikenParticleSystem.g=9.8,ShurikenParticleSystem._maxElapsedTime=1/3,ShurikenParticleSystem._tempVector30=new t.Vector3,ShurikenParticleSystem._tempVector31=new t.Vector3,ShurikenParticleSystem._tempVector32=new t.Vector3,ShurikenParticleSystem._tempVector33=new t.Vector3,ShurikenParticleSystem._tempVector34=new t.Vector3,ShurikenParticleSystem._tempVector35=new t.Vector3,ShurikenParticleSystem._tempVector36=new t.Vector3,ShurikenParticleSystem._tempVector37=new t.Vector3,ShurikenParticleSystem._tempPosition=new t.Vector3,ShurikenParticleSystem._tempDirection=new t.Vector3,ShurikenParticleSystem._type=GeometryElement._typeCounter++;class ShurikenParticleInstanceSystem extends ShurikenParticleSystem{constructor(e){super(e,t.MeshTopology.Triangles,t.DrawType.DrawElementInstance),this._instanceParticleVertexBuffer=null,this._instanceVertex=null}_initMeshVertex(e,a){let r=a._vertexBuffer,n=r.getFloat32Data(),i=r.vertexDeclaration,o=i.getVertexElementByUsage(t.VertexMesh.MESH_POSITION0)._offset/4,s=i.getVertexElementByUsage(t.VertexMesh.MESH_COLOR0),l=s?s._offset/4:-1,h=i.getVertexElementByUsage(t.VertexMesh.MESH_TEXTURECOORDINATE0),d=h?h._offset/4:-1,c=i.vertexStride/4,u=0,_=a.vertexCount,m=this._vertexBuffer.vertexDeclaration.vertexStride/4;for(let t=0;t<_;t++){let a=t*m,r=c*u++,i=r+o;if(e[a++]=n[i++],e[a++]=n[i++],e[a++]=n[i++],-1==l)e[a++]=1,e[a++]=1,e[a++]=1,e[a++]=1;else{let t=r+l;e[a++]=n[t++],e[a++]=n[t++],e[a++]=n[t++],e[a++]=n[t++]}if(-1==d)e[a++]=0,e[a++]=0;else{let t=r+d;e[a++]=n[t++],e[a++]=n[t++]}}}_initBufferDatas(){this._vertexBuffer&&(this._vertexBuffer.destroy(),this._instanceParticleVertexBuffer.destroy(),this._indexBuffer.destroy());let e=this._ownerRender,a=e.renderMode;if(!(-1==a||this.maxParticles<=0))if(4==a){let a=e.mesh;if(a){let e=VertexShurikenParticleMesh.vertexInstanceMeshDeclaration,r=VertexShurikenParticleMesh.vertexInstanceParticleDeclaration;this._meshIndexCount=a.indexCount,this._simulationUV_Index=r.getVertexElementByUsage(VertexShuriKenParticle.PARTICLE_SIMULATIONUV).offset/4,this._floatCountPerParticleData=r.vertexStride/4,this._startLifeTimeIndex=r.getVertexElementByUsage(VertexShuriKenParticle.PARTICLE_SHAPEPOSITIONSTARTLIFETIME)._offset/4+3,this._timeIndex=r.getVertexElementByUsage(VertexShuriKenParticle.PARTICLE_DIRECTIONTIME)._offset/4+3;let n=a.indexCount;this._indexBuffer=Laya3DRender.renderOBJCreate.createIndexBuffer3D(a.indexFormat,n,t.BufferUsage.Static,!1),this._indexBuffer.setData(a._indexBuffer.getData());let i=a.vertexCount,o=e.vertexStride*i;this._vertexBuffer=Laya3DRender.renderOBJCreate.createVertexBuffer3D(o,t.BufferUsage.Static,!1),this._vertexBuffer.vertexDeclaration=e;let s=new Float32Array(o/4);this._initMeshVertex(s,a),this._vertexBuffer.setData(s.buffer);let l=this._bufferMaxParticles*r.vertexStride;this._instanceVertex=new Float32Array(l/4),this._instanceParticleVertexBuffer=Laya3DRender.renderOBJCreate.createVertexBuffer3D(l,t.BufferUsage.Dynamic,!1),this._instanceParticleVertexBuffer.vertexDeclaration=r,this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer),this._instanceParticleVertexBuffer.instanceBuffer=!0,this._bufferState.applyState([this._vertexBuffer,this._instanceParticleVertexBuffer],this._indexBuffer)}}else{let e=VertexShurikenParticleBillboard.vertexInstanceMeshDeclaration,a=VertexShurikenParticleBillboard.vertexInstanceParticleDeclaration;this._meshIndexCount=6,this._simulationUV_Index=a.getVertexElementByUsage(VertexShuriKenParticle.PARTICLE_SIMULATIONUV).offset/4,this._floatCountPerParticleData=a.vertexStride/4,this._startLifeTimeIndex=a.getVertexElementByUsage(VertexShuriKenParticle.PARTICLE_SHAPEPOSITIONSTARTLIFETIME)._offset/4+3,this._timeIndex=a.getVertexElementByUsage(VertexShuriKenParticle.PARTICLE_DIRECTIONTIME)._offset/4+3;let r=VertexShurikenParticleBillboard.billboardIndexArray,n=r.length;this._indexBuffer=Laya3DRender.renderOBJCreate.createIndexBuffer3D(t.IndexFormat.UInt16,n,t.BufferUsage.Static,!1),this._indexBuffer.setData(r);let i=this._meshIndexCount*e.vertexStride;this._vertexBuffer=Laya3DRender.renderOBJCreate.createVertexBuffer3D(i,t.BufferUsage.Static,!1),this._vertexBuffer.vertexDeclaration=e,this._vertexBuffer.setData(VertexShurikenParticleBillboard.billboardVertexArray.buffer);let o=this._bufferMaxParticles*a.vertexStride;this._instanceVertex=new Float32Array(o/4),this._instanceParticleVertexBuffer=Laya3DRender.renderOBJCreate.createVertexBuffer3D(o,t.BufferUsage.Dynamic,!1),this._instanceParticleVertexBuffer.vertexDeclaration=a,this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer),this._instanceParticleVertexBuffer.instanceBuffer=!0,this._bufferState.applyState([this._vertexBuffer,this._instanceParticleVertexBuffer],this._indexBuffer)}}_retireActiveParticles(){let e=this._firstActiveElement;for(;this._firstActiveElement!=this._firstNewElement;){let e=this._firstActiveElement*this._floatCountPerParticleData,t=e+this._timeIndex;if(this._currentTime-this._instanceVertex[t]+1e-4<this._instanceVertex[e+this._startLifeTimeIndex])break;this._instanceVertex[t]=this._drawCounter,this._firstActiveElement++,this._firstActiveElement>=this._bufferMaxParticles&&(this._firstActiveElement=0)}if(this._firstActiveElement!=e){let e=4*this._floatCountPerParticleData;if(this._firstActiveElement<this._firstFreeElement){let t=this._firstActiveElement*e;this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer,0,t,(this._firstFreeElement-this._firstActiveElement)*e)}else{let t=this._firstActiveElement*e,a=this._bufferMaxParticles-this._firstActiveElement;this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer,0,t,a*e),this._firstFreeElement>0&&this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer,a*e,0,this._firstFreeElement*e)}}}_freeRetiredParticles(){for(;this._firstRetiredElement!=this._firstActiveElement;)this._drawCounter,this._instanceVertex[this._firstRetiredElement*this._floatCountPerParticleData+this._timeIndex],this._firstRetiredElement++,this._firstRetiredElement>=this._bufferMaxParticles&&(this._firstRetiredElement=0)}addParticle(e,a,r){t.Vector3.normalize(a,a);let n=this._firstFreeElement+1;if(n>=this._bufferMaxParticles&&(n=0),n==this._firstRetiredElement)return!1;let i,o,s=this._owner.transform;if(ShurikenParticleData.create(this,this._ownerRender),this._currentTime-r>=ShurikenParticleData.startLifeTime)return!0;0==this.simulationSpace&&(i=s.position,o=s.rotation);let l,h,d,c=0;switch(this.startSpeedType){case 0:c=this.startSpeedConstant;break;case 2:this.autoRandomSeed?c=t.MathUtil.lerp(this.startSpeedConstantMin,this.startSpeedConstantMax,Math.random()):(this._rand.seed=this._randomSeeds[8],c=t.MathUtil.lerp(this.startSpeedConstantMin,this.startSpeedConstantMax,this._rand.getFloat()),this._randomSeeds[8]=this._rand.seed)}let u,_=this._velocityOverLifetime&&this._velocityOverLifetime.enable;if(_){let e=this._velocityOverLifetime.velocity.type;2==e||3==e?this.autoRandomSeed?(l=Math.random(),h=Math.random(),d=Math.random()):(this._rand.seed=this._randomSeeds[9],l=this._rand.getFloat(),h=this._rand.getFloat(),d=this._rand.getFloat(),this._randomSeeds[9]=this._rand.seed):_=!1}else _=!1;let m,f=this._colorOverLifetime&&this._colorOverLifetime.enable;if(f){3==this._colorOverLifetime.color.type?this.autoRandomSeed?u=Math.random():(this._rand.seed=this._randomSeeds[10],u=this._rand.getFloat(),this._randomSeeds[10]=this._rand.seed):f=!1}else f=!1;let S,g=this._sizeOverLifetime&&this._sizeOverLifetime.enable;if(g){3==this._sizeOverLifetime.size.type?this.autoRandomSeed?m=Math.random():(this._rand.seed=this._randomSeeds[11],m=this._rand.getFloat(),this.randomSeed[11]=this._rand.seed):g=!1}else g=!1;let p,D=this._rotationOverLifetime&&this._rotationOverLifetime.enable;if(D){let e=this._rotationOverLifetime.angularVelocity.type;2==e||3==e?this.autoRandomSeed?S=Math.random():(this._rand.seed=this._randomSeeds[12],S=this._rand.getFloat(),this._randomSeeds[12]=this._rand.seed):D=!1}else D=!1;let T=this._textureSheetAnimation&&this._textureSheetAnimation.enable;if(T){3==this._textureSheetAnimation.frame.type?this.autoRandomSeed?p=Math.random():(this._rand.seed=this._randomSeeds[15],p=this._rand.getFloat(),this._randomSeeds[15]=this._rand.seed):T=!1}else T=!1;let E=ShurikenParticleData.startUVInfo[0],x=ShurikenParticleData.startUVInfo[1],M=ShurikenParticleData.startUVInfo[2],R=ShurikenParticleData.startUVInfo[3];this._ownerRender.renderMode;let A=this._firstFreeElement*this._floatCountPerParticleData,C=A;switch(this._instanceVertex[C++]=e.x,this._instanceVertex[C++]=e.y,this._instanceVertex[C++]=e.z,this._instanceVertex[C++]=ShurikenParticleData.startLifeTime,this._instanceVertex[C++]=a.x,this._instanceVertex[C++]=a.y,this._instanceVertex[C++]=a.z,this._instanceVertex[C++]=r,this._instanceVertex[C++]=ShurikenParticleData.startColor.x,this._instanceVertex[C++]=ShurikenParticleData.startColor.y,this._instanceVertex[C++]=ShurikenParticleData.startColor.z,this._instanceVertex[C++]=ShurikenParticleData.startColor.w,this._instanceVertex[C++]=ShurikenParticleData.startSize[0],this._instanceVertex[C++]=ShurikenParticleData.startSize[1],this._instanceVertex[C++]=ShurikenParticleData.startSize[2],this._instanceVertex[C++]=ShurikenParticleData.startRotation[0],this._instanceVertex[C++]=ShurikenParticleData.startRotation[1],this._instanceVertex[C++]=ShurikenParticleData.startRotation[2],this._instanceVertex[C++]=c,f&&(this._instanceVertex[C+1]=u),g&&(this._instanceVertex[C+2]=m),D&&(this._instanceVertex[C+3]=S),T&&(this._instanceVertex[C+4]=p),_&&(this._instanceVertex[C+5]=l,this._instanceVertex[C+6]=h,this._instanceVertex[C+7]=d),this.simulationSpace){case 0:C+=8,this._instanceVertex[C++]=i.x,this._instanceVertex[C++]=i.y,this._instanceVertex[C++]=i.z,this._instanceVertex[C++]=o.x,this._instanceVertex[C++]=o.y,this._instanceVertex[C++]=o.z,this._instanceVertex[C++]=o.w;break;case 1:break;default:throw new Error("ShurikenParticleMaterial: SimulationSpace value is invalid.")}return C=A+this._simulationUV_Index,this._instanceVertex[C++]=M,this._instanceVertex[C++]=R,this._instanceVertex[C++]=E,this._instanceVertex[C++]=x,this._firstFreeElement=n,!0}addNewParticlesToVertexBuffer(){let e=4*this._floatCountPerParticleData;if(this._firstActiveElement<this._firstFreeElement){let t=this._firstActiveElement*e;this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer,0,t,(this._firstFreeElement-this._firstActiveElement)*e)}else{let t=this._firstActiveElement*e,a=this._bufferMaxParticles-this._firstActiveElement;this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer,0,t,a*e),this._firstFreeElement>0&&this._instanceParticleVertexBuffer.setData(this._instanceVertex.buffer,a*e,0,this._firstFreeElement*e)}this._firstNewElement=this._firstFreeElement}_updateRenderParams(e){if(this.clearRenderParams(),this._firstActiveElement<this._firstFreeElement){let e=this._firstFreeElement-this._firstActiveElement;this.setDrawElemenParams(this._meshIndexCount,0),this.instanceCount=e}else{let e=this._bufferMaxParticles-this._firstActiveElement;this._firstFreeElement>0&&(e+=this._firstFreeElement),this.setDrawElemenParams(this._meshIndexCount,0),this.instanceCount=e}}destroy(){super.destroy(),this._indexBuffer&&this._indexBuffer.destroy(),this._vertexBuffer&&this._vertexBuffer.destroy(),this._instanceParticleVertexBuffer&&this._instanceParticleVertexBuffer.destroy(),this._instanceVertex=null,this._meshIndexCount=null,this._meshFloatCountPreVertex=null}}class ShurikenParticleMaterial extends t.Material{constructor(){super(),this.setShaderName("PARTICLESHURIKEN"),this.renderMode=ShurikenParticleMaterial.RENDERMODE_ALPHABLENDED}static __initDefine__(){ShurikenParticleMaterial.SHADERDEFINE_DIFFUSEMAP=t.Shader3D.getDefineByName("DIFFUSEMAP"),ShurikenParticleMaterial.SHADERDEFINE_TINTCOLOR=t.Shader3D.getDefineByName("TINTCOLOR"),ShurikenParticleMaterial.SHADERDEFINE_ADDTIVEFOG=t.Shader3D.getDefineByName("ADDTIVEFOG"),ShurikenParticleMaterial.DIFFUSETEXTURE=t.Shader3D.propertyNameToID("u_texture"),ShurikenParticleMaterial.TINTCOLOR=t.Shader3D.propertyNameToID("u_Tintcolor"),ShurikenParticleMaterial.TILINGOFFSET=t.Shader3D.propertyNameToID("u_TilingOffset")}get color(){return this._shaderValues.getColor(ShurikenParticleMaterial.TINTCOLOR)}set color(e){e?this._shaderValues.addDefine(ShurikenParticleMaterial.SHADERDEFINE_TINTCOLOR):this._shaderValues.removeDefine(ShurikenParticleMaterial.SHADERDEFINE_TINTCOLOR),this._shaderValues.setColor(ShurikenParticleMaterial.TINTCOLOR,e)}get tilingOffset(){return this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET)}set tilingOffset(e){e?this._shaderValues.setVector(ShurikenParticleMaterial.TILINGOFFSET,e):this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET).setValue(1,1,0,0)}get texture(){return this._shaderValues.getTexture(ShurikenParticleMaterial.DIFFUSETEXTURE)}set texture(e){e?this._shaderValues.addDefine(ShurikenParticleMaterial.SHADERDEFINE_DIFFUSEMAP):this._shaderValues.removeDefine(ShurikenParticleMaterial.SHADERDEFINE_DIFFUSEMAP),this._shaderValues.setTexture(ShurikenParticleMaterial.DIFFUSETEXTURE,e)}clone(){var e=new ShurikenParticleMaterial;return this.cloneTo(e),e}set renderMode(e){switch(e){case ShurikenParticleMaterial.RENDERMODE_ADDTIVE:this.renderQueue=t.Material.RENDERQUEUE_TRANSPARENT,this.depthWrite=!1,this.cull=RenderState.CULL_NONE,this.blend=RenderState.BLEND_ENABLE_ALL,this.blendSrc=RenderState.BLENDPARAM_SRC_ALPHA,this.blendDst=RenderState.BLENDPARAM_ONE,this.alphaTest=!1,this._shaderValues.addDefine(ShurikenParticleMaterial.SHADERDEFINE_ADDTIVEFOG);break;case ShurikenParticleMaterial.RENDERMODE_ALPHABLENDED:this.renderQueue=t.Material.RENDERQUEUE_TRANSPARENT,this.depthWrite=!1,this.cull=RenderState.CULL_NONE,this.blend=RenderState.BLEND_ENABLE_ALL,this.blendSrc=RenderState.BLENDPARAM_SRC_ALPHA,this.blendDst=RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA,this.alphaTest=!1,this._shaderValues.removeDefine(ShurikenParticleMaterial.SHADERDEFINE_ADDTIVEFOG);break;default:throw new Error("ShurikenParticleMaterial : renderMode value error.")}}get tilingOffsetX(){return this._MainTex_STX}set tilingOffsetX(e){this._MainTex_STX=e}get tilingOffsetY(){return this._MainTex_STY}set tilingOffsetY(e){this._MainTex_STY=e}get tilingOffsetZ(){return this._MainTex_STZ}set tilingOffsetZ(e){this._MainTex_STZ=e}get tilingOffsetW(){return this._MainTex_STW}set tilingOffsetW(e){this._MainTex_STW=e}get _TintColor(){return this.color}set _TintColor(e){this.color=e}get _TintColorR(){return this.color.r}set _TintColorR(e){this.color.r=e}get _TintColorG(){return this.color.g}set _TintColorG(e){this.color.g=e}get _TintColorB(){return this.color.b}set _TintColorB(e){this.color.b=e}get _TintColorA(){return this.color.a}set _TintColorA(e){this.color.a=e}get _MainTex_ST(){return this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET)}set _MainTex_ST(e){var t=this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET);t.setValue(e.x,e.y,e.z,e.w),this.tilingOffset=t}get _MainTex_STX(){return this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET).x}set _MainTex_STX(e){var t=this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET);t.x=e,this.tilingOffset=t}get _MainTex_STY(){return this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET).y}set _MainTex_STY(e){var t=this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET);t.y=e,this.tilingOffset=t}get _MainTex_STZ(){return this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET).z}set _MainTex_STZ(e){var t=this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET);t.z=e,this.tilingOffset=t}get _MainTex_STW(){return this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET).w}set _MainTex_STW(e){var t=this._shaderValues.getVector(ShurikenParticleMaterial.TILINGOFFSET);t.w=e,this.tilingOffset=t}get colorR(){return this._TintColorR}set colorR(e){this._TintColorR=e}get colorG(){return this._TintColorG}set colorG(e){this._TintColorG=e}get colorB(){return this._TintColorB}set colorB(e){this._TintColorB=e}get colorA(){return this._TintColorA}set colorA(e){this._TintColorA=e}}ShurikenParticleMaterial.RENDERMODE_ALPHABLENDED=0,ShurikenParticleMaterial.RENDERMODE_ADDTIVE=1;class ShurikenParticleRenderer extends BaseRender{constructor(){super(),this._finalGravity=new t.Vector3,this._dragConstant=new t.Vector2,this._mesh=null,this.stretchedBillboardCameraSpeedScale=0,this.stretchedBillboardSpeedScale=0,this.stretchedBillboardLengthScale=2,this.renderMode=0,this._baseRenderNode.renderNodeType=e.BaseRenderType.ParticleRender}get particleSystem(){return this._particleSystem}get renderMode(){return this._renderMode}set renderMode(e){if(this._renderMode!==e){var t=this._baseRenderNode.shaderData;switch(this._renderMode){case 0:t.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_BILLBOARD);break;case 1:t.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD);break;case 2:t.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD);break;case 3:t.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD);break;case 4:t.removeDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_MESH)}switch(this._renderMode=e,e){case 0:t.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_BILLBOARD);break;case 1:t.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_STRETCHEDBILLBOARD);break;case 2:t.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_HORIZONTALBILLBOARD);break;case 3:t.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_VERTICALBILLBOARD);break;case 4:t.addDefine(ShuriKenParticle3DShaderDeclaration.SHADERDEFINE_RENDERMODE_MESH);break;default:throw new Error("ShurikenParticleRender: unknown renderMode Value.")}var a=this._particleSystem;a&&a._initBufferDatas()}}get mesh(){return this._mesh}set mesh(e){this._mesh!==e&&(this._mesh&&this._mesh._removeReference(),this._mesh=e,e&&e._addReference(),this._particleSystem._initBufferDatas())}_getcommonUniformMap(){return["Sprite3D","ShurikenSprite3D"]}_onAdded(){super._onAdded(),t.LayaGL.renderEngine.getCapable(t.RenderCapable.DrawElement_Instance)?this._particleSystem=new ShurikenParticleInstanceSystem(this):this._particleSystem=new ShurikenParticleSystem(this);var e=this._renderElements[0]=new RenderElement;e.setTransform(this.owner._transform),e.render=this,e.setGeometry(this._particleSystem),e.material=ShurikenParticleMaterial.defaultMaterial,this._setRenderElements()}_onEnable(){super._onEnable(),t.Stat.particleRenderNode++,this._particleSystem.playOnAwake&&t.LayaEnv.isPlaying&&this._particleSystem.play()}_onDisable(){super._onDisable(),t.Stat.particleRenderNode--,this._particleSystem.isAlive&&this._particleSystem.simulate(0,!0)}_calculateBoundingBox(){var e=this._particleSystem;if(e._useCustomBounds)e.customBounds._tranform(this.owner.transform.worldMatrix,this._bounds);else if(e._simulationSupported()){if(e._generateBounds(),e._bounds._tranform(this.owner.transform.worldMatrix,this._bounds),0!=e.gravityModifier){var t=this._bounds.getMax(),a=this._bounds.getMin(),r=e._gravityOffset;t.y-=r.x,a.y-=r.y,this._bounds.setMax(t),this._bounds.setMin(a)}}else{(a=this._bounds.getMin()).setValue(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE),this._bounds.setMin(a),(t=this._bounds.getMax()).setValue(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),this._bounds.setMax(t)}}_needRender(e,a){return!!t.Stat.enableParticle&&(!e||!!e.intersects(this.bounds)&&!!this._particleSystem.isAlive)}_renderUpdate(a){var r=this._particleSystem,n=this._baseRenderNode.shaderData,i=this.owner.transform;switch(r.simulationSpace){case 0:break;case 1:n.setVector3(ShuriKenParticle3DShaderDeclaration.WORLDPOSITION,i.position),n.setShaderData(ShuriKenParticle3DShaderDeclaration.WORLDROTATION,e.ShaderDataType.Vector4,i.rotation);break;default:throw new Error("ShurikenParticleMaterial: SimulationSpace value is invalid.")}switch(r.scaleMode){case 0:var o=i.getWorldLossyScale();n.setVector3(ShuriKenParticle3DShaderDeclaration.POSITIONSCALE,o),n.setVector3(ShuriKenParticle3DShaderDeclaration.SIZESCALE,o);break;case 1:var s=i.localScale;n.setVector3(ShuriKenParticle3DShaderDeclaration.POSITIONSCALE,s),n.setVector3(ShuriKenParticle3DShaderDeclaration.SIZESCALE,s);break;case 2:n.setVector3(ShuriKenParticle3DShaderDeclaration.POSITIONSCALE,i.getWorldLossyScale()),n.setVector3(ShuriKenParticle3DShaderDeclaration.SIZESCALE,t.Vector3.ONE)}switch(r.dragType){case 0:this._dragConstant.setValue(r.dragSpeedConstantMin,r.dragSpeedConstantMin),n.setVector2(ShuriKenParticle3DShaderDeclaration.DRAG,this._dragConstant);break;case 2:this._dragConstant.setValue(r.dragSpeedConstantMin,r.dragSpeedConstantMax),n.setVector2(ShuriKenParticle3DShaderDeclaration.DRAG,this._dragConstant);break;default:this._dragConstant.setValue(0,0)}t.Vector3.scale(ShurikenParticleRenderer.gravity,r.gravityModifier,this._finalGravity),n.setVector3(ShuriKenParticle3DShaderDeclaration.GRAVITY,this._finalGravity),n.setInt(ShuriKenParticle3DShaderDeclaration.SIMULATIONSPACE,r.simulationSpace),n.setBool(ShuriKenParticle3DShaderDeclaration.THREEDSTARTROTATION,r.threeDStartRotation),n.setInt(ShuriKenParticle3DShaderDeclaration.SCALINGMODE,r.scaleMode),n.setNumber(ShuriKenParticle3DShaderDeclaration.STRETCHEDBILLBOARDLENGTHSCALE,this.stretchedBillboardLengthScale),n.setNumber(ShuriKenParticle3DShaderDeclaration.STRETCHEDBILLBOARDSPEEDSCALE,this.stretchedBillboardSpeedScale),n.setNumber(ShuriKenParticle3DShaderDeclaration.CURRENTTIME,r._currentTime)}renderUpdate(e){this._renderElements.forEach((t=>{t._renderElementOBJ.isRender=t._geometry._prepareRender(e),t._geometry._prepareRender(e),t._geometry._updateRenderParams(e)}))}get bounds(){return this.boundsChange&&(this._calculateBoundingBox(),this.boundsChange=!1),this._bounds}_cloneTo(e){let t=e;this._particleSystem.cloneTo(t._particleSystem),t.sharedMaterial=this.sharedMaterial,t.renderMode=this.renderMode,t.mesh=this.mesh,t.stretchedBillboardCameraSpeedScale=this.stretchedBillboardCameraSpeedScale,t.stretchedBillboardSpeedScale=this.stretchedBillboardSpeedScale,t.stretchedBillboardLengthScale=this.stretchedBillboardLengthScale,t.sortingFudge=this.sortingFudge}_onDestroy(){this._mesh&&(this._mesh._removeReference(),this._mesh=null),this._particleSystem.destroy(),this._particleSystem=null,super._onDestroy()}}ShurikenParticleRenderer.gravity=new t.Vector3(0,-9.81,0);class ShuriKenParticle3D extends RenderableSprite3D{constructor(){super(null),this._render=this.addComponent(ShurikenParticleRenderer),this._particleSystem=this._render._particleSystem}get particleSystem(){return this._particleSystem}get particleRenderer(){return this._render}_parseModule(e,a){for(var r in a)switch(r){case"bases":var n=a.bases;for(var i in n)e[i]=n[i];break;case"vector2s":var o=a.vector2s;for(var i in o){var s=e[i],l=o[i];s.setValue(l[0],l[1]),e[i]=s}break;case"vector3s":var h=a.vector3s;for(var i in h){var d=e[i],c=h[i];d.setValue(c[0],c[1],c[2]),e[i]=d}break;case"vector4s":var u=a.vector4s;for(var i in u){var _=e[i],m=u[i];_.setValue(m[0],m[1],m[2],m[3]),e[i]=_}break;case"gradientDataNumbers":var f=a.gradientDataNumbers;for(var i in f){for(var S=e[i],g=a[i],p=0,D=g.length;p<D;p++){var T=g[p];S.add(T.key,T.value)}e[i]=S}break;case"resources":var E=a.resources;for(var i in E){let a=t.Loader.getRes(E[i]);a&&a instanceof t.Texture&&(a=a.bitmap),e[i]=a}break;case"bursts":var x=a.bursts;for(p=0,D=x.length;p<D;p++){var M=x[p];e.addBurst(new Burst(M.time,M.min,M.max))}break;case"randomSeed":e.randomSeed[0]=a.randomSeed;break;case"shapeType":case"type":case"color":case"size":case"frame":case"startFrame":case"angularVelocity":case"velocity":break;default:throw"ShurikenParticle3D:unknown type."}}_parse(e,a){if(super._parse(e,a),e.main){var r=this.particleSystem,n=this.particleRenderer;this._parseModule(n,e.renderer),this._parseModule(r,e.main),this._parseModule(r.emission,e.emission);var i=e.shape;if(i){var o;switch(i.shapeType){case 0:o=new SphereShape;break;case 1:o=new HemisphereShape;break;case 2:o=new ConeShape;break;case 3:o=new BoxShape;break;case 7:o=new CircleShape;break;default:throw"ShuriKenParticle3D:unknown shape type."}this._parseModule(o,i),r.shape=o}var s=e.velocityOverLifetime;if(s){var l,h=s.velocity;switch(h.type){case 0:var d=h.constant;l=GradientVelocity.createByConstant(d?new t.Vector3(d[0],d[1],d[2]):new t.Vector3(0,0,0));break;case 1:l=GradientVelocity.createByGradient(this._initParticleVelocity(h.gradientX),this._initParticleVelocity(h.gradientY),this._initParticleVelocity(h.gradientZ));break;case 2:var c=h.constantMin,u=h.constantMax;l=GradientVelocity.createByRandomTwoConstant(c?new t.Vector3(c[0],c[1],c[2]):new t.Vector3(0,0,0),u?new t.Vector3(u[0],u[1],u[2]):new t.Vector3(0,0,0));break;case 3:l=GradientVelocity.createByRandomTwoGradient(this._initParticleVelocity(h.gradientXMin),this._initParticleVelocity(h.gradientXMax),this._initParticleVelocity(h.gradientYMin),this._initParticleVelocity(h.gradientYMax),this._initParticleVelocity(h.gradientZMin),this._initParticleVelocity(h.gradientZMax))}var _=new VelocityOverLifetime(l);this._parseModule(_,s),r.velocityOverLifetime=_}var m=e.colorOverLifetime;if(m){var f=m.color;let e=f.maxKeyCount;var S;switch(f.type){case 0:var g=f.constant;S=GradientColor.createByConstant(g?new t.Vector4(g[0],g[1],g[2],g[3]):new t.Vector4(0,0,0,0));break;case 1:S=GradientColor.createByGradient(this._initParticleColor(f.gradient,e));break;case 2:var p=f.constantMin,D=f.constantMax;S=GradientColor.createByRandomTwoConstant(p?new t.Vector4(p[0],p[1],p[2],p[3]):new t.Vector4(0,0,0,0),p?new t.Vector4(D[0],D[1],D[2],D[3]):new t.Vector4(0,0,0,0));break;case 3:S=GradientColor.createByRandomTwoGradient(this._initParticleColor(f.gradientMin,e),this._initParticleColor(f.gradientMax,e))}var T=new ColorOverLifetime(S);this._parseModule(T,m),r.colorOverLifetime=T}var E=e.sizeOverLifetime;if(E){var x,M=E.size;switch(M.type){case 0:x=M.separateAxes?GradientSize.createByGradientSeparate(this._initParticleSize(M.gradientX),this._initParticleSize(M.gradientY),this._initParticleSize(M.gradientZ)):GradientSize.createByGradient(this._initParticleSize(M.gradient));break;case 1:if(M.separateAxes){var R=M.constantMinSeparate,A=M.constantMaxSeparate;x=GradientSize.createByRandomTwoConstantSeparate(R?new t.Vector3(R[0],R[1],R[2]):new t.Vector3(0,0,0),A?new t.Vector3(A[0],A[1],A[2]):new t.Vector3(0,0,0))}else x=GradientSize.createByRandomTwoConstant(M.constantMin||0,M.constantMax||0);break;case 2:x=M.separateAxes?GradientSize.createByRandomTwoGradientSeparate(this._initParticleSize(M.gradientXMin),this._initParticleSize(M.gradientYMin),this._initParticleSize(M.gradientZMin),this._initParticleSize(M.gradientXMax),this._initParticleSize(M.gradientYMax),this._initParticleSize(M.gradientZMax)):GradientSize.createByRandomTwoGradient(this._initParticleSize(M.gradientMin),this._initParticleSize(M.gradientMax))}var C=new SizeOverLifetime(x);this._parseModule(C,E),r.sizeOverLifetime=C}var y=e.rotationOverLifetime;if(y){var v,I=y.angularVelocity;switch(I.type){case 0:if(I.separateAxes){var L=I.constantSeparate;v=GradientAngularVelocity.createByConstantSeparate(L?new t.Vector3(L[0],L[1],L[2]):new t.Vector3(0,0,Math.PI/4))}else v=GradientAngularVelocity.createByConstant(I.constant||Math.PI/4);break;case 1:v=I.separateAxes?GradientAngularVelocity.createByGradientSeparate(this._initParticleRotation(I.gradientX),this._initParticleRotation(I.gradientY),this._initParticleRotation(I.gradientZ)):GradientAngularVelocity.createByGradient(this._initParticleRotation(I.gradient));break;case 2:if(I.separateAxes){var P=I.constantMinSeparate,B=I.constantMaxSeparate;v=GradientAngularVelocity.createByRandomTwoConstantSeparate(P?new t.Vector3(P[0],P[1],P[2]):new t.Vector3(0,0,0),B?new t.Vector3(B[0],B[1],B[2]):new t.Vector3(0,0,Math.PI/4))}else v=GradientAngularVelocity.createByRandomTwoConstant(I.constantMin||0,I.constantMax||Math.PI/4);break;case 3:I.separateAxes||(v=GradientAngularVelocity.createByRandomTwoGradient(this._initParticleRotation(I.gradientMin),this._initParticleRotation(I.gradientMax)))}var O=new RotationOverLifetime(v);this._parseModule(O,y),r.rotationOverLifetime=O}var V=e.textureSheetAnimation;if(V){var w,b=V.frame;switch(b.type){case 0:w=FrameOverTime.createByConstant(b.constant);break;case 1:w=FrameOverTime.createByOverTime(this._initParticleFrame(b.overTime));break;case 2:w=FrameOverTime.createByRandomTwoConstant(b.constantMin,b.constantMax);break;case 3:w=FrameOverTime.createByRandomTwoOverTime(this._initParticleFrame(b.overTimeMin),this._initParticleFrame(b.overTimeMax))}var N,F=V.startFrame;switch(F.type){case 0:N=StartFrame.createByConstant(F.constant);break;case 1:N=StartFrame.createByRandomTwoConstant(F.constantMin,F.constantMax)}var U=new TextureSheetAnimation(w,N);this._parseModule(U,V),r.textureSheetAnimation=U}}else this._parseOld(e)}destroy(e=!0){this._destroyed||super.destroy(e)}_create(){return new Sprite3D}_parseOld(e){const a=Math.PI/180;var r,n,i,o=this.particleRenderer,s=e.material;s&&(i=t.Loader.getRes(s.path)),o.sharedMaterial=i;var l=e.meshPath;l&&(o.mesh=t.Loader.getRes(l)),o.renderMode=e.renderMode,o.stretchedBillboardCameraSpeedScale=e.stretchedBillboardCameraSpeedScale,o.stretchedBillboardSpeedScale=e.stretchedBillboardSpeedScale,o.stretchedBillboardLengthScale=e.stretchedBillboardLengthScale,o.sortingFudge=e.sortingFudge?e.sortingFudge:0;var h=this.particleSystem;h.isPerformanceMode=e.isPerformanceMode,h.duration=e.duration,h.looping=e.looping,h.prewarm=e.prewarm,h.startDelayType=e.startDelayType,h.startDelay=e.startDelay,h.startDelayMin=e.startDelayMin,h.startDelayMax=e.startDelayMax,h.startLifetimeType=e.startLifetimeType,h.startLifetimeConstant=e.startLifetimeConstant,h.startLifeTimeGradient=ShuriKenParticle3D._initStartLife(e.startLifetimeGradient),h.startLifetimeConstantMin=e.startLifetimeConstantMin,h.startLifetimeConstantMax=e.startLifetimeConstantMax,h.startLifeTimeGradientMin=ShuriKenParticle3D._initStartLife(e.startLifetimeGradientMin),h.startLifeTimeGradientMax=ShuriKenParticle3D._initStartLife(e.startLifetimeGradientMax),h.startSpeedType=e.startSpeedType,h.startSpeedConstant=e.startSpeedConstant,h.startSpeedConstantMin=e.startSpeedConstantMin,h.startSpeedConstantMax=e.startSpeedConstantMax,h.threeDStartSize=e.threeDStartSize,h.startSizeType=e.startSizeType,h.startSizeConstant=e.startSizeConstant;var d=e.startSizeConstantSeparate,c=h.startSizeConstantSeparate;c.x=d[0],c.y=d[1],c.z=d[2],h.startSizeConstantMin=e.startSizeConstantMin,h.startSizeConstantMax=e.startSizeConstantMax;var u=e.startSizeConstantMinSeparate,_=h.startSizeConstantMinSeparate;_.x=u[0],_.y=u[1],_.z=u[2];var m=e.startSizeConstantMaxSeparate,f=h.startSizeConstantMaxSeparate;f.x=m[0],f.y=m[1],f.z=m[2],h.threeDStartRotation=e.threeDStartRotation,h.startRotationType=e.startRotationType,h.startRotationConstant=e.startRotationConstant*a;var S=e.startRotationConstantSeparate,g=h.startRotationConstantSeparate;g.x=S[0]*a,g.y=S[1]*a,g.z=S[2]*a,h.startRotationConstantMin=e.startRotationConstantMin*a,h.startRotationConstantMax=e.startRotationConstantMax*a;var p=e.startRotationConstantMinSeparate,D=h.startRotationConstantMinSeparate;D.x=p[0]*a,D.y=p[1]*a,D.z=p[2]*a;var T=e.startRotationConstantMaxSeparate,E=h.startRotationConstantMaxSeparate;E.x=T[0]*a,E.y=T[1]*a,E.z=T[2]*a,h.randomizeRotationDirection=e.randomizeRotationDirection,h.startColorType=e.startColorType;var x=e.startColorConstant,M=h.startColorConstant;M.x=x[0],M.y=x[1],M.z=x[2],M.w=x[3];var R=e.startColorConstantMin,A=h.startColorConstantMin;A.x=R[0],A.y=R[1],A.z=R[2],A.w=R[3];var C=e.startColorConstantMax,y=h.startColorConstantMax;y.x=C[0],y.y=C[1],y.z=C[2],y.w=C[3],h.gravityModifier=e.gravityModifier,h.simulationSpace=e.simulationSpace,void 0!==e.simulationSpeed&&(h.simulationSpeed=e.simulationSpeed),h.scaleMode=e.scaleMode,h.playOnAwake=e.playOnAwake,h.maxParticles=e.maxParticles;var v=e.autoRandomSeed;null!=v&&(h.autoRandomSeed=v);var I=e.randomSeed;null!=I&&(h.randomSeed[0]=I);var L=e.emission,P=h.emission;if(L){P.emissionRate=L.emissionRate;var B=L.bursts;if(B)for(r=0,n=B.length;r<n;r++){var O=B[r];P.addBurst(new Burst(O.time,O.min,O.max))}P.enable=L.enable}else P.enable=!1;var V=e.shape;if(V){var w;switch(V.shapeType){case 0:var b;w=b=new SphereShape,b.radius=V.sphereRadius,b.emitFromShell=V.sphereEmitFromShell,b.randomDirection=V.sphereRandomDirection;break;case 1:var N;w=N=new HemisphereShape,N.radius=V.hemiSphereRadius,N.emitFromShell=V.hemiSphereEmitFromShell,N.randomDirection=V.hemiSphereRandomDirection;break;case 2:var F;w=F=new ConeShape,F.angle=V.coneAngle*a,F.radius=V.coneRadius,F.length=V.coneLength,F.emitType=V.coneEmitType,F.randomDirection=V.coneRandomDirection;break;case 3:var U;w=U=new BoxShape,U.x=V.boxX,U.y=V.boxY,U.z=V.boxZ,U.randomDirection=V.boxRandomDirection;break;case 7:var G;w=G=new CircleShape,G.radius=V.circleRadius,G.arc=V.circleArc*a,G.emitFromEdge=V.circleEmitFromEdge,G.randomDirection=V.circleRandomDirection;break;default:var H;w=H=new CircleShape,H.radius=V.circleRadius,H.arc=V.circleArc*a,H.emitFromEdge=V.circleEmitFromEdge,H.randomDirection=V.circleRandomDirection}w.enable=V.enable,h.shape=w}var k=e.velocityOverLifetime;if(k){var z,W=k.velocity;switch(W.type){case 0:var Y=W.constant;z=GradientVelocity.createByConstant(new t.Vector3(Y[0],Y[1],Y[2]));break;case 1:z=GradientVelocity.createByGradient(this._initParticleVelocity(W.gradientX),this._initParticleVelocity(W.gradientY),this._initParticleVelocity(W.gradientZ));break;case 2:var X=W.constantMin,Q=W.constantMax;z=GradientVelocity.createByRandomTwoConstant(new t.Vector3(X[0],X[1],X[2]),new t.Vector3(Q[0],Q[1],Q[2]));break;case 3:z=GradientVelocity.createByRandomTwoGradient(this._initParticleVelocity(W.gradientXMin),this._initParticleVelocity(W.gradientXMax),this._initParticleVelocity(W.gradientYMin),this._initParticleVelocity(W.gradientYMax),this._initParticleVelocity(W.gradientZMin),this._initParticleVelocity(W.gradientZMax))}var K=new VelocityOverLifetime(z);K.space=k.space,K.enable=k.enable,h.velocityOverLifetime=K}var Z=e.colorOverLifetime;if(Z){var j,J=Z.color;switch(J.type){case 0:var q=J.constant;j=GradientColor.createByConstant(new t.Vector4(q[0],q[1],q[2],q[3]));break;case 1:j=GradientColor.createByGradient(this._initParticleColor(J.gradient));break;case 2:var $=J.constantMin,ee=J.constantMax;j=GradientColor.createByRandomTwoConstant(new t.Vector4($[0],$[1],$[2],$[3]),new t.Vector4(ee[0],ee[1],ee[2],ee[3]));break;case 3:j=GradientColor.createByRandomTwoGradient(this._initParticleColor(J.gradientMin),this._initParticleColor(J.gradientMax))}var te=new ColorOverLifetime(j);te.enable=Z.enable,h.colorOverLifetime=te}var ae=e.sizeOverLifetime;if(ae){var re,ne=ae.size;switch(ne.type){case 0:re=ne.separateAxes?GradientSize.createByGradientSeparate(this._initParticleSize(ne.gradientX),this._initParticleSize(ne.gradientY),this._initParticleSize(ne.gradientZ)):GradientSize.createByGradient(this._initParticleSize(ne.gradient));break;case 1:if(ne.separateAxes){var ie=ne.constantMinSeparate,oe=ne.constantMaxSeparate;re=GradientSize.createByRandomTwoConstantSeparate(new t.Vector3(ie[0],ie[1],ie[2]),new t.Vector3(oe[0],oe[1],oe[2]))}else re=GradientSize.createByRandomTwoConstant(ne.constantMin,ne.constantMax);break;case 2:re=ne.separateAxes?GradientSize.createByRandomTwoGradientSeparate(this._initParticleSize(ne.gradientXMin),this._initParticleSize(ne.gradientYMin),this._initParticleSize(ne.gradientZMin),this._initParticleSize(ne.gradientXMax),this._initParticleSize(ne.gradientYMax),this._initParticleSize(ne.gradientZMax)):GradientSize.createByRandomTwoGradient(this._initParticleSize(ne.gradientMin),this._initParticleSize(ne.gradientMax))}var se=new SizeOverLifetime(re);se.enable=ae.enable,h.sizeOverLifetime=se}var le=e.rotationOverLifetime;if(le){var he,de=le.angularVelocity;switch(de.type){case 0:if(de.separateAxes){var ce=de.constantSeparate;he=GradientAngularVelocity.createByConstantSeparate(new t.Vector3(ce[0]*a,ce[1]*a,ce[2]*a))}else he=GradientAngularVelocity.createByConstant(de.constant*a);break;case 1:he=de.separateAxes?GradientAngularVelocity.createByGradientSeparate(this._initParticleRotation(de.gradientX),this._initParticleRotation(de.gradientY),this._initParticleRotation(de.gradientZ)):GradientAngularVelocity.createByGradient(this._initParticleRotation(de.gradient));break;case 2:if(de.separateAxes){var ue=de.constantMinSeparate,_e=de.constantMaxSeparate;he=GradientAngularVelocity.createByRandomTwoConstantSeparate(new t.Vector3(ue[0]*a,ue[1]*a,ue[2]*a),new t.Vector3(_e[0]*a,_e[1]*a,_e[2]*a))}else he=GradientAngularVelocity.createByRandomTwoConstant(de.constantMin*a,de.constantMax*a);break;case 3:de.separateAxes||(he=GradientAngularVelocity.createByRandomTwoGradient(this._initParticleRotation(de.gradientMin),this._initParticleRotation(de.gradientMax)))}var me=new RotationOverLifetime(he);me.enable=le.enable,h.rotationOverLifetime=me}var fe=e.textureSheetAnimation;if(fe){var Se,ge=fe.frame;switch(ge.type){case 0:Se=FrameOverTime.createByConstant(ge.constant);break;case 1:Se=FrameOverTime.createByOverTime(this._initParticleFrame(ge.overTime));break;case 2:Se=FrameOverTime.createByRandomTwoConstant(ge.constantMin,ge.constantMax);break;case 3:Se=FrameOverTime.createByRandomTwoOverTime(this._initParticleFrame(ge.overTimeMin),this._initParticleFrame(ge.overTimeMax))}var pe,De=fe.startFrame;switch(De.type){case 0:pe=StartFrame.createByConstant(De.constant);break;case 1:pe=StartFrame.createByRandomTwoConstant(De.constantMin,De.constantMax)}var Te=new TextureSheetAnimation(Se,pe);Te.enable=fe.enable;var Ee=fe.tiles;Te.tiles=new t.Vector2(Ee[0],Ee[1]),Te.type=fe.type,Te.randomRow=fe.randomRow;var xe=fe.rowIndex;void 0!==xe&&(Te.rowIndex=xe),Te.cycles=fe.cycles,h.textureSheetAnimation=Te}}_initParticleColor(e,a=4){var r=new Gradient(a,a);if(e){var n,i,o=e.alphas;if(o)for(n=0,i=o.length;n<i;n++){n==a-1&&i>a&&(n=i-1,console.warn(`GradientDataColor warning:alpha data length is large than ${a}, will ignore the middle data.`));var s=o[n];r.addColorAlpha(s.key,s.value)}else r.addColorAlpha(0,1),r.addColorAlpha(1,1);var l=e.rgbs;if(l)for(n=0,i=l.length;n<i;n++){n==a-1&&i>a&&(n=i-1,console.warn(`GradientDataColor warning:rgb data length is large than ${a}, will ignore the middle data.`));var h=l[n],d=h.value;r.addColorRGB(h.key,new t.Color(d[0],d[1],d[2],1))}else r.addColorRGB(0,new t.Color(1,1,1,1)),r.addColorRGB(1,new t.Color(1,1,1,1))}else r.addColorAlpha(0,1),r.addColorAlpha(1,1),r.addColorRGB(0,new t.Color(1,1,1,1)),r.addColorRGB(1,new t.Color(1,1,1,1));return r}_initParticleFrame(e){var t=new GradientDataInt;if(e)for(var a=e.frames,r=0,n=a.length;r<n;r++){var i=a[r];t.add(i.key,i.value)}else t.add(0,0),t.add(1,1);return t}static _initStartLife(e){for(var t=new GradientDataNumber,a=e.startLifetimes,r=0,n=a.length;r<n;r++){var i=a[r];t.add(i.key,i.value)}return t}_initParticleVelocity(e){for(var t=new GradientDataNumber,a=e.velocitys,r=0,n=a.length;r<n;r++){var i=a[r];t.add(i.key,i.value)}return t}_initParticleSize(e){var t=new GradientDataNumber;if(e)for(var a=e.sizes,r=0,n=a.length;r<n;r++){var i=a[r];t.add(i.key,i.value)}else t.add(0,0),t.add(1,1);return t}_initParticleRotation(e){for(var t=new GradientDataNumber,a=e.angularVelocitys,r=0,n=a.length;r<n;r++){var i=a[r];t.add(i.key,i.value/180*Math.PI)}return t}}class PixelLineVertex{constructor(){}static get vertexDeclaration(){return PixelLineVertex._vertexDeclaration}static __init__(){PixelLineVertex._vertexDeclaration=new t.VertexDeclaration(40,[new t.VertexElement(0,t.VertexElementFormat.Vector3,t.VertexMesh.MESH_POSITION0),new t.VertexElement(12,t.VertexElementFormat.Vector4,t.VertexMesh.MESH_COLOR0),new t.VertexElement(28,t.VertexElementFormat.Vector3,t.VertexMesh.MESH_NORMAL0)])}get vertexDeclaration(){return PixelLineVertex._vertexDeclaration}}class SkinnedMeshSprite3DShaderDeclaration{}class SkinRenderElement extends RenderElement{constructor(){super()}setSkinData(e){this._renderElementOBJ.skinnedData=e}_createRenderElementOBJ(){this._renderElementOBJ=Laya3DRender.Render3DPassFactory.createSkinRenderElement()}_render(e){}}class SkinnedMeshRenderer extends MeshRenderer{constructor(){super(),this.__bones=[],this._worldParams=new t.Vector4,this.localBounds=new Bounds(t.Vector3.ZERO,t.Vector3.ZERO),this._baseRenderNode.shaderData.addDefine(SkinnedMeshSprite3DShaderDeclaration.SHADERDEFINE_BONE),this._baseRenderNode.renderNodeType=e.BaseRenderType.SkinnedMeshRender}get _bones(){return this.__bones}set _bones(e){this.__bones=e,this._isISkinRenderNode()&&this._ownerSkinRenderNode.setBones(e)}get localBounds(){return this._localBounds}set localBounds(e){this._localBounds=e,this.geometryBounds=this._localBounds}get rootBone(){return this._cacheRootBone}set rootBone(e){if(this._cacheRootBone!=e){this._cacheRootBone?this._cacheRootBone.transform.off(t.Event.TRANSFORM_CHANGED,this,this._onWorldMatNeedChange):this.owner.transform.off(t.Event.TRANSFORM_CHANGED,this,this._onWorldMatNeedChange),e?(e.transform.on(t.Event.TRANSFORM_CHANGED,this,this._onWorldMatNeedChange),this._baseRenderNode.transform=e.transform):(this.owner.transform.on(t.Event.TRANSFORM_CHANGED,this,this._onWorldMatNeedChange),this._baseRenderNode.transform=this.owner.transform),this._cacheRootBone=e,this._onWorldMatNeedChange(Transform3D.TRANSFORM_WORLDPOSITION|Transform3D.TRANSFORM_WORLDQUATERNION|Transform3D.TRANSFORM_WORLDSCALE);let r=this._renderElements.length;for(var a=0;a<r;a++){this._renderElements[a].setTransform(e.transform)}this._isISkinRenderNode()&&this._ownerSkinRenderNode.setRootBoneTransfom(this._cacheRootBone)}}get bones(){return this._bones}set bones(e){this._bones=e}_createBaseRenderNode(){return this._ownerSkinRenderNode=Laya3DRender.Render3DModuleDataFactory.createSkinRenderNode(),this._ownerSkinRenderNode}_needRender(e,a){return!!t.Stat.enableSkin&&super._needRender(e,a)}_createRenderElement(){return new SkinRenderElement}_isISkinRenderNode(){return this._ownerSkinRenderNode.setCacheMesh}_onSkinMeshChange(e){if(e&&this._mesh!=e){this._changeVertexDefine(e),this._changeMorphData(e),this._mesh=e,this._isISkinRenderNode()&&this._ownerSkinRenderNode.setCacheMesh(e);var t=e.subMeshCount;this._renderElements.length=t;for(var a=0;a<t;a++){let t=this._renderElements[a];if(!t){var r=this.sharedMaterials[a];t=this._renderElements[a]=this._createRenderElement(),this._cacheRootBone?t.setTransform(this._cacheRootBone.transform):t.setTransform(this.owner._transform),t.render=this,t.material=r||BlinnPhongMaterial.defaultMaterial}t.setGeometry(e.getSubMesh(a))}this.boundsChange=!0}else e||(this._renderElements.length=0,this._mesh=null,this._changeVertexDefine(null),this._changeMorphData(null),this.boundsChange=!1)}_onMeshChange(e){if(this._onSkinMeshChange(e),e){this._cacheMesh=e;var t=e.subMeshCount;this._skinnedData=[];for(var a=0;a<t;a++){for(var r=e.getSubMesh(a)._boneIndicesList,n=r.length,i=this._skinnedData[a]=[],o=0;o<n;o++)i[o]=new Float32Array(16*r[o].length);this._renderElements[a].setSkinData(i)}this._isISkinRenderNode()&&this._ownerSkinRenderNode.setSkinnedData(this._skinnedData),this._setRenderElements()}}_setBelongScene(e){super._setBelongScene(e),this._isISkinRenderNode()&&this._ownerSkinRenderNode.setOwnerTransform(this.owner),t.Stat.skinRenderNode++,t.Stat.meshRenderNode--}_setUnBelongScene(){super._setUnBelongScene(),t.Stat.skinRenderNode--}renderUpdate(e){super.renderUpdate(e),this._isISkinRenderNode()&&this._ownerSkinRenderNode.computeSkinnedData()}_cloneTo(e){let cloneHierachFun=(e,t,a)=>{let r=((e,t)=>{let a=[],r=e;for(;r;)r instanceof Sprite3D&&a.push(r),r=r.parent;let n=t;for(;n&&-1==a.indexOf(n);)n=n.parent;return n})(e,t);if(!r)return null;let n=[];Utils3D._getHierarchyPath(r,e,n);let i=[];Utils3D._getHierarchyPath(r,t,i);let o=Utils3D._getParentNodeByHierarchyPath(a,n);return o?Utils3D._getNodeByHierarchyPath(o,i):null};var t=this.rootBone;if(t){let a=cloneHierachFun(this.owner,this.rootBone,e.owner);e.rootBone=a||t}var a=this.bones,r=e.bones;let n=r.length=a.length;for(var i=0;i<n;i++){let t=a[i];r[i]=cloneHierachFun(this.owner,t,e.owner)}e.bones=e.bones;var o=this.localBounds;o&&o.cloneTo(e.localBounds),e.localBounds&&(e.localBounds=e.localBounds),super._cloneTo(e)}_onDestroy(){this._cacheRootBone?!this._cacheRootBone._destroyed&&this._cacheRootBone.transform.off(t.Event.TRANSFORM_CHANGED,this,this._onWorldMatNeedChange):this.owner&&!this.owner._destroyed&&this.owner.transform.off(t.Event.TRANSFORM_CHANGED,this,this._onWorldMatNeedChange),super._onDestroy()}}class SkinnedMeshSprite3D extends RenderableSprite3D{constructor(e=null,t=null){super(t),this._meshFilter=this.addComponent(MeshFilter),this._render=this.addComponent(SkinnedMeshRenderer),e&&(this._meshFilter.sharedMesh=e)}static __init__(){SkinnedMeshSprite3DShaderDeclaration.SHADERDEFINE_BONE=t.Shader3D.getDefineByName("BONE"),SkinnedMeshSprite3DShaderDeclaration.SHADERDEFINE_SIMPLEBONE=t.Shader3D.getDefineByName("SIMPLEBONE");const a=t.LayaGL.renderDeviceFactory.createGlobalUniformMap("Custom");SkinnedMeshSprite3D.BONES=t.Shader3D.propertyNameToID("u_Bones"),a.addShaderUniform(SkinnedMeshSprite3D.BONES,"u_Bones",e.ShaderDataType.Buffer)}get meshFilter(){return this._meshFilter}get skinnedMeshRenderer(){return this._render}_parse(e,a){super._parse(e,a);var r=this.skinnedMeshRenderer,n=e.lightmapIndex;null!=n&&(r.lightmapIndex=n);var i,o=e.lightmapScaleOffset;if(o&&(r.lightmapScaleOffset=new t.Vector4(o[0],o[1],o[2],o[3])),null!=e.enableRender&&(r.enabled=e.enableRender),null!=e.receiveShadows&&(r.receiveShadow=e.receiveShadows),null!=e.castShadow&&(r.castShadow=e.castShadow),i=e.meshPath){var s=t.Loader.getRes(i);s&&(this.meshFilter.sharedMesh=s)}var l=e.materials;if(l){var h=r.sharedMaterials,d=l.length;h.length=d;for(var c=0;c<d;c++)h[c]=t.Loader.getRes(l[c].path);r.sharedMaterials=h}var u=e.boundBox,_=u.min,m=u.max;if(r.localBounds.setMin(new t.Vector3(_[0],_[1],_[2])),r.localBounds.setMax(new t.Vector3(m[0],m[1],m[2])),r.localBounds=r.localBounds,a){var f=e.rootBone;r.rootBone=a[f];var S,g=e.bones;for(c=0,S=g.length;c<S;c++)r.bones.push(a[g[c]]);r.bones=r.bones}}_cloneTo(e,t,a){super._cloneTo(e,t,a)}destroy(e=!0){this._destroyed||(super.destroy(e),this._meshFilter.destroy())}_create(){return new Sprite3D}}SkinnedMeshSprite3D._tempArray0=[];class TrailMaterial extends t.Material{constructor(){super(),this.setShaderName("Trail"),this.materialRenderMode=t.MaterialRenderMode.RENDERMODE_ALPHABLENDED}static __initDefine__(){TrailMaterial.MAINTEXTURE=t.Shader3D.propertyNameToID("u_MainTexture"),TrailMaterial.TINTCOLOR=t.Shader3D.propertyNameToID("u_MainColor"),TrailMaterial.TILINGOFFSET=t.Shader3D.propertyNameToID("u_TilingOffset")}get color(){return this._shaderValues.getColor(TrailMaterial.TINTCOLOR)}set color(e){this._shaderValues.setColor(TrailMaterial.TINTCOLOR,e)}get texture(){return this._shaderValues.getTexture(TrailMaterial.MAINTEXTURE)}set texture(e){e?this._shaderValues.addDefine(TrailMaterial.SHADERDEFINE_MAINTEXTURE):this._shaderValues.removeDefine(TrailMaterial.SHADERDEFINE_MAINTEXTURE),this._shaderValues.setTexture(TrailMaterial.MAINTEXTURE,e)}get tilingOffset(){return this._shaderValues.getVector(TrailMaterial.TILINGOFFSET)}set tilingOffset(e){e?this._shaderValues.setVector(TrailMaterial.TILINGOFFSET,e):this._shaderValues.getVector(TrailMaterial.TILINGOFFSET).setValue(1,1,0,0)}clone(){var e=new TrailMaterial;return this.cloneTo(e),e}set renderMode(e){switch(e){case TrailMaterial.RENDERMODE_ADDTIVE:this.renderQueue=t.Material.RENDERQUEUE_TRANSPARENT,this.depthWrite=!1,this.cull=RenderState.CULL_NONE,this.blend=RenderState.BLEND_ENABLE_ALL,this.blendSrc=RenderState.BLENDPARAM_SRC_ALPHA,this.blendDst=RenderState.BLENDPARAM_ONE,this.alphaTest=!1,this._shaderValues.addDefine(TrailMaterial.SHADERDEFINE_ADDTIVEFOG);break;case TrailMaterial.RENDERMODE_ALPHABLENDED:this.renderQueue=t.Material.RENDERQUEUE_TRANSPARENT,this.depthWrite=!1,this.cull=RenderState.CULL_NONE,this.blend=RenderState.BLEND_ENABLE_ALL,this.blendSrc=RenderState.BLENDPARAM_SRC_ALPHA,this.blendDst=RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA,this.alphaTest=!1,this._shaderValues.removeDefine(TrailMaterial.SHADERDEFINE_ADDTIVEFOG);break;default:throw new Error("ShurikenParticleMaterial : renderMode value error.")}}}TrailMaterial.RENDERMODE_ALPHABLENDED=0,TrailMaterial.RENDERMODE_ADDTIVE=1;class VertexTrail{static get vertexDeclaration1(){return VertexTrail._vertexDeclaration1}static get vertexDeclaration2(){return VertexTrail._vertexDeclaration2}get vertexDeclaration(){return VertexTrail._vertexDeclaration1}static __init__(){VertexTrail._vertexDeclaration1=new t.VertexDeclaration(32,[new t.VertexElement(0,t.VertexElementFormat.Vector3,VertexTrail.TRAIL_POSITION0),new t.VertexElement(12,t.VertexElementFormat.Vector3,VertexTrail.TRAIL_OFFSETVECTOR),new t.VertexElement(24,t.VertexElementFormat.Single,VertexTrail.TRAIL_TIME0),new t.VertexElement(28,t.VertexElementFormat.Single,VertexTrail.TRAIL_TEXTURECOORDINATE0Y)]),VertexTrail._vertexDeclaration2=new t.VertexDeclaration(20,[new t.VertexElement(0,t.VertexElementFormat.Single,VertexTrail.TRAIL_TEXTURECOORDINATE0X),new t.VertexElement(4,t.VertexElementFormat.Color,VertexTrail.TRAIL_COLOR)])}}VertexTrail.TRAIL_POSITION0=0,VertexTrail.TRAIL_OFFSETVECTOR=1,VertexTrail.TRAIL_TIME0=2,VertexTrail.TRAIL_TEXTURECOORDINATE0Y=3,VertexTrail.TRAIL_TEXTURECOORDINATE0X=4,VertexTrail.TRAIL_COLOR=5;class SubMeshInstanceBatch extends GeometryElement{constructor(){super(t.MeshTopology.Triangles,t.DrawType.DrawElementInstance),this.instanceWorldMatrixData=new Float32Array(16*SubMeshInstanceBatch.maxInstanceCount),this.instanceSimpleAnimatorData=new Float32Array(4*SubMeshInstanceBatch.maxInstanceCount),this.indexFormat=t.IndexFormat.UInt16,this.instanceWorldMatrixBuffer=Laya3DRender.renderOBJCreate.createVertexBuffer3D(4*this.instanceWorldMatrixData.length,t.BufferUsage.Dynamic,!1),this.instanceWorldMatrixBuffer.vertexDeclaration=t.VertexMesh.instanceWorldMatrixDeclaration,this.instanceWorldMatrixBuffer.instanceBuffer=!0,this.instanceSimpleAnimatorBuffer=Laya3DRender.renderOBJCreate.createVertexBuffer3D(4*this.instanceSimpleAnimatorData.length,t.BufferUsage.Dynamic,!1),this.instanceSimpleAnimatorBuffer.vertexDeclaration=t.VertexMesh.instanceSimpleAnimatorDeclaration,this.instanceSimpleAnimatorBuffer.instanceBuffer=!0}static __init__(){SubMeshInstanceBatch.instance=new SubMeshInstanceBatch}_updateRenderParams(e){}}SubMeshInstanceBatch.maxInstanceCount=1024;class VertexPositionTerrain{constructor(e,t,a,r){this._position=e,this._normal=t,this._textureCoord0=a,this._textureCoord1=r}static __init__(){VertexPositionTerrain._vertexDeclaration=new t.VertexDeclaration(40,[new t.VertexElement(0,t.VertexElementFormat.Vector3,VertexPositionTerrain.TERRAIN_POSITION0),new t.VertexElement(12,t.VertexElementFormat.Vector3,VertexPositionTerrain.TERRAIN_NORMAL0),new t.VertexElement(24,t.VertexElementFormat.Vector2,VertexPositionTerrain.TERRAIN_TEXTURECOORDINATE0),new t.VertexElement(32,t.VertexElementFormat.Vector2,VertexPositionTerrain.TERRAIN_TEXTURECOORDINATE1)])}static get vertexDeclaration(){return VertexPositionTerrain._vertexDeclaration}get position(){return this._position}get normal(){return this._normal}get textureCoord0(){return this._textureCoord0}get textureCoord1(){return this._textureCoord1}get vertexDeclaration(){return VertexPositionTerrain._vertexDeclaration}}VertexPositionTerrain.TERRAIN_POSITION0=0,VertexPositionTerrain.TERRAIN_NORMAL0=1,VertexPositionTerrain.TERRAIN_TEXTURECOORDINATE0=2,VertexPositionTerrain.TERRAIN_TEXTURECOORDINATE1=3;class InstanceRenderElement extends RenderElement{constructor(){super(),this._InvertFront=!1,this.setGeometry(new MeshInstanceGeometry(null)),this._instanceBatchElementList=new t.SingletonList,this._isUpdataData=!0,this._invertFrontFace=!1}static create(){let e=InstanceRenderElement._pool.length>0?InstanceRenderElement._pool.pop():new InstanceRenderElement;return e._isInPool=!1,e.clear(),e}getInvertFront(){return this._invertFrontFace}set InvertFront(e){this._InvertFront=e}_createRenderElementOBJ(){}compileShader(e){this._subShader._passes}_renderUpdatePre(e){}updateInstanceData(e){}clear(){this._instanceBatchElementList.length=0}recover(){}}InstanceRenderElement.maxInstanceCount=1024,InstanceRenderElement._pool=[];class SubMesh extends GeometryElement{constructor(e){super(t.MeshTopology.Triangles,t.DrawType.DrawElement),this.indexFormat=e.indexFormat,e.indexFormat!==t.IndexFormat.UInt32||t.LayaGL.renderEngine.getCapable(t.RenderCapable.Element_Index_Uint32)?(this._mesh=e,this._boneIndicesList=[],this._subIndexBufferStart=[],this._subIndexBufferCount=[]):console.warn("SubMesh:this device do not support IndexFormat.UInt32.")}get indexCount(){return this._indexCount}_setIndexRange(e,a,r=t.IndexFormat.UInt16){this._indexStart=e,this._indexCount=a,this._indexBuffer.canRead&&(r==t.IndexFormat.UInt16?this._indices=new Uint16Array(this._indexBuffer.getData().buffer,2*e,a):this._indices=new Uint32Array(this._indexBuffer.getData().buffer,4*e,a))}_getType(){return SubMesh._type}_prepareRender(e){return this._mesh._uploadVerticesData(),!0}_updateRenderParams(e){var a,r=this._mesh;switch(r._indexFormat){case t.IndexFormat.UInt32:a=4;break;case t.IndexFormat.UInt16:a=2;break;case t.IndexFormat.UInt8:a=1}if(this.clearRenderParams(),this.bufferState=r._bufferState,this._boneIndicesList&&this._boneIndicesList.length>1)for(var n=0,i=this._boneIndicesList.length;n<i;n++)this.setDrawElemenParams(this._subIndexBufferCount[n],this._subIndexBufferStart[n]*a);else this.setDrawElemenParams(this._indexCount,this._indexStart*a)}getIndices(){if(this._mesh._isReadable)return this._indices.slice();throw"SubMesh:can't get indices on subMesh,mesh's isReadable must be true."}setIndices(e){this._indexBuffer.setData(e,this._indexStart,0,this._indexCount)}destroy(){this._destroyed||(super.destroy(),this._indexBuffer=null,this._vertexBuffer=null,this._mesh=null,this._boneIndicesList=null,this._subIndexBufferStart=null,this._subIndexBufferCount=null)}}SubMesh._type=GeometryElement._typeCounter++,e.EPhysicsCapable=void 0,(y=e.EPhysicsCapable||(e.EPhysicsCapable={}))[y.Physics_Gravity=0]="Physics_Gravity",y[y.Physics_StaticCollider=1]="Physics_StaticCollider",y[y.Physics_DynamicCollider=2]="Physics_DynamicCollider",y[y.Physics_CharacterCollider=3]="Physics_CharacterCollider",y[y.Physics_BoxColliderShape=4]="Physics_BoxColliderShape",y[y.Physics_SphereColliderShape=5]="Physics_SphereColliderShape",y[y.Physics_CapsuleColliderShape=6]="Physics_CapsuleColliderShape",y[y.Physics_CylinderColliderShape=7]="Physics_CylinderColliderShape",y[y.Physics_ConeColliderShape=8]="Physics_ConeColliderShape",y[y.Physics_MeshColliderShape=9]="Physics_MeshColliderShape",y[y.Physics_CompoundColliderShape=10]="Physics_CompoundColliderShape",y[y.Physics_CreateCorveMesh=11]="Physics_CreateCorveMesh",y[y.physics_heightFieldColliderShape=12]="physics_heightFieldColliderShape",y[y.Physics_Joint=13]="Physics_Joint",y[y.Physics_FixedJoint=14]="Physics_FixedJoint",y[y.Physics_SpringJoint=15]="Physics_SpringJoint",y[y.Physics_HingeJoint=16]="Physics_HingeJoint",y[y.Physics_D6Joint=17]="Physics_D6Joint";class skinnedMatrixCache{constructor(e,t,a){this.subMeshIndex=e,this.batchIndex=t,this.batchBoneIndex=a}}class Mesh extends t.Resource{constructor(e=!0){super(),this._tempVector30=new t.Vector3,this._tempVector31=new t.Vector3,this._minVerticesUpdate=-1,this._maxVerticesUpdate=-1,this._needUpdateBounds=!0,this._bufferState=new t.BufferState,this._instanceBufferStateType=0,this._vertexBuffer=null,this._indexBuffer=null,this._skinnedMatrixCaches=[],this._vertexCount=0,this._indexFormat=t.IndexFormat.UInt16,this._bounds=new Bounds(new t.Vector3,new t.Vector3),this._isReadable=e,this._subMeshes=[],this.destroyedImmediately=t.Config.destroyResourceImmediatelyDefault}static __init__(){}static load(e,a){t.ILaya.loader.load(e,a,null,t.Loader.MESH)}get inverseAbsoluteBindPoses(){return this._inverseBindPoses}get vertexCount(){return this._vertexCount}get indexCount(){return this._indexBuffer.indexCount}get subMeshCount(){return this._subMeshes.length}get bounds(){return this._bounds}set bounds(e){this._bounds!==e&&e.cloneTo(this._bounds)}get indexFormat(){return this._indexFormat}set indexFormat(e){this._indexFormat=e,this._subMeshes.forEach((t=>{t.indexFormat=e}))}_getPositionElement(e){for(var a=e.vertexDeclaration._vertexElements,r=0,n=a.length;r<n;r++){var i=a[r];if(i._elementFormat===t.VertexElementFormat.Vector3&&i._elementUsage===t.VertexMesh.MESH_POSITION0)return i}return null}_getVerticeElementData(e,a){e.length=this._vertexCount;var r=this._vertexBuffer.vertexDeclaration,n=r.getVertexElementByUsage(a);if(n){var i=this._vertexBuffer.getUint8Data(),o=this._vertexBuffer.getFloat32Data(),s=r.vertexStride,l=s/4,h=n._offset,d=h/4;switch(a){case t.VertexMesh.MESH_TEXTURECOORDINATE0:case t.VertexMesh.MESH_TEXTURECOORDINATE1:for(var c=0;c<this._vertexCount;c++){var u=l*c+d;e[c]=new t.Vector2(o[u],o[u+1])}break;case t.VertexMesh.MESH_POSITION0:case t.VertexMesh.MESH_NORMAL0:for(c=0;c<this._vertexCount;c++){u=l*c+d;e[c]=new t.Vector3(o[u],o[u+1],o[u+2])}break;case t.VertexMesh.MESH_TANGENT0:case t.VertexMesh.MESH_BLENDWEIGHT0:for(c=0;c<this._vertexCount;c++){u=l*c+d;e[c]=new t.Vector4(o[u],o[u+1],o[u+2],o[u+3])}break;case t.VertexMesh.MESH_COLOR0:for(c=0;c<this._vertexCount;c++){u=l*c+d;e[c]=new t.Color(o[u],o[u+1],o[u+2],o[u+3])}break;case t.VertexMesh.MESH_BLENDINDICES0:for(c=0;c<this._vertexCount;c++){u=s*c+h;e[c]=new t.Vector4(i[u],i[u+1],i[u+2],i[u+3])}break;default:throw"Mesh:Unknown elementUsage."}}}_setVerticeElementData(e,a){var r=this._vertexBuffer.vertexDeclaration,n=r.getVertexElementByUsage(a);if(n){var i=this._vertexBuffer.getUint8Data(),o=this._vertexBuffer.getFloat32Data(),s=r.vertexStride,l=s/4,h=n._offset,d=h/4;switch(a){case t.VertexMesh.MESH_TEXTURECOORDINATE0:case t.VertexMesh.MESH_TEXTURECOORDINATE1:for(var c=0,u=e.length;c<u;c++){var _=l*c+d,m=e[c];o[_]=m.x,o[_+1]=m.y}break;case t.VertexMesh.MESH_POSITION0:case t.VertexMesh.MESH_NORMAL0:for(c=0,u=e.length;c<u;c++){_=l*c+d;var f=e[c];o[_]=f.x,o[_+1]=f.y,o[_+2]=f.z}break;case t.VertexMesh.MESH_TANGENT0:case t.VertexMesh.MESH_BLENDWEIGHT0:for(c=0,u=e.length;c<u;c++){_=l*c+d;var S=e[c];o[_]=S.x,o[_+1]=S.y,o[_+2]=S.z,o[_+3]=S.w}break;case t.VertexMesh.MESH_COLOR0:for(c=0,u=e.length;c<u;c++){_=l*c+d;var g=e[c];o[_]=g.r,o[_+1]=g.g,o[_+2]=g.b,o[_+3]=g.a}break;case t.VertexMesh.MESH_BLENDINDICES0:for(c=0,u=e.length;c<u;c++){_=s*c+h,S=e[c];i[_]=S.x,i[_+1]=S.y,i[_+2]=S.z,i[_+3]=S.w}break;default:throw"Mesh:Unknown elementUsage."}this._minVerticesUpdate=0,this._maxVerticesUpdate=Number.MAX_SAFE_INTEGER}else console.warn("Mesh: the mesh don't have  this VertexElement.")}_disposeResource(){for(var e=0,t=this._subMeshes.length;e<t;e++)this._subMeshes[e].destroy();this._vertexBuffer&&this._vertexBuffer.destroy(),this._indexBuffer&&this._indexBuffer.destroy(),this._bufferState.destroy(),this._instanceBufferState&&this._instanceBufferState.destroy(),this._instanceWorldVertexBuffer&&this._instanceWorldVertexBuffer.destroy(),this._instanceSimpleAniVertexBuffer&&this._instanceSimpleAniVertexBuffer.destroy(),this._instanceLightMapVertexBuffer&&this._instanceLightMapVertexBuffer.destroy(),this.instanceLightMapScaleOffsetData&&(this.instanceLightMapScaleOffsetData=null),this._setCPUMemory(0),this._setGPUMemory(0),this._bufferState=null,this._instanceBufferState=null,this._vertexBuffer=null,this._indexBuffer=null,this._subMeshes=null,this._btTriangleMesh=null,this._indexBuffer=null,this._boneNames=null,this._inverseBindPoses=null,this.morphTargetData&&this.morphTargetData.destroy(),this.__convexMesh&&this.__convexMesh.destroy()}_setSubMeshes(e){this._subMeshes=e;for(var t=0,a=e.length;t<a;t++)e[t]._indexInMesh=t}_setBuffer(e,t){this._bufferState.applyState([e],t)}_setInstanceBuffer(){if(this._instanceBufferState)return;var e=this._instanceBufferState=new t.BufferState,a=this._instanceBufferStateType;let r=[];r.push(this._vertexBuffer);let n=this._instanceWorldVertexBuffer=Laya3DRender.renderOBJCreate.createVertexBuffer3D(16*InstanceRenderElement.maxInstanceCount*4,t.BufferUsage.Dynamic,!1);switch(n.vertexDeclaration=t.VertexMesh.instanceWorldMatrixDeclaration,n.instanceBuffer=!0,r.push(n),a){case Mesh.MESH_INSTANCEBUFFER_TYPE_SIMPLEANIMATOR:let e=this._instanceSimpleAniVertexBuffer=Laya3DRender.renderOBJCreate.createVertexBuffer3D(4*InstanceRenderElement.maxInstanceCount*4,t.BufferUsage.Dynamic,!1);e.vertexDeclaration=t.VertexMesh.instanceSimpleAnimatorDeclaration,e.instanceBuffer=!0,r.push(e);break;case Mesh.MESH_INSTANCEBUFFER_TYPE_NORMAL:if(this.getVertexDeclaration().getVertexElementByUsage(t.VertexMesh.MESH_TEXTURECOORDINATE1)){let e=this._instanceLightMapVertexBuffer=Laya3DRender.renderOBJCreate.createVertexBuffer3D(4*InstanceRenderElement.maxInstanceCount*4,t.BufferUsage.Dynamic,!1);e.vertexDeclaration=t.VertexMesh.instanceLightMapScaleOffsetDeclaration,e.instanceBuffer=!0,this.instanceLightMapScaleOffsetData=new Float32Array(4*InstanceRenderElement.maxInstanceCount),r.push(e)}}e.applyState(r,this._indexBuffer)}_uploadVerticesData(){var e=this._minVerticesUpdate,t=this._maxVerticesUpdate;if(-1!==e&&-1!==t){var a=e;this._vertexBuffer.setData(this._vertexBuffer.getUint8Data().buffer,a,a,t-e),this._minVerticesUpdate=-1,this._maxVerticesUpdate=-1}}getSubMesh(e){return this._subMeshes[e]}getPositions(e){if(!this._isReadable)throw"Mesh:can't get positions on mesh,isReadable must be true.";this._getVerticeElementData(e,t.VertexMesh.MESH_POSITION0)}setPositions(e){if(!this._isReadable)throw"Mesh:setPosition() need isReadable must be true or use setVertices().";this._setVerticeElementData(e,t.VertexMesh.MESH_POSITION0),this._needUpdateBounds=!0}getColors(e){if(!this._isReadable)throw"Mesh:can't get colors on mesh,isReadable must be true.";this._getVerticeElementData(e,t.VertexMesh.MESH_COLOR0)}setColors(e){if(!this._isReadable)throw"Mesh:setColors() need isReadable must be true or use setVertices().";this._setVerticeElementData(e,t.VertexMesh.MESH_COLOR0)}getUVs(e,a=0){if(!this._isReadable)throw"Mesh:can't get uvs on mesh,isReadable must be true.";switch(a){case 0:this._getVerticeElementData(e,t.VertexMesh.MESH_TEXTURECOORDINATE0);break;case 1:this._getVerticeElementData(e,t.VertexMesh.MESH_TEXTURECOORDINATE1);break;default:throw"Mesh:Invalid channel."}}setUVs(e,a=0){if(!this._isReadable)throw"Mesh:setUVs() need isReadable must be true or use setVertices().";switch(a){case 0:this._setVerticeElementData(e,t.VertexMesh.MESH_TEXTURECOORDINATE0);break;case 1:this._setVerticeElementData(e,t.VertexMesh.MESH_TEXTURECOORDINATE1);break;default:throw"Mesh:Invalid channel."}}getNormals(e){if(!this._isReadable)throw"Mesh:can't get colors on mesh,isReadable must be true.";this._getVerticeElementData(e,t.VertexMesh.MESH_NORMAL0)}setNormals(e){if(!this._isReadable)throw"Mesh:setNormals() need must be true or use setVertices().";this._setVerticeElementData(e,t.VertexMesh.MESH_NORMAL0)}getTangents(e){if(!this._isReadable)throw"Mesh:can't get colors on mesh,isReadable must be true.";this._getVerticeElementData(e,t.VertexMesh.MESH_TANGENT0)}setTangents(e){if(!this._isReadable)throw"Mesh:setTangents() need isReadable must be true or use setVertices().";this._setVerticeElementData(e,t.VertexMesh.MESH_TANGENT0)}getBoneWeights(e){if(!this._isReadable)throw"Mesh:can't get boneWeights on mesh,isReadable must be true.";this._getVerticeElementData(e,t.VertexMesh.MESH_BLENDWEIGHT0)}setBoneWeights(e){if(!this._isReadable)throw"Mesh:setBoneWeights() need isReadable must be true or use setVertices().";this._setVerticeElementData(e,t.VertexMesh.MESH_BLENDWEIGHT0)}getBoneIndices(e){if(!this._isReadable)throw"Mesh:can't get boneIndices on mesh,isReadable must be true.";this._getVerticeElementData(e,t.VertexMesh.MESH_BLENDINDICES0)}setBoneIndices(e){if(!this._isReadable)throw"Mesh:setBoneIndices() need isReadable must be true or use setVertices().";this._setVerticeElementData(e,t.VertexMesh.MESH_BLENDINDICES0)}markAsUnreadbale(){this._uploadVerticesData(),this._vertexBuffer.markAsUnreadbale(),this._isReadable=!1}getVertexDeclaration(){return this._vertexBuffer.vertexDeclaration}getVertices(){if(this._isReadable)return this._vertexBuffer.getUint8Data().buffer.slice(0);throw"Mesh:can't get vertices on mesh,isReadable must be true."}setVertices(e){this._vertexBuffer.setData(e),this._needUpdateBounds=!0}getIndices(){if(this._isReadable)return this._indexBuffer.getData().slice();throw"Mesh:can't get indices on subMesh,mesh's isReadable must be true."}setIndices(e){var a;e instanceof Uint32Array?a=t.IndexFormat.UInt32:e instanceof Uint16Array?a=t.IndexFormat.UInt16:e instanceof Uint8Array&&(a=t.IndexFormat.UInt8);var r=this._indexBuffer;this._indexFormat===a&&r.indexCount===e.length||(r.destroy(),this._indexBuffer=r=Laya3DRender.renderOBJCreate.createIndexBuffer3D(a,e.length,t.BufferUsage.Static,this._isReadable)),r.setData(e),this.indexFormat=a}calculateBounds(){if(!this._isReadable)throw"Mesh:can't calculate bounds on subMesh,mesh's isReadable must be true.";if(this._needUpdateBounds){var e=this._tempVector30,t=this._tempVector31;e.x=e.y=e.z=Number.MAX_VALUE,t.x=t.y=t.z=-Number.MAX_VALUE;for(var a=this._vertexBuffer,r=this._getPositionElement(a),n=a.getFloat32Data(),i=a.vertexDeclaration.vertexStride/4,o=r._offset/4,s=0,l=n.length;s<l;s+=i){var h=s+o,d=n[h],c=n[h+1],u=n[h+2];e.x=Math.min(e.x,d),e.y=Math.min(e.y,c),e.z=Math.min(e.z,u),t.x=Math.max(t.x,d),t.y=Math.max(t.y,c),t.z=Math.max(t.z,u)}this._bounds.setMin(e),this._bounds.setMax(t),this._needUpdateBounds=!1}}getCorveMesh(){return null==this._convexMesh?null:(null==this.__convexMesh&&Laya3D._PhysicsCreateUtil&&Laya3D._PhysicsCreateUtil.getPhysicsCapable(e.EPhysicsCapable.Physics_CreateCorveMesh)&&(this.__convexMesh=Laya3D._PhysicsCreateUtil.createCorveMesh(this)),this.__convexMesh)}cloneTo(e){var a=e,r=this._vertexBuffer,n=Laya3DRender.renderOBJCreate.createVertexBuffer3D(r._byteLength,r.bufferUsage,r.canRead);n.vertexDeclaration=r.vertexDeclaration,n.setData(r.getUint8Data().slice().buffer),a._vertexBuffer=n,a._vertexCount=this._vertexCount;var i,o=this._indexBuffer,s=Laya3DRender.renderOBJCreate.createIndexBuffer3D(t.IndexFormat.UInt16,o.indexCount,o.bufferUsage,o.canRead);s.setData(o.getData().slice()),a._indexBuffer=s,a._setBuffer(a._vertexBuffer,s),a._instanceBufferStateType=this._instanceBufferStateType,a._setCPUMemory(this.cpuMemory),a._setGPUMemory(this.gpuMemory);var l=this._boneNames;if(l){var h=a._boneNames=[];for(i=0;i<l.length;i++)h[i]=l[i]}var d=this._inverseBindPoses;if(d){var c=a._inverseBindPoses=[];for(i=0;i<d.length;i++)c[i]=d[i]}if(this._inverseBindPosesBuffer){let e=this._inverseBindPosesBuffer.byteLength;a._inverseBindPosesBuffer=new ArrayBuffer(e),new Uint8Array(a._inverseBindPosesBuffer).set(new Uint8Array(this._inverseBindPosesBuffer))}var u=this._skinnedMatrixCaches.length;for(a._skinnedMatrixCaches.length=u,i=0;i<u;i++){var _=this._skinnedMatrixCaches[i];_&&(a._skinnedMatrixCaches[i]=new skinnedMatrixCache(_.subMeshIndex,_.batchIndex,_.batchBoneIndex))}for(i=0;i<this.subMeshCount;i++){var m=this._subMeshes[i],f=m._subIndexBufferStart,S=m._subIndexBufferCount,g=m._boneIndicesList,p=new SubMesh(a);p._subIndexBufferStart.length=f.length,p._subIndexBufferCount.length=S.length,p._boneIndicesList.length=g.length;for(var D=0;D<f.length;D++)p._subIndexBufferStart[D]=f[D];for(D=0;D<S.length;D++)p._subIndexBufferCount[D]=S[D];for(D=0;D<g.length;D++)p._boneIndicesList[D]=new Uint16Array(g[D]);p._indexBuffer=s,p._indexStart=m._indexStart,p._indexCount=m._indexCount,p._indices=new Uint16Array(s.getData().buffer,2*m._indexStart,m._indexCount);var T=a._vertexBuffer;p._vertexBuffer=T,a._subMeshes.push(p)}a._setSubMeshes(a._subMeshes),this.morphTargetData&&(a.morphTargetData=this.morphTargetData.clone())}clone(){var e=new Mesh;return this.cloneTo(e),e}}Mesh.MESH_INSTANCEBUFFER_TYPE_NORMAL=0,Mesh.MESH_INSTANCEBUFFER_TYPE_SIMPLEANIMATOR=1;class PrimitiveMesh{static __init__(){}static _createMesh(e,a,r){var n=new Mesh,i=new SubMesh(n),o=Laya3DRender.renderOBJCreate.createVertexBuffer3D(4*a.length,t.BufferUsage.Static,!0);o.vertexDeclaration=e,o.setData(a.buffer),n._vertexBuffer=o,n._vertexCount=o._byteLength/e.vertexStride;var s=Laya3DRender.renderOBJCreate.createIndexBuffer3D(t.IndexFormat.UInt16,r.length,t.BufferUsage.Static,!0);s.setData(r),n._indexBuffer=s,n._setBuffer(o,s),i._vertexBuffer=o,i._indexBuffer=s,i._setIndexRange(0,s.indexCount);var l=i._subIndexBufferStart,h=i._subIndexBufferCount,d=i._boneIndicesList;l.length=1,h.length=1,d.length=1,l[0]=0,h[0]=s.indexCount;var c=[];c.push(i),n._setSubMeshes(c),n.calculateBounds();var u=o._byteLength+s._byteLength;return n._setCPUMemory(u),n._setGPUMemory(u),n}static createBox(e=1,a=1,r=1){var n=t.VertexMesh.getVertexDeclaration("POSITION,NORMAL,UV"),i=e/2,o=a/2,s=r/2,l=new Float32Array([-i,o,-s,0,1,0,0,0,i,o,-s,0,1,0,1,0,i,o,s,0,1,0,1,1,-i,o,s,0,1,0,0,1,-i,-o,-s,0,-1,0,0,1,i,-o,-s,0,-1,0,1,1,i,-o,s,0,-1,0,1,0,-i,-o,s,0,-1,0,0,0,-i,o,-s,-1,0,0,0,0,-i,o,s,-1,0,0,1,0,-i,-o,s,-1,0,0,1,1,-i,-o,-s,-1,0,0,0,1,i,o,-s,1,0,0,1,0,i,o,s,1,0,0,0,0,i,-o,s,1,0,0,0,1,i,-o,-s,1,0,0,1,1,-i,o,s,0,0,1,0,0,i,o,s,0,0,1,1,0,i,-o,s,0,0,1,1,1,-i,-o,s,0,0,1,0,1,-i,o,-s,0,0,-1,1,0,i,o,-s,0,0,-1,0,0,i,-o,-s,0,0,-1,0,1,-i,-o,-s,0,0,-1,1,1]),h=new Uint16Array([0,1,2,2,3,0,4,7,6,6,5,4,8,9,10,10,11,8,12,15,14,14,13,12,16,17,18,18,19,16,20,23,22,22,21,20]);return PrimitiveMesh._createMesh(n,l,h)}static createCapsule(e=.5,a=2,r=16,n=32){var i,o,s=(r+1)*(n+1)*2+2*(n+1),l=3*r*(n+1)*2*2+2*n*3,h=t.VertexMesh.getVertexDeclaration("POSITION,NORMAL,UV"),d=h.vertexStride/4,c=new Float32Array(s*d),u=new Uint16Array(l),_=Math.PI/2/r,m=2*Math.PI/n,f=a/2-e,S=0,g=0,p=0,D=0,T=0,E=0;for(i=0;i<=r;i++)for(o=0;o<=n;o++)S=e*Math.cos(i*_)*Math.cos(o*m+Math.PI),g=e*Math.sin(i*_),p=e*Math.cos(i*_)*Math.sin(o*m+Math.PI),c[D++]=S,c[D++]=g+f,c[D++]=p,c[D++]=S,c[D++]=g,c[D++]=p,c[D++]=1-o/n,c[D++]=(1-i/r)*(Math.PI*e/2/(a+Math.PI*e)),i<r&&(u[T++]=i*(n+1)+o+(n+1),u[T++]=i*(n+1)+o,u[T++]=i*(n+1)+o+1,u[T++]=i*(n+1)+o+n,u[T++]=i*(n+1)+o,u[T++]=i*(n+1)+o+(n+1));for(E+=(r+1)*(n+1),i=0;i<=r;i++)for(o=0;o<=n;o++)S=e*Math.cos(i*_)*Math.cos(o*m+Math.PI),g=e*Math.sin(-i*_),p=e*Math.cos(i*_)*Math.sin(o*m+Math.PI),c[D++]=S,c[D++]=g-f,c[D++]=p,c[D++]=S,c[D++]=g,c[D++]=p,c[D++]=1-o/n,c[D++]=(i/r*(Math.PI*e/2)+(a+Math.PI*e/2))/(a+Math.PI*e),i<r&&(u[T++]=E+i*(n+1)+o,u[T++]=E+i*(n+1)+o+(n+1),u[T++]=E+i*(n+1)+o+1,u[T++]=E+i*(n+1)+o,u[T++]=E+i*(n+1)+o+n,u[T++]=E+i*(n+1)+o+(n+1));for(E+=(r+1)*(n+1),o=0;o<=n;o++)S=e*Math.cos(o*m+Math.PI),g=f,p=e*Math.sin(o*m+Math.PI),c[D++]=S,c[D+8*(n+1)-1]=S,c[D++]=g,c[D+8*(n+1)-1]=-g,c[D++]=p,c[D+8*(n+1)-1]=p,c[D++]=S,c[D+8*(n+1)-1]=S,c[D++]=0,c[D+8*(n+1)-1]=0,c[D++]=p,c[D+8*(n+1)-1]=p,c[D++]=1-1*o/n,c[D+8*(n+1)-1]=1-1*o/n,c[D++]=Math.PI*e/2/(a+Math.PI*e),c[D+8*(n+1)-1]=(Math.PI*e/2+a)/(a+Math.PI*e);for(o=0;o<n;o++)u[T++]=o+E+(n+1),u[T++]=o+E+1,u[T++]=o+E,u[T++]=o+E+(n+1),u[T++]=o+E+(n+1)+1,u[T++]=o+E+1;return E+=2*(n+1),PrimitiveMesh._createMesh(h,c,u)}static createCone(e=.5,a=1,r=32){for(var n,i=r+1+1+2*(r+1),o=6*r+3*r,s=t.VertexMesh.getVertexDeclaration("POSITION,NORMAL,UV"),l=s.vertexStride/4,h=new Float32Array(i*l),d=new Uint16Array(o),c=2*Math.PI/r,u=a/2,_=0,m=0,f=0,S=0,g=0,p=new t.Vector3,D=new t.Vector3(0,-1,0),T=new t.Vector3(0,u,0),E=new t.Vector3,x=new t.Vector3,M=new t.Quaternion,R=new t.Vector3,A=0,C=0,y=0;y<=r;y++)_=y*c,f=Math.cos(_+Math.PI)*e,S=u,g=Math.sin(_+Math.PI)*e,h[A++]=0,h[A+8*(r+1)-1]=f,h[A++]=S,h[A+8*(r+1)-1]=-S,h[A++]=0,h[A+8*(r+1)-1]=g,p.x=f,p.y=0,p.z=g,E.x=f,E.y=-S,E.z=g,t.Vector3.subtract(E,T,x),t.Vector3.normalize(x,x),n=Math.acos(t.Vector3.dot(D,x)),t.Vector3.cross(D,x,R),t.Vector3.normalize(R,R),t.Quaternion.createFromAxisAngle(R,n,M),t.Vector3.normalize(p,p),t.Vector3.transformQuat(p,M,p),t.Vector3.normalize(p,p),h[A++]=p.x,h[A+8*(r+1)-1]=p.x,h[A++]=p.y,h[A+8*(r+1)-1]=p.y,h[A++]=p.z,h[A+8*(r+1)-1]=p.z,h[A++]=1-1*y/r,h[A+8*(r+1)-1]=1-1*y/r,h[A++]=0,h[A+8*(r+1)-1]=1;A+=8*(r+1);for(var v=0;v<r;v++)d[C++]=v+m+(r+1),d[C++]=v+m+1,d[C++]=v+m,d[C++]=v+m+(r+1),d[C++]=v+m+(r+1)+1,d[C++]=v+m+1;m+=2*(r+1);for(var I=0;I<=r;I++)0===I&&(h[A++]=0,h[A++]=-u,h[A++]=0,h[A++]=0,h[A++]=-1,h[A++]=0,h[A++]=.5,h[A++]=.5),_=I*c,f=Math.cos(_+Math.PI)*e,S=-u,g=Math.sin(_+Math.PI)*e,h[A++]=f,h[A++]=S,h[A++]=g,h[A++]=0,h[A++]=-1,h[A++]=0,h[A++]=.5+.5*Math.cos(_),h[A++]=.5+.5*Math.sin(_);for(var L=0;L<r;L++)d[C++]=0+m,d[C++]=L+2+m,d[C++]=L+1+m;return m+=r+1+1,PrimitiveMesh._createMesh(s,h,d)}static createCylinder(e=.5,a=2,r=32){for(var n=r+1+1+2*(r+1)+(r+1+1),i=3*r+6*r+3*r,o=t.VertexMesh.getVertexDeclaration("POSITION,NORMAL,UV"),s=o.vertexStride/4,l=new Float32Array(n*s),h=new Uint16Array(i),d=2*Math.PI/r,c=a/2,u=0,_=0,m=0,f=0,S=0,g=0,p=0,D=0;D<=r;D++)0===D&&(l[g++]=0,l[g++]=c,l[g++]=0,l[g++]=0,l[g++]=1,l[g++]=0,l[g++]=.5,l[g++]=.5),u=D*d,m=Math.cos(u)*e,f=c,S=Math.sin(u)*e,l[g++]=m,l[g++]=f,l[g++]=S,l[g++]=0,l[g++]=1,l[g++]=0,l[g++]=.5+.5*Math.cos(u),l[g++]=.5+.5*Math.sin(u);for(var T=0;T<r;T++)h[p++]=0,h[p++]=T+1,h[p++]=T+2;_+=r+1+1;for(var E=0;E<=r;E++)u=E*d,m=Math.cos(u+Math.PI)*e,f=c,S=Math.sin(u+Math.PI)*e,l[g++]=m,l[g+8*(r+1)-1]=m,l[g++]=f,l[g+8*(r+1)-1]=-f,l[g++]=S,l[g+8*(r+1)-1]=S,l[g++]=m,l[g+8*(r+1)-1]=m,l[g++]=0,l[g+8*(r+1)-1]=0,l[g++]=S,l[g+8*(r+1)-1]=S,l[g++]=1-1*E/r,l[g+8*(r+1)-1]=1-1*E/r,l[g++]=0,l[g+8*(r+1)-1]=1;g+=8*(r+1);for(var x=0;x<r;x++)h[p++]=x+_+(r+1),h[p++]=x+_+1,h[p++]=x+_,h[p++]=x+_+(r+1),h[p++]=x+_+(r+1)+1,h[p++]=x+_+1;_+=2*(r+1);for(var M=0;M<=r;M++)0===M&&(l[g++]=0,l[g++]=-c,l[g++]=0,l[g++]=0,l[g++]=-1,l[g++]=0,l[g++]=.5,l[g++]=.5),u=M*d,m=Math.cos(u+Math.PI)*e,f=-c,S=Math.sin(u+Math.PI)*e,l[g++]=m,l[g++]=f,l[g++]=S,l[g++]=0,l[g++]=-1,l[g++]=0,l[g++]=.5+.5*Math.cos(u),l[g++]=.5+.5*Math.sin(u);for(var R=0;R<r;R++)h[p++]=0+_,h[p++]=R+2+_,h[p++]=R+1+_;return _+=r+1+1,PrimitiveMesh._createMesh(o,l,h)}static createPlane(e=10,a=10,r=10,n=10){for(var i=(r+1)*(n+1),o=new Uint16Array(r*n*2*3),s=t.VertexMesh.getVertexDeclaration("POSITION,NORMAL,UV"),l=s.vertexStride/4,h=new Float32Array(i*l),d=e/2,c=a/2,u=e/r,_=a/n,m=0,f=0;f<=n;f++)for(var S=0;S<=r;S++)h[m++]=S*u-d,h[m++]=0,h[m++]=f*_-c,h[m++]=0,h[m++]=1,h[m++]=0,h[m++]=1*S/r,h[m++]=1*f/n;var g=0;for(f=0;f<n;f++)for(S=0;S<r;S++)o[g++]=(f+1)*(r+1)+S,o[g++]=f*(r+1)+S,o[g++]=(f+1)*(r+1)+S+1,o[g++]=f*(r+1)+S,o[g++]=f*(r+1)+S+1,o[g++]=(f+1)*(r+1)+S+1;return PrimitiveMesh._createMesh(s,h,o)}static createQuad(e=1,a=1){var r=t.VertexMesh.getVertexDeclaration("POSITION,NORMAL,UV"),n=e/2,i=a/2,o=new Float32Array([-n,i,0,0,0,1,0,0,n,i,0,0,0,1,1,0,-n,-i,0,0,0,1,0,1,n,-i,0,0,0,1,1,1]),s=new Uint16Array([0,1,2,3,2,1]);return PrimitiveMesh._createMesh(r,o,s)}static createSphere(e=.5,a=32,r=32){var n=(a+1)*(r+1),i=3*a*(r+1)*2,o=new Uint16Array(i),s=t.VertexMesh.getVertexDeclaration("POSITION,NORMAL,UV"),l=s.vertexStride/4,h=new Float32Array(n*l),d=Math.PI/a,c=2*Math.PI/r,u=0;n=0,i=0;for(var _=0;_<a+1;_++)for(var m=Math.sin(_*d),f=Math.cos(_*d),S=0;S<r+1;S++){var g=m*Math.sin(S*c+1*Math.PI/2),p=m*Math.cos(S*c+1*Math.PI/2);h[n+0]=g*e,h[n+1]=f*e,h[n+2]=p*e,h[n+3]=g,h[n+4]=f,h[n+5]=p,h[n+6]=S/r,h[n+7]=_/a,n+=l,_!=a-1&&(o[i++]=u+(r+1),o[i++]=u,o[i++]=u+1,o[i++]=u+r,o[i++]=u,o[i++]=u+(r+1),u++)}return PrimitiveMesh._createMesh(s,h,o)}}var v='#define SHADER_NAME BlitFS\n\n#include "Color.glsl";\n#include "FastApproximateAntiAliasing.glsl";\n\nvarying vec2 v_Texcoord0;\n\nvoid main()\n{\n#ifdef FXAA\n    gl_FragColor = FXAAMain(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.zw);\n#else\n    vec4 mainColor = texture2D(u_MainTex, v_Texcoord0);\n    #ifdef Gamma_u_MainTex\n    mainColor = gammaToLinear(mainColor);\n    #endif // Gamma_u_AlbedoTexture\n    gl_FragColor = mainColor;\n#endif\n\n    gl_FragColor = outputTransform(gl_FragColor);\n}\n';class BlitScreenShaderInit{static init(){t.Shader3D.addInclude("FastApproximateAntiAliasing.glsl","#if !defined(FXAA_lib)\n    #define FXAA_lib\n#ifdef FXAA\n    #define EDGE_THRESHOLD_MIN 0.0312\n    #define EDGE_THRESHOLD_MAX 0.125\n    #define QUALITY(q)\t       ((q) < 5 ? 1.0 : ((q) > 5 ? ((q) < 10 ? 2.0 : ((q) < 11 ? 4.0 : 8.0)) : 1.5))\n    #define ITERATIONS\t       12\n    #define SUBPIXEL_QUALITY   0.75\n\nfloat rgb2luma(in vec3 rgb)\n{\n    return dot(rgb, vec3(0.299, 0.587, 0.114));\n}\n\nvec3 textureOffsetbyScreenSize(in sampler2D mainTex, in vec2 uv, in vec2 offset, in vec2 inverseScreenSize)\n{\n    vec2 sampleruv = uv + inverseScreenSize * offset; // u_texturesize表示每个像素的偏移量\n    return texture2D(mainTex, sampleruv).rgb;\n}\n\nvec4 FXAAMain(in sampler2D mainTex, in vec2 texuv, in vec2 inverseScreenSize)\n{\n\n    vec4 mainColor = texture2D(mainTex, texuv);\n    vec3 colorCenter = mainColor.rgb;\n    // Luma at the current fragment\n    float lumaCenter = rgb2luma(colorCenter);\n\n    // Luma at the four direct neighbours of the current fragment.\n    float lumaDown = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(0, -1), inverseScreenSize));\n    float lumaUp = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(0, 1), inverseScreenSize));\n    float lumaLeft = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(-1, 0), inverseScreenSize));\n    float lumaRight = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(1, 0), inverseScreenSize));\n\n    // Find the maximum and minimum luma around the current fragment.\n    float lumaMin = min(lumaCenter, min(min(lumaDown, lumaUp), min(lumaLeft, lumaRight)));\n    float lumaMax = max(lumaCenter, max(max(lumaDown, lumaUp), max(lumaLeft, lumaRight)));\n\n    // Compute the delta.\n    float lumaRange = lumaMax - lumaMin;\n\n    // If the luma variation is lower that a threshold (or if we are in a really dark area), we are not on an edge, don't perform any AA.\n    if (lumaRange < max(EDGE_THRESHOLD_MIN, lumaMax * EDGE_THRESHOLD_MAX))\n\t{\n\t    return mainColor;\n\t}\n\n    // Query the 4 remaining corners lumas.\n    float lumaDownLeft = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(-1, -1), inverseScreenSize));\n    float lumaUpRight = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(1, 1), inverseScreenSize));\n    float lumaUpLeft = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(-1, 1), inverseScreenSize));\n    float lumaDownRight = rgb2luma(textureOffsetbyScreenSize(mainTex, texuv, vec2(1, -1), inverseScreenSize));\n\n    // Combine the four edges lumas (using intermediary variables for future computations with the same values).\n    float lumaDownUp = lumaDown + lumaUp;\n    float lumaLeftRight = lumaLeft + lumaRight;\n\n    // Same for corners\n    float lumaLeftCorners = lumaDownLeft + lumaUpLeft;\n    float lumaDownCorners = lumaDownLeft + lumaDownRight;\n    float lumaRightCorners = lumaDownRight + lumaUpRight;\n    float lumaUpCorners = lumaUpRight + lumaUpLeft;\n\n    // Compute an estimation of the gradient along the horizontal and vertical axis.\n    float edgeHorizontal = abs(-2.0 * lumaLeft + lumaLeftCorners) + abs(-2.0 * lumaCenter + lumaDownUp) * 2.0 + abs(-2.0 * lumaRight + lumaRightCorners);\n    float edgeVertical = abs(-2.0 * lumaUp + lumaUpCorners) + abs(-2.0 * lumaCenter + lumaLeftRight) * 2.0 + abs(-2.0 * lumaDown + lumaDownCorners);\n\n    // Is the local edge horizontal or vertical ?\n    bool isHorizontal = (edgeHorizontal >= edgeVertical);\n\n    // Choose the step size (one pixel) accordingly.\n    float stepLength = isHorizontal ? inverseScreenSize.y : inverseScreenSize.x;\n\n    // Select the two neighboring texels lumas in the opposite direction to the local edge.\n    float luma1 = isHorizontal ? lumaDown : lumaLeft;\n    float luma2 = isHorizontal ? lumaUp : lumaRight;\n    // Compute gradients in this direction.\n    float gradient1 = luma1 - lumaCenter;\n    float gradient2 = luma2 - lumaCenter;\n\n    // Which direction is the steepest ?\n    bool is1Steepest = abs(gradient1) >= abs(gradient2);\n\n    // Gradient in the corresponding direction, normalized.\n    float gradientScaled = 0.25 * max(abs(gradient1), abs(gradient2));\n\n    // Average luma in the correct direction.\n    float lumaLocalAverage = 0.0;\n    if (is1Steepest)\n\t{\n\t    // Switch the direction\n\t    stepLength = -stepLength;\n\t    lumaLocalAverage = 0.5 * (luma1 + lumaCenter);\n\t}\n    else\n\t{\n\t    lumaLocalAverage = 0.5 * (luma2 + lumaCenter);\n\t}\n\n    // Shift UV in the correct direction by half a pixel.\n    vec2 currentUv = texuv;\n    if (isHorizontal)\n\t{\n\t    currentUv.y += stepLength * 0.5;\n\t}\n    else\n\t{\n\t    currentUv.x += stepLength * 0.5;\n\t}\n\n    // Compute offset (for each iteration step) in the right direction.\n    vec2 offset = isHorizontal ? vec2(inverseScreenSize.x, 0.0) : vec2(0.0, inverseScreenSize.y);\n    // Compute UVs to explore on each side of the edge, orthogonally. The QUALITY allows us to step faster.\n    vec2 uv1 = currentUv - offset * QUALITY(0);\n    vec2 uv2 = currentUv + offset * QUALITY(0);\n\n    // Read the lumas at both current extremities of the exploration segment, and compute the delta wrt to the local average luma.\n    float lumaEnd1 = rgb2luma(textureOffsetbyScreenSize(mainTex, uv1, vec2(0.0, 0.0), inverseScreenSize));\n    float lumaEnd2 = rgb2luma(textureOffsetbyScreenSize(mainTex, uv2, vec2(0.0, 0.0), inverseScreenSize));\n    lumaEnd1 -= lumaLocalAverage;\n    lumaEnd2 -= lumaLocalAverage;\n\n    // If the luma deltas at the current extremities is larger than the local gradient, we have reached the side of the edge.\n    bool reached1 = abs(lumaEnd1) >= gradientScaled;\n    bool reached2 = abs(lumaEnd2) >= gradientScaled;\n    bool reachedBoth = reached1 && reached2;\n\n    // If the side is not reached, we continue to explore in this direction.\n    if (!reached1)\n\t{\n\t    uv1 -= offset * QUALITY(1);\n\t}\n    if (!reached2)\n\t{\n\t    uv2 += offset * QUALITY(1);\n\t}\n\n    // If both sides have not been reached, continue to explore.\n    if (!reachedBoth)\n\t{\n\n\t    for (int i = 2; i < ITERATIONS; i++)\n\t\t{\n\t\t    // If needed, read luma in 1st direction, compute delta.\n\t\t    if (!reached1)\n\t\t\t{\n\t\t\t    lumaEnd1 = rgb2luma(textureOffsetbyScreenSize(mainTex, uv1, vec2(0.0, 0.0), inverseScreenSize));\n\t\t\t    lumaEnd1 = lumaEnd1 - lumaLocalAverage;\n\t\t\t}\n\t\t    // If needed, read luma in opposite direction, compute delta.\n\t\t    if (!reached2)\n\t\t\t{\n\t\t\t    lumaEnd2 = rgb2luma(textureOffsetbyScreenSize(mainTex, uv2, vec2(0.0, 0.0), inverseScreenSize));\n\t\t\t    lumaEnd2 = lumaEnd2 - lumaLocalAverage;\n\t\t\t}\n\t\t    // If the luma deltas at the current extremities is larger than the local gradient, we have reached the side of the edge.\n\t\t    reached1 = abs(lumaEnd1) >= gradientScaled;\n\t\t    reached2 = abs(lumaEnd2) >= gradientScaled;\n\t\t    reachedBoth = reached1 && reached2;\n\n\t\t    // If the side is not reached, we continue to explore in this direction, with a variable quality.\n\t\t    if (!reached1)\n\t\t\t{\n\t\t\t    uv1 -= offset * QUALITY(i);\n\t\t\t}\n\t\t    if (!reached2)\n\t\t\t{\n\t\t\t    uv2 += offset * QUALITY(i);\n\t\t\t}\n\n\t\t    // If both sides have been reached, stop the exploration.\n\t\t    if (reachedBoth)\n\t\t\t{\n\t\t\t    break;\n\t\t\t}\n\t\t}\n\t}\n\n    // Compute the distances to each side edge of the edge (!).\n    float distance1 = isHorizontal ? (texuv.x - uv1.x) : (texuv.y - uv1.y);\n    float distance2 = isHorizontal ? (uv2.x - texuv.x) : (uv2.y - texuv.y);\n\n    // In which direction is the side of the edge closer ?\n    bool isDirection1 = distance1 < distance2;\n    float distanceFinal = min(distance1, distance2);\n\n    // Thickness of the edge.\n    float edgeThickness = (distance1 + distance2);\n\n    // Is the luma at center smaller than the local average ?\n    bool isLumaCenterSmaller = lumaCenter < lumaLocalAverage;\n\n    // If the luma at center is smaller than at its neighbour, the delta luma at each end should be positive (same variation).\n    bool correctVariation1 = (lumaEnd1 < 0.0) != isLumaCenterSmaller;\n    bool correctVariation2 = (lumaEnd2 < 0.0) != isLumaCenterSmaller;\n\n    // Only keep the result in the direction of the closer side of the edge.\n    bool correctVariation = isDirection1 ? correctVariation1 : correctVariation2;\n\n    // UV offset: read in the direction of the closest side of the edge.\n    float pixelOffset = -distanceFinal / edgeThickness + 0.5;\n\n    // If the luma variation is incorrect, do not offset.\n    float finalOffset = correctVariation ? pixelOffset : 0.0;\n\n    // Sub-pixel shifting\n    // Full weighted average of the luma over the 3x3 neighborhood.\n    float lumaAverage = (1.0 / 12.0) * (2.0 * (lumaDownUp + lumaLeftRight) + lumaLeftCorners + lumaRightCorners);\n    // Ratio of the delta between the global average and the center luma, over the luma range in the 3x3 neighborhood.\n    float subPixelOffset1 = clamp(abs(lumaAverage - lumaCenter) / lumaRange, 0.0, 1.0);\n    float subPixelOffset2 = (-2.0 * subPixelOffset1 + 3.0) * subPixelOffset1 * subPixelOffset1;\n    // Compute a sub-pixel offset based on this delta.\n    float subPixelOffsetFinal = subPixelOffset2 * subPixelOffset2 * SUBPIXEL_QUALITY;\n\n    // Pick the biggest of the two offsets.\n    finalOffset = max(finalOffset, subPixelOffsetFinal);\n\n    // Compute the final UV coordinates.\n    vec2 finalUv = texuv;\n    if (isHorizontal)\n\t{\n\t    finalUv.y += finalOffset * stepLength;\n\t}\n    else\n\t{\n\t    finalUv.x += finalOffset * stepLength;\n\t}\n\n    // Read the color at the new UV coordinates, and use it.\n    return texture2D(mainTex, finalUv);\n}\n#endif//FXAA\n#endif // Color_lib\n"),t.Shader3D.addInclude("ColorGrading.glsl","#if !defined(ColorGrading_lib)\n    #define ColorGrading_lib\n\nconst float ACEScc_MAX = 1.4679964;\nconst float ACEScc_MIDGRAY = 0.4135884;\n\nconst float LogC_cut = 0.011361;\nconst float LogC_a = 5.555556;\nconst float LogC_b = 0.047996;\nconst float LogC_c = 0.244161;\nconst float LogC_d = 0.386036;\nconst float LogC_e = 5.301883;\nconst float LogC_f = 0.092819;\n\nfloat linearToLogC(float x)\n{\n    float o;\n    if (x > LogC_cut)\n\t{\n\t    o = LogC_c * log10(max(LogC_a * x + LogC_b, 0.0)) + LogC_d;\n\t}\n    else\n\t{\n\t    o = LogC_e * x + LogC_f;\n\t}\n    return o;\n}\n\nvec3 linearToLogC(vec3 x)\n{\n    vec3 logc;\n    logc.x = linearToLogC(x.x);\n    logc.y = linearToLogC(x.y);\n    logc.z = linearToLogC(x.z);\n    return logc;\n}\n\nfloat logCToLinear(float x)\n{\n    float o;\n    if (x > LogC_e * LogC_cut + LogC_f)\n\to = (pow(10.0, (x - LogC_d) / LogC_c) - LogC_b) / LogC_a;\n    else\n\to = (x - LogC_f) / LogC_e;\n    return o;\n}\n\nvec3 logCToLinear(vec3 x)\n{\n    vec3 linear;\n    linear.x = logCToLinear(x.x);\n    linear.y = logCToLinear(x.y);\n    linear.z = logCToLinear(x.z);\n    return linear;\n}\n\n// Hue, Saturation, Value\n// Ranges:\n//  Hue [0.0, 1.0]\n//  Sat [0.0, 1.0]\n//  Lum [0.0, HALF_MAX]\nvec3 RgbToHsv(vec3 c)\n{\n    const vec4 K = vec4(0.0, -1.0 / 3.0, 2.0 / 3.0, -1.0);\n    vec4 p = mix(vec4(c.bg, K.wz), vec4(c.gb, K.xy), step(c.b, c.g));\n    vec4 q = mix(vec4(p.xyw, c.r), vec4(c.r, p.yzx), step(p.x, c.r));\n    float d = q.x - min(q.w, q.y);\n    const float e = 1.0e-4;\n    return vec3(abs(q.z + (q.w - q.y) / (6.0 * d + e)), d / (q.x + e), q.x);\n}\n\nvec3 HsvToRgb(vec3 c)\n{\n    const vec4 K = vec4(1.0, 2.0 / 3.0, 1.0 / 3.0, 3.0);\n    vec3 p = abs(fract(vec3(c.x) + K.xyz) * 6.0 - K.www);\n    return c.z * mix(vec3(K.x) , saturate(p - vec3(K.x)), c.y);\n}\n\nfloat RotateHue(float value, float low, float hi)\n{\n    return (value < low)\n            ? value + hi\n            : (value > hi)\n                ? value - hi\n                : value;\n}\n\n\nconst mat3 Linear_to_LMS_MAT = mat3(\n    vec3(3.90405e-1, 7.08416e-2, 2.31082e-2),\n    vec3(5.49941e-1, 9.63172e-1, 1.28021e-1),\n    vec3(8.92632e-3, 1.35775e-3, 9.36245e-1));\n\nconst mat3 LMS_to_Linear_MAT = mat3(\n    vec3(2.85847e+0, -2.10182e-1, -4.18120e-2),\n    vec3(-1.62879e+0, 1.15820e+0, -1.18169e-1),\n    vec3(-2.48910e-2, 3.24281e-4, 1.06867e+0));\n\n// white balance\nuniform vec3 u_ColorBalance;\n\n// split toning\nuniform vec4 u_SplitShadows;\nuniform vec3 u_Splithighlights;\n\n// shadows, midtones, highlights\nuniform vec3 u_Shadows;\nuniform vec3 u_Midtones;\nuniform vec3 u_Highlights;\nuniform vec4 u_Limits;\n\n// lift, gamma, gain\nuniform vec3 u_Lift;\nuniform vec3 u_Gamma;\nuniform vec3 u_Gain;\n\n//color adjusted\nuniform vec4 u_ColorFilter;\nuniform vec4 u_HueSatCon;\n\nfloat luminance(in vec3 color)\n{\n    #ifdef ACES\n    float luma = dot(color, AP1_RGB2Y);\n    #else\n    float luma = dot(color, vec3(0.2126729, 0.7151522, 0.0721750));\n    #endif // ACES\n    return luma;\n}\n\nvec3 softlight(vec3 base, vec3 blend)\n{\n    vec3 r1 = 2.0 * base * blend + base * base * (1.0 - 2.0 * blend);\n    vec3 r2 = sqrt(base) * (2.0 * blend - 1.0) + 2.0 * base * (1.0 - blend);\n    vec3 t = step(0.5, blend);\n    return r2 * t + (1.0 - t) * r1;\n}\n\n// input linear sRGB\n// if ACES tonemap, calculate in ACEScg, return ACEScg\n// else calculate in logC, return linear sRGB\nvec3 colorGrade(in vec3 color)\n{\n    // White balance in LMS space\n    vec3 colorLMS = Linear_to_LMS_MAT * color;\n    colorLMS *= u_ColorBalance.xyz;\n    color = LMS_to_Linear_MAT * colorLMS;\n\n    // Do contrast in log after white balance\n    #ifdef ACES\n        vec3 colorLog = ACES_to_ACEScc(sRGB_to_AP0_MAT * color);\n    #else\n        vec3 colorLog = linearToLogC(color);\n    #endif\n    \n    colorLog = (colorLog - vec3(ACEScc_MIDGRAY)) * u_HueSatCon.z + vec3(ACEScc_MIDGRAY);\n\n\n    #ifdef ACES\n        //colorLinear = ACES_to_ACEScg(ACEScc_to_ACES(colorLog));\n        color = AP0_to_AP1_MAT * ACEScc_to_ACES(colorLog);\n    #else\n        color = logCToLinear(colorLog);\n    #endif // ACES\n\n    // Color filter is just an unclipped multiplier\n    color = color * u_ColorFilter.rgb;\n\n    color = max(vec3(0.0), color);\n\n    // split toning\n    float balance = u_SplitShadows.w;\n    vec3 gamma = linearToGamma(color);\n    float splitLuma = saturate(luminance(color)) + balance;\n    vec3 splitShadows = mix(vec3(0.5, 0.5, 0.5), u_SplitShadows.xyz, 1.0 - splitLuma);\n    vec3 splitHeighlights = mix(vec3(0.5, 0.5, 0.5), u_Splithighlights.xyz, splitLuma);\n    gamma = softlight(gamma, splitShadows);\n    gamma = softlight(gamma, splitHeighlights);\n    color = gammaToLinear(gamma);\n\n    // shadows, midtones, highlights\n    float luma = luminance(color);\n    float shadowFactor = 1.0 - smoothstep(u_Limits.x, u_Limits.y, luma);\n    float highlightsFactor = smoothstep(u_Limits.z, u_Limits.w, luma);\n    float midtonesFactor = 1.0 - shadowFactor - highlightsFactor;\n    color = color * u_Shadows.xyz * shadowFactor + color * u_Midtones.xyz * midtonesFactor + color * u_Highlights.xyz * highlightsFactor;\n\n    // Lift, gamma, gain\n    color = color * u_Gain.xyz + u_Lift.xyz;\n    color = sign(color) * pow(abs(color), u_Gamma.xyz);\n    \n    // HSV operations\n    vec3 hsv = RgbToHsv(color);\n    // Hue Shift & Hue Vs Hue\n    float hue = hsv.x + u_HueSatCon.x;\n    hsv.x = RotateHue(hsv.x, 0.0, 1.0);\n    color = HsvToRgb(hsv);\n\n    // Global saturation\n    luma = luminance(color);\n    color = vec3(luma) + (vec3(u_HueSatCon.y)) * (color - vec3(luma));\n    \n    return color;\n}\n\n#endif // ColorGrading_lib"),t.Shader3D.addInclude("Tonemapping.glsl","#if !defined(Tonemapping_lib)\n    #define Tonemapping_lib\n\n// ACES Tonemapping color grading in ACEScg space\nvec3 tonemap(in vec3 ap1)\n{\n    vec3 color = ap1;\n\n    #ifdef ACES\n    vec3 aces = AP1_to_AP0_MAT * color;\n    vec3 oces = RRT(aces);\n    color = ODT_sRGB_100nits(oces);\n    #endif // ACES\n\n    // todo other tonemap\n\n    return color;\n}\n\n#endif // Tonemapping_lib"),t.Shader3D.addInclude("LUT.glsl","#if !defined(LUT_lib)\n    #define LUT_lib\n\n// scaleOffset = (1 / lut_width, 1 / lut_height, lut_height - 1)\nvec3 applyLut(sampler2D lut, vec3 uvw, vec3 scaleOffset)\n{\n    uvw.z *= scaleOffset.z;\n\n    float shift = floor(uvw.z);\n    uvw.xy = uvw.xy * scaleOffset.z * scaleOffset.xy + scaleOffset.xy * 0.5;\n    uvw.x += shift * scaleOffset.y;\n\n    uvw.xyz = mix(\n\ttexture2DLodEXT(lut, uvw.xy, 0.0).rgb,\n\ttexture2DLodEXT(lut, uvw.xy + vec2(scaleOffset.y, 0.0), 0.0).rgb,\n\tuvw.z - shift);\n    return uvw;\n}\n\n#endif // LUT_lib");let a={a_PositionTexcoord:[t.VertexMesh.MESH_POSITION0,e.ShaderDataType.Vector4]},r={u_OffsetScale:e.ShaderDataType.Vector4,u_MainTex:e.ShaderDataType.Texture2D,u_MainTex_TexelSize:e.ShaderDataType.Vector4},n=t.Shader3D.add("BlitScreen");n.shaderType=t.ShaderFeatureType.PostProcess;let i=new t.SubShader(a,r);n.addSubShader(i);let o=i.addShaderPass(M,v);o.statefirst=!0;let s=o.renderState;s.depthTest=RenderState.DEPTHTEST_ALWAYS,s.depthWrite=!1,s.cull=RenderState.CULL_NONE,s.blend=RenderState.BLEND_DISABLE;let l=t.Shader3D.add("BlitScreen_Transparnet");n.shaderType=t.ShaderFeatureType.PostProcess;let h=new t.SubShader(a,r);l.addSubShader(h);let d=h.addShaderPass(M,v);o.statefirst=!0,s=d.renderState,s.depthTest=RenderState.DEPTHTEST_ALWAYS,s.depthWrite=!1,s.cull=RenderState.CULL_NONE,s.blend=RenderState.BLEND_ENABLE_ALL,s.srcBlend=RenderState.BLENDPARAM_SRC_ALPHA,s.dstBlend=RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA,this.lutBuilderInit()}static lutBuilderInit(){let a={a_PositionTexcoord:[t.VertexMesh.MESH_POSITION0,e.ShaderDataType.Vector4]},r={u_OffsetScale:e.ShaderDataType.Vector4,u_MainTex:e.ShaderDataType.Texture2D,u_MainTex_TexelSize:e.ShaderDataType.Vector4,u_LutParams:e.ShaderDataType.Vector4},n=t.Shader3D.add("LUTBuilder");n.shaderType=t.ShaderFeatureType.PostProcess;let i=new t.SubShader(a,r);n.addSubShader(i);let o=i.addShaderPass(M,'#define SHADER_NAME LutBuilder\n\n#include "Color.glsl";\n\n#ifdef ACES\n    #include "ACES.glsl";\n#endif // ACES\n\n#include "ColorGrading.glsl";\n\n#include "Tonemapping.glsl";\n\nvarying vec2 v_Texcoord0;\n\n// lut params: (lutHeight, 0.5 / lutWidth, 0.5 / lutHeight, lutHeidht / (lutHeight - 1))\nvec3 lutValue(vec2 uv, vec4 params)\n{\n    vec3 color;\n    uv -= params.yz;\n    color.r = fract(uv.x * params.x);\n    color.b = uv.x - color.r / params.x;\n    color.g = uv.y;\n    return color * params.w;\n}\n\n// internal lut logC space\nvoid main()\n{\n    vec2 uv = v_Texcoord0;\n    vec3 color = lutValue(uv, u_LutParams);\n    color = logCToLinear(color);\n    vec3 grade = colorGrade(color);\n    vec3 tone = tonemap(grade);\n\n    gl_FragColor = vec4(tone, 1.0);\n}');o.renderState.depthTest=RenderState.DEPTHTEST_ALWAYS,o.renderState.depthWrite=!1,o.renderState.cull=RenderState.CULL_NONE,o.renderState.blend=RenderState.BLEND_DISABLE,o.statefirst=!0}}var I='#define SHADER_NAME DepthVS\n\n#include "DepthVertex.glsl";\n\nvoid main()\n{\n    Vertex vertex;\n    getVertexParams(vertex);\n\n    mat4 worldMat = getWorldMatrix();\n    vec4 pos = (worldMat * vec4(vertex.positionOS, 1.0));\n    vec3 positionWS = pos.xyz / pos.w;\n\n    mat4 normalMat = transpose(inverse(worldMat));\n    vec3 normalWS = normalize((normalMat * vec4(vertex.normalOS, 0.0)).xyz);\n\n    vec4 positionCS = DepthPositionCS(positionWS, normalWS);\n    gl_Position = remapPositionZ(positionCS);\n}',L='#define SHADER_NAME DepthFS\n\n#include "DepthFrag.glsl";\n\nvoid main()\n{\n    gl_FragColor = getDepthColor();\n}';class UnlitShaderInit{static init(){let a={UnlitBlock:{u_AlbedoColor:e.ShaderDataType.Color,u_TilingOffset:e.ShaderDataType.Vector4},u_AlbedoTexture:e.ShaderDataType.Texture2D,u_AlphaTestValue:e.ShaderDataType.Float},r={u_AlbedoColor:t.Color.WHITE,u_TilingOffset:new t.Vector4(1,1,0,0),u_AlphaTestValue:.5},n=t.Shader3D.add("Unlit",!0,!1);n.shaderType=t.ShaderFeatureType.D3;let i=new t.SubShader(t.SubShader.DefaultAttributeMap,a,r);n.addSubShader(i),i.addShaderPass('\n#define SHADER_NAME UnlitVS\n\n#include "Math.glsl";\n\n#include "Scene.glsl";\n#include "SceneFogInput.glsl";\n\n#include "Camera.glsl";\n#include "Sprite3DVertex.glsl";\n\n#include "VertexCommon.glsl";\n\n#ifdef UV\nvarying vec2 v_Texcoord0;\n#endif // UV\n\n#ifdef COLOR\nvarying vec4 v_VertexColor;\n#endif // COLOR\n\nvoid main()\n{\n    Vertex vertex;\n    getVertexParams(vertex);\n\n#ifdef UV\n    v_Texcoord0 = transformUV(vertex.texCoord0, u_TilingOffset);\n#endif // UV\n\n#ifdef COLOR\n    v_VertexColor = vertex.vertexColor;\n#endif // COLOR\n\n    mat4 worldMat = getWorldMatrix();\n    vec4 pos = (worldMat * vec4(vertex.positionOS, 1.0));\n    vec3 positionWS = pos.xyz / pos.w;\n\n    gl_Position = getPositionCS(positionWS);\n\n    gl_Position = remapPositionZ(gl_Position);\n\n#ifdef FOG\n    FogHandle(gl_Position.z);\n#endif\n}\n','\n#define SHADER_NAME UNLITFS\n\n#include "Color.glsl";\n\n#include "Scene.glsl";\n#include "SceneFog.glsl";\n\n#include "Camera.glsl";\n#include "Sprite3DFrag.glsl";\n\n#ifdef UV\nvarying vec2 v_Texcoord0;\n#endif // UV\n\n#ifdef COLOR\nvarying vec4 v_VertexColor;\n#endif // COLOR\n\nvoid main()\n{\n    vec3 color = u_AlbedoColor.rgb;\n    float alpha = u_AlbedoColor.a;\n\n#ifdef COLOR\n    #ifdef ENABLEVERTEXCOLOR\n    vec4 vertexColor = v_VertexColor;\n    color *= vertexColor.rgb;\n    alpha *= vertexColor.a;\n    #endif // ENABLEVERTEXCOLOR\n#endif // COLOR\n\n#ifdef UV\n    vec2 uv = v_Texcoord0;\n\n    #ifdef ALBEDOTEXTURE\n    vec4 albedoSampler = texture2D(u_AlbedoTexture, uv);\n\n\t#ifdef Gamma_u_AlbedoTexture\n    albedoSampler = gammaToLinear(albedoSampler);\n\t#endif // Gamma_u_AlbedoTexture\n\n    color *= albedoSampler.rgb;\n    alpha *= albedoSampler.a;\n    #endif // ALBEDOTEXTURE\n#endif // UV\n\n#ifdef ALPHATEST\n    if (alpha < u_AlphaTestValue)\n\tdiscard;\n#endif // ALPHATEST\n\n#ifdef FOG\n    color = scenUnlitFog(color);\n#endif // FOG\n\n    gl_FragColor = vec4(color, alpha);\n    gl_FragColor = outputTransform(gl_FragColor);\n}'),i.addShaderPass(I,L,"ShadowCaster")}}class BlinnPhongShaderInit{static init(){t.Shader3D.addInclude("BlinnPhongCommon.glsl","#if !defined(BlinnPhongCommon_lib)\n    #define BlinnPhongCommon_lib\n\n// varying\nvarying vec3 v_PositionWS;\n// todo\nvarying vec3 v_NormalWS;\nvarying vec3 v_TangentWS;\nvarying vec3 v_BiNormalWS;\n\n    #ifdef UV\nvarying vec2 v_Texcoord0;\n    #endif // UV\n\n    #ifdef UV1\n\t#ifdef LIGHTMAP\nvarying vec2 v_Texcoord1;\n\t#endif // LIGHTMAP\n    #endif // UV1\n\n    #ifdef COLOR\nvarying vec4 v_VertexColor;\n    #endif // COLOR\n\n// 记录顶点信息, 用于由vs向fs传递数据\nstruct PixelParams {\n    vec3 positionWS;\n\n    vec3 normalWS;\n    vec3 tangentWS;\n    vec3 biNormalWS;\n    mat3 TBN;\n\n    #ifdef UV\n    vec2 uv0;\n    #endif // UV\n\n    #ifdef UV1\n\t#ifdef LIGHTMAP\n    vec2 uv1;\n\t#endif // LIGHTMAP\n    #endif // UV1\n\n    #ifdef COLOR\n    vec4 vertexColor;\n    #endif // COLOR\n};\n\n#endif // BlinnPhongCommon_lib"),t.Shader3D.addInclude("BlinnPhongVertex.glsl",'#if !defined(BlinnPhongVertex_lib)\n    #define BlinnPhongVertex_lib\n\n    #include "ShadingVertex.glsl";\n\nvoid initPixelParams(inout PixelParams params, in Vertex vertex)\n{\n    shadingPixelParams(params, vertex);\n    sharePixelParams(params);\n}\n\n#endif // BlinnPhongVertex_lib'),t.Shader3D.addInclude("BlinnPhongFrag.glsl",'#if !defined(BlinnPhongFrag_lib)\n    #define BlinnPhongFrag_lib\n\n    #include "BlinnPhongLighting.glsl";\n\n    #include "ShadingFrag.glsl";\n\nvoid getPixelInfo(inout PixelInfo info, const in PixelParams pixel, const in Surface surface)\n{\n    info.positionWS = pixel.positionWS;\n\n    info.vertexNormalWS = pixel.normalWS;\n\n    #ifdef TANGENT\n    info.normalWS = normalize(pixel.TBN * surface.normalTS);\n    #else // TANGENT\n    info.normalWS = pixel.normalWS;\n    #endif // TANGENT\n\n    info.viewDir = normalize(u_CameraPos - info.positionWS);\n\n    #ifdef LIGHTMAP\n\t#ifdef UV1\n    info.lightmapUV = pixel.uv1;\n\t#endif // UV1\n    #endif // LIGHTMAP\n}\n\nvec3 BlinnPhongLighting(const in Surface surface, const in PixelParams pixel)\n{\n    PixelInfo info;\n    getPixelInfo(info, pixel, surface);\n\n    vec3 positionWS = info.positionWS;\n    vec3 normalWS = info.normalWS;\n    vec3 v = info.viewDir;\n\n    vec3 lightColor = vec3(0.0, 0.0, 0.0);\n\n    #ifdef DIRECTIONLIGHT\n    for (int i = 0; i < CalculateLightCount; i++)\n\t{\n\t    if (i >= DirectionCount) break;\n\t    DirectionLight directionLight = getDirectionLight(i, positionWS);\n\t    // if (directionLight.lightMode == LightMode_Mix) //兼容WGSL\n\t\t// {\n\t\t//     continue;\n\t\t// }\n        if (directionLight.lightMode != LightMode_Mix) {\n\t        Light light = getLight(directionLight);\n\t        lightColor += BlinnPhongLighting(surface, light, info) * light.attenuation;\n        }\n\t}\n    #endif // DIRECTIONLIGHT\n\n    #if defined(POINTLIGHT) || defined(SPOTLIGHT)\n    ivec4 clusterInfo = getClusterInfo(u_View, u_Viewport, positionWS, gl_FragCoord, u_ProjectionParams);\n    #endif // POINTLIGHT || SPOTLIGHT\n\n    #ifdef POINTLIGHT\n    for (int i = 0; i < CalculateLightCount; i++)\n\t{\n        #ifdef BREAK_TEXTURE_SAMPLE\n\t    if (i >= clusterInfo.x) break; //兼容WGSL\n        #endif\n\t    PointLight pointLight = getPointLight(i, clusterInfo, positionWS);\n\t    // if (pointLight.lightMode == LightMode_Mix)\n\t\t// {\n\t\t//     continue;\n\t\t// }\n        if (pointLight.lightMode != LightMode_Mix) {\n\t        Light light = getLight(pointLight, normalWS, positionWS);\n            #ifndef BREAK_TEXTURE_SAMPLE\n            if (i < clusterInfo.x)\n            #endif\n\t            lightColor += BlinnPhongLighting(surface, light, info) * light.attenuation;\n        }\n\t}\n    #endif // POINTLIGHT\n\n    #ifdef SPOTLIGHT\n    for (int i = 0; i < CalculateLightCount; i++)\n\t{\n        #ifdef BREAK_TEXTURE_SAMPLE\n\t    if (i >= clusterInfo.y) break; //兼容WGSL\n        #endif\n\t    SpotLight spotLight = getSpotLight(i, clusterInfo, positionWS);\n\t    // if (spotLight.lightMode == LightMode_Mix)\n\t\t// {\n\t\t//     continue;\n\t\t// }\n        if (spotLight.lightMode != LightMode_Mix) {\n\t        Light light = getLight(spotLight, normalWS, positionWS);\n            #ifndef BREAK_TEXTURE_SAMPLE\n            if (i < clusterInfo.y)\n            #endif\n\t            lightColor += BlinnPhongLighting(surface, light, info) * light.attenuation;\n        }\n\t}\n    #endif // SPOTLIGHT\n\n    vec3 giColor = BlinnPhongGI(surface, info);\n\n    return lightColor + giColor;\n}\n\n#endif // BlinnPhongFrag_lib');let a={u_AlphaTestValue:e.ShaderDataType.Float,u_TilingOffset:e.ShaderDataType.Vector4,u_DiffuseColor:e.ShaderDataType.Color,u_DiffuseTexture:e.ShaderDataType.Texture2D,u_AlbedoIntensity:e.ShaderDataType.Float,u_MaterialSpecular:e.ShaderDataType.Color,u_SpecularTexture:e.ShaderDataType.Texture2D,u_Shininess:e.ShaderDataType.Float,u_NormalTexture:e.ShaderDataType.Texture2D},r={u_AlbedoIntensity:1,u_DiffuseColor:t.Color.WHITE,u_MaterialSpecular:t.Color.WHITE,u_Shininess:.078125,u_AlphaTestValue:.5,u_TilingOffset:new t.Vector4(1,1,0,0)},n=t.Shader3D.add("BLINNPHONG",!0,!0);n.shaderType=t.ShaderFeatureType.D3;let i=new t.SubShader(t.SubShader.DefaultAttributeMap,a,r);n.addSubShader(i),i.addShaderPass('#define SHADER_NAME BlinnPhongVS\n\n#include "Math.glsl";\n\n#include "Scene.glsl";\n#include "SceneFogInput.glsl";\n\n#include "Camera.glsl";\n#include "Sprite3DVertex.glsl";\n\n#include "VertexCommon.glsl";\n\n#include "BlinnPhongVertex.glsl";\n\nvoid main()\n{\n    Vertex vertex;\n    getVertexParams(vertex);\n\n    PixelParams pixel;\n    initPixelParams(pixel, vertex);\n\n    gl_Position = getPositionCS(pixel.positionWS);\n\n    gl_Position = remapPositionZ(gl_Position);\n\n#ifdef FOG\n    FogHandle(gl_Position.z);\n#endif\n}\n','#define SHADER_NAME BlinnPhongFS\n\n#include "Color.glsl";\n\n#include "Scene.glsl";\n#include "SceneFog.glsl";\n\n#include "Camera.glsl";\n#include "Sprite3DFrag.glsl";\n\n#include "BlinnPhongFrag.glsl";\n\nvoid getBinnPhongSurfaceParams(inout Surface surface, in PixelParams pixel)\n{\n#ifdef UV\n    vec2 uv = transformUV(pixel.uv0, u_TilingOffset);\n#else // UV\n    vec2 uv = vec2(0.0);\n#endif // UV\n\n    surface.diffuseColor = u_DiffuseColor.rgb;\n    surface.alpha = u_DiffuseColor.a;\n\n#ifdef COLOR\n    #ifdef ENABLEVERTEXCOLOR\n    surface.diffuseColor *= pixel.vertexColor.xyz;\n    surface.alpha *= pixel.vertexColor.a;\n    #endif // ENABLEVERTEXCOLOR\n#endif // COLOR\n\n#ifdef DIFFUSEMAP\n    vec4 diffuseSampler = texture2D(u_DiffuseTexture, uv);\n    #ifdef Gamma_u_DiffuseTexture\n    diffuseSampler = gammaToLinear(diffuseSampler);\n    #endif // Gamma_u_DiffuseTexture\n    surface.diffuseColor *= u_DiffuseColor.rgb * diffuseSampler.rgb * u_AlbedoIntensity;\n    surface.alpha *= diffuseSampler.a;\n#endif // DIFFUSEMAP\n\n    surface.diffuseColor *= u_AlbedoIntensity;\n\n    surface.normalTS = vec3(0.0, 0.0, 1.0);\n#ifdef NORMALMAP\n    vec3 normalSampler = texture2D(u_NormalTexture, uv).rgb;\n    normalSampler = normalize(normalSampler * 2.0 - 1.0);\n    normalSampler.y *= -1.0;\n    surface.normalTS = normalSampler;\n#endif // NORMALMAP\n\n#ifdef SPECULARMAP\n    vec4 specularSampler = texture2D(u_SpecularTexture, uv);\n    #ifdef Gamma_u_SpecularTexture\n    specularSampler = gammaToLinear(specularSampler);\n    #endif // Gamma_u_SpecularTexture\n    surface.gloss = specularSampler.rgb;\n#else // SPECULARMAP\n    #ifdef DIFFUSEMAP\n    surface.gloss = vec3(diffuseSampler.a);\n    #else // DIFFUSEMAP\n    surface.gloss = vec3(1.0, 1.0, 1.0);\n    #endif // DIFFUSEMAP\n#endif // SPECULARMAP\n    surface.specularColor = u_MaterialSpecular.rgb;\n    surface.shininess = u_Shininess;\n}\n\nvoid main()\n{\n    PixelParams pixel;\n    getPixelParams(pixel);\n\n    Surface surface;\n    getBinnPhongSurfaceParams(surface, pixel);\n\n#ifdef ALPHATEST\n    if (surface.alpha < u_AlphaTestValue)\n\t{\n\t    discard;\n\t}\n#endif // ALPHATEST\n\n    vec3 surfaceColor = vec3(0.0);\n\n    surfaceColor = BlinnPhongLighting(surface, pixel);\n\n#ifdef FOG\n    surfaceColor = sceneLitFog(surfaceColor);\n#endif // FOG\n\n    gl_FragColor = vec4(surfaceColor, surface.alpha);\n\n    gl_FragColor = outputTransform(gl_FragColor);\n}\n'),i.addShaderPass(I,L,"ShadowCaster"),i.addShaderPass('#define SHADER_NAME BlinnPhongDephtNormalVS\n\n#include "Math.glsl";\n\n#include "Camera.glsl";\n\n#include "Sprite3DVertex.glsl";\n\n#include "VertexCommon.glsl";\n\n#include "BlinnPhongVertex.glsl";\n\nvarying vec4 v_PositionCS;\n\nvoid main()\n{\n    Vertex vertex;\n    getVertexParams(vertex);\n\n    PixelParams pixel;\n    initPixelParams(pixel, vertex);\n\n    vec4 positionCS = getPositionCS(pixel.positionWS);\n    v_PositionCS = positionCS;\n    gl_Position = positionCS;\n    gl_Position = remapPositionZ(gl_Position);\n}','#define SHADER_NAME BlinnPhongDephtNormalFS\n\n#include "Color.glsl";\n\n#include "Scene.glsl";\n\n#include "Camera.glsl";\n#include "Sprite3DFrag.glsl";\n\n#include "ShadingFrag.glsl";\n\n#include "DepthNormalFrag.glsl";\n\nvarying vec4 v_PositionCS;\n\nvoid main()\n{\n    PixelParams pixel;\n    getPixelParams(pixel);\n\n    vec3 normalWS = pixel.normalWS;\n\n#ifdef NORMALMAP\n    #ifdef UV\n\n    vec2 uv = transformUV(pixel.uv0, u_TilingOffset);\n    vec3 normalSampler = texture2D(u_NormalTexture, uv).rgb;\n    normalSampler = normalize(normalSampler * 2.0 - 1.0);\n    normalSampler.y *= -1.0;\n    vec3 normalTS = normalSampler;\n    normalWS = normalize(pixel.TBN * normalTS);\n\n    #endif // UV\n#endif // NORMALMAP\n\n    vec4 positionCS = v_PositionCS;\n\n    vec4 dephtNormal = encodeDepthNormal(positionCS, normalWS);\n\n    gl_FragColor = dephtNormal;\n}',"DepthNormal")}}class TrailShaderInit{static init(){let a={a_Position:[VertexTrail.TRAIL_POSITION0,e.ShaderDataType.Vector4],a_OffsetVector:[VertexTrail.TRAIL_OFFSETVECTOR,e.ShaderDataType.Vector3],a_Texcoord0X:[VertexTrail.TRAIL_TEXTURECOORDINATE0X,e.ShaderDataType.Float],a_Texcoord0Y:[VertexTrail.TRAIL_TEXTURECOORDINATE0Y,e.ShaderDataType.Float],a_BirthTime:[VertexTrail.TRAIL_TIME0,e.ShaderDataType.Float],a_Color:[VertexTrail.TRAIL_COLOR,e.ShaderDataType.Vector4]},r={u_TilingOffset:e.ShaderDataType.Vector4,u_MainTexture:e.ShaderDataType.Texture2D,u_MainColor:e.ShaderDataType.Color},n={u_MainColor:t.Color.WHITE,u_TilingOffset:new t.Vector4(1,1,0,0)},i=t.Shader3D.add("Trail",!1,!1);i.shaderType=t.ShaderFeatureType.Effect;let o=new t.SubShader(a,r,n);i.addSubShader(o),o.addShaderPass('#define SHADER_NAME TrailVS\n\n#include "Camera.glsl";\n#include "Scene.glsl"\n#include "SceneFogInput.glsl"\n\n// Sprite uniform\nuniform float u_CurTime;\nuniform float u_LifeTime;\nuniform vec4 u_WidthCurve[10];\nuniform int u_WidthCurveKeyLength;\n\nvarying vec2 v_Texcoord0;\nvarying vec4 v_Color;\n\nfloat hermiteInterpolate(float t, float outTangent, float inTangent, float duration, float value1, float value2)\n{\n    float t2 = t * t;\n    float t3 = t2 * t;\n    float a = 2.0 * t3 - 3.0 * t2 + 1.0;\n    float b = t3 - 2.0 * t2 + t;\n    float c = t3 - t2;\n    float d = -2.0 * t3 + 3.0 * t2;\n    return a * value1 + b * outTangent * duration + c * inTangent * duration + d * value2;\n}\n\nfloat getCurWidth(in float normalizeTime)\n{\n    float width;\n    if (normalizeTime == 0.0)\n\t{\n\t    width = u_WidthCurve[0].w;\n\t}\n    else if (normalizeTime >= 1.0)\n\t{\n\t    width = u_WidthCurve[u_WidthCurveKeyLength - 1].w;\n\t}\n    else\n\t{\n\t    for (int i = 0; i < 10; i++)\n\t\t{\n\t\t    if (normalizeTime == u_WidthCurve[i].x)\n\t\t\t{\n\t\t\t    width = u_WidthCurve[i].w;\n\t\t\t    break;\n\t\t\t}\n\n\t\t    vec4 lastFrame = u_WidthCurve[i];\n\t\t    vec4 nextFrame = u_WidthCurve[i + 1];\n\t\t    if (normalizeTime > lastFrame.x && normalizeTime < nextFrame.x)\n\t\t\t{\n\t\t\t    float duration = nextFrame.x - lastFrame.x;\n\t\t\t    float t = (normalizeTime - lastFrame.x) / duration;\n\t\t\t    float outTangent = lastFrame.z;\n\t\t\t    float inTangent = nextFrame.y;\n\t\t\t    float value1 = lastFrame.w;\n\t\t\t    float value2 = nextFrame.w;\n\t\t\t    width = hermiteInterpolate(t, outTangent, inTangent, duration, value1, value2);\n\t\t\t    break;\n\t\t\t}\n\t\t}\n\t}\n    return width;\n}\n\nvoid main()\n{\n    float normalizeTime = (u_CurTime - a_BirthTime) / u_LifeTime;\n\n    v_Texcoord0 = vec2(a_Texcoord0X, 1.0 - a_Texcoord0Y) * u_TilingOffset.xy + u_TilingOffset.zw;\n\n    v_Color = a_Color;\n\n    vec3 cameraPos = (u_View * a_Position).rgb;\n    gl_Position = u_Projection * vec4(cameraPos + a_OffsetVector * getCurWidth(normalizeTime), 1.0);\n\n    gl_Position = remapPositionZ(gl_Position);\n\t#ifdef FOG\n        FogHandle(gl_Position.z);\n    #endif\n}','#define SHADER_NAME TrailFS\n\n#include "Color.glsl";\n#include "Scene.glsl";\n#include "SceneFog.glsl";\n\nvarying vec2 v_Texcoord0;\nvarying vec4 v_Color;\n\nvoid main()\n{\n    vec4 color = 2.0 * u_MainColor * v_Color;\n#ifdef MAINTEXTURE\n    vec4 mainTextureColor = texture2D(u_MainTexture, v_Texcoord0);\n    #ifdef Gamma_u_MainTexture\n    mainTextureColor = gammaToLinear(mainTextureColor);\n    #endif // Gamma_u_MainTexture\n\n    color *= mainTextureColor;\n#endif\n\n#ifdef FOG\n    color.xyz = scenUnlitFog(color.xyz);\n#endif // FOG\n    gl_FragColor = color;\n\n    gl_FragColor = outputTransform(gl_FragColor);\n}\n')}}class PBRStandardShaderInit{static init(){let a={u_AlbedoColor:e.ShaderDataType.Color,u_TilingOffset:e.ShaderDataType.Vector4,u_NormalScale:e.ShaderDataType.Float,u_Metallic:e.ShaderDataType.Float,u_Smoothness:e.ShaderDataType.Float,u_OcclusionStrength:e.ShaderDataType.Float,u_AlphaTestValue:e.ShaderDataType.Float,u_EmissionColor:e.ShaderDataType.Color,u_EmissionIntensity:e.ShaderDataType.Float,u_AlbedoTexture:e.ShaderDataType.Texture2D,u_NormalTexture:e.ShaderDataType.Texture2D,u_OcclusionTexture:e.ShaderDataType.Texture2D,u_EmissionTexture:e.ShaderDataType.Texture2D,u_MetallicGlossTexture:e.ShaderDataType.Texture2D,u_AnisotropyStrength:e.ShaderDataType.Float,u_AnisotropyTexture:e.ShaderDataType.Texture2D,u_AnisotropyRotation:e.ShaderDataType.Float,u_ClearCoatFactor:e.ShaderDataType.Float,u_ClearCoatTexture:e.ShaderDataType.Texture2D,u_ClearCoatRoughness:e.ShaderDataType.Float,u_ClearCoatRoughnessTexture:e.ShaderDataType.Texture2D,u_ClearCoatNormalTexture:e.ShaderDataType.Texture2D,u_DetailAlbedoTexture:e.ShaderDataType.Texture2D,u_DetailNormalTexture:e.ShaderDataType.Texture2D,u_DetailNormalScale:e.ShaderDataType.Float,u_DetailTillingOffset:e.ShaderDataType.Vector4},r={u_AlbedoColor:t.Color.WHITE,u_TilingOffset:new t.Vector4(1,1,0,0),u_DetailTillingOffset:new t.Vector4(1,1,0,0),u_NormalScale:1,u_DetailNormalScale:1,u_Metallic:0,u_Smoothness:.5,u_OcclusionStrength:1,u_EmissionColor:t.Color.WHITE,u_EmissionIntensity:1,u_AlphaTestValue:.5,u_AnisotropyStrength:0,u_AnisotropyRotation:0,u_ClearCoatFactor:0,u_ClearCoatRoughness:0},n=t.Shader3D.add("PBR",!0,!0);n.shaderType=t.ShaderFeatureType.D3,n._surportVolumetricGI=!0;let i=new t.SubShader(t.SubShader.DefaultAttributeMap,a,r);n.addSubShader(i),i.addShaderPass('#define SHADER_NAME PBRStandardVS\n\n#include "Math.glsl";\n\n#include "Scene.glsl";\n#include "SceneFogInput.glsl";\n\n#include "Camera.glsl";\n#include "Sprite3DVertex.glsl";\n\n#include "VertexCommon.glsl";\n\n#include "PBRVertex.glsl";\n\n#if defined(DETAILTEXTURE) || defined(DETAILNORMAL)\nvarying vec2 v_DetailUV;\n#endif\n\nvoid main()\n{\n    Vertex vertex;\n    getVertexParams(vertex);\n\n    PixelParams pixel;\n    initPixelParams(pixel, vertex);\n\n#if defined(DETAILTEXTURE) || defined(DETAILNORMAL)\n    #ifdef UV\n    v_DetailUV = transformUV(vertex.texCoord0, u_DetailTillingOffset);\n    #else // UV\n    v_DetailUV = vec2(0.0);\n    #endif\n#endif\n\n    gl_Position = getPositionCS(pixel.positionWS);\n\n    gl_Position = remapPositionZ(gl_Position);\n\n#ifdef FOG\n    FogHandle(gl_Position.z);\n#endif\n}','#define SHADER_NAME PBRStandardFS\n\n#include "Color.glsl";\n\n#include "Scene.glsl";\n#include "SceneFog.glsl";\n\n#include "Camera.glsl";\n#include "Sprite3DFrag.glsl";\n\n#include "PBRMetallicFrag.glsl";\n\n#if defined(DETAILTEXTURE) || defined(DETAILNORMAL)\nvarying vec2 v_DetailUV;\n    #define ColorSpaceDouble vec3(4.59479380, 4.59479380, 4.59479380);\nvec3 BlendNormals(vec3 n1, vec3 n2)\n{\n    return normalize(vec3(n1.xy + n2.xy, n1.z * n2.z));\n}\n#endif // DETAILTEXTURE || DETAILNORMAL\n\nvoid initSurfaceInputs(inout SurfaceInputs inputs, const in PixelParams pixel)\n{\n#ifdef UV\n    vec2 uv = transformUV(pixel.uv0, u_TilingOffset);\n#else // UV\n    vec2 uv = vec2(0.0);\n#endif // UV\n\n    inputs.diffuseColor = u_AlbedoColor.rgb;\n    inputs.alpha = u_AlbedoColor.a;\n\n#ifdef COLOR\n    #ifdef ENABLEVERTEXCOLOR\n    inputs.diffuseColor *= pixel.vertexColor.xyz;\n    inputs.alpha *= pixel.vertexColor.a;\n    #endif // ENABLEVERTEXCOLOR\n#endif // COLOR\n\n    inputs.alphaTest = u_AlphaTestValue;\n\n#ifdef ALBEDOTEXTURE\n    vec4 albedoSampler = texture2D(u_AlbedoTexture, uv);\n    #ifdef Gamma_u_AlbedoTexture\n    albedoSampler = gammaToLinear(albedoSampler);\n    #endif // Gamma_u_AlbedoTexture\n    inputs.diffuseColor *= albedoSampler.rgb;\n    inputs.alpha *= albedoSampler.a;\n#endif // ALBEDOTEXTURE\n\n// Detail Albedo\n#ifdef DETAILTEXTURE\n    vec3 detailSampler = texture2D(u_DetailAlbedoTexture, v_DetailUV).rgb;\n    #ifdef Gamma_u_DetailAlbedoTexture\n    detailSampler = gammaToLinear(detailSampler);\n    #endif // Gamma_u_DetailAlbedoTexture\n    detailSampler *= ColorSpaceDouble;\n    inputs.diffuseColor *= detailSampler;\n#endif\n\n    inputs.normalTS = vec3(0.0, 0.0, 1.0);\n#ifdef NORMALTEXTURE\n    vec3 normalSampler = texture2D(u_NormalTexture, uv).rgb;\n    normalSampler = normalize(normalSampler * 2.0 - 1.0);\n    normalSampler.y *= -1.0;\n    inputs.normalTS = normalScale(normalSampler, u_NormalScale);\n#endif\n\n#ifdef DETAILNORMAL\n    vec3 detailnormalSampler = texture2D(u_DetailNormalTexture, v_DetailUV).rgb;\n    detailnormalSampler = normalize(detailnormalSampler * 2.0 - 1.0);\n    detailnormalSampler.y *= -1.0;\n    detailnormalSampler = normalScale(detailnormalSampler, u_DetailNormalScale);\n    inputs.normalTS = BlendNormals(inputs.normalTS, detailnormalSampler);\n#endif\n\n    inputs.metallic = u_Metallic;\n    inputs.smoothness = u_Smoothness;\n\n#ifdef METALLICGLOSSTEXTURE\n\n    vec4 metallicSampler = texture2D(u_MetallicGlossTexture, uv);\n    #ifdef Gamma_u_MetallicGlossTexture\n    metallicSampler = gammaToLinear(metallicSampler);\n    #endif // Gamma_u_MetallicGlossTexture\n\n    inputs.metallic = metallicSampler.x;\n\n    #ifdef SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\n\t#ifdef ALBEDOTEXTURE\n    inputs.smoothness = (albedoSampler.a * u_Smoothness);\n\t#endif // ALBEDOTEXTURE\n    #else // SMOOTHNESSSOURCE_METALLICTEXTURE_ALPHA\n    inputs.smoothness = (metallicSampler.a * u_Smoothness);\n    #endif // SMOOTHNESSSOURCE_ALBEDOTEXTURE_ALPHA\n\n#endif // METALLICGLOSSTEXTURE\n\n    inputs.occlusion = 1.0;\n#ifdef OCCLUSIONTEXTURE\n    vec4 occlusionSampler = texture2D(u_OcclusionTexture, uv);\n    #ifdef Gamma_u_OcclusionTexture\n    occlusionSampler = gammaToLinear(occlusionSampler);\n    #endif // Gamma_u_OcclusionTexture\n\n    float occlusion = occlusionSampler.g;\n    inputs.occlusion = (1.0 - u_OcclusionStrength) + occlusion * u_OcclusionStrength;\n#endif // OCCLUSIONTEXTURE\n\n    inputs.emissionColor = vec3(0.0);\n#ifdef EMISSION\n    inputs.emissionColor = u_EmissionColor.rgb * u_EmissionIntensity;\n    #ifdef EMISSIONTEXTURE\n    vec4 emissionSampler = texture2D(u_EmissionTexture, uv);\n\t#ifdef Gamma_u_EmissionTexture\n    emissionSampler = gammaToLinear(emissionSampler);\n\t#endif // Gamma_u_EmissionTexture\n    inputs.emissionColor *= emissionSampler.rgb;\n    #endif // EMISSIONTEXTURE\n#endif // EMISSION\n\n#ifdef CLEARCOAT\n    inputs.clearCoat = u_ClearCoatFactor;\n    inputs.clearCoatRoughness = u_ClearCoatRoughness;\n\n    #ifdef CLEARCOATMAP\n    // todo\n    // linear tex no need gamma\n    vec4 clearCoatSampler = texture2D(u_ClearCoatTexture, uv);\n    inputs.clearCoat *= clearCoatSampler.r;\n    #endif // CLEARCOATMAP\n\n    #ifdef CLEARCOAT_ROUGHNESSMAP\n    // todo\n    // linear tex no need gamma\n    vec4 clearcoatSampleRoughness = texture2D(u_ClearCoatRoughnessTexture, uv);\n    inputs.clearCoatRoughness *= clearcoatSampleRoughness.g;\n    #endif // CLEARCOAT_ROUGHNESSMAP\n\n    #ifdef CLEARCOAT_NORMAL\n    vec3 clearCoatNormalSampler = texture2D(u_ClearCoatNormalTexture, uv).rgb;\n    clearCoatNormalSampler = normalize(clearCoatNormalSampler * 2.0 - 1.0);\n    clearCoatNormalSampler.y *= -1.0;\n    inputs.clearCoatNormalTS = clearCoatNormalSampler;\n    #endif // CLEARCOAT_NORMAL\n#endif // CLEARCOAT\n\n#ifdef ANISOTROPIC\n    inputs.anisotropy = u_AnisotropyStrength;\n    vec2 direction = vec2(1.0, 0.0);\n\n    #ifdef ANISOTROPYMAP\n    vec3 anisotropySampler = texture2D(u_AnisotropyTexture, uv).rgb;\n\n    inputs.anisotropy *= anisotropySampler.b;\n    direction = anisotropySampler.xy * 2.0 - 1.0;\n    #endif // ANISOTROPYMAP\n\n    vec2 anisotropyRotation = vec2(cos(u_AnisotropyRotation), sin(u_AnisotropyRotation));\n    mat2 rotationMatrix = mat2(anisotropyRotation.x, anisotropyRotation.y, -anisotropyRotation.y, anisotropyRotation.x);\n    inputs.anisotropyDirection = rotationMatrix * direction;\n\n#endif // ANISOTROPIC\n}\n\nvoid main()\n{\n    PixelParams pixel;\n    getPixelParams(pixel);\n\n    SurfaceInputs inputs;\n    initSurfaceInputs(inputs, pixel);\n\n    vec4 surfaceColor = PBR_Metallic_Flow(inputs, pixel);\n\n#ifdef FOG\n    surfaceColor.rgb = sceneLitFog(surfaceColor.rgb);\n#endif // FOG\n\n    gl_FragColor = surfaceColor;\n\n    gl_FragColor = outputTransform(gl_FragColor);\n}'),i.addShaderPass(I,L,"ShadowCaster"),i.addShaderPass('#define SHADER_NAME PBRStandardDepthNormalVS\n\n#include "Math.glsl";\n\n#include "Camera.glsl";\n\n#include "Sprite3DVertex.glsl";\n\n#include "VertexCommon.glsl";\n\n#include "PBRVertex.glsl";\n\nvarying vec4 v_PositionCS;\n\nvoid main()\n{\n    Vertex vertex;\n    getVertexParams(vertex);\n\n    PixelParams pixel;\n    initPixelParams(pixel, vertex);\n\n    sharePixelParams(pixel);\n\n    vec4 positionCS = getPositionCS(pixel.positionWS);\n    v_PositionCS = positionCS;\n    gl_Position = positionCS;\n    gl_Position = remapPositionZ(gl_Position);\n}','#define SHADER_NAME PBRStandardDepthNormalFS\n\n#include "Color.glsl";\n\n#include "Scene.glsl";\n\n#include "Camera.glsl";\n#include "Sprite3DFrag.glsl";\n\n#include "ShadingFrag.glsl";\n\n#include "DepthNormalFrag.glsl";\n\nvarying vec4 v_PositionCS;\n\nvoid main()\n{\n    PixelParams pixel;\n    getPixelParams(pixel);\n\n    vec3 normalWS = pixel.normalWS;\n\n#ifdef NORMALTEXTURE\n    #ifdef UV\n\n    vec2 uv = transformUV(pixel.uv0, u_TilingOffset);\n    vec3 normalSampler = texture2D(u_NormalTexture, uv).rgb;\n    normalSampler = normalize(normalSampler * 2.0 - 1.0);\n    normalSampler.y *= -1.0;\n    vec3 normalTS = normalScale(normalSampler, u_NormalScale);\n    normalWS = normalize(pixel.TBN * normalTS);\n\n    #endif // UV\n#endif // NORMALTEXTURE\n\n    vec4 positionCS = v_PositionCS;\n\n    vec4 dephtNormal = encodeDepthNormal(positionCS, normalWS);\n\n    gl_FragColor = dephtNormal;\n}',"DepthNormal")}}class SkyBoxShaderInit{static init(){let a={a_Position:[t.VertexMesh.MESH_POSITION0,e.ShaderDataType.Vector4]},r={u_TintColor:e.ShaderDataType.Color,u_Exposure:e.ShaderDataType.Float,u_Rotation:e.ShaderDataType.Float,u_CubeTexture:e.ShaderDataType.TextureCube},n={u_TintColor:new t.Color(.5,.5,.5,.5),u_Exposure:1,u_Rotation:0},i=t.Shader3D.add("SkyBox");i.shaderType=t.ShaderFeatureType.Sky;let o=new t.SubShader(a,r,n);i.addSubShader(o);let s=o.addShaderPass('#define SHADER_NAME SkyBoxVS\n\n#include "SkyCommon.glsl";\n\nvarying vec3 v_Texcoord;\n\nvoid main()\n{\n    // todo 这个转换 ？\n    v_Texcoord = vec3(-a_Position.x, a_Position.yz); //转换坐标系\n\n    vec4 position = rotateAroundYInDegrees(a_Position, u_Rotation);\n    // gl_Position = getPositionCS(position.xyz);\n\n    gl_Position = u_SkyProjectionViewMat * position;\n\n    gl_Position = remapSkyPositionZ(gl_Position);\n}','#define SHADER_NAME SkyBoxFS\n\n#include "Color.glsl";\n\nvarying vec3 v_Texcoord;\n\nconst vec4 c_ColorSpace = vec4(4.59479380, 4.59479380, 4.59479380, 2.0);\n\nvoid main()\n{\n    vec3 uv = v_Texcoord;\n    vec4 cubeSampler = textureCube(u_CubeTexture, uv);\n#ifdef Gamma_u_CubeTexture\n    cubeSampler = gammaToLinear(cubeSampler);\n#endif // Gamma_u_CubeTexture\n\n    vec3 color = cubeSampler.rgb * u_TintColor.rgb * u_Exposure * c_ColorSpace.rgb;\n\n    gl_FragColor = vec4(color, 1.0);\n\n    gl_FragColor = outputTransform(gl_FragColor);\n}');s.renderState.depthTest=RenderState.DEPTHTEST_LEQUAL,s.renderState.cull=t.CullMode.Back,s.renderState.depthWrite=!1,s.renderState.stencilWrite=!1,s.statefirst=!0}}class ParticleShuriKenShaderInit{static init(){t.Shader3D.addInclude("MathGradient.glsl","float getCurValueFromGradientFloat(in vec2 gradientNumbers[4], in float normalizedAge)\n{\n    float curValue;\n    for (int i = 1; i < 4; i++)\n\t{\n\t    vec2 gradientNumber = gradientNumbers[i];\n\t    float key = gradientNumber.x;\n\t\tcurValue = gradientNumber.y;\n\t    if (key >= normalizedAge)\n\t\t{\n\t\t    vec2 lastGradientNumber = gradientNumbers[i - 1];\n\t\t    float lastKey = lastGradientNumber.x;\n\t\t    float age = max((normalizedAge - lastKey), 0.0) / (key - lastKey);\n\t\t    curValue = mix(lastGradientNumber.y, gradientNumber.y, age);\n\t\t    break;\n\t\t}\n\t}\n    return curValue;\n}\n\nfloat getTotalValueFromGradientFloat(in vec2 gradientNumbers[4],\n    in float normalizedAge)\n{\n\tfloat keyTime = min(normalizedAge, gradientNumbers[0].x);\n    float totalValue = keyTime * gradientNumbers[0].y;\n\tfloat lastSpeed = 0.;\n    for (int i = 1; i < 4; i++)\n\t{\n\t    vec2 gradientNumber = gradientNumbers[i];\n\t    float key = gradientNumber.x;\n\t    vec2 lastGradientNumber = gradientNumbers[i - 1];\n\t    float lastValue = lastGradientNumber.y;\n\n\t    if (key >= normalizedAge)\n\t\t{\n\t\t    float lastKey = lastGradientNumber.x;\n\t\t\tfloat time =  max((normalizedAge - lastKey), 0.);\n\t\t\tfloat age = time / (key-lastKey);\n\t\t\tlastSpeed = mix(lastValue, gradientNumber.y,age);\n\t\t    totalValue += (lastValue + mix(lastValue, gradientNumber.y, age)) / 2.0 * a_ShapePositionStartLifeTime.w * time;\n\t\t    keyTime = normalizedAge;\n\t\t\tbreak;\n\t\t}\n\t    else if(key > keyTime)\n\t\t{\n\t\t    totalValue += (lastValue + gradientNumber.y) / 2.0 * a_ShapePositionStartLifeTime.w * (key - lastGradientNumber.x);\n\t\t\tkeyTime = key;\n\t\t\tlastSpeed = gradientNumber.y;\n\t\t}\n\t}\n    return totalValue + max(normalizedAge-keyTime, 0.) * lastSpeed * a_ShapePositionStartLifeTime.w;\n}\n\nvec4 getColorFromGradient(in vec2 gradientAlphas[COLORCOUNT],\n    in vec4 gradientColors[COLORCOUNT],\n    in float normalizedAge, in vec4 keyRanges)\n{\n    float alphaAge = clamp(normalizedAge, keyRanges.z, keyRanges.w);\n    vec4 overTimeColor;\n    for (int i = 1; i < COLORCOUNT; i++)\n\t{\n\t    vec2 gradientAlpha = gradientAlphas[i];\n\t    float alphaKey = gradientAlpha.x;\n\t    if (alphaKey >= alphaAge)\n\t\t{\n\t\t    vec2 lastGradientAlpha = gradientAlphas[i - 1];\n\t\t    float lastAlphaKey = lastGradientAlpha.x;\n\t\t    float age = clamp((alphaAge - lastAlphaKey) / (alphaKey - lastAlphaKey), 0.0, 1.0);\n\t\t    overTimeColor.a = mix(lastGradientAlpha.y, gradientAlpha.y, age);\n\t\t    break;\n\t\t}\n\t}\n\n    float colorAge = clamp(normalizedAge, keyRanges.x, keyRanges.y);\n    for (int i = 1; i < COLORCOUNT; i++)\n\t{\n\t    vec4 gradientColor = gradientColors[i];\n\t    float colorKey = gradientColor.x;\n\t    if (colorKey >= colorAge)\n\t\t{\n\t\t    vec4 lastGradientColor = gradientColors[i - 1];\n\t\t    float lastColorKey = lastGradientColor.x;\n\t\t    float age = (colorAge - lastColorKey) / (colorKey - lastColorKey);\n\t\t    overTimeColor.rgb = mix(gradientColors[i - 1].yzw, gradientColor.yzw, age);\n\t\t    break;\n\t\t}\n\t}\n    return overTimeColor;\n}\n\nfloat getFrameFromGradient(in vec2 gradientFrames[4], in float normalizedAge)\n{\n    float overTimeFrame;\n    for (int i = 1; i < 4; i++)\n\t{\n\t    vec2 gradientFrame = gradientFrames[i];\n\t    float key = gradientFrame.x;\n\t\toverTimeFrame = gradientFrame.y;\n\t    if (key >= normalizedAge)\n\t\t{\n\t\t    vec2 lastGradientFrame = gradientFrames[i - 1];\n\t\t    float lastKey = lastGradientFrame.x;\n\t\t\tfloat age = max((normalizedAge-lastKey), 0.)/(key-lastKey);\n\t\t    overTimeFrame = mix(lastGradientFrame.y, gradientFrame.y, age);\n\t\t    break;\n\t\t}\n\t}\n    return floor(overTimeFrame);\n}\n"),t.Shader3D.addInclude("particleShuriKenSpriteVS.glsl","// sprite Uniform\nuniform float u_CurrentTime;\nuniform vec3 u_Gravity;\nuniform vec2 u_DragConstanct;\nuniform vec3 u_WorldPosition;\nuniform vec4 u_WorldRotation;\nuniform bool u_ThreeDStartRotation;\nuniform int u_ScalingMode;\nuniform vec3 u_PositionScale;\nuniform vec3 u_SizeScale;\n\nuniform float u_StretchedBillboardLengthScale;\nuniform float u_StretchedBillboardSpeedScale;\nuniform int u_SimulationSpace;\n\n#ifdef VELOCITYOVERLIFETIMERANDOMCURVE\n    uniform int u_VOLSpaceType;\n\n    uniform vec2 u_VOLVelocityGradientX[4]; // x为key,y为速度\n    uniform vec2 u_VOLVelocityGradientY[4]; // x为key,y为速度\n    uniform vec2 u_VOLVelocityGradientZ[4]; // x为key,y为速度\n\n    uniform vec2 u_VOLVelocityGradientMaxX[4]; // x为key,y为速度\n    uniform vec2 u_VOLVelocityGradientMaxY[4]; // x为key,y为速度\n    uniform vec2 u_VOLVelocityGradientMaxZ[4]; // x为key,y为速度\n#endif\n\n#ifdef COLORKEYCOUNT_8\n    #define COLORCOUNT 8\n#else\n    #define COLORCOUNT 4\n#endif\n\n#ifdef RANDOMCOLOROVERLIFETIME\n    uniform vec4 u_ColorOverLifeGradientColors[COLORCOUNT]; // x为key,yzw为Color\n    uniform vec2 u_ColorOverLifeGradientAlphas[COLORCOUNT]; // x为key,y为Alpha\n    uniform vec4 u_ColorOverLifeGradientRanges;\n    uniform vec4 u_MaxColorOverLifeGradientColors[COLORCOUNT]; // x为key,yzw为Color\n    uniform vec2 u_MaxColorOverLifeGradientAlphas[COLORCOUNT]; // x为key,y为Alpha\n    uniform vec4 u_MaxColorOverLifeGradientRanges;\n#endif\n\n#ifdef SIZEOVERLIFETIMERANDOMCURVES\n    uniform vec2 u_SOLSizeGradient[4]; // x为key,y为尺寸\n    uniform vec2 u_SOLSizeGradientMax[4]; // x为key,y为尺寸\n#endif\n\n#ifdef SIZEOVERLIFETIMERANDOMCURVESSEPERATE\n    uniform vec2 u_SOLSizeGradientX[4]; // x为key,y为尺寸\n    uniform vec2 u_SOLSizeGradientY[4]; // x为key,y为尺寸\n    uniform vec2 u_SOLSizeGradientZ[4]; // x为key,y为尺寸\n    uniform vec2 u_SOLSizeGradientMaxX[4]; // x为key,y为尺寸\n    uniform vec2 u_SOLSizeGradientMaxY[4]; // x为key,y为尺寸\n    uniform vec2 u_SOLSizeGradientMaxZ[4]; // x为key,y为尺寸\n#endif\n\n#ifdef ROTATIONOVERLIFETIME\n    uniform vec2 u_ROLAngularVelocityGradient[4]; // x为key,y为旋转\n    uniform vec2 u_ROLAngularVelocityGradientMax[4]; // x为key,y为旋转\n#endif\n\n#ifdef ROTATIONOVERLIFETIMESEPERATE\n    uniform vec2 u_ROLAngularVelocityGradientX[4];\n    uniform vec2 u_ROLAngularVelocityGradientY[4];\n    uniform vec2 u_ROLAngularVelocityGradientZ[4];\n\n    uniform vec2 u_ROLAngularVelocityGradientMaxX[4];\n    uniform vec2 u_ROLAngularVelocityGradientMaxY[4];\n    uniform vec2 u_ROLAngularVelocityGradientMaxZ[4];\n#endif\n\n#ifdef TEXTURESHEETANIMATIONRANDOMCURVE\n    uniform float u_TSACycles;\n    uniform vec2 u_TSASubUVLength;\n    uniform vec2 u_TSAGradientUVs[4]; // x为key,y为frame\n    uniform vec2 u_TSAMaxGradientUVs[4]; // x为key,y为frame\n#endif");let a={a_CornerTextureCoordinate:[VertexShuriKenParticle.PARTICLE_CORNERTEXTURECOORDINATE0,e.ShaderDataType.Vector4],a_MeshPosition:[VertexShuriKenParticle.PARTICLE_POSITION0,e.ShaderDataType.Vector3],a_MeshColor:[VertexShuriKenParticle.PARTICLE_COLOR0,e.ShaderDataType.Vector4],a_MeshTextureCoordinate:[VertexShuriKenParticle.PARTICLE_TEXTURECOORDINATE0,e.ShaderDataType.Vector2],a_ShapePositionStartLifeTime:[VertexShuriKenParticle.PARTICLE_SHAPEPOSITIONSTARTLIFETIME,e.ShaderDataType.Vector4],a_DirectionTime:[VertexShuriKenParticle.PARTICLE_DIRECTIONTIME,e.ShaderDataType.Vector4],a_StartColor:[VertexShuriKenParticle.PARTICLE_STARTCOLOR0,e.ShaderDataType.Vector4],a_StartSize:[VertexShuriKenParticle.PARTICLE_STARTSIZE,e.ShaderDataType.Vector3],a_StartRotation0:[VertexShuriKenParticle.PARTICLE_STARTROTATION,e.ShaderDataType.Vector3],a_StartSpeed:[VertexShuriKenParticle.PARTICLE_STARTSPEED,e.ShaderDataType.Float],a_Random0:[VertexShuriKenParticle.PARTICLE_RANDOM0,e.ShaderDataType.Vector4],a_Random1:[VertexShuriKenParticle.PARTICLE_RANDOM1,e.ShaderDataType.Vector4],a_SimulationWorldPostion:[VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDPOSTION,e.ShaderDataType.Vector3],a_SimulationWorldRotation:[VertexShuriKenParticle.PARTICLE_SIMULATIONWORLDROTATION,e.ShaderDataType.Vector4],a_SimulationUV:[VertexShuriKenParticle.PARTICLE_SIMULATIONUV,e.ShaderDataType.Vector4]},r={u_Tintcolor:e.ShaderDataType.Color,u_texture:e.ShaderDataType.Texture2D,u_TilingOffset:e.ShaderDataType.Vector4,u_AlphaTestValue:e.ShaderDataType.Float},n={u_Tintcolor:new t.Color(.5,.5,.5,.5),u_TilingOffset:new t.Vector4(1,1,0,0),u_AlphaTestValue:.5},i=t.Shader3D.add("PARTICLESHURIKEN",!1,!1),o=new t.SubShader(a,r,n);i.addSubShader(o),i.shaderType=t.ShaderFeatureType.Effect,o.addShaderPass('#define SHADER_NAME ParticleVS\n\n#include "Camera.glsl";\n#include "particleShuriKenSpriteVS.glsl";\n#include "Math.glsl";\n#include "MathGradient.glsl";\n#include "Color.glsl";\n#include "Scene.glsl"\n#include "SceneFogInput.glsl"\n\n\n#ifdef RENDERMODE_MESH\nvarying vec4 v_MeshColor;\n#endif\n\nvarying vec4 v_Color;\nvarying vec2 v_TextureCoordinate;\n\n//修改这里剔除没有用到的光照函数，增加粒子的编译速度\nvec2 TransformUV(vec2 texcoord, vec4 tilingOffset)\n{\n    vec2 transTexcoord = vec2(texcoord.x, texcoord.y - 1.0) * tilingOffset.xy + vec2(tilingOffset.z, -tilingOffset.w);\n    transTexcoord.y += 1.0;\n    return transTexcoord;\n}\n\n#ifdef VELOCITYOVERLIFETIMERANDOMCURVE\nvec3 computeParticleLifeVelocity(in float normalizedAge)\n{\n    vec3 outLifeVelocity;\n    \toutLifeVelocity = vec3(\n\t\tmix(getCurValueFromGradientFloat(u_VOLVelocityGradientX, normalizedAge),\n\t\t\tgetCurValueFromGradientFloat(u_VOLVelocityGradientMaxX, normalizedAge),\n\t\t\ta_Random1.y),\n\t\tmix(getCurValueFromGradientFloat(u_VOLVelocityGradientY, normalizedAge),\n\t\t\tgetCurValueFromGradientFloat(u_VOLVelocityGradientMaxY, normalizedAge),\n\t\t\ta_Random1.z),\n\t\tmix(getCurValueFromGradientFloat(u_VOLVelocityGradientZ, normalizedAge),\n\t\t\tgetCurValueFromGradientFloat(u_VOLVelocityGradientMaxZ, normalizedAge),\n\t\t\ta_Random1.w));\n\n    return outLifeVelocity;\n}\n#endif\n\n// drag\nvec3 getStartPosition(vec3 startVelocity, float age, vec3 dragData)\n{\n    vec3 startPosition;\n    float lasttime = min(startVelocity.x / dragData.x, age);\n    startPosition = lasttime * (startVelocity - 0.5 * dragData * lasttime);\n    return startPosition;\n}\n\nvec3 computeParticlePosition(in vec3 startVelocity, in vec3 lifeVelocity, in float age, in float normalizedAge, vec3 gravityVelocity, vec4 worldRotation, vec3 dragData)\n{\n    vec3 startPosition = getStartPosition(startVelocity, age, dragData);\n    vec3 lifePosition;\n#ifdef VELOCITYOVERLIFETIMERANDOMCURVE\n   \n    #ifdef VELOCITYOVERLIFETIMERANDOMCURVE\n\t\tlifePosition = vec3(\n\t\tmix(\n\t\t\tgetTotalValueFromGradientFloat(u_VOLVelocityGradientX, normalizedAge),\n\t\t\tgetTotalValueFromGradientFloat(u_VOLVelocityGradientMaxX, normalizedAge),\n\t\t\ta_Random1.y),\n\t\tmix(\n\t\t\tgetTotalValueFromGradientFloat(u_VOLVelocityGradientY, normalizedAge),\n\t\t\tgetTotalValueFromGradientFloat(u_VOLVelocityGradientMaxY, normalizedAge),\n\t\t\ta_Random1.z),\n\t\tmix(\n\t\t\tgetTotalValueFromGradientFloat(u_VOLVelocityGradientZ, normalizedAge),\n\t\t\tgetTotalValueFromGradientFloat(u_VOLVelocityGradientMaxZ, normalizedAge),\n\t\t\ta_Random1.w));\n    #endif\n\n    vec3 finalPosition;\n    if (u_VOLSpaceType == 0)\n\t{\n\t    if (u_ScalingMode != 2)\n\t\tfinalPosition = rotationByQuaternions(\n\t\t    u_PositionScale * (a_ShapePositionStartLifeTime.xyz + startPosition + lifePosition),\n\t\t    worldRotation);\n\t    else\n\t\tfinalPosition = rotationByQuaternions(\n\t\t    u_PositionScale * a_ShapePositionStartLifeTime.xyz + startPosition + lifePosition,\n\t\t    worldRotation);\n\t}\n    else\n\t{\n\t    if (u_ScalingMode != 2)\n\t\tfinalPosition = rotationByQuaternions(\n\t\t\t\t    u_PositionScale * (a_ShapePositionStartLifeTime.xyz + startPosition),\n\t\t\t\t    worldRotation)\n\t\t    + lifePosition;\n\t    else\n\t\tfinalPosition = rotationByQuaternions(\n\t\t\t\t    u_PositionScale * a_ShapePositionStartLifeTime.xyz + startPosition,\n\t\t\t\t    worldRotation)\n\t\t    + lifePosition;\n\t}\n#else\n    // startPosition = startVelocity * age;\n    vec3 finalPosition;\n    if (u_ScalingMode != 2)\n\tfinalPosition = rotationByQuaternions(\n\t    u_PositionScale * (a_ShapePositionStartLifeTime.xyz + startPosition),\n\t    worldRotation);\n    else\n\tfinalPosition = rotationByQuaternions(\n\t    u_PositionScale * a_ShapePositionStartLifeTime.xyz + startPosition,\n\t    worldRotation);\n#endif\n\n    if (u_SimulationSpace == 0)\n\tfinalPosition = finalPosition + a_SimulationWorldPostion;\n    else if (u_SimulationSpace == 1)\n\tfinalPosition = finalPosition + u_WorldPosition;\n\n    finalPosition += 0.5 * gravityVelocity * age;\n\n    return finalPosition;\n}\n\nvec4 computeParticleColor(in vec4 color, in float normalizedAge)\n{\n#ifdef RANDOMCOLOROVERLIFETIME\n    color *= mix(getColorFromGradient(u_ColorOverLifeGradientAlphas,\n\t\t     u_ColorOverLifeGradientColors,\n\t\t     normalizedAge, u_ColorOverLifeGradientRanges),\n\tgetColorFromGradient(u_MaxColorOverLifeGradientAlphas,\n\t    u_MaxColorOverLifeGradientColors,\n\t    normalizedAge, u_MaxColorOverLifeGradientRanges),\n\ta_Random0.y);\n#endif\n    return color;\n}\n\nvec2 computeParticleSizeBillbard(in vec2 size, in float normalizedAge)\n{\n\n#ifdef SIZEOVERLIFETIMERANDOMCURVES\n    size *= mix(getCurValueFromGradientFloat(u_SOLSizeGradient, normalizedAge),\n\tgetCurValueFromGradientFloat(u_SOLSizeGradientMax, normalizedAge),\n\ta_Random0.z);\n#endif\n\n#ifdef SIZEOVERLIFETIMERANDOMCURVESSEPERATE\n    size *= vec2(mix(getCurValueFromGradientFloat(u_SOLSizeGradientX, normalizedAge),\n\t\t     getCurValueFromGradientFloat(u_SOLSizeGradientMaxX, normalizedAge),\n\t\t     a_Random0.z),\n\tmix(getCurValueFromGradientFloat(u_SOLSizeGradientY, normalizedAge),\n\t    getCurValueFromGradientFloat(u_SOLSizeGradientMaxY, normalizedAge),\n\t    a_Random0.z));\n#endif\n\n    return size;\n}\n\n#ifdef RENDERMODE_MESH\nvec3 computeParticleSizeMesh(in vec3 size, in float normalizedAge)\n{\n\n    #ifdef SIZEOVERLIFETIMERANDOMCURVES\n    \tsize *= mix(getCurValueFromGradientFloat(u_SOLSizeGradient, normalizedAge),\n\t\t\t\t\tgetCurValueFromGradientFloat(u_SOLSizeGradientMax, normalizedAge),\n\t\t\t\t\ta_Random0.z);\n    #endif\n\n    #ifdef SIZEOVERLIFETIMERANDOMCURVESSEPERATE\n    \tsize *= vec3(mix(getCurValueFromGradientFloat(u_SOLSizeGradientX, normalizedAge),\n\t\t\t     getCurValueFromGradientFloat(u_SOLSizeGradientMaxX, normalizedAge),\n\t\t    \t a_Random0.z),\n\t\t\t\tmix(getCurValueFromGradientFloat(u_SOLSizeGradientY, normalizedAge),\n\t\t\t\t\tgetCurValueFromGradientFloat(u_SOLSizeGradientMaxY, normalizedAge),\n\t\t\t\t\ta_Random0.z),\n\t\t\t\tmix(getCurValueFromGradientFloat(u_SOLSizeGradientZ, normalizedAge),\n\t\t\t\t\tgetCurValueFromGradientFloat(u_SOLSizeGradientMaxZ, normalizedAge),\n\t\t\t\t\ta_Random0.z));\n    #endif\n\t\n    return size;\n}\n#endif\n\nfloat computeParticleRotationFloat(in float rotation,\n    in float age,\n    in float normalizedAge)\n{\n\t#ifdef ROTATIONOVERLIFETIME\n\t\trotation += mix(\n\t\t\tgetTotalValueFromGradientFloat(u_ROLAngularVelocityGradient, normalizedAge),\n\t\t\tgetTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMax,normalizedAge),\n\t\t\ta_Random0.w);\n\t#endif\n\n\t#ifdef ROTATIONOVERLIFETIMESEPERATE\n\t\trotation += mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientZ,\n\t\t\t\tnormalizedAge),\n\t\tgetTotalValueFromGradientFloat(\n\t\t\tu_ROLAngularVelocityGradientMaxZ, normalizedAge),\n\t\ta_Random0.w);\n\t#endif\n    return rotation;\n}\n\n#if defined(RENDERMODE_MESH) && (defined(ROTATIONOVERLIFETIME) || defined(ROTATIONOVERLIFETIMESEPERATE))\nvec3 computeParticleRotationVec3(in vec3 rotation,\n    in float age,\n    in float normalizedAge)\n{\n    #ifdef ROTATIONOVERLIFETIME\n\t\t\trotation += mix(\n\t\t\tgetTotalValueFromGradientFloat(u_ROLAngularVelocityGradient, normalizedAge),\n\t\t\tgetTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMax,\n\t\t\t\tnormalizedAge),\n\t\t\ta_Random0.w);\n    #endif\n    \n\t#ifdef ROTATIONOVERLIFETIMESEPERATE\n\t\trotation += vec3(mix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientX,\n\t\t\t\t\tnormalizedAge),\n\t\t\t\tgetTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxX,\n\t\t\t\t\tnormalizedAge),\n\t\t\t\ta_Random0.w),\n\t\tmix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientY,\n\t\t\tnormalizedAge),\n\t\t\tgetTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxY,\n\t\t\tnormalizedAge),\n\t\t\ta_Random0.w),\n\t\tmix(getTotalValueFromGradientFloat(u_ROLAngularVelocityGradientZ,\n\t\t\tnormalizedAge),\n\t\t\tgetTotalValueFromGradientFloat(u_ROLAngularVelocityGradientMaxZ,\n\t\t\tnormalizedAge),\n\t\t\ta_Random0.w));\n    #endif\n    return rotation;\n}\n#endif\n\nvec2 computeParticleUV(in vec2 uv, in float normalizedAge)\n{\n\n#ifdef TEXTURESHEETANIMATIONRANDOMCURVE\n    float cycleNormalizedAge = normalizedAge * u_TSACycles;\n    float uvNormalizedAge = cycleNormalizedAge - floor(cycleNormalizedAge);\n    float frame = floor(mix(getFrameFromGradient(u_TSAGradientUVs, uvNormalizedAge),\n\tgetFrameFromGradient(u_TSAMaxGradientUVs, uvNormalizedAge),\n\ta_Random1.x));\n    float totalULength = frame * u_TSASubUVLength.x;\n    float floorTotalULength = floor(totalULength);\n    uv.x += totalULength - floorTotalULength;\n    uv.y += floorTotalULength * u_TSASubUVLength.y;\n#endif\n    return uv;\n}\n\nvoid main()\n{\n    float age = u_CurrentTime - a_DirectionTime.w;\n    float normalizedAge = age / a_ShapePositionStartLifeTime.w;\n    vec3 lifeVelocity;\n    if (normalizedAge < 1.0)\n\t{\n\t    vec3 startVelocity = a_DirectionTime.xyz * a_StartSpeed;\n\t\n\t\t#ifdef VELOCITYOVERLIFETIMERANDOMCURVE\n\t\t\t\tlifeVelocity = computeParticleLifeVelocity(normalizedAge); //计算粒子生命周期速度\n\t\t#endif\n\t\n\t    vec3 gravityVelocity = u_Gravity * age;\n\n\t    vec4 worldRotation;\n\t    \n\t\tif (u_SimulationSpace == 0)\n\t\t\tworldRotation = a_SimulationWorldRotation;\n\t    else\n\t\t\tworldRotation = u_WorldRotation;\n\n\t    // drag\n\t    vec3 dragData = a_DirectionTime.xyz * mix(u_DragConstanct.x, u_DragConstanct.y, a_Random0.x);\n\t\t//miner 计算顶点位置\n\t    vec3 center = computeParticlePosition(startVelocity, lifeVelocity, age, normalizedAge, gravityVelocity, worldRotation, dragData); //计算粒子位置\n\n#ifdef SPHERHBILLBOARD\n\t    vec2 corner = a_CornerTextureCoordinate.xy; // Billboard模式z轴无效\n\t    vec3 cameraUpVector = normalize(u_CameraUp); // TODO:是否外面归一化\n\t    vec3 sideVector = normalize(cross(u_CameraDirection, cameraUpVector));\n\t    vec3 upVector = normalize(cross(sideVector, u_CameraDirection));\n\t    corner *= computeParticleSizeBillbard(a_StartSize.xy, normalizedAge);\n    #if defined(ROTATIONOVERLIFETIME) || defined(ROTATIONOVERLIFETIMESEPERATE)\n\t    if (u_ThreeDStartRotation)\n\t\t{\n\t\t    vec3 rotation = vec3(\n\t\t\ta_StartRotation0.xy,\n\t\t\tcomputeParticleRotationFloat(a_StartRotation0.z, age, normalizedAge));\n\t\t    center += u_SizeScale.xzy * rotationByEuler(corner.x * sideVector + corner.y * upVector, rotation);\n\t\t}\n\t    else\n\t\t{\n\t\t    float rot = computeParticleRotationFloat(a_StartRotation0.x, age, normalizedAge);\n\t\t    float c = cos(rot);\n\t\t    float s = sin(rot);\n\t\t    mat2 rotation = mat2(c, -s, s, c);\n\t\t    corner = rotation * corner;\n\t\t    center += u_SizeScale.xzy * (corner.x * sideVector + corner.y * upVector);\n\t\t}\n    #else\n\t    if (u_ThreeDStartRotation)\n\t\t{\n\t\t    center += u_SizeScale.xzy * rotationByEuler(corner.x * sideVector + corner.y * upVector, a_StartRotation0);\n\t\t}\n\t    else\n\t\t{\n\t\t    float c = cos(a_StartRotation0.x);\n\t\t    float s = sin(a_StartRotation0.x);\n\t\t    mat2 rotation = mat2(c, -s, s, c);\n\t\t    corner = rotation * corner;\n\t\t    center += u_SizeScale.xzy * (corner.x * sideVector + corner.y * upVector);\n\t\t}\n    #endif\n#endif\n\n#ifdef STRETCHEDBILLBOARD\n\t    vec2 corner = a_CornerTextureCoordinate.xy; // Billboard模式z轴无效\n\t    vec3 velocity;\n    #ifdef VELOCITYOVERLIFETIMERANDOMCURVE\n\t    if (u_VOLSpaceType == 0)\n\t\tvelocity = rotationByQuaternions(u_SizeScale * (startVelocity + lifeVelocity),\n\t\t\t       worldRotation)\n\t\t    + gravityVelocity;\n\t    else\n\t\tvelocity = rotationByQuaternions(u_SizeScale * startVelocity, worldRotation) + lifeVelocity + gravityVelocity;\n    #else\n\t    velocity = rotationByQuaternions(u_SizeScale * startVelocity, worldRotation) + gravityVelocity;\n    #endif\n\n\t    vec3 cameraUpVector = normalize(velocity);\n\t    vec3 direction = normalize(center - u_CameraPos);\n\t    vec3 sideVector = normalize(cross(direction, normalize(velocity)));\n\n\t    sideVector = u_SizeScale.xzy * sideVector;\n\t    cameraUpVector = length(vec3(u_SizeScale.x, 0.0, 0.0)) * cameraUpVector;\n\n\t    vec2 size = computeParticleSizeBillbard(a_StartSize.xy, normalizedAge);\n\n\t    const mat2 rotaionZHalfPI = mat2(0.0, -1.0, 1.0, 0.0);\n\t    corner = rotaionZHalfPI * corner;\n\t    corner.y = corner.y - abs(corner.y);\n\n\t    float speed = length(velocity); // TODO:\n\t    center += sign(u_SizeScale.x) * (sign(u_StretchedBillboardLengthScale) * size.x * corner.x * sideVector + (speed * u_StretchedBillboardSpeedScale + size.y * u_StretchedBillboardLengthScale) * corner.y * cameraUpVector);\n#endif\n\n#ifdef HORIZONTALBILLBOARD\n\t    vec2 corner = a_CornerTextureCoordinate.xy; // Billboard模式z轴无效\n\t    const vec3 cameraUpVector = vec3(0.0, 0.0, 1.0);\n\t    const vec3 sideVector = vec3(-1.0, 0.0, 0.0);\n\n\t    float rot = computeParticleRotationFloat(a_StartRotation0.x, age, normalizedAge);\n\t    float c = cos(rot);\n\t    float s = sin(rot);\n\t    mat2 rotation = mat2(c, -s, s, c);\n\t    corner = rotation * corner * cos(0.78539816339744830961566084581988); // TODO:临时缩小cos45,不确定U3D原因\n\t    corner *= computeParticleSizeBillbard(a_StartSize.xy, normalizedAge);\n\t    center += u_SizeScale.xzy * (corner.x * sideVector + corner.y * cameraUpVector);\n#endif\n\n#ifdef VERTICALBILLBOARD\n\t    vec2 corner = a_CornerTextureCoordinate.xy; // Billboard模式z轴无效\n\t    const vec3 cameraUpVector = vec3(0.0, 1.0, 0.0);\n\t    vec3 sideVector = normalize(cross(u_CameraDirection, cameraUpVector));\n\n\t    float rot = computeParticleRotationFloat(a_StartRotation0.x, age, normalizedAge);\n\t    float c = cos(rot);\n\t    float s = sin(rot);\n\t    mat2 rotation = mat2(c, -s, s, c);\n\t    corner = rotation * corner * cos(0.78539816339744830961566084581988); // TODO:临时缩小cos45,不确定U3D原因\n\t    corner *= computeParticleSizeBillbard(a_StartSize.xy, normalizedAge);\n\t    center += u_SizeScale.xzy * (corner.x * sideVector + corner.y * cameraUpVector);\n#endif\n\n#ifdef RENDERMODE_MESH\n\t    vec3 size = computeParticleSizeMesh(a_StartSize, normalizedAge);\n\t\t#if defined(ROTATIONOVERLIFETIME) || defined(ROTATIONOVERLIFETIMESEPERATE)\n\t\t\tif (u_ThreeDStartRotation)\n\t\t\t{\n\t\t\t\tvec3 rotation = vec3(\n\t\t\t\ta_StartRotation0.xy,\n\t\t\t\tcomputeParticleRotationFloat(a_StartRotation0.z, age, normalizedAge));\n\t\t\t\tcenter += rotationByQuaternions(\n\t\t\t\tu_SizeScale * rotationByEuler(a_MeshPosition * size, rotation),\n\t\t\t\tworldRotation);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t#ifdef ROTATIONOVERLIFETIME\n\t\t\t\t\t\tfloat angle = computeParticleRotationFloat(a_StartRotation0.x, age, normalizedAge);\n\t\t\t\t\t\tif (a_ShapePositionStartLifeTime.x != 0.0 || a_ShapePositionStartLifeTime.y != 0.0)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcenter += (rotationByQuaternions(\n\t\t\t\t\t\t\trotationByAxis(\n\t\t\t\t\t\t\t\tu_SizeScale * a_MeshPosition * size,\n\t\t\t\t\t\t\t\tnormalize(cross(vec3(0.0, 0.0, 1.0),\n\t\t\t\t\t\t\t\tvec3(a_ShapePositionStartLifeTime.xy, 0.0))),\n\t\t\t\t\t\t\t\tangle),\n\t\t\t\t\t\t\tworldRotation)); //已验证\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tcenter += u_SizeScale.xzy * (rotationByQuaternions(rotationByAxis(a_MeshPosition * size, vec3(0.0, -1.0, 0.0), angle), worldRotation));\n\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\n\t\t\t\t#endif\n\t\t\t\t#ifdef ROTATIONOVERLIFETIMESEPERATE\n\t\t\t\t\t\t// TODO:是否应合并if(u_ThreeDStartRotation)分支代码,待测试\n\t\t\t\t\t\tvec3 angle = computeParticleRotationVec3(\n\t\t\t\t\t\tvec3(0.0, 0.0, -a_StartRotation0.x), age, normalizedAge);\n\t\t\t\t\t\tcenter += (rotationByQuaternions(\n\t\t\t\t\t\trotationByEuler(u_SizeScale * a_MeshPosition * size,\n\t\t\t\t\t\t\tvec3(angle.x, angle.y, angle.z)),\n\t\t\t\t\t\tworldRotation)); //已验证\n\t\t\t\t#endif\n\t\t}\n    #else\n\t    if (u_ThreeDStartRotation)\n\t\t{\n\t\t    center += rotationByQuaternions(\n\t\t\tu_SizeScale * rotationByEuler(a_MeshPosition * size, a_StartRotation0),\n\t\t\tworldRotation); //已验证\n\t\t}\n\t    else\n\t\t{\n\t\t    if (a_ShapePositionStartLifeTime.x != 0.0 || a_ShapePositionStartLifeTime.y != 0.0)\n\t\t\t{\n\t\t\t    if (u_SimulationSpace == 0)\n\t\t\t\t\tcenter += rotationByAxis(\n\t\t\t\t\t\tu_SizeScale * a_MeshPosition * size,\n\t\t\t\t\t\tnormalize(cross(vec3(0.0, 0.0, 1.0),\n\t\t\t\t\t\tvec3(a_ShapePositionStartLifeTime.xy, 0.0))),\n\t\t\t\t\t\ta_StartRotation0.x);\n\t\t\t    else if (u_SimulationSpace == 1)\n\t\t\t\t\tcenter += (rotationByQuaternions(\n\t\t\t\t\t\tu_SizeScale * rotationByAxis(a_MeshPosition * size, normalize(cross(vec3(0.0, 0.0, 1.0), vec3(a_ShapePositionStartLifeTime.xy, 0.0))), a_StartRotation0.x),\n\t\t\t\t\t\tworldRotation)); //已验证\n\t\t\t}\n\t\t    else\n\t\t\t{\n\t\t\t\tif (u_SimulationSpace == 0)\n\t\t\t\t\tcenter += u_SizeScale * rotationByAxis(a_MeshPosition * size, vec3(0.0, -1.0, 0.0), a_StartRotation0.x);\n\t\t\t\telse if (u_SimulationSpace == 1)\n\t\t\t\t\tcenter += rotationByQuaternions(\n\t\t\t\t\tu_SizeScale * rotationByAxis(a_MeshPosition * size, vec3(0.0, -1.0, 0.0), a_StartRotation0.x),\n\t\t\t\t\tworldRotation);\n\t\t\t}\n\t\t}\n    #endif\n\t    v_MeshColor = a_MeshColor;\n#endif\n\t    gl_Position = u_Projection * u_View * vec4(center, 1.0);\n\t\tvec4 startcolor = gammaToLinear(a_StartColor);\n\t    v_Color = computeParticleColor(startcolor, normalizedAge);\n#ifdef DIFFUSEMAP\n\t    vec2 simulateUV;\n    #if defined(SPHERHBILLBOARD) || defined(STRETCHEDBILLBOARD) || defined(HORIZONTALBILLBOARD) || defined(VERTICALBILLBOARD)\n\t    simulateUV = a_SimulationUV.xy + a_CornerTextureCoordinate.zw * a_SimulationUV.zw;\n\t    v_TextureCoordinate = computeParticleUV(simulateUV, normalizedAge);\n    #endif\n\t\n    #ifdef RENDERMODE_MESH\n\t    simulateUV = a_SimulationUV.xy + a_MeshTextureCoordinate * a_SimulationUV.zw;\n\t    v_TextureCoordinate = computeParticleUV(simulateUV, normalizedAge);\n    #endif\n\t    v_TextureCoordinate = TransformUV(v_TextureCoordinate, u_TilingOffset);\n#endif\n\t}\n    else\n\t{\n\t    gl_Position = vec4(2.0, 2.0, 2.0, 1.0); // Discard use out of X(-1,1),Y(-1,1),Z(0,1)\n\t}\n    gl_Position = remapPositionZ(gl_Position);\n\t#ifdef FOG\n        FogHandle(gl_Position.z);\n    #endif\n}\n','#define SHADER_NAME ParticleFS\n\n#include "Scene.glsl";\n#include "SceneFog.glsl";\n#include "Color.glsl";\n\nconst vec4 c_ColorSpace = vec4(4.59479380, 4.59479380, 4.59479380, 2.0);\n\nvarying vec4 v_Color;\nvarying vec2 v_TextureCoordinate;\n// uniform sampler2D u_texture;\n// uniform vec4 u_Tintcolor;\n\n#ifdef RENDERMODE_MESH\nvarying vec4 v_MeshColor;\n#endif\n\nvoid main()\n{\n    vec4 color;\n#ifdef RENDERMODE_MESH\n    color = v_MeshColor;\n#else\n    color = vec4(1.0);\n#endif\n\n#ifdef DIFFUSEMAP\n    vec4 colorT = texture2D(u_texture, v_TextureCoordinate);\n    #ifdef Gamma_u_texture\n    colorT = gammaToLinear(colorT);\n    #endif // Gamma_u_SpecularTexture\n    #ifdef TINTCOLOR\n    color *= colorT * u_Tintcolor * c_ColorSpace * v_Color;\n    #else\n    color *= colorT * v_Color;\n    #endif // TINTCOLORd\n#else\n    #ifdef TINTCOLOR\n    color *= u_Tintcolor * c_ColorSpace * v_Color;\n    #else\n    color *= v_Color;\n    #endif // TINTCOLOR\n#endif\n\n#ifdef ALPHATEST\n    if (color.a < u_AlphaTestValue)\n\t{\n\t    discard;\n\t}\n#endif // ALPHATEST\n\n\n#ifdef FOG\n    color.rgb = scenUnlitFog(color.rgb);\n#endif // FOG\n    gl_FragColor = color;\n\n    gl_FragColor = outputTransform(gl_FragColor);\n}')}}class SkyProceduralShaderInit{static init(){let a={a_Position:[t.VertexMesh.MESH_POSITION0,e.ShaderDataType.Vector4]},r={u_SunSize:e.ShaderDataType.Float,u_SunSizeConvergence:e.ShaderDataType.Float,u_AtmosphereThickness:e.ShaderDataType.Float,u_SkyTint:e.ShaderDataType.Color,u_GroundTint:e.ShaderDataType.Color,u_Exposure:e.ShaderDataType.Float},n={u_SunSize:.04,u_SunSizeConvergence:5,u_AtmosphereThickness:1,u_SkyTint:new t.Color(.5,.5,.5,1),u_GroundTint:new t.Color(.369,.349,.341,1),u_Exposure:1.3},i=t.Shader3D.add("SkyProcedural");i.shaderType=t.ShaderFeatureType.Sky;let o=new t.SubShader(a,r,n);i.addSubShader(o);let s=o.addShaderPass("#define SHADER_NAME SkyProceduralVS\n\n#include \"SkyCommon.glsl\";\n\n\n#define OUTER_RADIUS 1.025\n#define RAYLEIGH (mix(0.0, 0.0025, pow(u_AtmosphereThickness,2.5)))// Rayleigh constant Rayleigh为夜空光和极光亮度单位\n#define MIE 0.0010             // Mie constant 米氏散射\n#define SUN_BRIGHTNESS 20.0    // Sun brightness\n#define MAX_SCATTER 50.0 // Maximum scattering value, to prevent math overflows on Adrenos\n\nconst float SKY_GROUND_THRESHOLD = 0.02;\nconst float outerRadius = OUTER_RADIUS;\nconst float outerRadius2 = OUTER_RADIUS*OUTER_RADIUS;\nconst float innerRadius = 1.0;\nconst float innerRadius2 = 1.0;\nconst float cameraHeight = 0.0001;\n\nconst float HDSundiskIntensityFactor = 15.0;\nconst float simpleSundiskIntensityFactor = 27.0;\n\nconst float sunScale = 400.0 * SUN_BRIGHTNESS;\nconst float kmESun = MIE * SUN_BRIGHTNESS;\nconst float km4PI = MIE * 4.0 * 3.14159265;\nconst float scale = 1.0 / (OUTER_RADIUS - 1.0);\nconst float scaleDepth = 0.25;\nconst float scaleOverScaleDepth = (1.0 / (OUTER_RADIUS - 1.0)) / 0.25;\nconst float samples = 2.0; // THIS IS UNROLLED MANUALLY, DON'T TOUCH\n\n// RGB wavelengths        .35 (.62=158), .43 (.68=174), .525 (.75=190)\nconst vec3 c_DefaultScatteringWavelength = vec3(0.65, 0.57, 0.475);//默认散射波长\nconst vec3 c_VariableRangeForScatteringWavelength = vec3(0.15, 0.15, 0.15);//散射播放的可变范围\n\nvarying vec3 v_GroundColor;\nvarying vec3 v_SkyColor;\n\n#ifdef SUN_HIGH_QUALITY\n\tvarying vec3 v_Vertex;\n#elif defined(SUN_SIMPLE)\n\tvarying vec3 v_RayDir;\n#else\n\tvarying float v_SkyGroundFactor;\n#endif\n\n#if defined(SUN_HIGH_QUALITY)||defined(SUN_SIMPLE)\n\tvarying vec3 v_SunColor;\n#endif\n\n// Calculates the Rayleigh phase function\nfloat getRayleighPhase(vec3 light, vec3 ray) \n{\n\tfloat eyeCos = dot(light, ray);\n\treturn 0.75 + 0.75*eyeCos*eyeCos;\n}\n\nfloat scaleAngle(float inCos)\n{\n\tfloat x = 1.0 - inCos;\n\treturn 0.25 * exp(-0.00287 + x*(0.459 + x*(3.83 + x*(-6.80 + x*5.25))));\n}\n\n\nvoid main(){\n    gl_Position = u_SkyProjectionViewMat*a_Position;\n\n    vec3 skyTintInGammaSpace = pow(u_SkyTint.xyz,vec3(0.45));//u_SkyTint.xyz;//支持非GAMMA空间后要调整\n\tvec3 scatteringWavelength = mix(c_DefaultScatteringWavelength-c_VariableRangeForScatteringWavelength,c_DefaultScatteringWavelength+c_VariableRangeForScatteringWavelength,vec3(1.0) - skyTintInGammaSpace); // using Tint in sRGB+ gamma allows for more visually linear interpolation and to keep (0.5) at (128, gray in sRGB) point\n\tvec3 invWavelength = 1.0 / pow(scatteringWavelength, vec3(4.0));\n\n\tfloat krESun = RAYLEIGH * SUN_BRIGHTNESS;\n\tfloat kr4PI = RAYLEIGH * 4.0 * 3.14159265;\n\n\tvec3 cameraPos = vec3(0.0,innerRadius + cameraHeight,0.0); // The camera's current position\n\n\t// Get the ray from the camera to the vertex and its length (which is the far point of the ray passing through the atmosphere)\n\tvec3 eyeRay = normalize(a_Position.xyz);\n\n\tfloat far = 0.0;\n\tvec3 cIn, cOut;\n\tif (eyeRay.y >= 0.0) {// Sky\n\t\t// Calculate the length of the \"atmosphere\"\n\t\tfar = sqrt(outerRadius2 + innerRadius2 * eyeRay.y * eyeRay.y - innerRadius2) - innerRadius * eyeRay.y;\n\n\t\t// Calculate the ray's starting position, then calculate its scattering offset\n\t\tfloat height = innerRadius + cameraHeight;\n\t\tfloat depth = exp(scaleOverScaleDepth * -cameraHeight);\n\t\tfloat startAngle = dot(eyeRay, cameraPos) / height;\n\t\tfloat startOffset = depth*scaleAngle(startAngle);\n\n\t\t// Initialize the scattering loop variables\n\t\tfloat sampleLength = far / samples;\n\t\tfloat scaledLength = sampleLength * scale;\n\t\tvec3 sampleRay = eyeRay * sampleLength;\n\t\tvec3 samplePoint = cameraPos + sampleRay * 0.5;\n\n\t\tvec3 frontColor = vec3(0.0);\n\t\t//unrolling this manually to avoid some platform for loop slow\n\t\t{\n\t\t\tfloat height = length(samplePoint);\n\t\t\tfloat depth = exp(scaleOverScaleDepth * (innerRadius - height));\n\t\t\tfloat lightAngle = dot(-u_SunLight_direction, samplePoint) / height;\n\t\t\tfloat cameraAngle = dot(eyeRay, samplePoint) / height;\n\t\t\tfloat scatter = (startOffset + depth*(scaleAngle(lightAngle) - scaleAngle(cameraAngle)));\n\t\t\tvec3 attenuate = exp(-clamp(scatter, 0.0, MAX_SCATTER) * (invWavelength * kr4PI + km4PI));\n\n\t\t\tfrontColor += attenuate * (depth * scaledLength);\n\t\t\tsamplePoint += sampleRay;\n\t\t}\n\t\t{\n\t\t\tfloat height = length(samplePoint);\n\t\t\tfloat depth = exp(scaleOverScaleDepth * (innerRadius - height));\n\t\t\tfloat lightAngle = dot(-u_SunLight_direction, samplePoint) / height;\n\t\t\tfloat cameraAngle = dot(eyeRay, samplePoint) / height;\n\t\t\tfloat scatter = (startOffset + depth*(scaleAngle(lightAngle) - scaleAngle(cameraAngle)));\n\t\t\tvec3 attenuate = exp(-clamp(scatter, 0.0, MAX_SCATTER) * (invWavelength * kr4PI + km4PI));\n\n\t\t\tfrontColor += attenuate * (depth * scaledLength);\n\t\t\tsamplePoint += sampleRay;\n\t\t}\n\n\t\t// Finally, scale the Mie and Rayleigh colors and set up the varying variables for the pixel shader\n\t\tcIn = frontColor * (invWavelength * krESun);\n\t\tcOut = frontColor * kmESun;\n\t} else {// Ground\n\t\tfar = (-cameraHeight) / (min(-0.001, eyeRay.y));\n\t\tvec3 pos = cameraPos + far * eyeRay;\n\n\t\t// Calculate the ray's starting position, then calculate its scattering offset\n\t\tfloat depth = exp((-cameraHeight) * (1.0/scaleDepth));\n\t\tfloat cameraAngle = dot(-eyeRay, pos);\n\t\tfloat lightAngle = dot(-u_SunLight_direction, pos);\n\t\tfloat cameraScale = scaleAngle(cameraAngle);\n\t\tfloat lightScale = scaleAngle(lightAngle);\n\t\tfloat cameraOffset = depth*cameraScale;\n\t\tfloat temp = lightScale + cameraScale;\n\n\t\t// Initialize the scattering loop variables\n\t\tfloat sampleLength = far / samples;\n\t\tfloat scaledLength = sampleLength * scale;\n\t\tvec3 sampleRay = eyeRay * sampleLength;\n\t\tvec3 samplePoint = cameraPos + sampleRay * 0.5;\n\n\t\t// Now loop through the sample rays\n\t\tvec3 frontColor = vec3(0.0, 0.0, 0.0);\n\t\tvec3 attenuate;\n\n\t\t// Loop removed because we kept hitting SM2.0 temp variable limits. Doesn't affect the image too much.\n\t\t{\n\t\t\tfloat height = length(samplePoint);\n\t\t\tfloat depth = exp(scaleOverScaleDepth * (innerRadius - height));\n\t\t\tfloat scatter = depth*temp - cameraOffset;\n\t\t\tattenuate = exp(-clamp(scatter, 0.0, MAX_SCATTER) * (invWavelength * kr4PI + km4PI));\n\t\t\tfrontColor += attenuate * (depth * scaledLength);\n\t\t\tsamplePoint += sampleRay;\n\t\t}\n\n\t\tcIn = frontColor * (invWavelength * krESun + kmESun);\n\t\tcOut = clamp(attenuate, 0.0, 1.0);\n\t}\n\n\t#ifdef SUN_HIGH_QUALITY\n\t\tv_Vertex = -a_Position.xyz;\n\t#elif defined(SUN_SIMPLE) \n\t\tv_RayDir = -eyeRay;\n\t#else\n\t\tv_SkyGroundFactor = -eyeRay.y / SKY_GROUND_THRESHOLD;\n\t#endif\n\n\t// if we want to calculate color in vprog:\n\t// in case of linear: multiply by _Exposure in here (even in case of lerp it will be common multiplier, so we can skip mul in fshader)\n\tv_GroundColor = u_Exposure * (cIn + u_GroundTint.xyz * cOut);//u_GroundColor*u_GroundColor is gamma space convert to linear space\n\tv_SkyColor    = u_Exposure * (cIn * getRayleighPhase(-u_SunLight_direction, -eyeRay));\n\n\t\n\t// The sun should have a stable intensity in its course in the sky. Moreover it should match the highlight of a purely specular material.\n\t// This matching was done using the Unity3D standard shader BRDF1 on the 5/31/2017\n\t// Finally we want the sun to be always bright even in LDR thus the normalization of the lightColor for low intensity.\n\tfloat lightColorIntensity = clamp(length(u_SunLight_color.xyz), 0.25, 1.0);\n\n\t#ifdef SUN_HIGH_QUALITY \n\t\tv_SunColor = HDSundiskIntensityFactor * clamp(cOut,0.0,1.0) * u_SunLight_color.xyz / lightColorIntensity;\n\t#elif defined(SUN_SIMPLE) \n\t\tv_SunColor = simpleSundiskIntensityFactor * clamp(cOut * sunScale,0.0,1.0) * u_SunLight_color.xyz / lightColorIntensity;\n\t#endif\n\tgl_Position= remapSkyPositionZ(gl_Position);\n}",'#define SHADER_NAME SkyProceduralFS\n\n#include "Color.glsl";\n\nconst float MIE_G = -0.990;\nconst float MIE_G2 = 0.9801;\nconst float SKY_GROUND_THRESHOLD = 0.02;\n\n// uniform float u_SunSize;\n// uniform float u_SunSizeConvergence;\n\nuniform vec3 u_SunLight_direction;\n\nvarying vec3 v_GroundColor;\nvarying vec3 v_SkyColor;\n\n#ifdef SUN_HIGH_QUALITY\nvarying vec3 v_Vertex;\n#elif defined(SUN_SIMPLE)\nvarying vec3 v_RayDir;\n#else\nvarying float v_SkyGroundFactor;\n#endif\n\n#if defined(SUN_HIGH_QUALITY) || defined(SUN_SIMPLE)\nvarying vec3 v_SunColor;\n#endif\n\n// Calculates the Mie phase function\nfloat getMiePhase(float eyeCos, float eyeCos2)\n{\n    float temp = 1.0 + MIE_G2 - 2.0 * MIE_G * eyeCos;\n    temp = pow(temp, pow(u_SunSize, 0.65) * 10.0);\n    temp = max(temp, 1.0e-4); // prevent division by zero, esp. in half precision\n    temp = 1.5 * ((1.0 - MIE_G2) / (2.0 + MIE_G2)) * (1.0 + eyeCos2) / temp;\n    return temp;\n}\n\n// Calculates the sun shape\nfloat calcSunAttenuation(vec3 lightPos, vec3 ray)\n{\n#ifdef SUN_HIGH_QUALITY\n    float focusedEyeCos = pow(clamp(dot(lightPos, ray), 0.0, 1.0), u_SunSizeConvergence);\n    return getMiePhase(-focusedEyeCos, focusedEyeCos * focusedEyeCos);\n#else // SUN_SIMPLE\n    vec3 delta = lightPos - ray;\n    float dist = length(delta);\n    float spot = 1.0 - smoothstep(0.0, u_SunSize, dist);\n    return spot * spot;\n#endif\n}\n\nvoid main()\n{\n    // if y > 1 [eyeRay.y < -SKY_GROUND_THRESHOLD] - ground\n    // if y >= 0 and < 1 [eyeRay.y <= 0 and > -SKY_GROUND_THRESHOLD] - horizon\n    // if y < 0 [eyeRay.y > 0] - sky\n    vec3 col = vec3(0.0, 0.0, 0.0);\n\n#ifdef SUN_HIGH_QUALITY\n    vec3 ray = normalize(v_Vertex);\n    float y = ray.y / SKY_GROUND_THRESHOLD;\n#elif defined(SUN_SIMPLE)\n    vec3 ray = v_RayDir;\n    float y = ray.y / SKY_GROUND_THRESHOLD;\n#else\n    float y = v_SkyGroundFactor;\n#endif\n\n    // if we did precalculate color in vprog: just do lerp between them\n    col = mix(v_SkyColor, v_GroundColor, clamp(y, 0.0, 1.0));\n\n#if defined(SUN_HIGH_QUALITY) || defined(SUN_SIMPLE)\n    if (y < 0.0)\n\tcol += v_SunColor * calcSunAttenuation(-u_SunLight_direction, -ray);\n#endif\n\n    // col = sqrt(col);//linear space convert to gamma space\n    gl_FragColor = vec4(col, 1.0);\n\n    gl_FragColor = outputTransform(gl_FragColor);\n}\n');s.renderState.depthTest=RenderState.DEPTHTEST_LEQUAL,s.renderState.cull=t.CullMode.Back,s.renderState.depthWrite=!1,s.renderState.stencilWrite=!1,s.statefirst=!0}}class SkyPanoramicShaderInit{static init(){let a={a_Position:[t.VertexMesh.MESH_POSITION0,e.ShaderDataType.Vector4]},r={u_TintColor:e.ShaderDataType.Color,u_Rotation:e.ShaderDataType.Float,u_Texture:e.ShaderDataType.Texture2D,u_Exposure:e.ShaderDataType.Float},n={u_TintColor:new t.Color(.5,.5,.5,1),u_Exposure:1.3,u_Rotation:0,u_Texture:t.Texture2D.grayTexture},i=t.Shader3D.add("SkyPanoramic");i.shaderType=t.ShaderFeatureType.Sky;let o=new t.SubShader(a,r,n);i.addSubShader(o);let s=o.addShaderPass('#define SHADER_NAME SkyPanoramicVS\n\n#include "SkyCommon.glsl";\n\n\nvarying vec3 v_Texcoord;\nvarying vec2 v_Image180ScaleAndCutoff;\nvarying vec4 v_Layout3DScaleAndOffset;\n\nvoid main()\n{\n\tvec4 position = rotateAroundYInDegrees(a_Position, u_Rotation);\n\t\n\n\tv_Texcoord=vec3(-a_Position.x,-a_Position.y,a_Position.z);// NOTE: -a_Position.x convert coords system\n\n\t// Calculate constant horizontal scale and cutoff for 180 (vs 360) image type\n\tv_Image180ScaleAndCutoff = vec2(1.0, 1.0);// 360 degree mode\n\n\t// Calculate constant scale and offset for 3D layouts\n\tv_Layout3DScaleAndOffset = vec4(0,0,1,1);\n\tgl_Position = u_SkyProjectionViewMat*position;\n\tgl_Position=remapSkyPositionZ(gl_Position);\n\n}\n','#define SHADER_NAME SkyPanoramicVS\n\n#include "Color.glsl";\n\nvarying vec3 v_Texcoord;\nvarying vec2 v_Image180ScaleAndCutoff;\nvarying vec4 v_Layout3DScaleAndOffset;\nconst vec4 c_ColorSpace = vec4(4.59479380, 4.59479380, 4.59479380, 2.0);\n\nvec2 ToRadialCoords(vec3 coords)\n{\n    vec3 normalizedCoords = normalize(coords);\n    float latitude = acos(normalizedCoords.y);\n    float longitude = atan(normalizedCoords.z, normalizedCoords.x);\n    vec2 sphereCoords = vec2(longitude, latitude) * vec2(0.5 / PI, 1.0 / PI);\n    return vec2(0.5, 1.0) - sphereCoords;\n}\n\nvoid main()\n{\n    vec2 tc = ToRadialCoords(v_Texcoord);\n    if (tc.x > v_Image180ScaleAndCutoff.y)\n\tgl_FragColor = vec4(0, 0, 0, 1);\n    tc.x = mod(tc.x * v_Image180ScaleAndCutoff.x, 1.0);\n    tc = (tc + v_Layout3DScaleAndOffset.xy) * v_Layout3DScaleAndOffset.zw;\n\n    mediump vec4 tex = texture2D(u_Texture, tc);\n#ifdef Gamma_u_Texture\n    tex = gammaToLinear(tex);\n#endif // Gamma_u_Texture\n    mediump vec3 c = tex.xyz;\n    c = c * u_TintColor.rgb * c_ColorSpace.rgb;\n    c *= u_Exposure;\n    gl_FragColor = vec4(c, 1.0);\n\n    gl_FragColor = outputTransform(gl_FragColor);\n}\n');s.renderState.depthTest=RenderState.DEPTHTEST_LEQUAL,s.renderState.cull=t.CullMode.Back,s.renderState.depthWrite=!1,s.renderState.stencilWrite=!1,s.statefirst=!0}}var P;class ACESShaderLib{static init(){t.Shader3D.addInclude("ACES_UtillitiesColor.glsl","#if !defined(UtillitiesColor_lib)\n#define UtillitiesColor_lib\n\n// Transformations between CIE XYZ tristimulus values and CIE x,y\n// chromaticity coordinates\nvec3 XYZ_2_xyY(vec3 XYZ)\n{\n    vec3 xyY;\n    float divisor = max(XYZ.x + XYZ.y + XYZ.z, 1e-10);\n    xyY.x = XYZ.x / divisor;\n    xyY.y = XYZ.y / divisor;\n    xyY.z = XYZ.y;\n    return xyY;\n}\n\nvec3 xyY_2_XYZ(vec3 xyY)\n{\n    vec3 XYZ;\n    XYZ.x = xyY.x * xyY.z / max(xyY.y, 1e-10);\n    XYZ.y = xyY.z;\n    XYZ.z = (1.0 - xyY.x - xyY.y) * xyY.z / max(xyY.y, 1e-10);\n    return XYZ;\n}\n\nfloat rgb_2_yc(vec3 rgb, float ycRadiusWeight)\n{\n    float r = rgb.r;\n    float g = rgb.g;\n    float b = rgb.b;\n    float k = b * (b - g) + g * (g - r) + r * (r - b);\n    k = max(MEDIUMP_FLT_MIN, k);\n    float chroma = sqrt(k);\n    return (b + g + r + ycRadiusWeight * chroma) / 3.0;\n}\n\nfloat rgb_2_yc(vec3 rgb)\n{\n    return rgb_2_yc(rgb, 1.75);\n}\n\n// Transformations from RGB to other color representations\n\n// Returns a geometric hue angle in degrees (0-360) based on RGB values.\nfloat rgb_2_hue(vec3 rgb)\n{\n    float hue;\n    // For neutral colors, hue is undefined and the function will return a quiet NaN value.\n    // if (rgb.r == rgb.g && rgb.g == rgb.b) {\n    //     // hue = FLT_NAN;\n    //     // todo FLT_NAN\n    //     hue = 0.0;\n    // } else {\n    //     hue = (180.0 * INVERT_PI) * atan2(sqrt(3.0) * (rgb.g - rgb.b), 2.0 * rgb.r - rgb.g - rgb.b);\n    // }\n    if (rgb.x == rgb.y && rgb.y == rgb.z)\n        hue = 0.0; // RGB triplets where RGB are equal have an undefined hue\n    else\n        hue = (180.0 * INVERT_PI) * atan(sqrt(3.0) * (rgb.y - rgb.z), 2.0 * rgb.x - rgb.y - rgb.z);\n\n    if (hue < 0.0) {\n        hue = hue + 360.0;\n    }\n\n    return hue;\n}\n\n#endif // UtillitiesColor_lib"),t.Shader3D.addInclude("ACES_TransformCommon.glsl","#if !defined(TransformCommon_lib)\n    #define TransformCommon_lib\n\nconst float TINY = 1e-10;\n\n// sRGB D65 to AP0 D60\n// https://www.colour-science.org:8010/apps/rgb_colourspace_transformation_matrix CAT 02\nconst mat3 sRGB_to_AP0_MAT = mat3(\n    vec3(0.4395856442, 0.0895395735, 0.0173871832),\n    vec3(0.3839294030, 0.8147498351, 0.1087391143),\n    vec3(0.1765327364, 0.0956836061, 0.8738205876));\n\n// sRGB D65 to AP1 D60\n// https://www.colour-science.org:8010/apps/rgb_colourspace_transformation_matrix CAT 02\nconst mat3 sRGB_to_AP1_MAT = mat3(\n    vec3(0.6131178129, 0.0699340823, 0.0204629926),\n    vec3(0.3411819959, 0.9181030375, 0.1067686634),\n    vec3(0.0457873443, 0.0119327755, 0.8727159106));\n\nconst mat3 AP1_to_XYZ_MAT = mat3(\n    vec3(0.6624541811, 0.2722287168, -0.0055746495),\n    vec3(0.1340042065, 0.6740817658, 0.0040607335),\n    vec3(0.1561876870, 0.0536895174, 1.0103391003));\n\nconst mat3 AP0_to_AP1_MAT = mat3(\n    vec3(1.4514393161, -0.0765537734, 0.0083161484),\n    vec3(-0.2365107469, 1.1762296998, -0.0060324498),\n    vec3(-0.2149285693, -0.0996759264, 0.9977163014));\n\nconst mat3 AP1_to_AP0_MAT = mat3(\n    vec3(0.6954522414, 0.0447945634, -0.0055258826),\n    vec3(0.1406786965, 0.8596711185, 0.0040252103),\n    vec3(0.1638690622, 0.0955343182, 1.0015006723));\n\nconst mat3 XYZ_to_AP1_MAT = mat3(\n    vec3(1.6410233797, -0.6636628587, 0.0117218943),\n    vec3(-0.3248032942, 1.6153315917, -0.0082844420),\n    vec3(-0.2364246952, 0.0167563477, 0.9883948585));\n\nconst vec3 AP1_RGB2Y = vec3(0.2722287168, 0.6740817658, 0.0536895174);\n\nfloat ACES_to_ACEScc(float x)\n{\n    // if (x <= 0.0)\n    // return -0.35828683;\n    // else if (x < pow(2.0, -15.0))\n    // return (log2(pow(2.0, -16.0) + x * 0.5) + 9.72) / 17.52;\n    // else\n    // return (log2(x) + 9.72) / 17.52;\n\n    return (x < 0.00003051757) ? (log2(0.00001525878 + x * 0.5) + 9.72) / 17.52 : (log2(x) + 9.72) / 17.52;\n}\n\nvec3 ACES_to_ACEScc(vec3 x)\n{\n    x = clamp(x, vec3(0.0), vec3(MEDIUMP_FLT_MAX));\n    x.x = ACES_to_ACEScc(x.x);\n    x.y = ACES_to_ACEScc(x.y);\n    x.z = ACES_to_ACEScc(x.z);\n\n    return x;\n}\n\nfloat ACEScc_to_ACES(float x)\n{\n    if (x < -0.3013698630)\n\treturn (pow(2.0, x * 17.52 - 9.72) - pow(2.0, -16.0)) * 2.0;\n    else if (x < (log2(MEDIUMP_FLT_MAX) + 9.72) / 17.52)\n\treturn pow(2.0, x * 17.52 - 9.72);\n    else\n\treturn MEDIUMP_FLT_MAX;\n}\n\nvec3 ACEScc_to_ACES(vec3 x)\n{\n    x.x = ACEScc_to_ACES(x.x);\n    x.y = ACEScc_to_ACES(x.y);\n    x.z = ACEScc_to_ACES(x.z);\n    return x;\n}\n\nfloat rgb_2_saturation(vec3 rgb)\n{\n    float rgbmax = vecmax(rgb);\n    float rgbmin = vecmin(rgb);\n    return (max(rgbmax, TINY) - max(rgbmin, TINY)) / max(rgbmax, 1e-2);\n}\n\n#endif // TransformCommon_lib"),t.Shader3D.addInclude("ACES_Tonescales.glsl","#if !defined(Tonescales_lib)\n#define Tonescales_lib\n\nconst mat3 M = mat3(\n    vec3(0.5, -1.0, 0.5),\n    vec3(-1.0, 1.0, 0.5),\n    vec3(0.5, 0.0, 0.0));\n\nfloat segmented_spline_c5_fwd(float x)\n{\n#ifdef GRAPHICS_API_GLES3\n    const float coefsLow[6] = float[6](-4.0000000000, -4.0000000000, -3.1573765773, -0.4852499958, 1.8477324706, 1.8477324706);\n    const float coefsHigh[6] = float[6](-0.7185482425, 2.0810307172, 3.6681241237, 4.0000000000, 4.0000000000, 4.0000000000);\n#else\n    const float coefsLow_0 = -4.0000000000;\n    const float coefsLow_1 = -4.0000000000;\n    const float coefsLow_2 = -3.1573765773;\n    const float coefsLow_3 = -0.4852499958;\n    const float coefsLow_4 = 1.8477324706;\n    const float coefsLow_5 = 1.8477324706;\n\n    const float coefsHigh_0 = -0.7185482425;\n    const float coefsHigh_1 = 2.0810307172;\n    const float coefsHigh_2 = 3.6681241237;\n    const float coefsHigh_3 = 4.0000000000;\n    const float coefsHigh_4 = 4.0000000000;\n    const float coefsHigh_5 = 4.0000000000;\n#endif // GRAPHICS_API_GLES3\n\n    const vec2 minPoint = vec2(0.0000054931640625, 0.0001);\n    const vec2 midPoint = vec2(0.18, 4.8);\n    const vec2 maxPoint = vec2(47185.92, 10000.);\n    const float slopeLow = 0.0;\n    const float slopeHigh = 0.0;\n\n    const int N_KNOTS_LOW = 4;\n    const int N_KNOTS_HIGH = 4;\n\n    float logx = log10(max(x, MEDIUMP_FLT_MIN));\n    float logy;\n\n    if (logx <= log10(minPoint.x)) {\n        logy = logx * slopeLow + (log10(minPoint.y) - slopeLow * log10(minPoint.x));\n    } else if ((logx > log10(minPoint.x)) && (logx < log10(midPoint.x))) {\n        float knot_coord = float(N_KNOTS_LOW - 1) * (logx - log10(minPoint.x)) / (log10(midPoint.x) - log10(minPoint.x));\n        int j = int(knot_coord);\n        float t = knot_coord - float(j);\n        vec3 cf;\n#ifdef GRAPHICS_API_GLES3\n        cf = vec3(coefsLow[j], coefsLow[j + 1], coefsLow[j + 2]);\n#else\n        if (j <= 0) {\n            cf = vec3(coefsLow_0, coefsLow_1, coefsLow_2);\n        } else if (j == 1) {\n            cf = vec3(coefsLow_1, coefsLow_2, coefsLow_3);\n        } else if (j == 2) {\n            cf = vec3(coefsLow_2, coefsLow_3, coefsLow_4);\n        } else { // if (j == 3)\n            cf = vec3(coefsLow_3, coefsLow_4, coefsLow_5);\n        }\n#endif // GRAPHICS_API_GLES3\n\n        vec3 monomials = vec3(t * t, t, 1.);\n        logy = dot(monomials, M * cf);\n    } else if ((logx >= log10(midPoint.x)) && (logx < log10(maxPoint.x))) {\n        float knot_coord = float(N_KNOTS_HIGH - 1) * (logx - log10(midPoint.x)) / (log10(maxPoint.x) - log10(midPoint.x));\n        int j = int(knot_coord);\n        float t = knot_coord - float(j);\n        vec3 cf;\n#ifdef GRAPHICS_API_GLES3\n        cf = vec3(coefsHigh[j], coefsHigh[j + 1], coefsHigh[j + 2]);\n#else\n        if (j <= 0) {\n            cf = vec3(coefsHigh_0, coefsHigh_1, coefsHigh_2);\n        } else if (j == 1) {\n            cf = vec3(coefsHigh_1, coefsHigh_2, coefsHigh_3);\n        } else if (j == 2) {\n            cf = vec3(coefsHigh_2, coefsHigh_3, coefsHigh_4);\n        } else { // if (j == 3)\n            cf = vec3(coefsHigh_3, coefsHigh_4, coefsHigh_5);\n        }\n#endif // #ifdef GRAPHICS_API_GLES3\n        vec3 monomials = vec3(t * t, t, 1.);\n        logy = dot(monomials, M * cf);\n    } else {\n        logy = logx * slopeHigh + (log10(maxPoint.y) - slopeHigh * log10(maxPoint.x));\n    }\n    return pow(10.0, logy);\n}\n\nfloat segmented_spline_c9_fwd(float x)\n{\n// ODT_48nits\n#ifdef GRAPHICS_API_GLES3\n    const float coefsLow[10] = float[10](-1.6989700043, -1.6989700043, -1.4779000000, -1.2291000000, -0.8648000000, -0.4480000000, 0.0051800000, 0.4511080334, 0.9113744414, 0.9113744414);\n    const float coefsHigh[10] = float[10](0.5154386965, 0.8470437783, 1.1358000000, 1.3802000000, 1.5197000000, 1.5985000000, 1.6467000000, 1.6746091357, 1.6878733390, 1.6878733390);\n#else\n    const float coefsLow_0 = -1.6989700043;\n    const float coefsLow_1 = -1.6989700043;\n    const float coefsLow_2 = -1.4779000000;\n    const float coefsLow_3 = -1.2291000000;\n    const float coefsLow_4 = -0.8648000000;\n    const float coefsLow_5 = -0.4480000000;\n    const float coefsLow_6 = 0.0051800000;\n    const float coefsLow_7 = 0.4511080334;\n    const float coefsLow_8 = 0.9113744414;\n    const float coefsLow_9 = 0.9113744414;\n\n    const float coefsHigh_0 = 0.5154386965;\n    const float coefsHigh_1 = 0.8470437783;\n    const float coefsHigh_2 = 1.1358000000;\n    const float coefsHigh_3 = 1.3802000000;\n    const float coefsHigh_4 = 1.5197000000;\n    const float coefsHigh_5 = 1.5985000000;\n    const float coefsHigh_6 = 1.6467000000;\n    const float coefsHigh_7 = 1.6746091357;\n    const float coefsHigh_8 = 1.6878733390;\n    const float coefsHigh_9 = 1.6878733390;\n#endif // GRAPHICS_API_GLES3\n\n    // todo const\n    vec2 minPoint = vec2(segmented_spline_c5_fwd(0.18 * pow(2.0, -6.5)), 0.02);\n    vec2 midPoint = vec2(segmented_spline_c5_fwd(0.18), 4.8);\n    vec2 maxPoint = vec2(segmented_spline_c5_fwd(0.18 * pow(2., 6.5)), 48.0);\n\n    const float slopeLow = 0.0;\n    const float slopeHigh = 0.04;\n\n    const int N_KNOTS_LOW = 8;\n    const int N_KNOTS_HIGH = 8;\n\n    float logx = log10(max(x, MEDIUMP_FLT_MIN));\n    float logy;\n\n    if (logx <= log10(minPoint.x)) {\n        logy = logx * slopeLow + (log10(minPoint.y) - slopeLow * log10(minPoint.x));\n    } else if ((logx > log10(minPoint.x)) && (logx < log10(midPoint.x))) {\n        float knot_coord = float(N_KNOTS_LOW - 1) * (logx - log10(minPoint.x)) / (log10(midPoint.x) - log10(minPoint.x));\n        int j = int(knot_coord);\n        float t = knot_coord - float(j);\n        vec3 cf;\n#ifdef GRAPHICS_API_GLES3\n        cf = vec3(coefsLow[j], coefsLow[j + 1], coefsLow[j + 2]);\n#else\n        if (j <= 0) {\n            cf = vec3(coefsLow_0, coefsLow_1, coefsLow_2);\n        } else if (j == 1) {\n            cf = vec3(coefsLow_1, coefsLow_2, coefsLow_3);\n        } else if (j == 2) {\n            cf = vec3(coefsLow_2, coefsLow_3, coefsLow_4);\n        } else if (j == 3) {\n            cf = vec3(coefsLow_3, coefsLow_4, coefsLow_5);\n        } else if (j == 4) {\n            cf = vec3(coefsLow_4, coefsLow_5, coefsLow_6);\n        } else if (j == 5) {\n            cf = vec3(coefsLow_5, coefsLow_6, coefsLow_7);\n        } else if (j == 6) {\n            cf = vec3(coefsLow_6, coefsLow_7, coefsLow_8);\n        } else { // if (j == 7)\n            cf = vec3(coefsLow_7, coefsLow_8, coefsLow_9);\n        }\n#endif // GRAPHICS_API_GLES3\n        vec3 monomials = vec3(t * t, t, 1.0);\n        logy = dot(monomials, M * cf);\n    } else if ((logx >= log10(midPoint.x)) && (logx < log10(maxPoint.x))) {\n        float knot_coord = float(N_KNOTS_HIGH - 1) * (logx - log10(midPoint.x)) / (log10(maxPoint.x) - log10(midPoint.x));\n        int j = int(knot_coord);\n        float t = knot_coord - float(j);\n        vec3 cf;\n#ifdef GRAPHICS_API_GLES3\n        cf = vec3(coefsHigh[j], coefsHigh[j + 1], coefsHigh[j + 2]);\n#else\n        if (j <= 0) {\n            cf = vec3(coefsHigh_0, coefsHigh_1, coefsHigh_2);\n        } else if (j == 1) {\n            cf = vec3(coefsHigh_1, coefsHigh_2, coefsHigh_3);\n        } else if (j == 2) {\n            cf = vec3(coefsHigh_2, coefsHigh_3, coefsHigh_4);\n        } else if (j == 3) {\n            cf = vec3(coefsHigh_3, coefsHigh_4, coefsHigh_5);\n        } else if (j == 4) {\n            cf = vec3(coefsHigh_4, coefsHigh_5, coefsHigh_6);\n        } else if (j == 5) {\n            cf = vec3(coefsHigh_5, coefsHigh_6, coefsHigh_7);\n        } else if (j == 6) {\n            cf = vec3(coefsHigh_6, coefsHigh_7, coefsHigh_8);\n        } else { // if (j == 7)\n            cf = vec3(coefsHigh_7, coefsHigh_8, coefsHigh_9);\n        }\n#endif // GRAPHICS_API_GLES3\n        vec3 monomials = vec3(t * t, t, 1.0);\n        logy = dot(monomials, M * cf);\n    } else {\n        logy = logx * slopeHigh + (log10(maxPoint.y) - slopeHigh * log10(maxPoint.x));\n    }\n\n    return pow(10.0, logy);\n}\n\n#endif // Tonescales_lib"),t.Shader3D.addInclude("ACES_RRTCommon.glsl",'#if !defined(RRTCommon_lib)\n#define RRTCommon_lib\n\n// "Glow" module constants\nconst float RRT_GLOW_GAIN = 0.05;\nconst float RRT_GLOW_MID = 0.08;\n\n// Red modifier constants\nconst float RRT_RED_SCALE = 0.82;\nconst float RRT_RED_PIVOT = 0.03;\nconst float RRT_RED_HUE = 0.;\nconst float RRT_RED_WIDTH = 135.;\n\n// Desaturation contants\nconst float RRT_SAT_FACTOR = 0.96;\n\n// ------- Glow module functions\n\nfloat glow_fwd(float ycIn, float glowGainIn, float glowMid)\n{\n    float glowGainOut;\n    if (ycIn <= 2.0 / 3.0 * glowMid) {\n        glowGainOut = glowGainIn;\n    } else if (ycIn >= 2.0 * glowMid) {\n        glowGainOut = 0.0;\n    } else {\n        glowGainOut = glowGainIn * (glowMid / ycIn - 0.5);\n    }\n    return glowGainOut;\n}\n\n// Sigmoid function in the range 0 to 1 spanning -2 to +2.\nfloat sigmoid_shaper(float x)\n{\n    float t = max(1.0 - abs(x * 0.5), 0.0);\n    float y = 1.0 + sign(x) * (1.0 - t * t);\n\n    return y * 0.5;\n}\n\n// ------- Red modifier functions\nfloat center_hue(float hue, float centerH)\n{\n    float hueCentered = hue - centerH;\n    if (hueCentered < -180.0) {\n        hueCentered = hueCentered + 360.0;\n    } else if (hueCentered > 180.0) {\n        hueCentered -= 360.0;\n    }\n    return hueCentered;\n}\n\n#endif // RRTCommon_lib'),t.Shader3D.addInclude("ACES_ODTCommon.glsl","#if !defined(ODTCommon_lib)\n#define ODTCommon_lib\n\nconst float CINEMA_WHITE = 48.0;\nconst float CINEMA_BLACK = 0.02; // CINEMA_WHITE / 2400.\n\n// Gamma compensation factor\nconst float DIM_SURROUND_GAMMA = 0.9811;\n\n// Saturation compensation factor\nconst float ODT_SAT_FACTOR = 0.93;\n\n// white point D60 to D65\n// ACES white point D60\nconst mat3 D60_to_D65_MAT = mat3(\n    vec3(0.987224, -0.00759836, 0.00307257),\n    vec3(-0.00611327, 1.00186, -0.00509595),\n    vec3(0.0159533, 0.00533002, 1.08168));\n\nfloat Y_2_linCV(float Y, float Ymax, float Ymin)\n{\n    return (Y - Ymin) / (Ymax - Ymin);\n}\n\nvec3 darkSurround_to_dimSurround(vec3 linearCV)\n{\n    vec3 XYZ = linearCV * AP1_to_XYZ_MAT;\n    vec3 xyY = XYZ_2_xyY(XYZ);\n    xyY.z = clamp(xyY.z, 0.0, MEDIUMP_FLT_MAX);\n    xyY.z = pow(xyY.z, DIM_SURROUND_GAMMA);\n    XYZ = xyY_2_XYZ(xyY);\n\n    return XYZ * XYZ_to_AP1_MAT;\n}\n\n#endif // ODTCommon_lib"),t.Shader3D.addInclude("ACES_RRT.glsl",'#if !defined(RRT_lib)\n#define RRT_lib\n\n#include "ACES_RRTCommon.glsl";\n\n/**\n * @param ACES AP0\n * @returns OCES\n */\nvec3 RRT(vec3 aces)\n{\n    // --- Glow module --- //\n    float saturation = rgb_2_saturation(aces);\n    float ycIn = rgb_2_yc(aces);\n    float s = sigmoid_shaper((saturation - 0.4) / 0.2);\n    float addedGlow = 1.0 + glow_fwd(ycIn, RRT_GLOW_GAIN * s, RRT_GLOW_MID);\n\n    aces *= addedGlow;\n\n    // --- Red modifier --- //\n    float hue = rgb_2_hue(aces);\n    float centeredHue = center_hue(hue, RRT_RED_HUE);\n\n    float hueWeight = smoothstep(0.0, 1.0, 1.0 - abs(2.0 * centeredHue / RRT_RED_WIDTH));\n    hueWeight *= hueWeight;\n\n    aces.r += hueWeight * saturation * (RRT_RED_PIVOT - aces.r) * (1. - RRT_RED_SCALE);\n\n    // --- ACES to RGB rendering space --- //\n    vec3 rgbPre = AP0_to_AP1_MAT * aces;\n    rgbPre = clamp(rgbPre, 0.0, MEDIUMP_FLT_MAX);\n\n    // --- Global desaturation --- //\n    rgbPre = mix(vec3(dot(rgbPre, AP1_RGB2Y)), rgbPre, RRT_SAT_FACTOR);\n\n    // --- Apply the tonescale independently in rendering-space RGB --- //\n    vec3 rgbPost;\n    rgbPost.x = segmented_spline_c5_fwd(rgbPre.x);\n    rgbPost.y = segmented_spline_c5_fwd(rgbPre.y);\n    rgbPost.z = segmented_spline_c5_fwd(rgbPre.z);\n\n    // --- RGB rendering space to OCES --- //\n    vec3 rgbOces = AP1_to_AP0_MAT * rgbPost;\n\n    return rgbOces;\n}\n\n#endif // RRT_lib'),t.Shader3D.addInclude("ACES_ODT_sRGB_100nits.glsl",'#if !defined(ODT_sRGB_100nits_lib)\n#define ODT_sRGB_100nits_lib\n\n#include "ACES_ODTCommon.glsl";\n\n// CIE XYZ to REC.709\nconst mat3 XYZ_to_REC709_MAT = mat3(\n    vec3(3.2409699419, -0.9692436363, 0.0556300797),\n    vec3(-1.5373831776, 1.8759675015, -0.2039769589),\n    vec3(-0.498610760, 0.0415550574, 1.0569715142));\n\nconst float DISPGAMMA = 2.4;\nconst float OFFSET = 0.055;\n\nvec3 ODT_sRGB_100nits(vec3 oces)\n{\n    // OCES to RGB rendering space\n    vec3 rgbPre = AP0_to_AP1_MAT * oces;\n\n    // Apply the tonescale independently in rendering-space RGB\n    vec3 rgbPost;\n    rgbPost.r = segmented_spline_c9_fwd(rgbPre.r);\n    rgbPost.g = segmented_spline_c9_fwd(rgbPre.g);\n    rgbPost.b = segmented_spline_c9_fwd(rgbPre.b);\n\n    // Scale luminance to linear code value\n    vec3 linearCV;\n    linearCV.r = Y_2_linCV(rgbPost.r, CINEMA_WHITE, CINEMA_BLACK);\n    linearCV.g = Y_2_linCV(rgbPost.g, CINEMA_WHITE, CINEMA_BLACK);\n    linearCV.b = Y_2_linCV(rgbPost.b, CINEMA_WHITE, CINEMA_BLACK);\n\n    // Apply gamma adjustment to compensate for dim surround\n    linearCV = darkSurround_to_dimSurround(linearCV);\n\n    // Convert to display primary encoding\n    // Rendering space RGB to XYZ\n    vec3 XYZ = AP1_to_XYZ_MAT * linearCV;\n\n    // Apply CAT from ACES white point to assumed observer adapted white point\n    XYZ = D60_to_D65_MAT * XYZ;\n\n    // CIE XYZ to display primaries\n    linearCV = XYZ_to_REC709_MAT * XYZ;\n\n    linearCV = clamp(linearCV, vec3(0.0), vec3(1.0));\n    return linearCV;\n}\n\n#endif // ODT_sRGB_100nits_lib'),t.Shader3D.addInclude("ACES.glsl",'// Academy Color Encoding System (ACES) software and tools are provided by the\n// Academy under the following terms and conditions: A worldwide, royalty-free,\n// non-exclusive right to copy, modify, create derivatives, and use, in source\n// and binary forms, is hereby granted, subject to acceptance of this license.\n\n// Copyright 2019 Academy of Motion Picture Arts and Sciences (A.M.P.A.S.).\n// Portions contributed by others as indicated. All rights reserved.\n\n// Performance of any of the aforementioned acts indicates acceptance to be\n// bound by the following terms and conditions:\n\n// Copies of source code, in whole or in part, must retain the above copyright\n// notice, this list of conditions and the Disclaimer of Warranty.\n\n// Use in binary form must retain the above copyright notice, this list of\n// conditions and the Disclaimer of Warranty in the documentation and/or other\n// materials provided with the distribution.\n\n// Nothing in this license shall be deemed to grant any rights to trademarks,\n// copyrights, patents, trade secrets or any other intellectual property of\n// A.M.P.A.S. or any contributors, except as expressly stated herein.\n\n// Neither the name "A.M.P.A.S." nor the name of any other contributors to this\n// software may be used to endorse or promote products derivative of or based on\n// this software without express prior written permission of A.M.P.A.S. or the\n// contributors, as appropriate.\n\n// This license shall be construed pursuant to the laws of the State of\n// California, and any disputes related thereto shall be subject to the\n// jurisdiction of the courts therein.\n\n// Disclaimer of Warranty: THIS SOFTWARE IS PROVIDED BY A.M.P.A.S. AND\n// CONTRIBUTORS "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT\n// NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY, FITNESS FOR A\n// PARTICULAR PURPOSE, AND NON-INFRINGEMENT ARE DISCLAIMED. IN NO EVENT SHALL\n// A.M.P.A.S., OR ANY CONTRIBUTORS OR DISTRIBUTORS, BE LIABLE FOR ANY DIRECT,\n// INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, RESITUTIONARY, OR CONSEQUENTIAL\n// DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR\n// SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER\n// CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,\n// OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n// OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n\n// WITHOUT LIMITING THE GENERALITY OF THE FOREGOING, THE ACADEMY SPECIFICALLY\n// DISCLAIMS ANY REPRESENTATIONS OR WARRANTIES WHATSOEVER RELATED TO PATENT OR\n// OTHER INTELLECTUAL PROPERTY RIGHTS IN THE ACADEMY COLOR ENCODING SYSTEM, OR\n// APPLICATIONS THEREOF, HELD BY PARTIES OTHER THAN A.M.P.A.S.,WHETHER DISCLOSED\n// OR UNDISCLOSED.\n\n#if !defined(ACES_lib)\n#define ACES_lib\n\n#include "ACES_TransformCommon.glsl";\n#include "ACES_UtillitiesColor.glsl";\n#include "ACES_Tonescales.glsl";\n\n#include "ACES_RRT.glsl";\n#include "ACES_ODT_sRGB_100nits.glsl";\n\n// idt\n\n// linear D65 sRGB to D60 ACES AP0\nvec3 sRGB_to_AP0(vec3 sRGB)\n{\n    return sRGB_to_AP0_MAT * sRGB;\n}\n\n// linear D65 sRGB to D60 ACES AP1\nvec3 sRGB_to_AP1(vec3 sRGB)\n{\n    return sRGB_to_AP1_MAT * sRGB;\n}\n\n// lmt\n// todo\n\n#endif // ACES_lib')}}class ShaderInit3D{static __init__(){t.Shader3D.addInclude("Utils.glsl","#if !defined(Utils_lib)\n    #define Utils_lib\n\n#endif // Utils_lib"),t.Shader3D.addInclude("Color.glsl",'#if !defined(Color_lib)\n    #define Color_lib\n\n    #include "Math.glsl";\n\nvec3 linearToGamma(in vec3 value)\n{\n    // return vec3(mix(pow(value.rgb, vec3(0.41666)) * 1.055 - vec3(0.055), value.rgb * 12.92, vec3(lessThanEqual(value.rgb, vec3(0.0031308)))));\n    return pow(value, vec3(1.0 / 2.2));\n}\n\nvec4 linearToGamma(in vec4 value)\n{\n    return vec4(linearToGamma(value.rgb), value.a);\n}\n\nvec3 gammaToLinear(in vec3 value)\n{\n    // return pow((value + 0.055) / 1.055, vec3(2.4));\n    return pow(value, vec3(2.2));\n}\n\nvec4 gammaToLinear(in vec4 value)\n{\n    return vec4(gammaToLinear(value.rgb), value.a);\n}\n\nconst float c_RGBDMaxRange = 255.0;\n\n// float color to rgbd\nvec4 encodeRGBD(in vec3 color)\n{\n    float maxRGB = max(vecmax(color), FLT_EPS);\n    float d = max(1.0, c_RGBDMaxRange / maxRGB);\n    d = saturate(d / 255.0);\n\n    vec3 rgb = color.rgb * d;\n    rgb = saturate(rgb);\n    return vec4(rgb, d);\n}\n\n// rgbd to float color\nvec3 decodeRGBD(in vec4 rgbd)\n{\n    vec3 color = rgbd.rgb * (1.0 / rgbd.a);\n    return color;\n}\n\n// float color to rgbm\nvec4 encodeRGBM(in vec3 color, float range)\n{\n    color *= 1.0 / range;\n    float maxRGB = max(vecmax(color), FLT_EPS);\n    float m = ceil(maxRGB * 255.0) / 255.0;\n    vec3 rgb = color.rgb * 1.0 / m;\n\n    vec4 rgbm = vec4(rgb, m);\n    return rgbm;\n}\n\n// rgbm to float color\nvec3 decodeRGBM(in vec4 rgbm, float range)\n{\n    return range * rgbm.rgb * rgbm.a;\n}\n\n    #include "OutputTransform.glsl";\n\n#endif // Color_lib'),t.Shader3D.addInclude("Math.glsl",'#if !defined(Math_lib)\n    #define Math_lib\n\n    #ifndef GRAPHICS_API_GLES3\nmat2 inverse(mat2 m)\n{\n    return mat2(m[1][1], -m[0][1], -m[1][0], m[0][0]) / (m[0][0] * m[1][1] - m[0][1] * m[1][0]);\n}\nmat3 inverse(mat3 m)\n{\n    float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2];\n    float a10 = m[1][0], a11 = m[1][1], a12 = m[1][2];\n    float a20 = m[2][0], a21 = m[2][1], a22 = m[2][2];\n\n    float b01 = a22 * a11 - a12 * a21;\n    float b11 = -a22 * a10 + a12 * a20;\n    float b21 = a21 * a10 - a11 * a20;\n\n    float det = a00 * b01 + a01 * b11 + a02 * b21;\n\n    return mat3(b01, (-a22 * a01 + a02 * a21), (a12 * a01 - a02 * a11), b11, (a22 * a00 - a02 * a20),\n\t       (-a12 * a00 + a02 * a10), b21, (-a21 * a00 + a01 * a20), (a11 * a00 - a01 * a10))\n\t/ det;\n}\n\nmat4 inverse(mat4 m)\n{\n    float a00 = m[0][0], a01 = m[0][1], a02 = m[0][2], a03 = m[0][3], a10 = m[1][0], a11 = m[1][1], a12 = m[1][2],\n\t  a13 = m[1][3], a20 = m[2][0], a21 = m[2][1], a22 = m[2][2], a23 = m[2][3], a30 = m[3][0], a31 = m[3][1],\n\t  a32 = m[3][2], a33 = m[3][3],\n\n\t  b00 = a00 * a11 - a01 * a10, b01 = a00 * a12 - a02 * a10, b02 = a00 * a13 - a03 * a10,\n\t  b03 = a01 * a12 - a02 * a11, b04 = a01 * a13 - a03 * a11, b05 = a02 * a13 - a03 * a12,\n\t  b06 = a20 * a31 - a21 * a30, b07 = a20 * a32 - a22 * a30, b08 = a20 * a33 - a23 * a30,\n\t  b09 = a21 * a32 - a22 * a31, b10 = a21 * a33 - a23 * a31, b11 = a22 * a33 - a23 * a32,\n\n\t  det = b00 * b11 - b01 * b10 + b02 * b09 + b03 * b08 - b04 * b07 + b05 * b06;\n\n    return mat4(a11 * b11 - a12 * b10 + a13 * b09, a02 * b10 - a01 * b11 - a03 * b09, a31 * b05 - a32 * b04 + a33 * b03,\n\t       a22 * b04 - a21 * b05 - a23 * b03, a12 * b08 - a10 * b11 - a13 * b07, a00 * b11 - a02 * b08 + a03 * b07,\n\t       a32 * b02 - a30 * b05 - a33 * b01, a20 * b05 - a22 * b02 + a23 * b01, a10 * b10 - a11 * b08 + a13 * b06,\n\t       a01 * b08 - a00 * b10 - a03 * b06, a30 * b04 - a31 * b02 + a33 * b00, a21 * b02 - a20 * b04 - a23 * b00,\n\t       a11 * b07 - a10 * b09 - a12 * b06, a00 * b09 - a01 * b07 + a02 * b06, a31 * b01 - a30 * b03 - a32 * b00,\n\t       a20 * b03 - a21 * b01 + a22 * b00)\n\t/ det;\n}\n\nmat4 transpose(mat4 m)\n{\n    return mat4(m[0][0], m[1][0], m[2][0], m[3][0],\n\tm[0][1], m[1][1], m[2][1], m[3][1],\n\tm[0][2], m[1][2], m[2][2], m[3][2],\n\tm[0][3], m[1][3], m[2][3], m[3][3]);\n}\nmat3 transpose(mat3 m)\n{\n    return mat3(m[0][0], m[1][0], m[2][0],\n\tm[0][1], m[1][1], m[2][1],\n\tm[0][2], m[1][2], m[2][2]);\n}\n    #endif // GRAPHICS_API_GLES3\n\n    #define PI 3.14159265359\n\n    #define INVERT_PI 0.31830988618\n\n    #define HALF_PI 1.570796327\n\n    #define MEDIUMP_FLT_MAX 65504.0\n    #define MEDIUMP_FLT_MIN 0.00006103515625\n\n    #if defined(GL_FRAGMENT_PRECISION_HIGH)\n\t#define FLT_EPS\t\t   1e-5\n\t#define saturateMediump(x) x\n    #else\n\t#define FLT_EPS\t\t   MEDIUMP_FLT_MIN\n\t#define saturateMediump(x) min(x, MEDIUMP_FLT_MAX)\n    #endif // GL_FRAGMENT_PRECISION_HIGH\n\n    #define saturate(x) clamp(x, 0.0, 1.0)\n\nfloat pow2(float x)\n{\n    return x * x;\n}\n\nvec3 pow2(vec3 x)\n{\n    return x * x;\n}\n\nfloat pow5(float x)\n{\n    float x2 = x * x;\n    return x2 * x2 * x;\n}\n\nconst float INVERT_LOG10 = 0.43429448190325176;\n\nfloat log10(float x)\n{\n    return log(x) * INVERT_LOG10;\n}\n\nfloat vecmax(const vec2 v)\n{\n    return max(v.x, v.y);\n}\n\nfloat vecmax(const vec3 v)\n{\n    return max(v.x, max(v.y, v.z));\n}\n\nfloat vecmax(const vec4 v)\n{\n    return max(max(v.x, v.y), max(v.z, v.w));\n}\n\nfloat vecmin(const vec2 v)\n{\n    return min(v.x, v.y);\n}\n\nfloat vecmin(const vec3 v)\n{\n    return min(v.x, min(v.y, v.z));\n}\n\nfloat vecmin(const vec4 v)\n{\n    return min(min(v.x, v.y), min(v.z, v.w));\n}\n\nvec3 SafeNormalize(in vec3 inVec)\n{\n    float dp3 = max(0.001, dot(inVec, inVec));\n    return inVec * inversesqrt(dp3);\n}\n\nvec3 normalScale(in vec3 normal, in float scale)\n{\n    normal *= vec3(scale, scale, 1.0);\n    return normalize(normal);\n}\n\n/**\n * Approximates acos(x) with a max absolute error of 9.0x10^-3.\n * Valid in the range -1..1.\n */\nfloat acosFast(float x)\n{\n    // Lagarde 2014, "Inverse trigonometric functions GPU optimization for AMD GCN architecture"\n    // This is the approximation of degree 1, with a max absolute error of 9.0x10^-3\n    float y = abs(x);\n    float p = -0.1565827 * y + 1.570796;\n    p *= sqrt(1.0 - y);\n    return x >= 0.0 ? p : PI - p;\n}\n\n/**\n * Approximates acos(x) with a max absolute error of 9.0x10^-3.\n * Valid only in the range 0..1.\n */\nfloat acosFastPositive(float x)\n{\n    float p = -0.1565827 * x + 1.570796;\n    return p * sqrt(1.0 - x);\n}\n\n/*\n * Random number between 0 and 1, using interleaved gradient noise.\n * w must not be normalized (e.g. window coordinates)\n */\nfloat interleavedGradientNoise(const highp vec2 w)\n{\n    const vec3 m = vec3(0.06711056, 0.00583715, 52.9829189);\n    return fract(m.z * fract(dot(w, m.xy)));\n}\n\n/*\n * vertex rotate by Euler\n */\nvec3 rotationByEuler(in vec3 vector, in vec3 rot)\n{\n    float halfRoll = rot.z * 0.5;\n    float halfPitch = rot.x * 0.5;\n    float halfYaw = rot.y * 0.5;\n\n    float sinRoll = sin(halfRoll);\n    float cosRoll = cos(halfRoll);\n    float sinPitch = sin(halfPitch);\n    float cosPitch = cos(halfPitch);\n    float sinYaw = sin(halfYaw);\n    float cosYaw = cos(halfYaw);\n\n    float quaX = (cosYaw * sinPitch * cosRoll) + (sinYaw * cosPitch * sinRoll);\n    float quaY = (sinYaw * cosPitch * cosRoll) - (cosYaw * sinPitch * sinRoll);\n    float quaZ = (cosYaw * cosPitch * sinRoll) - (sinYaw * sinPitch * cosRoll);\n    float quaW = (cosYaw * cosPitch * cosRoll) + (sinYaw * sinPitch * sinRoll);\n\n    // vec4 q=vec4(quaX,quaY,quaZ,quaW);\n    // vec3 temp = cross(q.xyz, vector) + q.w * vector;\n    // return (cross(temp, -q.xyz) + dot(q.xyz,vector) * q.xyz + q.w * temp);\n\n    float x = quaX + quaX;\n    float y = quaY + quaY;\n    float z = quaZ + quaZ;\n    float wx = quaW * x;\n    float wy = quaW * y;\n    float wz = quaW * z;\n    float xx = quaX * x;\n    float xy = quaX * y;\n    float xz = quaX * z;\n    float yy = quaY * y;\n    float yz = quaY * z;\n    float zz = quaZ * z;\n\n    return vec3(((vector.x * ((1.0 - yy) - zz)) + (vector.y * (xy - wz))) + (vector.z * (xz + wy)),\n\t((vector.x * (xy + wz)) + (vector.y * ((1.0 - xx) - zz))) + (vector.z * (yz - wx)),\n\t((vector.x * (xz - wy)) + (vector.y * (yz + wx))) + (vector.z * ((1.0 - xx) - yy)));\n}\n\n/*\n * Assume that axis has been normalized\n * point rotate by one axis\n */\nvec3 rotationByAxis(in vec3 vector, in vec3 axis, in float angle)\n{\n    float halfAngle = angle * 0.5;\n    float sinf = sin(halfAngle);\n\n    float quaX = axis.x * sinf;\n    float quaY = axis.y * sinf;\n    float quaZ = axis.z * sinf;\n    float quaW = cos(halfAngle);\n\n    // vec4 q=vec4(quaX,quaY,quaZ,quaW);\n    // vec3 temp = cross(q.xyz, vector) + q.w * vector;\n    // return (cross(temp, -q.xyz) + dot(q.xyz,vector) * q.xyz + q.w * temp);\n\n    float x = quaX + quaX;\n    float y = quaY + quaY;\n    float z = quaZ + quaZ;\n    float wx = quaW * x;\n    float wy = quaW * y;\n    float wz = quaW * z;\n    float xx = quaX * x;\n    float xy = quaX * y;\n    float xz = quaX * z;\n    float yy = quaY * y;\n    float yz = quaY * z;\n    float zz = quaZ * z;\n\n    return vec3(((vector.x * ((1.0 - yy) - zz)) + (vector.y * (xy - wz))) + (vector.z * (xz + wy)),\n\t((vector.x * (xy + wz)) + (vector.y * ((1.0 - xx) - zz))) + (vector.z * (yz - wx)),\n\t((vector.x * (xz - wy)) + (vector.y * (yz + wx))) + (vector.z * ((1.0 - xx) - yy)));\n}\n\n/*\n *rotate by quaternions\n */\nvec3 rotationByQuaternions(in vec3 v, in vec4 q)\n{\n    return v + 2.0 * cross(q.xyz, cross(q.xyz, v) + q.w * v);\n}\n\n#endif // Math_lib'),t.Shader3D.addInclude("BakedBoneMatrixSampler.glsl","#if !defined(BakeBoneAnimSampler_lib)\n    #define BakeBoneAnimSampler_lib\n\nmat4 loadBakedMatMatrix(float FramePos, float boneIndices, float offset)\n{\n    vec2 uv;\n    float PixelPos = FramePos + boneIndices * 4.0;\n    float halfOffset = offset * 0.5;\n    float uvoffset = PixelPos / u_SimpleAnimatorTextureSize;\n    uv.y = floor(uvoffset) * offset + halfOffset;\n    uv.x = mod(float(PixelPos), u_SimpleAnimatorTextureSize) * offset + halfOffset;\n    vec4 mat0row = texture2D(u_SimpleAnimatorTexture, uv);\n    uv.x += offset;\n    vec4 mat1row = texture2D(u_SimpleAnimatorTexture, uv);\n    uv.x += offset;\n    vec4 mat2row = texture2D(u_SimpleAnimatorTexture, uv);\n    uv.x += offset;\n    vec4 mat3row = texture2D(u_SimpleAnimatorTexture, uv);\n    mat4 m = mat4(mat0row.x, mat0row.y, mat0row.z, mat0row.w,\n\tmat1row.x, mat1row.y, mat1row.z, mat1row.w,\n\tmat2row.x, mat2row.y, mat2row.z, mat2row.w,\n\tmat3row.x, mat3row.y, mat3row.z, mat3row.w);\n    return m;\n}\n\n#endif // BakeBoneAnimSampler_lib"),t.Shader3D.addInclude("MorphTarget.glsl","#if !defined(MorphTarget_lib)\n    #define MorphTarget_lib\n\n    #ifdef GRAPHICS_API_GLES3\n\n/// static mesh property\nuniform sampler2DArray u_MorphTargetsTex;\n// xy: tex size, z: attribute count\nuniform vec4 u_MorphParams;\nuniform vec4 u_MorphAttrOffset;\n\n\t#define Morph_TexWidth\t   u_MorphParams.x\n\t#define Morph_TexHeight\t   u_MorphParams.y\n\t#define Morph_AttributeNum u_MorphParams.z\n\t#define Morph_TargetNum\t   u_MorphParams.w\n\n\t#define Morph_PositionOffset u_MorphAttrOffset.x\n\t#define Morph_NormalOffset   u_MorphAttrOffset.y\n\t#define Morph_TangentOffset  u_MorphAttrOffset.z\n\n// #define MORPH_MAX_COUNT 8\n\n/// dynamic params\nuniform float u_MorphActiveTargets[MORPH_MAX_COUNT];\nuniform float u_MorphTargetWeights[MORPH_MAX_COUNT];\nuniform int u_MorphTargetActiveCount;\n\n\t#define MORPH_ACTIVE_COUNT u_MorphTargetActiveCount\n\nvec4 sampleMorphTargets(in int vertexID, in float targetID)\n{\n    int v = vertexID / int(Morph_TexWidth);\n    int u = vertexID - v * int(Morph_TexWidth);\n\n    vec3 uvw = vec3((float(u) + 0.5) / Morph_TexWidth, (float(v) + 0.5) / Morph_TexHeight, targetID);\n\n    return texture(u_MorphTargetsTex, uvw);\n}\n\nvec3 positionMorph(in vec3 position)\n{\n    int vertexID = gl_VertexID * int(Morph_AttributeNum) + int(Morph_PositionOffset);\n\n    for (int i = 0; i < MORPH_ACTIVE_COUNT; i++)\n\t{\n\t    float index = u_MorphActiveTargets[i];\n\n\t    position += sampleMorphTargets(vertexID, index).xyz * u_MorphTargetWeights[i];\n\t}\n\n    return position;\n}\n\nvec3 normalMorph(in vec3 normal)\n{\n    int vertexID = gl_VertexID * int(Morph_AttributeNum) + int(Morph_NormalOffset);\n    for (int i = 0; i < MORPH_ACTIVE_COUNT; i++)\n\t{\n\t    float index = u_MorphActiveTargets[i];\n\n\t    normal += sampleMorphTargets(vertexID, index).xyz * u_MorphTargetWeights[i];\n\t}\n\n    return normal;\n}\n\nvec4 tangentMorph(in vec4 tangent)\n{\n    int vertexID = gl_VertexID * int(Morph_AttributeNum) + int(Morph_TangentOffset);\n    for (int i = 0; i < MORPH_ACTIVE_COUNT; i++)\n\t{\n\t    float index = u_MorphActiveTargets[i];\n\n\t    vec4 sampleTangent = sampleMorphTargets(vertexID, index);\n\n\t    tangent.xyz += sampleTangent.xyz * u_MorphTargetWeights[i] * tangent.w * sampleTangent.w;\n\t}\n\n    return tangent;\n}\n\n    #endif // GRAPHICS_API_GLES3\n\n#endif // MorphTarget_lib"),t.Shader3D.addInclude("VertexCommon.glsl",'#if !defined(VertexCommon_lib)\n    #define VertexCommon_lib\n\n    #ifdef MORPHTARGETS\n\t#include "MorphTarget.glsl";\n    #endif // MORPHTARGETS\n\nstruct Vertex {\n\n    vec3 positionOS;\n\n    vec3 normalOS;\n\n    #ifdef TANGENT\n    vec4 tangentOS;\n    #endif // TANGENT\n\n    // todo  uv define ?\n    #ifdef UV\n    vec2 texCoord0;\n    #endif // UV\n\n    #ifdef UV1\n    vec2 texCoord1;\n    #endif // UV1\n\n    #ifdef COLOR\n    vec4 vertexColor;\n    #endif // COLOR\n\n    #ifdef LIGHTMAP\n    vec4 lightmapScaleOffset;\n\t#endif LIGHTMAP\n};\n\n/**\n * vertex position\n */\nvec4 getVertexPosition()\n{\n    vec4 position = a_Position;\n\n    #ifdef MORPHTARGETS\n\t#ifdef MORPHTARGETS_POSITION\n    position.xyz = positionMorph(position.xyz);\n\t#endif // MORPHTARGETS_POSITION\n    #endif // MORPHTARGETS\n\n    return position;\n}\n\nvec3 getVertexNormal()\n{\n    vec3 normal = a_Normal.xyz;\n    #ifdef MORPHTARGETS\n\t#ifdef MORPHTARGETS_NORMAL\n    normal.xyz = normalMorph(normal);\n\t#endif // MORPHTARGETS_NORMAL\n    #endif // MORPHTARGETS\n\n    return normal;\n}\n\n    #ifdef TANGENT\nvec4 getVertexTangent()\n{\n    vec4 tangent = a_Tangent0;\n\n\t#ifdef MORPHTARGETS\n\t    #ifdef MORPHTARGETS_TANGENT\n    tangent = tangentMorph(tangent);\n\t    #endif // MORPHTARGETS_TANGENT\n\t#endif // MORPHTARGETS\n\n    return tangent;\n}\n    #endif // TANGENT\n\n    #ifdef LIGHTMAP\n#ifndef GPU_INSTANCE\n    uniform vec4 u_LightmapScaleOffset;\n#endif // GPU_INSTANCE\n\nvec4 getLightmapScaleOffset(){\n    \n    #ifdef GPU_INSTANCE\n        return a_LightmapScaleOffset;\n    #else\n        return u_LightmapScaleOffset;\n    #endif // GPU_INSTANCE\n}\n    #endif // LIGHTMAP\n\nvoid getVertexParams(inout Vertex vertex)\n{\n    vertex.positionOS = getVertexPosition().xyz;\n\n    vertex.normalOS = getVertexNormal();\n\n    #ifdef TANGENT\n    vertex.tangentOS = getVertexTangent();\n    #endif // TANGENT\n\n    #ifdef UV\n    vertex.texCoord0 = a_Texcoord0;\n    #endif // UV\n\n    #ifdef UV1\n    vertex.texCoord1 = a_Texcoord1;\n    #endif // UV1\n\n    #ifdef COLOR\n    // consider vertexColor is gamma\n    vertex.vertexColor = vec4(pow(a_Color.rgb, vec3(2.2)), a_Color.a);\n    #endif // COLOR\n\n    #ifdef LIGHTMAP\n    vertex.lightmapScaleOffset = getLightmapScaleOffset();\n\t#endif LIGHTMAP\n}\n\n#endif // VertexCommon_lib'),t.Shader3D.addInclude("ShadingCommon.glsl","#if !defined(ShadingCommon_lib)\n    #define ShadingCommon_lib\n\n// varying\nvarying vec3 v_PositionWS;\n// todo\nvarying vec3 v_NormalWS;\nvarying vec3 v_TangentWS;\nvarying vec3 v_BiNormalWS;\n\n    #ifdef UV\nvarying vec2 v_Texcoord0;\n    #endif // UV\n\n    #ifdef UV1\n\t#ifdef LIGHTMAP\nvarying vec2 v_Texcoord1;\n\t#endif // LIGHTMAP\n    #endif // UV1\n\n    #ifdef COLOR\nvarying vec4 v_VertexColor;\n    #endif // COLOR\n\n// 记录顶点信息, 用于由vs向fs传递数据\nstruct PixelParams {\n    vec3 positionWS;\n\n    // todo\n    vec3 normalWS;\n    vec3 tangentWS;\n    vec3 biNormalWS;\n    mat3 TBN;\n\n    #ifdef UV\n    vec2 uv0;\n    #endif // UV\n\n    #ifdef UV1\n\t#ifdef LIGHTMAP\n    vec2 uv1;\n\t#endif // LIGHTMAP\n    #endif // UV1\n\n    #ifdef COLOR\n    vec4 vertexColor;\n    #endif // COLOR\n};\n\n#endif // ShadingCommon_lib"),t.Shader3D.addInclude("ShadingVertex.glsl",'#if !defined(ShadingVertex_lib)\n    #define ShadingVertex_lib\n\n    #include "ShadingCommon.glsl";\n\nvoid sharePixelParams(const in PixelParams params)\n{\n    v_PositionWS = params.positionWS;\n\n    v_NormalWS = params.normalWS;\n    v_TangentWS = params.tangentWS;\n    v_BiNormalWS = params.biNormalWS;\n\n    #ifdef UV\n    v_Texcoord0 = params.uv0;\n    #endif // UV\n\n    #ifdef UV1\n\t#ifdef LIGHTMAP\n    v_Texcoord1 = params.uv1;\n\t#endif LIGHTMAP\n    #endif // UV1\n\n    #ifdef COLOR\n    v_VertexColor = params.vertexColor;\n    #endif // COLOR\n}\n\nvoid shadingPixelParams(inout PixelParams params, in Vertex vertex)\n{\n    mat4 worldMat = getWorldMatrix();\n    vec4 pos = (worldMat * vec4(vertex.positionOS, 1.0));\n    params.positionWS = pos.xyz / pos.w;\n\n    mat3 normalMat = transpose(inverse(mat3(worldMat)));\n    params.normalWS = normalize((normalMat * vertex.normalOS).xyz);\n\n    #ifdef TANGENT\n    params.tangentWS = normalize((normalMat * vertex.tangentOS.xyz).xyz);\n    params.tangentWS *= u_WroldInvertFront.x;\n    params.biNormalWS = normalize(cross(params.normalWS, params.tangentWS) * sign(vertex.tangentOS.w));\n    #else // TANGENT\n    params.tangentWS = vec3(1.0, 0.0, 0.0);\n    params.tangentWS *= u_WroldInvertFront.x;\n    params.biNormalWS = normalize(cross(params.normalWS, params.tangentWS));\n    #endif // TANGENT\n\n    #ifdef UV\n    params.uv0 = vertex.texCoord0;\n    #endif // UV\n\n    #ifdef UV1\n\t#ifdef LIGHTMAP\n    params.uv1 = tranformLightMapUV(vertex.texCoord1, vertex.lightmapScaleOffset);\n\t#endif LIGHTMAP\n    #endif // UV1\n\n    #ifdef COLOR\n    params.vertexColor = vertex.vertexColor;\n    #endif // COLOR\n}\n\n#endif // ShadingVertex_lib'),t.Shader3D.addInclude("ShadingFrag.glsl",'#if !defined(ShadingFrag_lib)\n    #define ShadingFrag_lib\n\n    #include "ShadingCommon.glsl";\n\n    #define _InvertNormal (float(gl_FrontFacing) * 2.0 - 1.0);\n\nvoid getPixelParams(inout PixelParams params)\n{\n    params.positionWS = v_PositionWS;\n\n    float invertN = _InvertNormal;\n\n    params.normalWS = normalize(v_NormalWS * invertN);\n    params.tangentWS = normalize(v_TangentWS * invertN);\n    params.biNormalWS = normalize(v_BiNormalWS * invertN);\n\n    params.TBN = mat3(params.tangentWS, params.biNormalWS, params.normalWS);\n\n    #ifdef UV\n    params.uv0 = v_Texcoord0;\n    #endif // UV\n\n    #ifdef UV1\n\t#ifdef LIGHTMAP\n    params.uv1 = v_Texcoord1;\n\t#endif // LIGHTMAP\n    #endif // UV1\n\n    #ifdef COLOR\n    params.vertexColor = v_VertexColor;\n    #endif // COLOR\n}\n\n#endif // ShadingFrag_lib'),t.Shader3D.addInclude("OutputTransform.glsl","#if !defined(OutputTransform_lib)\n    #define OutputTransform_lib\n\nvec3 gammaCorrect(in vec3 color, float gammaValue)\n{\n    return pow(color, vec3(gammaValue));\n}\n\nvec4 gammaCorrect(in vec4 color)\n{\n    // todo color gamut gamma value\n    // default sRGB\n    float gammaValue = 1.0 / 2.2;\n    return vec4(gammaCorrect(color.rgb, gammaValue), color.a);\n}\n\nvec4 outputTransform(in vec4 color)\n{\n    #ifdef GAMMACORRECT\n    // render in linear, output gamma\n    return gammaCorrect(color);\n    #else // GAMMACORRECT\n    return color;\n    #endif // GAMMACORRECT\n}\n\n#endif // OutputTransform_lib\n"),t.Shader3D.addInclude("Scene.glsl","#if !defined(SceneCommon_lib)\n    #define SceneCommon_lib\n\n    #ifdef ENUNIFORMBLOCK\nuniform SceneUniformBlock\n{\n    // time\n    float u_Time;\n    vec4 u_FogParams;// x start,y range,z Density\n    vec4 u_FogColor;\n};\n    #else // ENUNIFORMBLOCK\n// time\nuniform float u_Time;\nuniform vec4 u_FogParams;//x start,y range,z Density\nuniform vec4 u_FogColor;\n    #endif // ENUNIFORMBLOCK\n    //rotate SH IBL\nuniform float u_GIRotate;\n\n#endif // SceneCommon_lib"),t.Shader3D.addInclude("Camera.glsl","#if !defined(CameraCommon_lib)\n    #define CameraCommon_lib\n\n    #ifdef ENUNIFORMBLOCK\n\nuniform CameraUniformBlock\n{\n    mat4 u_View;\n    mat4 u_Projection;\n    mat4 u_ViewProjection;\n    vec4 u_ProjectionParams; // x: near, y: far, z: invert, w: 1/far\n    vec4 u_Viewport; // x,y,width,height\n    vec3 u_CameraDirection;\n    vec3 u_CameraUp;\n    vec3 u_CameraPos;\n};\n    #else\nuniform mat4 u_View;\nuniform mat4 u_Projection;\nuniform mat4 u_ViewProjection;\nuniform vec4 u_ProjectionParams; // x: near, y: far, z: invert, w: 1/far\nuniform vec4 u_Viewport; // x, y, width, height\nuniform vec3 u_CameraDirection;\nuniform vec3 u_CameraUp;\nuniform vec3 u_CameraPos;\n    #endif // ENUNIFORMBLOCK\n\n/*Depth or DepthNormal Uniform*/\nuniform highp sampler2D u_CameraDepthTexture;\nuniform vec4 u_ZBufferParams; //(1.0 - far / near, far / near, (near - far) / (near * far), 1 / near)\nuniform mediump sampler2D u_CameraDepthNormalsTexture;\nuniform mediump sampler2D u_CameraOpaqueTexture;\nuniform vec4 u_OpaqueTextureParams;\n\nvec4 getPositionCS(in vec3 positionWS)\n{\n    return u_ViewProjection * vec4(positionWS, 1.0);\n}\n\nvec3 getViewDirection(in vec3 positionWS)\n{\n    return normalize(u_CameraPos - positionWS);\n}\n\n// 根据投影矩阵重映射深度\nvec4 remapPositionZ(vec4 position)\n{\n    #ifdef BLITSCREEN_INVERTY\n    position.y = -position.y;\n    #endif\n\n    #ifdef REMAP_Z\n    position.z = position.z * 2.0 - position.w;\n    #endif\n    return position;\n}\n\n#endif // CameraCommon_lib"),t.Shader3D.addInclude("SkyCommon.glsl","#if !defined(SkyCommon_lib)\n    #define SkyCommon_lib\n\nuniform vec3 u_SunLight_direction;\nuniform vec4 u_SunLight_color;\nuniform mat4 u_SkyViewMat;\nuniform mat4 u_SkyProjectionMat;\nuniform mat4 u_SkyProjectionViewMat;\n\nvec4 remapSkyPositionZ(in vec4 position)\n{\n    position.z = position.w;\n    #ifdef BLITSCREEN_INVERTY\n    position.y = -position.y;\n    #endif\n    return position;\n}\n\nconst float c_deg2ang = 3.141593 / 180.0;\nvec4 rotateAroundYInDegrees(vec4 vertex, float deg)\n{\n    float angle = deg * c_deg2ang;\n    float sina = sin(angle);\n    float cosa = cos(angle);\n    mat2 m = mat2(cosa, -sina, sina, cosa);\n    return vec4(m * vertex.xz, vertex.yw).xzyw;\n}\n\n\n#endif // SkyCommon_lib"),t.Shader3D.addInclude("Sprite3DCommon.glsl","#if !defined(Sprite3DCommon_lib)\n    #define Sprite3DCommon_lib\n\nuniform mat4 u_WorldMat;\n\nuniform vec4 u_WroldInvertFront; // x: invert front face\n\n    \n\n\nvec2 tranformLightMapUV(in vec2 texcoord, in vec4 tilingOffset)\n{\n    vec2 lightMapUV = vec2(texcoord.x, 1.0 - texcoord.y) * tilingOffset.xy + tilingOffset.zw;\n    lightMapUV.y = 1.0 - lightMapUV.y;\n    return lightMapUV;\n}\n\nvec2 transformUV(in vec2 texcoord, in vec4 tilingOffset)\n{\n    vec2 uv = texcoord * tilingOffset.xy + tilingOffset.zw * vec2(1.0, -1.0) + vec2(0.0, 1.0 - tilingOffset.y);\n    return uv;\n}\n\n#endif // Sprite3DCommon_lib"),t.Shader3D.addInclude("Sprite3DVertex.glsl",'#if !defined(Sprite3DVertex_lib)\n    #define Sprite3DVertex_lib\n\n    #include "Sprite3DCommon.glsl";\n\n    #ifdef BONE\n// todo const int c_MaxBoneCount = 24\nuniform mat4 u_Bones[24];\n\n\t#ifdef SIMPLEBONE\nuniform vec4 u_SimpleAnimatorParams;\nuniform sampler2D u_SimpleAnimatorTexture;\nuniform float u_SimpleAnimatorTextureSize;\n\t    #include "BakedBoneMatrixSampler.glsl";\n\n\t#endif // SIMPLEBONE\n\n    #endif // BONE\n\n/**\n * world matrix\n */\nmat4 getWorldMatrix()\n{\n    #ifdef GPU_INSTANCE\n    mat4 worldMat = a_WorldMat;\n    #else\n    mat4 worldMat = u_WorldMat;\n    #endif // GPU_INSTANCE\n\n    #ifdef BONE\n\n\t#ifdef SIMPLEBONE\n\n\t    #ifdef GPU_INSTANCE\n    float currentPixelPos = a_SimpleTextureParams.x + a_SimpleTextureParams.y;\n\t    #else // GPU_INSTANCE\n    float currentPixelPos = u_SimpleAnimatorParams.x + u_SimpleAnimatorParams.y;\n\t    #endif // GPU_INSTANCE\n\n    float offset = 1.0 / u_SimpleAnimatorTextureSize;\n    mat4 skinTrans = loadBakedMatMatrix(currentPixelPos, a_BoneIndices.x, offset) * a_BoneWeights.x;\n    skinTrans += loadBakedMatMatrix(currentPixelPos, a_BoneIndices.y, offset) * a_BoneWeights.y;\n    skinTrans += loadBakedMatMatrix(currentPixelPos, a_BoneIndices.z, offset) * a_BoneWeights.z;\n    skinTrans += loadBakedMatMatrix(currentPixelPos, a_BoneIndices.w, offset) * a_BoneWeights.w;\n    worldMat = worldMat * skinTrans;\n\n\t#else // SIMPLEBONE\n\n    ivec4 boneIndex = ivec4(a_BoneIndices);\n    mat4 skinTrans = u_Bones[boneIndex.x] * a_BoneWeights.x;\n    skinTrans += u_Bones[boneIndex.y] * a_BoneWeights.y;\n    skinTrans += u_Bones[boneIndex.z] * a_BoneWeights.z;\n    skinTrans += u_Bones[boneIndex.w] * a_BoneWeights.w;\n    worldMat = worldMat * skinTrans;\n\n\t#endif // SIMPLEBONE\n\n    #endif // BONE\n\n    return worldMat;\n}\n\nvec2 getSimpleBoneCustomData(){\n    vec2 custom;\n   #ifdef BONE\n    #ifdef SIMPLEBONE\n    #ifdef GPU_INSTANCE\n    custom=a_SimpleTextureParams.zw;\n    #else// GPU_INSTANCE\n    custom=u_SimpleAnimatorParams.zw;\n    #endif// GPU_INSTANCE\n    #endif// SIMPLEBONE\n  #endif // BONE\n    return custom;\n}\n\n#endif // Sprite3DVertex_lib'),t.Shader3D.addInclude("Sprite3DFrag.glsl",'#if !defined(Sprite3DFrag_lib)\n    #define Sprite3DFrag_lib\n\n    #include "Sprite3DCommon.glsl";\n\n#endif // Sprite3DFrag_lib'),t.Shader3D.addInclude("DepthVertex.glsl",'#if !defined(DepthVertex_lib)\n    #define DepthVertex_lib\n    #include "Math.glsl";\n    #include "Scene.glsl";\n    #include "Camera.glsl";\n    #include "Sprite3DVertex.glsl";\n\n    #include "VertexCommon.glsl";\n\n    #if defined(SHADOW) || defined(SHADOW_SPOT)\n\n\t#ifndef DEPTHPASS\n\t    #ifdef ENUNIFORMBLOCK\nuniform ShadowUniformBlock\n{\n    vec4 u_ShadowBias; // x: depth bias, y: normal bias\n    vec3 u_ShadowLightDirection;\n};\n\t    #else // ENUNIFORMBLOCK\nuniform vec4 u_ShadowBias; // x: depth bias, y: normal bias\n\t\t#ifdef SHADOW\nuniform vec3 u_ShadowLightDirection;\n\t\t#endif // SHADOW\n\t    #endif // ENUNIFORMBLOCK\n\nvec3 applyShadowBias(vec3 positionWS, vec3 normalWS, vec3 lightDirection)\n{\n    float invNdotL = 1.0 - clamp(dot(-lightDirection, normalWS), 0.0, 1.0);\n    float scale = invNdotL * u_ShadowBias.y;\n\n    // normal bias is negative since we want to apply an inset normal offset\n    positionWS += -lightDirection * u_ShadowBias.xxx;\n    positionWS += normalWS * vec3(scale);\n    return positionWS;\n}\n\t#endif // DEPTHPASS\n    #endif // SHADOW || SHADOW_SPOT\n\n    #ifdef DEPTHPASS\n\t#include "Camera.glsl";\n    #endif // DEPTHPASS\n\nvec4 DepthPositionCS(in vec3 positionWS, in vec3 normalWS)\n{\n    #ifdef DEPTHPASS\n    vec4 positionCS = u_ViewProjection * vec4(positionWS, 1.0);\n    #endif // DEPTHPASS\n\n    #ifdef SHADOW\n\t#ifndef DEPTHPASS\n    positionWS = applyShadowBias(positionWS, normalWS, u_ShadowLightDirection);\n    vec4 positionCS = u_ViewProjection * vec4(positionWS, 1.0);\n    positionCS.z = max(positionCS.z, 0.0); // min ndc z is 0.0\n\t#endif // DEPTHPASS\n    #endif // SHADOW\n\n    #ifdef SHADOW_SPOT\n\t#ifndef DEPTHPASS\n    vec4 positionCS = u_ViewProjection * vec4(positionWS, 1.0);\n    positionCS.z = positionCS.z - u_ShadowBias.x / positionCS.w;\n    positionCS.z = max(positionCS.z, 0.0); // min ndc z is 0.0\n\t#endif // DEPTHPASS\n    #endif // SHADOW_SPOT\n\n    return positionCS;\n}\n\n#endif // DepthVertex_lib'),t.Shader3D.addInclude("DepthFrag.glsl","#if !defined(DepthFrag_lib)\n    #define DepthFrag_lib\n\nvec4 getDepthColor()\n{\n    return vec4(0.0);\n}\n\n#endif // DepthFrag_lib"),t.Shader3D.addInclude("DepthNormalUtil.glsl","#define SAMPLE_DEPTH_TEXTURE(textureName, coord2) (texture2D(textureName, coord2).r)\n//此方法库用来压缩解析深度贴图，法线深度贴图\n\n// Encoding/decoding view space normals into 2D 0..1 vector\nvec2 EncodeViewNormalStereo(vec3 n)\n{\n    n.z = abs(n.z);\n    float kScale = 1.7777;\n    vec2 enc;\n    enc = n.xy / (n.z + 1.0);\n    enc /= kScale;\n    enc = enc * 0.5 + 0.5;\n    return enc;\n}\n\nvec3 DecodeViewNormalStereo(vec4 enc4)\n{\n    float kScale = 1.7777;\n    vec3 nn = enc4.xyz * vec3(2.0 * kScale, 2.0 * kScale, 0.0) + vec3(-kScale, -kScale, 1.0);\n    float g = 2.0 / dot(nn.xyz, nn.xyz);\n    vec3 n;\n    n.xy = g * nn.xy;\n    n.z = g - 1.0;\n    return n;\n}\n\n// Encoding/decoding [0..1) floats into 8 bit/channel RG. Note that 1.0 will not be encoded properly.\nvec2 EncodeFloatRG(float v)\n{\n    vec2 kEncodeMul = vec2(1.0, 255.0);\n    float kEncodeBit = 1.0 / 255.0;\n    vec2 enc = kEncodeMul * v;\n    enc = fract(enc);\n    enc.x -= enc.y * kEncodeBit;\n    return enc;\n}\n\nfloat DecodeFloatRG(vec2 enc)\n{\n    vec2 kDecodeDot = vec2(1.0, 1.0 / 255.0);\n    return dot(enc, kDecodeDot);\n}\n\nvec4 EncodeDepthNormal(float depth, vec3 normals)\n{\n    vec4 encode;\n    encode.xy = EncodeViewNormalStereo(normals);\n    encode.zw = EncodeFloatRG(depth);\n    return encode;\n}\n\nvoid DecodeDepthNormal(vec4 enc, out float depth, out vec3 normal)\n{\n    depth = DecodeFloatRG(enc.zw);\n    normal = DecodeViewNormalStereo(enc);\n}\n\nvec4 depthNormalsFragment(vec4 depthNormal)\n{\n    return EncodeDepthNormal(depthNormal.w, depthNormal.xyz);\n}\n\n// Z buffer to linear 0..1 depth\nfloat Linear01Depth(float z, vec4 zbufferParams)\n{\n    return 1.0 / (zbufferParams.x * z + zbufferParams.y);\n}\n// Z buffer to linear depth\nfloat LinearEyeDepth(float z, vec4 zbufferParams)\n{\n    return 1.0 / (zbufferParams.z * z + zbufferParams.w);\n}\n"),t.Shader3D.addInclude("DepthNormalFrag.glsl",'#if !defined(DepthNormalFrag_lib)\n    #define DepthNormalFrag_lib\n\n    #include "DepthNormalUtil.glsl";\n\nvec4 encodeDepthNormal(const in vec4 positionCS, const in vec3 normalWS)\n{\n    float depth = (positionCS.z * 2.0 - positionCS.w) * u_ProjectionParams.w;\n\n    vec3 normalVS = mat3(u_View) * normalWS;\n\n    return EncodeDepthNormal(depth, normalVS);\n}\n\n#endif // DepthNormalFrag_lib'),t.Shader3D.addInclude("SceneFog.glsl","#if !defined(SceneFog_lib)\n    #define SceneFog_lib\n\n    #ifdef FOG\nvarying float v_fogFactor;\nfloat getFogFactor()\n{\n    return v_fogFactor;\n}\n\nvec3 scenUnlitFog(in vec3 color)\n{\n    float lerpFact = getFogFactor();\n\t#ifdef ADDTIVEFOG\n    lerpFact = clamp(lerpFact, 0.0, 1.0);\n    return mix(vec3(0.0), color, lerpFact);\n\t#else\n    lerpFact = clamp(lerpFact, 0.0, 1.0);\n    return mix(u_FogColor.rgb, color, lerpFact);\n\t#endif // ADDTIVEFOG\n}\n\nvec3 sceneLitFog(in vec3 color)\n{\n    float lerpFact = getFogFactor();\n    lerpFact = clamp(lerpFact, 0.0, 1.0);\n    return mix(u_FogColor.rgb, color, lerpFact);\n}\n\n    #endif\n#endif // SceneFog_lib"),t.Shader3D.addInclude("SceneFogInput.glsl","#if !defined(SceneFog_lib)\n    #define SceneFog_lib\n\n    #ifdef FOG\nvarying float v_fogFactor;\nvoid FogHandle(in float fact)\n{\n    float lerpFact = 0.0;\n\t#ifdef FOG_EXP\n    lerpFact = fact * (u_FogParams.z / log(2.0));\n    lerpFact = exp2(-lerpFact);\n\t#elif defined(FOG_EXP2)\n    lerpFact = fact * (u_FogParams.z / sqrt(log(2.0)));\n    lerpFact = exp2(-lerpFact);\n\t#else // default FOG_LINEAR\n    lerpFact = (-1.0 * fact / (u_FogParams.y - u_FogParams.x) + u_FogParams.y / (u_FogParams.y - u_FogParams.x));\n\t#endif\n    v_fogFactor = lerpFact;\n}\n    #endif\n#endif // SceneFog_lib"),t.Shader3D.addInclude("ShadowSampleTent.glsl",'// ------------------------------------------------------------------\n//  PCF Filtering Tent Functions\n// ------------------------------------------------------------------\n\n// Assuming a isoceles right angled triangle of height "triangleHeight" (as drawn below).\n// This function return the area of the triangle above the first texel(in Y the first texel).\n//\n// |\\      <-- 45 degree slop isosceles right angled triangle\n// | \\\n// ----    <-- length of this side is "triangleHeight"\n// _ _ _ _ <-- texels\nfloat sampleShadowGetIRTriangleTexelArea(float triangleHeight)\n{\n    return triangleHeight - 0.5;\n}\n\n// Assuming a isoceles triangle of 1.5 texels height and 3 texels wide lying on 4 texels.\n// This function return the area of the triangle above each of those texels.\n//    |    <-- offset from -0.5 to 0.5, 0 meaning triangle is exactly in the center\n//   / \\   <-- 45 degree slop isosceles triangle (ie tent projected in 2D)\n//  /   \\\n// _ _ _ _ <-- texels\n// X Y Z W <-- result indices (in computedArea.xyzw and computedAreaUncut.xyzw)\n// Top point at (right,top) in a texel,left bottom point at (middle,middle) in a texel,right bottom point at (middle,middle) in a texel.\nvoid sampleShadowGetTexelAreasTent3x3(float offset, out vec4 computedArea, out vec4 computedAreaUncut)\n{\n    // Compute the exterior areas,a and h is same.\n    float a = offset + 0.5;\n    float offsetSquaredHalved = a * a * 0.5;\n    computedAreaUncut.x = computedArea.x = offsetSquaredHalved - offset;\n    computedAreaUncut.w = computedArea.w = offsetSquaredHalved;\n\n    // Compute the middle areas\n    // For Y : We find the area in Y of as if the left section of the isoceles triangle would\n    // intersect the axis between Y and Z (ie where offset = 0).\n    computedAreaUncut.y = sampleShadowGetIRTriangleTexelArea(1.5 - offset);\n    // This area is superior to the one we are looking for if (offset < 0) thus we need to\n    // subtract the area of the triangle defined by (0,1.5-offset), (0,1.5+offset), (-offset,1.5).\n    float clampedOffsetLeft = min(offset,0.0);\n    float areaOfSmallLeftTriangle = clampedOffsetLeft * clampedOffsetLeft;\n    computedArea.y = computedAreaUncut.y - areaOfSmallLeftTriangle;\n\n    // We do the same for the Z but with the right part of the isoceles triangle\n    computedAreaUncut.z = sampleShadowGetIRTriangleTexelArea(1.5 + offset);\n    float clampedOffsetRight = max(offset,0.0);\n    float areaOfSmallRightTriangle = clampedOffsetRight * clampedOffsetRight;\n    computedArea.z = computedAreaUncut.z - areaOfSmallRightTriangle;\n}\n\n// Assuming a isoceles triangle of 2.5 texel height and 5 texels wide lying on 6 texels.\n// This function return the weight of each texels area relative to the full triangle area.\n//  /       \\\n// _ _ _ _ _ _ <-- texels\n// 0 1 2 3 4 5 <-- computed area indices (in texelsWeights[])\n// Top point at (right,top) in a texel,left bottom point at (middle,middle) in a texel,right bottom point at (middle,middle) in a texel.\nvoid sampleShadowGetTexelWeightsTent5x5(float offset, out vec3 texelsWeightsA, out vec3 texelsWeightsB)\n{\n    vec4 areaFrom3texelTriangle;\n    vec4 areaUncutFrom3texelTriangle;\n    sampleShadowGetTexelAreasTent3x3(offset, areaFrom3texelTriangle, areaUncutFrom3texelTriangle);\n\n    // Triangle slope is 45 degree thus we can almost reuse the result of the 3 texel wide computation.\n    // the 5 texel wide triangle can be seen as the 3 texel wide one but shifted up by one unit/texel.\n    // 0.16 is 1/(the triangle area)\n    texelsWeightsA.x = 0.16 * (areaFrom3texelTriangle.x);\n    texelsWeightsA.y = 0.16 * (areaUncutFrom3texelTriangle.y);\n    texelsWeightsA.z = 0.16 * (areaFrom3texelTriangle.y + 1.0);\n    texelsWeightsB.x = 0.16 * (areaFrom3texelTriangle.z + 1.0);\n    texelsWeightsB.y = 0.16 * (areaUncutFrom3texelTriangle.z);\n    texelsWeightsB.z = 0.16 * (areaFrom3texelTriangle.w);\n}\n\n// 5x5 Tent filter (45 degree sloped triangles in U and V)\nvoid sampleShadowComputeSamplesTent5x5(vec4 shadowMapTextureTexelSize, vec2 coord, out float fetchesWeights[9], out vec2 fetchesUV[9])\n{\n    // tent base is 5x5 base thus covering from 25 to 36 texels, thus we need 9 bilinear PCF fetches\n    vec2 tentCenterInTexelSpace = coord.xy * shadowMapTextureTexelSize.zw;\n    vec2 centerOfFetchesInTexelSpace = floor(tentCenterInTexelSpace + 0.5);\n    vec2 offsetFromTentCenterToCenterOfFetches = tentCenterInTexelSpace - centerOfFetchesInTexelSpace;\n\n    // find the weight of each texel based on the area of a 45 degree slop tent above each of them.\n    vec3 texelsWeightsUA, texelsWeightsUB;\n    vec3 texelsWeightsVA, texelsWeightsVB;\n    sampleShadowGetTexelWeightsTent5x5(offsetFromTentCenterToCenterOfFetches.x, texelsWeightsUA, texelsWeightsUB);\n    sampleShadowGetTexelWeightsTent5x5(offsetFromTentCenterToCenterOfFetches.y, texelsWeightsVA, texelsWeightsVB);\n\n    // each fetch will cover a group of 2x2 texels, the weight of each group is the sum of the weights of the texels\n    vec3 fetchesWeightsU = vec3(texelsWeightsUA.xz, texelsWeightsUB.y) + vec3(texelsWeightsUA.y, texelsWeightsUB.xz);\n    vec3 fetchesWeightsV = vec3(texelsWeightsVA.xz, texelsWeightsVB.y) + vec3(texelsWeightsVA.y, texelsWeightsVB.xz);\n\n    // move the PCF bilinear fetches to respect texels weights\n    vec3 fetchesOffsetsU = vec3(texelsWeightsUA.y, texelsWeightsUB.xz) / fetchesWeightsU.xyz + vec3(-2.5,-0.5,1.5);\n    vec3 fetchesOffsetsV = vec3(texelsWeightsVA.y, texelsWeightsVB.xz) / fetchesWeightsV.xyz + vec3(-2.5,-0.5,1.5);\n    fetchesOffsetsU *= shadowMapTextureTexelSize.xxx;\n    fetchesOffsetsV *= shadowMapTextureTexelSize.yyy;\n\n    vec2 bilinearFetchOrigin = centerOfFetchesInTexelSpace * shadowMapTextureTexelSize.xy;\n    fetchesUV[0] = bilinearFetchOrigin + vec2(fetchesOffsetsU.x, fetchesOffsetsV.x);\n    fetchesUV[1] = bilinearFetchOrigin + vec2(fetchesOffsetsU.y, fetchesOffsetsV.x);\n    fetchesUV[2] = bilinearFetchOrigin + vec2(fetchesOffsetsU.z, fetchesOffsetsV.x);\n    fetchesUV[3] = bilinearFetchOrigin + vec2(fetchesOffsetsU.x, fetchesOffsetsV.y);\n    fetchesUV[4] = bilinearFetchOrigin + vec2(fetchesOffsetsU.y, fetchesOffsetsV.y);\n    fetchesUV[5] = bilinearFetchOrigin + vec2(fetchesOffsetsU.z, fetchesOffsetsV.y);\n    fetchesUV[6] = bilinearFetchOrigin + vec2(fetchesOffsetsU.x, fetchesOffsetsV.z);\n    fetchesUV[7] = bilinearFetchOrigin + vec2(fetchesOffsetsU.y, fetchesOffsetsV.z);\n    fetchesUV[8] = bilinearFetchOrigin + vec2(fetchesOffsetsU.z, fetchesOffsetsV.z);\n\n    fetchesWeights[0] = fetchesWeightsU.x * fetchesWeightsV.x;\n    fetchesWeights[1] = fetchesWeightsU.y * fetchesWeightsV.x;\n    fetchesWeights[2] = fetchesWeightsU.z * fetchesWeightsV.x;\n    fetchesWeights[3] = fetchesWeightsU.x * fetchesWeightsV.y;\n    fetchesWeights[4] = fetchesWeightsU.y * fetchesWeightsV.y;\n    fetchesWeights[5] = fetchesWeightsU.z * fetchesWeightsV.y;\n    fetchesWeights[6] = fetchesWeightsU.x * fetchesWeightsV.z;\n    fetchesWeights[7] = fetchesWeightsU.y * fetchesWeightsV.z;\n    fetchesWeights[8] = fetchesWeightsU.z * fetchesWeightsV.z;\n}'),t.Shader3D.addInclude("ShadowSampler.glsl",'//兼容WGSL\n#if !defined(ShadowSampler_lib)\n    #define ShadowSampler_lib\n\n    #ifndef GRAPHICS_API_GLES3\n\t#define NO_NATIVE_SHADOWMAP\n    #endif // GRAPHICS_API_GLES3\n\n    #if defined(NO_NATIVE_SHADOWMAP)\n\t#define TEXTURE2D_SHADOW(textureName)\t\t     uniform mediump sampler2D textureName\n    #define SAMPLE_TEXTURE2D_SHADOW(textureName, coord3) (texture2D(textureName, coord3.xy).r < coord3.z ? 0.0 : 1.0)\n\t#define TEXTURE2D_SHADOW_PARAM(shadowMap)\t     mediump sampler2D shadowMap\n    #else // NO_NATIVE_SHADOWMAP\n\t#define TEXTURE2D_SHADOW(textureName)\t\t     uniform mediump sampler2DShadow textureName\n\t#define SAMPLE_TEXTURE2D_SHADOW(textureName, coord3) textureLod(textureName, coord3, 0.0)\n\t#define TEXTURE2D_SHADOW_PARAM(shadowMap)\t     mediump sampler2DShadow shadowMap\n    #endif // NO_NATIVE_SHADOWMAP\n\n    // 计算阴影\n    #ifdef RECEIVESHADOW\n\n\t#include "ShadowSampleTent.glsl";\n\nuniform vec4 u_ShadowParams;\n\n\t#define ShadowStrength\t   u_ShadowParams.x\n\t#define SpotShadowStrength u_ShadowParams.y\n\n    // 平行光阴影\n\t#ifdef SHADOW\n\t    #define CALCULATE_SHADOWS\nvarying vec4 v_ShadowCoord;\nTEXTURE2D_SHADOW(u_ShadowMap);\nuniform vec4 u_ShadowMapSize;\n\n// #ifdef SHADOW_CASCADE\n// const int c_MaxCascadeCount = 4;\n// #else //SHADOW_CASCADE\n// const int c_MaxCascadeCount = 1;\n// #endif//SHADOW_CASCADE\n// uniform mat4 u_ShadowMatrices[c_MaxCascadeCount];\n// uniform vec4 u_ShadowSplitSpheres[c_MaxCascadeCount];\n\nuniform mat4 u_ShadowMatrices[4];\nuniform vec4 u_ShadowSplitSpheres[4];\n\t#endif // SHADOW\n\n\t// 聚光灯阴影\n\t#ifdef SHADOW_SPOT\n\t    #define CALCULATE_SPOTSHADOWS\nvarying vec4 v_SpotShadowCoord;\nTEXTURE2D_SHADOW(u_SpotShadowMap);\nuniform vec4 u_SpotShadowMapSize;\nuniform mat4 u_SpotViewProjectMatrix;\n\t#endif // SHADOW_SPOT\n\nfloat sampleShdowMapFiltered4(TEXTURE2D_SHADOW_PARAM(shadowMap), vec3 shadowCoord, vec4 shadowMapSize)\n{\n    float attenuation;\n    vec4 attenuation4;\n    vec2 offset = shadowMapSize.xy / 2.0;\n    vec3 shadowCoord0 = shadowCoord + vec3(-offset, 0.0);\n    vec3 shadowCoord1 = shadowCoord + vec3(offset.x, -offset.y, 0.0);\n    vec3 shadowCoord2 = shadowCoord + vec3(-offset.x, offset.y, 0.0);\n    vec3 shadowCoord3 = shadowCoord + vec3(offset, 0.0);\n    attenuation4.x = SAMPLE_TEXTURE2D_SHADOW(shadowMap, shadowCoord0);\n    attenuation4.y = SAMPLE_TEXTURE2D_SHADOW(shadowMap, shadowCoord1);\n    attenuation4.z = SAMPLE_TEXTURE2D_SHADOW(shadowMap, shadowCoord2);\n    attenuation4.w = SAMPLE_TEXTURE2D_SHADOW(shadowMap, shadowCoord3);\n    attenuation = dot(attenuation4, vec4(0.25));\n    return attenuation;\n}\n\nfloat sampleShdowMapFiltered9(TEXTURE2D_SHADOW_PARAM(shadowMap), vec3 shadowCoord, vec4 shadowmapSize)\n{\n    float attenuation;\n    float fetchesWeights[9];\n    vec2 fetchesUV[9];\n    sampleShadowComputeSamplesTent5x5(shadowmapSize, shadowCoord.xy, fetchesWeights, fetchesUV);\n    attenuation = fetchesWeights[0] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[0].xy, shadowCoord.z));\n    attenuation += fetchesWeights[1] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[1].xy, shadowCoord.z));\n    attenuation += fetchesWeights[2] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[2].xy, shadowCoord.z));\n    attenuation += fetchesWeights[3] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[3].xy, shadowCoord.z));\n    attenuation += fetchesWeights[4] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[4].xy, shadowCoord.z));\n    attenuation += fetchesWeights[5] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[5].xy, shadowCoord.z));\n    attenuation += fetchesWeights[6] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[6].xy, shadowCoord.z));\n    attenuation += fetchesWeights[7] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[7].xy, shadowCoord.z));\n    attenuation += fetchesWeights[8] * SAMPLE_TEXTURE2D_SHADOW(shadowMap, vec3(fetchesUV[8].xy, shadowCoord.z));\n    return attenuation;\n}\n    #endif // RECEIVESHADOW\n\n    // 计算平行光阴影\n    #if defined(CALCULATE_SHADOWS)\n\n#ifdef SHADOW_CASCADE\n// 平行光阴影级联索引\nmediump int computeCascadeIndex(in vec3 positionWS)\n{\n    vec3 fromCenter0 = positionWS - u_ShadowSplitSpheres[0].xyz;\n    vec3 fromCenter1 = positionWS - u_ShadowSplitSpheres[1].xyz;\n    vec3 fromCenter2 = positionWS - u_ShadowSplitSpheres[2].xyz;\n    vec3 fromCenter3 = positionWS - u_ShadowSplitSpheres[3].xyz;\n\n    mediump vec4 comparison = vec4(dot(fromCenter0, fromCenter0) < u_ShadowSplitSpheres[0].w,\n\tdot(fromCenter1, fromCenter1) < u_ShadowSplitSpheres[1].w,\n\tdot(fromCenter2, fromCenter2) < u_ShadowSplitSpheres[2].w,\n\tdot(fromCenter3, fromCenter3) < u_ShadowSplitSpheres[3].w);\n\n    comparison.yzw = clamp(comparison.yzw - comparison.xyz, 0.0, 1.0); // keep the nearest\n    mediump vec4 indexCoefficient = vec4(4.0, 3.0, 2.0, 1.0);\n    mediump int index = 4 - int(dot(comparison, indexCoefficient));\n    return index;\n}\n#endif\n\n// 平行光阴影坐标\nvec4 getShadowCoord(in vec3 positionWS)\n{\n\t#ifdef SHADOW_CASCADE\n    mediump int cascadeIndex = computeCascadeIndex(positionWS);\n\t    #ifdef GRAPHICS_API_GLES3\n    mat4 shadowMat = u_ShadowMatrices[cascadeIndex];\n\t    #else // GRAPHICS_API_GLES3\n    mat4 shadowMat;\n    if (cascadeIndex == 0)\n\t{\n\t    shadowMat = u_ShadowMatrices[0];\n\t}\n    else if (cascadeIndex == 1)\n\t{\n\t    shadowMat = u_ShadowMatrices[1];\n\t}\n    else if (cascadeIndex == 2)\n\t{\n\t    shadowMat = u_ShadowMatrices[2];\n\t}\n    else\n\t{\n\t    shadowMat = u_ShadowMatrices[3];\n\t}\n\t    #endif // GRAPHICS_API_GLES3\n\n    return shadowMat * vec4(positionWS, 1.0);\n\n\t#else // SHADOW_CASCADE\n\n    return u_ShadowMatrices[0] * vec4(positionWS, 1.0);\n\n\t#endif // SHADOW_CASCADE\n}\n\n// 采样平行光阴影\nfloat sampleShadowmap(in vec4 shadowCoord)\n{\n    float attenuation = 1.0;\n\n    vec3 coord = shadowCoord.xyz / shadowCoord.w;\n\n    vec4 shadowmapSize = u_ShadowMapSize;\n\n    //if (coord.z > 0.0 && coord.z < 1.0)\n\t{\n\t#if defined(SHADOW_SOFT_SHADOW_HIGH)\n\t    attenuation = sampleShdowMapFiltered9(u_ShadowMap, coord, shadowmapSize);\n\t#elif defined(SHADOW_SOFT_SHADOW_LOW)\n\t    attenuation = sampleShdowMapFiltered4(u_ShadowMap, coord, shadowmapSize);\n\t#else // hard\n\t    attenuation = SAMPLE_TEXTURE2D_SHADOW(u_ShadowMap, coord);\n\t#endif // SHADOW_SOFT_SHADOW_HIGH\n\t    attenuation = mix(1.0, attenuation, ShadowStrength);\n\t}\n\n    if (coord.z > 0.0 && coord.z < 1.0)\n        return attenuation;\n    return 1.0;\n}\n\n    #endif // CALCULATE_SHADOWS\n\n    // 计算 聚光灯 阴影\n    #if defined(CALCULATE_SPOTSHADOWS)\n\n// 聚光灯阴影坐标\nvec4 getSpotShadowCoord(in vec3 positionWS)\n{\n    vec4 coordinate = u_SpotViewProjectMatrix * vec4(positionWS, 1.0);\n\n    return coordinate;\n}\n\n// 采样聚光灯阴影\nfloat sampleSpotShadowmap(vec4 shadowCoord)\n{\n    float attenuation = 1.0;\n\n    vec3 coord = shadowCoord.xyz / shadowCoord.w;\n    coord.xy = coord.xy * 0.5 + 0.5;\n\n    vec4 shadowmapSize = u_SpotShadowMapSize;\n    // todo\n    //if (coord.z > 0.0 && coord.z < 1.0)\n\t//{\n\t#if defined(SHADOW_SPOT_SOFT_SHADOW_HIGH)\n\t    attenuation = sampleShdowMapFiltered9(u_SpotShadowMap, coord, shadowmapSize);\n\t#elif defined(SHADOW_SPOT_SOFT_SHADOW_LOW)\n\t    attenuation = sampleShdowMapFiltered4(u_SpotShadowMap, coord, shadowmapSize);\n\t#else // hard\n\t    attenuation = SAMPLE_TEXTURE2D_SHADOW(u_SpotShadowMap, coord);\n\t#endif\n\t    attenuation = mix(1.0, attenuation, SpotShadowStrength);\n\t//}\n\n    if (coord.z > 0.0 && coord.z < 1.0)\n        return attenuation;\n    return 1.0;\n}\n\n    #endif // CALCULATE_SPOTSHADOWS\n\n#endif // ShadowSampler_lib'),t.Shader3D.addInclude("Lighting.glsl",'#if !defined(Lighting_lib)\n    #define Lighting_lib\n\n    #include "ShadowSampler.glsl";\n\nstruct Light {\n    vec3 color;\n    vec3 dir;\n    float attenuation;\n};\n\nstruct DirectionLight {\n    vec3 color;\n    vec3 direction;\n    float attenuation;\n    int lightMode;\n};\n\nstruct PointLight {\n    vec3 color;\n    vec3 position;\n    float range;\n    float attenuation;\n    int lightMode;\n};\n\nstruct SpotLight {\n    vec3 color;\n    vec3 position;\n    float range;\n    vec3 direction;\n    float spot;\n    float attenuation;\n    int lightMode;\n};\n\n    #define LightMode_Mix      0\n    #define LightMode_RealTime 1\n\nint getAttenuationByMode(float lightMapMode)\n{\n    #ifdef LIGHTMAP // mix 0 realtime 1\n    return int(lightMapMode);\n    #else // LIGHTMAP\n\n\t#ifdef VOLUMETRICGI\n    return int(lightMapMode);\n\t#endif // VOLUMETRICGI\n\n    #endif // LIGHTMAP\n    return LightMode_RealTime;\n}\n\n    #if defined(DIRECTIONLIGHT) || defined(POINTLIGHT) || defined(SPOTLIGHT)\n\n\t#define LIGHTING\n\n// 灯光衰减函数\nfloat attenuation(in vec3 L, in float invLightRadius)\n{\n    float fRatio = clamp(length(L) * invLightRadius, 0.0, 1.0);\n    fRatio *= fRatio;\n    return 1.0 / (1.0 + 25.0 * fRatio) * clamp(4.0 * (1.0 - fRatio), 0.0, 1.0);\n}\n\n// 平行光\nLight getLight(in DirectionLight directionLight)\n{\n    Light light;\n    light.color = directionLight.color;\n    light.dir = directionLight.direction;\n    light.attenuation = directionLight.attenuation;\n    return light;\n}\n\n// 点光\nLight getLight(in PointLight pointLight, in vec3 normalWS, in vec3 positionWS)\n{\n    vec3 lightDirection = positionWS - pointLight.position;\n    float rangeAttenuate = attenuation(lightDirection, 1.0 / pointLight.range);\n\n    Light light;\n    light.color = pointLight.color * rangeAttenuate;\n    light.dir = normalize(lightDirection);\n    light.attenuation = pointLight.attenuation;\n    return light;\n}\n\n// 聚光灯\nLight getLight(in SpotLight spotLight, in vec3 normalWS, in vec3 positionWS)\n{\n    vec3 lightDirection = positionWS - spotLight.position;\n    vec3 normalizeLightDir = normalize(lightDirection);\n\n    vec2 cosAngles = cos(vec2(spotLight.spot, spotLight.spot * 0.5) * 0.5);\n    float dirAttenuate = dot(spotLight.direction, normalizeLightDir);\n    dirAttenuate *= smoothstep(cosAngles.x, cosAngles.y, dirAttenuate);\n\n    float rangeAttenuate = attenuation(lightDirection, 1.0 / spotLight.range);\n\n    Light light;\n    light.color = spotLight.color * rangeAttenuate * dirAttenuate;\n    light.dir = normalizeLightDir;\n    light.attenuation = spotLight.attenuation;\n    return light;\n}\n\n\t#ifdef LEGACYSINGLELIGHTING\n\t    #define CalculateLightCount 1\n\t    #define DirectionCount\t1\n\n\t    #ifdef DIRECTIONLIGHT\nuniform DirectionLight u_DirectionLight;\n\t    #endif // DIRECTIONLIGHT\n\n\t    #ifdef POINTLIGHT\nuniform PointLight u_PointLight;\n\t    #endif // POINTLIGHT\n\n\t    #ifdef SPOTLIGHT\nuniform SpotLight u_SpotLight;\n\t    #endif // SPOTLIGHT\n\n\t#else // LEGACYSINGLELIGHTING\n\t    #define CalculateLightCount MAX_LIGHT_COUNT\n\t    #define DirectionCount\tu_DirationLightCount\n\nuniform sampler2D u_LightBuffer;\n\n\t    #ifdef DIRECTIONLIGHT\nuniform mediump int u_DirationLightCount;\n\t    #endif\n\n\t    #if defined(POINTLIGHT) || defined(SPOTLIGHT)\nconst int c_ClusterBufferWidth = CLUSTER_X_COUNT * CLUSTER_Y_COUNT;\nint c_ClusterBufferHeight = CLUSTER_Z_COUNT * (1 + int(ceil(float(MAX_LIGHT_COUNT_PER_CLUSTER) / 4.0))); //兼容WGSL\nconst int c_ClusterBufferFloatWidth = c_ClusterBufferWidth * 4;\nuniform sampler2D u_LightClusterBuffer;\n\nint getLightIndex(in int offset, in int index)\n{\n    int totalOffset = offset + index;\n    int row = totalOffset / c_ClusterBufferFloatWidth;\n    int lastRowFloat = totalOffset - row * c_ClusterBufferFloatWidth;\n    int col = lastRowFloat / 4;\n    vec2 uv = vec2((float(col) + 0.5) / float(c_ClusterBufferWidth), (float(row) + 0.5) / float(c_ClusterBufferHeight));\n    vec4 texPixel = texture2D(u_LightClusterBuffer, uv);\n    int pixelComponent = lastRowFloat - col * 4;\n\n\t\t#ifdef GRAPHICS_API_GLES3\n    return int(texPixel[pixelComponent]);\n\t\t#else\n    if (pixelComponent == 0)\n\treturn int(texPixel.x);\n    else if (pixelComponent == 1)\n\treturn int(texPixel.y);\n    else if (pixelComponent == 2)\n\treturn int(texPixel.z);\n    else\n\treturn int(texPixel.w);\n\t\t#endif\n}\n\t    #endif // POINTLIGHT || SPOTLIGHT\n\n\t#endif // LEGACYSINGLELIGHTING\n\n\t#ifdef DIRECTIONLIGHT\nDirectionLight getDirectionLight(in int index, in vec3 positionWS)\n{\n    DirectionLight light;\n\t    #ifdef LEGACYSINGLELIGHTING\n    light.color = u_DirectionLight.color;\n    light.direction = u_DirectionLight.direction;\n    light.attenuation = 1.0;\n    light.lightMode = getAttenuationByMode(float(u_DirectionLight.lightMode));\n\t    #else // LEGACYSINGLELIGHTING\n    float v = (float(index) + 0.5) / float(CalculateLightCount);\n    vec4 p1 = texture2D(u_LightBuffer, vec2(0.125, v));\n    vec4 p2 = texture2D(u_LightBuffer, vec2(0.375, v));\n    light.color = p1.rgb;\n    light.direction = p2.rgb;\n    light.attenuation = 1.0;\n    light.lightMode = getAttenuationByMode(p1.a);\n\t    #endif // LEGACYSINGLELIGHTING\n\n\t    #if defined(CALCULATE_SHADOWS)\n    if (index == 0)\n\t{\n\t    vec4 shadowCoord = getShadowCoord(positionWS);\n\t    float shadowAttenuation = sampleShadowmap(shadowCoord);\n\t    light.attenuation = shadowAttenuation;\n\t}\n\t    #endif // CALCULATE_SHADOWS\n\n    return light;\n}\n\t#endif // DIRECTIONLIGHT\n\n\t#if defined(POINTLIGHT) || defined(SPOTLIGHT)\nivec4 getClusterInfo(mat4 viewMatrix, vec4 viewport, vec3 positionWS, vec4 fragCoord, vec4 projectParams)\n{\n\t    #ifdef LEGACYSINGLELIGHTING\n    return ivec4(1, 1, 0, 0);\n\t    #else // LEGACYSINGLELIGHTING\n    // todo  这个地方 用 positionVS 替换?\n    vec3 viewPos = vec3(viewMatrix * vec4(positionWS, 1.0));\n    int clusterXIndex = int(floor(fragCoord.x / (float(viewport.z) / float(CLUSTER_X_COUNT))));\n    int clusterYIndex = int(floor((viewport.w * (projectParams.z < 0.0 ? 0.0 : 1.0) - fragCoord.y * projectParams.z) / (float(viewport.w) / float(CLUSTER_Y_COUNT))));\n    float zSliceParam = float(CLUSTER_Z_COUNT) / log2(projectParams.y / projectParams.x);\n    int clusterZIndex = int(floor(log2(-viewPos.z) * zSliceParam - log2(projectParams.x) * zSliceParam));\n    // todo 化简\n    vec2 uv = vec2((float(clusterXIndex + clusterYIndex * CLUSTER_X_COUNT) + 0.5) / float(c_ClusterBufferWidth), (float(clusterZIndex) + 0.5) / float(c_ClusterBufferHeight));\n    vec4 clusterPixel = texture2D(u_LightClusterBuffer, uv);\n    return ivec4(clusterPixel); // X:Point Count Y:Spot Count Z、W:Light Offset\n\t    #endif // LEGACYSINGLELIGHTING\n}\n\t#endif // POINTLIGHT || SPOTLIGHT\n\n\t#ifdef POINTLIGHT\nPointLight getPointLight(in int index, in ivec4 clusterInfo, in vec3 positionWS)\n{\n\n    PointLight light;\n\t    #ifdef LEGACYSINGLELIGHTING\n    light.color = u_PointLight.color;\n    light.position = u_PointLight.position;\n    light.range = u_PointLight.range;\n    light.attenuation = 1.0;\n    light.lightMode = getAttenuationByMode(float(u_PointLight.lightMode));\n\t    #else // LEGACYSINGLELIGHTING\n    // todo  重复计算\n    int indexOffset = clusterInfo.z * c_ClusterBufferFloatWidth + clusterInfo.w;\n    int pointIndex = getLightIndex(indexOffset, index);\n    float v = (float(pointIndex) + 0.5) / float(CalculateLightCount);\n    vec4 p1 = texture2D(u_LightBuffer, vec2(0.125, v));\n    vec4 p2 = texture2D(u_LightBuffer, vec2(0.375, v));\n    light.color = p1.rgb;\n    light.range = p1.a;\n    light.position = p2.rgb;\n    light.attenuation = 1.0;\n    light.lightMode = getAttenuationByMode(p2.a);\n\t    #endif // LEGACYSINGLELIGHTING\n    return light;\n}\n\t#endif // POINTLIGHT\n\n\t#ifdef SPOTLIGHT\nSpotLight getSpotLight(in int index, in ivec4 clusterInfo, in vec3 positionWS)\n{\n    SpotLight light;\n\n\t    #ifdef LEGACYSINGLELIGHTING\n    light.color = u_SpotLight.color;\n    light.position = u_SpotLight.position;\n    light.range = u_SpotLight.range;\n    light.direction = u_SpotLight.direction;\n    light.spot = u_SpotLight.spot;\n    light.attenuation = 1.0;\n    light.lightMode = getAttenuationByMode(float(u_SpotLight.lightMode));\n\t    #else // LEGACYSINGLELIGHTING\n    // todo  重复计算\n    int indexOffset = clusterInfo.z * c_ClusterBufferFloatWidth + clusterInfo.w;\n    int spotIndex = getLightIndex(indexOffset, index + clusterInfo.x);\n    float v = (float(spotIndex) + 0.5) / float(CalculateLightCount);\n    vec4 p1 = texture2D(u_LightBuffer, vec2(0.125, v));\n    vec4 p2 = texture2D(u_LightBuffer, vec2(0.375, v));\n    vec4 p3 = texture2D(u_LightBuffer, vec2(0.625, v));\n    light.color = p1.rgb;\n    light.range = p1.a;\n    light.position = p2.rgb;\n    light.spot = p2.a;\n    light.direction = p3.rgb;\n    light.attenuation = 1.0;\n    light.lightMode = getAttenuationByMode(p3.a);\n\t    #endif // LEGACYSINGLELIGHTING\n\n\t    #if defined(CALCULATE_SPOTSHADOWS)\n    if (index == 0)\n\t{\n\t    vec4 shadowCoord = getSpotShadowCoord(positionWS);\n\t    float shadowAttenuation = sampleSpotShadowmap(shadowCoord);\n\t    light.attenuation = shadowAttenuation;\n\t}\n\t    #endif // CALCULATE_SPOTSHADOWS\n\n    return light;\n}\n\t#endif // SPOTLIGHT\n\n    #endif // DIRECTIONLIGHT || POINTLIGHT || SPOTLIGHT\n\n#endif // Lighting_lib'),t.Shader3D.addInclude("globalIllumination.glsl",'#if !defined(globalIllumination_lib)\n    #define globalIllumination_lib\n\n    #ifdef VOLUMETRICGI\n\t#include "VolumetricGI.glsl";\n    #endif // VOLUMETRICGI\n\nvec3 rotateByYAixs(in vec3 normal)\n{\n    float co = cos(u_GIRotate);\n    float si = sin(u_GIRotate);\n    float x = normal.x * co - normal.z * si;\n    float z = normal.x * si + normal.z * co;\n    return vec3(x, normal.y, z);\n}\n\nvec4 rotateByYAixs(in vec4 normal)\n{\n    float co = cos(u_GIRotate);\n    float si = sin(u_GIRotate);\n    float x = normal.x * co - normal.z * si;\n    float z = normal.x * si + normal.z * co;\n    return vec4(x, normal.y, z, normal.w);\n}\nuniform float u_AmbientIntensity;\nuniform float u_ReflectionIntensity;\n\n    #ifdef GI_IBL\n\nuniform vec3 u_IblSH[9];\n\nuniform samplerCube u_IBLTex;\nuniform float u_IBLRoughnessLevel;\n\n//#define IBL_ROUGHNESS_LEVEL u_IBLRoughnessLevel //兼容WGSL\n\n// todo 格式\nvec3 diffuseIrradiance(in vec3 normalWS)\n{\n    // todo cmeng 生成的数据问题， 临时转换下\n    vec3 n = normalWS * vec3(-1.0, 1.0, 1.0);\n    n = rotateByYAixs(n);\n    return max(\n\t       u_IblSH[0]\n\t\t   + u_IblSH[1] * n.y\n\t\t   + u_IblSH[2] * n.z\n\t\t   + u_IblSH[3] * n.x\n\t\t   + u_IblSH[4] * (n.y * n.x)\n\t\t   + u_IblSH[5] * (n.y * n.z)\n\t\t   + u_IblSH[6] * (3.0 * n.z * n.z - 1.0)\n\t\t   + u_IblSH[7] * (n.z * n.x)\n\t\t   + u_IblSH[8] * (n.x * n.x - n.y * n.y),\n\t       0.0)\n\t* u_AmbientIntensity;\n}\n\nvec3 diffuseIrradiance(in vec3 normalWS, in vec3 positionWS, in vec3 viewDir)\n{\n\t#ifdef VOLUMETRICGI\n    vec3 surfaceBias = VolumetricGISurfaceBias(normalWS, viewDir);\n    return VolumetricGIVolumeIrradiance(positionWS, surfaceBias, normalWS) * u_AmbientIntensity;\n\t#else // VOLUMETRICGI\n    return diffuseIrradiance(normalWS);\n\t#endif // VOLUMETRICGI\n}\n\nvec3 specularRadiance(in vec3 r, in float perceptualRoughness)\n{\n    float lod = u_IBLRoughnessLevel * perceptualRoughness * (2.0 - perceptualRoughness); //兼容WGSL\n\n    // todo 临时转换\n    vec3 reflectDir = r * vec3(-1.0, 1.0, 1.0);\n\n    // todo rotateY SceneConfig\n    reflectDir = rotateByYAixs(reflectDir);\n\n    // todo float 编码 ?\n    #ifdef LOD_TEXTURE_SAMPLE\n    vec4 reflectSampler = textureCubeLodEXT(u_IBLTex, reflectDir, lod);\n    #else\n    vec4 reflectSampler = textureCube(u_IBLTex, reflectDir, lod); //兼容WGSL\n    #endif\n\n\t#ifdef IBL_RGBD\n    return decodeRGBD(reflectSampler) * u_ReflectionIntensity;\n\t#else // IBL_RGBD\n    return reflectSampler.rgb * u_ReflectionIntensity;\n\t#endif // IBL_RGBD\n}\n\n    #endif // GI_IBL\n\n    #ifdef GI_LEGACYIBL\n\nuniform vec4 u_AmbientSHAr;\nuniform vec4 u_AmbientSHAg;\nuniform vec4 u_AmbientSHAb;\nuniform vec4 u_AmbientSHBr;\nuniform vec4 u_AmbientSHBg;\nuniform vec4 u_AmbientSHBb;\nuniform vec4 u_AmbientSHC;\n\n\t#define LAYA_SPECCUBE_LOD_STEPS 6.0\nuniform samplerCube u_ReflectTexture;\nuniform vec4 u_ReflectCubeHDRParams;\n\nvec3 shEvalLinearL0L1(in vec4 normal)\n{\n    vec3 x;\n    x.r = dot(u_AmbientSHAr, normal);\n    x.g = dot(u_AmbientSHAg, normal);\n    x.b = dot(u_AmbientSHAb, normal);\n    return x;\n}\n\nvec3 shEvalLinearL2(in vec4 normal)\n{\n    vec3 x1, x2;\n    // 4 of the quadratic (L2) polynomials\n    vec4 vB = normal.xyzz * normal.yzzx;\n    x1.r = dot(u_AmbientSHBr, vB);\n    x1.g = dot(u_AmbientSHBg, vB);\n    x1.b = dot(u_AmbientSHBb, vB);\n\n    // Final (5th) quadratic (L2) polynomial\n    float vC = normal.x * normal.x - normal.y * normal.y;\n    x2 = u_AmbientSHC.rgb * vC;\n\n    return x1 + x2;\n}\n\nvec3 diffuseIrradiance(in vec3 normalWS)\n{\n    // todo -x 坐标转换\n    vec4 normal = vec4(-normalWS.x, normalWS.yz, 1.0);\n\n    // TODO rotate y SceneConfig\n\n    normal = rotateByYAixs(normal);\n\n    vec3 ambientContrib = shEvalLinearL0L1(normal);\n    ambientContrib += shEvalLinearL2(normal);\n    vec3 ambient = max(vec3(0.0), ambientContrib);\n\n    return ambient * u_AmbientIntensity;\n}\n\nvec3 diffuseIrradiance(in vec3 normalWS, in vec3 positionWS, in vec3 viewDir)\n{\n\t#ifdef VOLUMETRICGI\n    vec3 surfaceBias = VolumetricGISurfaceBias(normalWS, viewDir);\n    return VolumetricGIVolumeIrradiance(positionWS, surfaceBias, normalWS) * u_AmbientIntensity;\n\t#else // VOLUMETRICGI\n    return diffuseIrradiance(normalWS);\n\t#endif // VOLUMETRICGI\n}\n\nvec3 specularRadiance(in vec3 r, in float perceptualRoughness)\n{\n    float roughness = perceptualRoughness * (1.7 - 0.7 * perceptualRoughness);\n    // todo 临时转换\n    r *= vec3(-1.0, 1.0, 1.0);\n    r = rotateByYAixs(r);\n\n    float lod = roughness * LAYA_SPECCUBE_LOD_STEPS;\n    vec4 rgbm = textureCubeLodEXT(u_ReflectTexture, r, lod);\n    float range = u_ReflectCubeHDRParams.x;\n    vec3 color = decodeRGBM(rgbm, range);\n    color = gammaToLinear(color);\n    return color * u_ReflectionIntensity;\n}\n\n    #endif // GI_LEGACYIBL\n\n    #ifndef GI_IBL\n\t#ifndef GI_LEGACYIBL\n\nuniform vec4 u_AmbientColor;\n\nvec3 diffuseIrradiance(in vec3 normalWS)\n{\n    return u_AmbientColor.rgb * u_AmbientIntensity;\n}\n\nvec3 diffuseIrradiance(in vec3 normalWS, in vec3 positionWS, in vec3 viewDir)\n{\n    return diffuseIrradiance(normalWS);\n}\n\nvec3 specularRadiance(in vec3 r, in float perceptualRoughness)\n{\n    // todo\n    return u_AmbientColor.rgb * u_ReflectionIntensity;\n}\n\n\t#endif // GI_LEGACYIBL\n    #endif // GI_IBL\n\n    #ifdef LIGHTMAP\n\n\t#ifdef UV1\n\t    #define USELIGHTMAP\n\t#endif // UV1\n\nuniform sampler2D u_LightMap;\n\n\t#ifdef LIGHTMAP_DIRECTIONAL\n\nuniform sampler2D u_LightMapDirection;\n\nvec3 DecodeDirectionalLightmap(in vec2 lightmapUV, in vec3 bakeColor, in vec3 normalWS)\n{\n    vec4 dirLightmap = texture2D(u_LightMapDirection, lightmapUV);\n    vec3 lightdir = normalize(dirLightmap.xyz - vec3(0.5)); // 0-1  => -0.5-0.5\n    //根据法线计算半兰伯特\n    float halfLambert = clamp(dot(normalWS, lightdir), 0.0, 1.0) * 0.5 + 0.5;\n    return bakeColor * halfLambert / max(dirLightmap.w, 0.001);\n}\n\n\t#endif // LIGHTMAP_DIRECTIONAL\n\nvec3 getBakedLightmapColor(in vec2 lightmapUV, in vec3 normalWS)\n{\n    vec4 lightmapSampler = texture2D(u_LightMap, lightmapUV);\n\t// todo lightmap rgbm encode color space\n    lightmapSampler.rgb =  decodeRGBM(lightmapSampler,5.0);\n\n\t//#ifdef Gamma_u_LightMap\n    lightmapSampler = gammaToLinear(lightmapSampler);\n\t//#endif // Gamma_u_LightMap\n\n\t#ifdef LIGHTMAP_DIRECTIONAL\n    lightmapSampler.rgb = DecodeDirectionalLightmap(lightmapUV, lightmapSampler.rgb, normalWS);\n\t#endif // LIGHTMAP_DIRECTIONAL\n\n    return lightmapSampler.rgb;\n}\n\n    #endif // LIGHTMAP\n\n    #ifdef SPECCUBE_BOX_PROJECTION\n\nuniform vec3 u_SpecCubeProbePosition;\nuniform vec3 u_SpecCubeBoxMax;\nuniform vec3 u_SpecCubeBoxMin;\n\nvec3 getBoxProjectionReflectedVector(vec3 r, vec3 positionWS)\n{\n    vec3 boxCenter = u_SpecCubeProbePosition;\n    vec3 boxMin = u_SpecCubeBoxMin;\n    vec3 boxMax = u_SpecCubeBoxMax;\n\n    vec3 nr = normalize(r);\n    vec3 rbmax = boxMax - positionWS;\n    vec3 rbmin = boxMin - positionWS;\n    vec3 select = step(vec3(0.0), r);\n    vec3 rbminmax = mix(rbmin, rbmax, select) / nr;\n    float scalar = vecmin(rbminmax);\n    vec3 boxr = nr * scalar + positionWS - boxCenter;\n    return boxr;\n}\n\n    #endif // SPECCUBE_BOX_PROJECTION\n\n#endif // globalIllumination_lib'),t.Shader3D.addInclude("Oct.glsl","#if !defined(Oct_lib)\n    #define Oct_lib\n\nfloat signNotZero(in float k) { return k >= 0.0 ? 1.0 : -1.0; }\n\nvec2 signNotZero(in vec2 v) { return vec2(signNotZero(v.x), signNotZero(v.y)); }\n\n/**\n * v: normalized sample dir\n * @return: oct encode uv [-1, 1]\n */\nvec2 octEncode(in vec3 v)\n{\n    float l1norm = abs(v.x) + abs(v.y) + abs(v.z);\n    vec2 result = v.xy * (1.0 / l1norm);\n    if (v.z < 0.0)\n\t{\n\t    result = (1.0 - abs(result.yx)) * signNotZero(result.xy);\n\t}\n\n    return result;\n}\n\n/**\n * x: u [-1, 1]\n * y: v [-1, 1]\n * @return: normalized sample dir\n */\nvec3 finalDecode(float x, float y)\n{\n    vec3 v = vec3(x, y, 1.0 - abs(x) - abs(y));\n    if (v.z < 0.0)\n\t{\n\t    v.xy = (1.0 - abs(v.yx)) * signNotZero(v.xy);\n\t}\n    return normalize(v);\n}\n\n/**\n * dir: cubemap sample dir\n * outsize: probe size with border (x: probe x, y: probe y, z: 1 / probe x, w: 1\n * / probe y) gridsize: probe grid size (x: probe x index, y: probe y index, z:\n * grid x size, w: grid y size)\n * @return texture coord [0, 1]\n */\nvec2 textureCoordFromDirection(in vec3 dir, vec4 outSize, vec4 gridSize)\n{\n    vec2 uv = (octEncode(normalize(dir))) * 0.5 + 0.5;\n    uv = uv * (outSize.xy - vec2(2.0, 2.0)) * outSize.zw + outSize.zw;\n    uv = gridSize.xy * (1.0 / gridSize.zw) + uv * (1.0 / gridSize.zw);\n    return uv;\n}\n\n#endif // Oct_lib"),t.Shader3D.addInclude("GridHelpers.glsl","#if !defined(GridHelpers_lib)\n    #define GridHelpers_lib\n\nint gridCoordToProbeIndex(in ivec3 probeCoords, const in ivec3 probeCounts)\n{\n    return probeCoords.x + probeCoords.y * probeCounts.x + probeCoords.z * probeCounts.x * probeCounts.y;\n}\n\nivec3 probeIndexToGridcoord(in int probeIndex, const in ivec3 probeCounts)\n{\n    ivec3 iPos;\n    iPos.x = probeIndex % probeCounts.x;\n    iPos.y = (probeIndex % (probeCounts.x * probeCounts.y)) / probeCounts.x;\n    iPos.z = probeIndex / (probeCounts.x * probeCounts.y);\n    return iPos;\n\n    //   ivec3 iPos;\n    //   iPos.x = probeIndex & (probeCounts.x - 1);\n    //   iPos.y = (probeIndex & ((probeCounts.x * probeCounts.y) - 1)) >>\n    //            findMSB(probeCounts.x);\n    //   iPos.z = probeIndex >> findMSB(probeCounts.x * probeCounts.y);\n    //   return iPos;\n}\n\nvec3 gridCoordToPosition(in ivec3 coord, const in vec3 probeStep,\n    const in vec3 probeStartPosition)\n{\n    return (vec3(coord) + 0.5) * probeStep + probeStartPosition;\n}\n\nivec3 baseGridCoord(in vec3 position, in vec3 probeStep,\n    in vec3 probeStartPosition, in ivec3 probeCounts)\n{\n    probeStartPosition += 0.5 * probeStep;\n    return clamp(ivec3((position - probeStartPosition) / probeStep),\n\tivec3(0, 0, 0), probeCounts - ivec3(1, 1, 1));\n}\n\n#endif // GridHelpers_lib"),t.Shader3D.addInclude("VolumetricGI.glsl",'// https://jcgt.org/published/0008/02/01/\n\n#if !defined(VolumetricGI_lib)\n    #define VolumetricGI_lib\n\n    #include "Oct.glsl";\n    #include "GridHelpers.glsl";\n\nstruct VolumetricGI {\n    vec3 probeCounts;\n    vec3 probeStep;\n    vec3 probeStartPosition;\n    // float irradianceTexels;\n    // float distanceTexels;\n    // float normalBias;\n    // float viewBias;\n    vec4 probeParams; // x: irradianceTexels, y: distanceTexels, z: normalBias, w: viewBias\n};\n\nuniform VolumetricGI u_VolumetricGI;\n\nuniform sampler2D u_ProbeIrradiance;\nuniform sampler2D u_ProbeDistance;\n\nvec2 porbeGridCoordToTextureGridCoord(in ivec3 porbeGridCoord,\n    in ivec3 probeCounts,\n    in vec2 textureGridSize)\n{\n    int probeIndex = gridCoordToProbeIndex(porbeGridCoord, probeCounts);\n    ivec2 index;\n    index.x = probeIndex % (probeCounts.x * probeCounts.y);\n    index.y = probeIndex / (probeCounts.x * probeCounts.y);\n\n    vec2 textureGridCoord = vec2(index);\n    textureGridCoord.y = textureGridCoord.y;\n    return textureGridCoord;\n}\n\nvec3 VolumetricGISurfaceBias(in vec3 surfaceNormal, in vec3 cameraDirection)\n{\n    return surfaceNormal * u_VolumetricGI.probeParams.z + cameraDirection * u_VolumetricGI.probeParams.w;\n}\n\nvec3 VolumetricGIVolumeIrradiance(in vec3 worldPosition, in vec3 surfaceBias,\n    in vec3 direction)\n{\n    // direction *= vec3(-1.0, 1.0, 1.0);\n    ivec3 porbeCounts = ivec3(u_VolumetricGI.probeCounts);\n    vec3 probeStep = u_VolumetricGI.probeStep;\n    vec3 probeStartPosition = u_VolumetricGI.probeStartPosition;\n    vec2 volumeCounts = vec2(porbeCounts.x * porbeCounts.y, porbeCounts.z);\n    vec4 irradianceTexels = vec4(u_VolumetricGI.probeParams.x, u_VolumetricGI.probeParams.x, 1.0 / u_VolumetricGI.probeParams.x, 1.0 / u_VolumetricGI.probeParams.x);\n    vec4 distanceTexels = vec4(u_VolumetricGI.probeParams.y, u_VolumetricGI.probeParams.y, 1.0 / u_VolumetricGI.probeParams.y, 1.0 / u_VolumetricGI.probeParams.y);\n\n    ivec3 maxGridCoord = porbeCounts - ivec3(1);\n\n    vec3 irradiance = vec3(0.0);\n    float accumulatedWeights = 0.0;\n\n    // Bias the world space position\n    vec3 biasedWorldPosition = worldPosition + surfaceBias;\n\n    // Get the 3D grid coordinates of the probe nearest the biased world position\n    // (i.e. the "base" probe)\n    ivec3 baseProbeCoords = baseGridCoord(biasedWorldPosition, probeStep,\n\tprobeStartPosition, porbeCounts);\n\n    // Get the world-space position of the base probe (ignore relocation)\n    vec3 baseProbeWorldPosition = gridCoordToPosition(baseProbeCoords, probeStep, probeStartPosition);\n\n    // Clamp the distance (in grid space) between the given point and the base\n    // probe\'s world position (on each axis) to [0, 1]\n    vec3 gridSpaceDistance = biasedWorldPosition - baseProbeWorldPosition;\n\n    vec3 alpha = clamp(gridSpaceDistance / probeStep, vec3(0.0), vec3(1.0));\n\n    // Iterate over the 8 closest probes and accumulate their contributions\n    for (int probeIndex = 0; probeIndex < 8; probeIndex++)\n\t{\n\t    // Compute the offset to the adjacent probe in grid coordinates by sourcing\n\t    // the offsets from the bits of the loop index: x = bit 0, y = bit 1, z =\n\t    // bit 2\n\t    ivec3 adjacentProbeOffset = ivec3(probeIndex, probeIndex >> 1, probeIndex >> 2) & ivec3(1, 1, 1);\n\n\t    // Get the 3D grid coordinates of the adjacent probe by adding the offset to\n\t    // the base probe and clamping to the grid boundaries\n\t    ivec3 adjacentProbeCoords = clamp(baseProbeCoords + adjacentProbeOffset, ivec3(0), maxGridCoord);\n\n\t    // Get the adjacent probe\'s world position\n\t    vec3 adjacentProbeWorldPosition = gridCoordToPosition(adjacentProbeCoords, probeStep, probeStartPosition);\n\n\t    // Compute the distance and direction from the (biased and non-biased)\n\t    // shading point and the adjacent probe\n\t    vec3 worldPosToAdjProbe = normalize(adjacentProbeWorldPosition - worldPosition);\n\t    vec3 biasedPosToAdjProbe = normalize(adjacentProbeWorldPosition - biasedWorldPosition);\n\t    float biasedPosToAdjProbeDist = distance(adjacentProbeWorldPosition, biasedWorldPosition);\n\n\t    // Compute trilinear weights based on the distance to each adjacent probe to\n\t    // smoothly transition between probes. adjacentProbeOffset is binary, so\n\t    // we\'re using a 1-alpha when adjacentProbeOffset = 0 and alpha when\n\t    // adjacentProbeOffset = 1.\n\t    vec3 trilinear = max(vec3(0.001), mix(1.0 - alpha, alpha, vec3(adjacentProbeOffset)));\n\t    float trilinearWeight = trilinear.x * trilinear.y * trilinear.z;\n\t    float weight = 1.0;\n\n\t    // A naive soft backface weight would ignore a probe when\n\t    // it is behind the surface. That\'s good for walls, but for\n\t    // small details inside of a room, the normals on the details\n\t    // might rule out all of the probes that have mutual visibility\n\t    // to the point. We instead use a "wrap shading" test. The small\n\t    // offset at the end reduces the "going to zero" impact.\n\t    float warpShading = (dot(worldPosToAdjProbe, direction) + 1.0) * 0.5;\n\t    weight *= (warpShading * warpShading) * 0.2;\n\n\t    vec2 textureGridCoord = porbeGridCoordToTextureGridCoord(\n\t\tadjacentProbeCoords, porbeCounts, volumeCounts);\n\t    // compute the octahedral coordinates of the adjacent probe\n\t    vec2 probeTextureUV = textureCoordFromDirection(-biasedPosToAdjProbe, distanceTexels,\n\t\tvec4(textureGridCoord, volumeCounts));\n\t    // Sample the probe\'s distance texture to get the mean distance to nearby\n\t    // surfaces\n\t    vec3 filteredDistance = texture2D(u_ProbeDistance, probeTextureUV).xyz;\n\t    // Find the variance of the mean distance\n\t    float variance = abs(filteredDistance.x * filteredDistance.x - filteredDistance.y);\n\n\t    // Occlusion test\n\t    float chebyshevWeight = 1.0;\n\t    if (biasedPosToAdjProbeDist > filteredDistance.x)\n\t\t{\n\t\t    float v = biasedPosToAdjProbeDist - filteredDistance.x;\n\t\t    // v must be greater than 0, which is guaranteed by the if condition\n\t\t    // above.\n\t\t    chebyshevWeight = variance / (variance + (v * v));\n\n\t\t    // Increase the contrast in the weight\n\t\t    chebyshevWeight = max(chebyshevWeight * chebyshevWeight * chebyshevWeight, 0.0);\n\t\t}\n\n\t    if (filteredDistance.z < 1.0)\n\t\t{\n\t\t    chebyshevWeight = 1.0;\n\t\t}\n\n\t    // Avoid visibility weights ever going all the way to zero because\n\t    // when *no* probe has visibility we need a fallback value\n\t    weight *= max(0.05, chebyshevWeight);\n\n\t    // Avoid a weight of zero\n\t    weight = max(0.000001, weight);\n\n\t    // A small amount of light is visible due to logarithmic perception, so\n\t    // crush tiny weights but keep the curve continuous\n\t    const float crushThreshold = 0.2;\n\t    if (weight < crushThreshold)\n\t\t{\n\t\t    weight *= (weight * weight) * (1.0 / (crushThreshold * crushThreshold));\n\t\t}\n\n\t    // Apply the trilinear weights\n\t    weight *= trilinearWeight;\n\n\t    probeTextureUV = textureCoordFromDirection(\n\t\tdirection, irradianceTexels, vec4(textureGridCoord, volumeCounts));\n\n\t    // Sample the probe\'s irradiance\n\t    vec3 probeIrradiance = linearToGamma(texture2D(u_ProbeIrradiance, probeTextureUV).rgb);\n\n\t    irradiance += (probeIrradiance * weight);\n\t    accumulatedWeights += weight;\n\t}\n\n    if (accumulatedWeights == 0.0)\n\t{\n\t    return vec3(0.0);\n\t}\n\n    irradiance *= (1.f / accumulatedWeights); // Normalize by the accumulated weights\n\n    irradiance = gammaToLinear(irradiance);\n\n    return irradiance;\n}\n\n#endif // VolumetricGI_lib'),t.Shader3D.addInclude("BlinnPhongLighting.glsl",'#if !defined(BlinnPhongLighting_lib)\n    #define BlinnPhongLighting_lib\n\n    #include "Lighting.glsl";\n    #include "globalIllumination.glsl";\n\nstruct PixelInfo {\n    vec3 positionWS;\n\n    vec3 vertexNormalWS;\n    vec3 normalWS;\n\n    vec3 viewDir;\n\n    #ifdef LIGHTMAP\n\t#ifdef UV1\n    vec2 lightmapUV;\n\t#endif // UV1\n    #endif // LIGHTMAP\n};\n\nstruct Surface {\n    vec3 diffuseColor;\n    vec3 specularColor;\n    float shininess;\n    vec3 gloss;\n\n    vec3 normalTS;\n\n    float alpha;\n    float alphaClip;\n};\n\nvec3 BlinnPhongLighting(in Surface surface, in Light light, in PixelInfo pixel)\n{\n    vec3 l = normalize(-light.dir);\n    vec3 v = pixel.viewDir;\n\n    vec3 normalWS = pixel.normalWS;\n\n    vec3 diffuseColor = surface.diffuseColor;\n    float shininess = surface.shininess;\n    vec3 specularColor = surface.specularColor;\n    vec3 gloss = surface.gloss;\n\n    // difffuse\n    float ndl = max(0.0, dot(normalWS, l));\n    vec3 lightDiffuse = light.color * diffuseColor * ndl;\n\n    // specular\n    mediump vec3 h = normalize(v + l);\n    lowp float ndh = max(0.0, dot(h, normalWS));\n    float specularIntensity = pow(ndh, shininess * 128.0);\n    vec3 lightSpecular = light.color * specularColor * specularIntensity * gloss;\n\n    return lightDiffuse + lightSpecular;\n}\n\nvec3 BlinnPhongGI(const in Surface surface, const in PixelInfo info)\n{\n    vec3 indirect = vec3(0.0);\n\n    #ifdef LIGHTMAP\n\t#ifdef UV1\n\n    vec2 lightmapUV = info.lightmapUV;\n    vec3 bakedColor = getBakedLightmapColor(lightmapUV, info.normalWS);\n\n    // todo  surface.diffuseColor ？\n    indirect = bakedColor * surface.diffuseColor;\n\n\t#endif // UV1\n\n    #else // LIGHTMAP\n\n    vec3 n = info.normalWS;\n    indirect = diffuseIrradiance(n) * surface.diffuseColor;\n\n    #endif // LIGHTMAP\n\n    return indirect;\n}\n\n#endif // BlinnPhongLighting_lib'),t.Shader3D.addInclude("PBRLighting.glsl",'#if !defined(PBRLighting_lib)\n    #define PBRLighting_lib\n\n    #include "Lighting.glsl";\n\n    // 精度\n    #if !defined(GL_FRAGMENT_PRECISION_HIGH)\n\t#define MIN_PERCEPTUAL_ROUGHNESS 0.089\n\t#define MIN_ROUGHNESS\t\t 0.007921\n    #else\n\t#define MIN_PERCEPTUAL_ROUGHNESS 0.045\n\t#define MIN_ROUGHNESS\t\t 0.002025\n    #endif\n\n    #define MIN_N_DOT_V 1e-4\n\n    #include "BRDF.glsl";\n\nstruct PixelInfo {\n    vec3 positionWS;\n\n    vec3 vertexNormalWS;\n    vec3 normalWS;\n    vec3 tangentWS;\n    vec3 biNormalWS;\n\n    vec3 viewDir;\n    float NoV;\n\n    vec3 dfg;\n    vec3 energyCompensation;\n\n    #ifdef IRIDESCENCE\n    vec3 iridescenceFresnel;\n    #endif // IRIDESCENCE\n\n    #ifdef CLEARCOAT\n    vec3 clearCoatNormal;\n    float clearCoatNoV;\n    #endif // CLEARCOAT\n\n    #ifdef SHEEN\n    float sheenScaling;\n    float sheenDfg;\n    #endif // SHEEN\n\n    #ifdef ANISOTROPIC\n    vec3 anisotropicT;\n    vec3 anisotropicB;\n    float ToV;\n    float BoV;\n    float at;\n    float ab;\n    #endif // ANISOTROPIC\n\n    #ifdef THICKNESS\n    vec4 worldScale;\n    #endif // THICKNESS\n\n    #ifdef LIGHTMAP\n\t#ifdef UV1\n    vec2 lightmapUV;\n\t#endif // UV1\n    #endif // LIGHTMAP\n};\n\nstruct Surface {\n    vec3 diffuseColor;\n    float alpha;\n    vec3 f0;\n    vec3 f90;\n    float roughness;\n    float perceptualRoughness;\n    float occlusion;\n\n    #ifdef EMISSION\n    vec3 emissionColor;\n    #endif // EMISSION\n\n    vec3 normalTS;\n\n    float ior;\n\n    #ifdef CLEARCOAT\n    float clearCoat;\n    float clearCoatRoughness;\n    float clearCoatPerceptualRoughness;\n\t#ifdef CLEARCOAT_NORMAL\n    vec3 clearCoatNormalTS;\n\t#endif // CLEARCOAT_NORMAL\n    #endif // CLEARCOAT\n\n    #ifdef ANISOTROPIC\n    float anisotropy;\n    vec2 anisotropyDirection;\n    #endif // ANISOTROPIC\n\n    #ifdef IRIDESCENCE\n    float iridescence;\n    float iridescenceIor;\n    float iridescenceThickness;\n    #endif // IRIDESCENCE\n\n    #ifdef SHEEN\n    vec3 sheenColor;\n    float sheenRoughness;\n    float sheenPerceptualRoughness;\n    #endif // SHEEN\n\n    #ifdef TRANSMISSION\n    float transmission;\n    #endif // TRANSMISSION\n\n    #ifdef THICKNESS\n    float thickness;\n    vec3 attenuationColor;\n    float attenuationDistance;\n    #endif // THICKNESS\n};\n\nstruct LightParams {\n    vec3 l;\n    vec3 h;\n    float NoL;\n    float NoH;\n    float LoH;\n    float VoH;\n\n    #ifdef CLEARCOAT\n    float clearCoatNoH;\n    float clearCoatNoL;\n    #endif // CLEARCOAT\n\n    #ifdef ANISOTROPIC\n    float ToL;\n    float BoL;\n    #endif // ANISOTROPIC\n};\n\nvoid initLightParams(inout LightParams params, const in PixelInfo pixel, const in Light light)\n{\n    vec3 v = pixel.viewDir;\n    vec3 n = pixel.normalWS;\n\n    vec3 l = normalize(-light.dir);\n    params.l = l;\n\n    vec3 h = SafeNormalize(v + l);\n    params.h = h;\n    params.NoL = saturate(dot(n, l));\n    params.NoH = saturate(dot(n, h));\n    params.LoH = saturate(dot(l, h));\n    params.VoH = saturate(dot(v, h));\n\n    #ifdef CLEARCOAT\n    params.clearCoatNoL = saturate(dot(pixel.clearCoatNormal, l));\n    params.clearCoatNoH = saturate(dot(pixel.clearCoatNormal, h));\n    #endif // CLEARCOAT\n\n    #ifdef ANISOTROPIC\n    vec3 t = pixel.anisotropicT;\n    vec3 b = pixel.anisotropicB;\n    params.ToL = dot(t, l);\n    params.BoL = dot(b, l);\n    #endif // ANISOTROPIC\n}\n\nvec3 prefilteredDFG_LUT(float roughness, float NoV)\n{\n    vec2 samplePoint = clamp(vec2(NoV, roughness), vec2(0.0, 0.0), vec2(1.0, 1.0));\n    samplePoint.y = 1.0 - samplePoint.y;\n    #if defined(FLOATTEXTURE) && defined(FLOATTEXTURE_FIL_LINEAR)\n    return (texture2D(u_IBLDFG, samplePoint)).rgb;\n    #else\n    return decodeRGBD(texture2D(u_IBLDFG, samplePoint));\n    #endif\n}\n\n// todo remove\nvec2 EnvBRDFApproxLazarov(float roughness, float NoV)\n{\n    vec4 c0 = vec4(-1, -0.0275, -0.572, 0.022);\n    vec4 c1 = vec4(1, 0.0425, 1.04, -0.04);\n    vec4 r = roughness * c0 + c1;\n    float a004 = min(r.x * r.x, exp2(-9.28 * NoV)) * r.x + r.y;\n    vec2 AB = vec2(-1.04, 1.04) * a004 + r.zw;\n    return AB;\n}\n\nfloat dielectricSpecularToF0(float specular)\n{\n    return 0.08 * specular;\n}\n\nfloat dielectricF0ToIor(float f0)\n{\n    return 2.0 / (1.0 - sqrt(min(f0, 0.99))) - 1.0;\n}\n\nfloat dielectricIorToF0(float ior)\n{\n    return pow2((ior - 1.0) / (ior + 1.0));\n}\n\n// input dielectric f0, output surface f0\nvec3 computeF0(vec3 f0, vec3 baseColor, float metallic)\n{\n    return mix(f0, baseColor, metallic);\n}\n\n// input surface f0, output surface f90\nvec3 computeF90(vec3 f0)\n{\n    return vec3(saturate(dot(f0, vec3(50.0 * 0.33))));\n}\n\nvec3 computeDiffuse(vec3 baseColor, float metallic)\n{\n    return (1.0 - metallic) * baseColor;\n}\n\nfloat specularAA(float roughness, in vec3 normalWS)\n{\n\n    #if !defined(GRAPHICS_API_GLES3) && !defined(GL_OES_standard_derivatives)\n\n    return roughness;\n\n    #else // !GRAPHICS_API_GLES3 && !GL_OES_standard_derivatives\n\n    vec3 du = dFdx(normalWS);\n    vec3 dv = dFdy(normalWS);\n\n    float specularAAVariance = 0.15;\n    float specularAAThreshold = 0.04;\n\n    float variance = specularAAVariance * (dot(du, du) + dot(dv, dv));\n    float kernelRoughness = min(2.0 * variance, specularAAThreshold);\n\n    float squareRoughness = saturate(roughness * roughness + kernelRoughness);\n\n    return sqrt(squareRoughness);\n\n    #endif // !GRAPHICS_API_GLES3 && !GL_OES_standard_derivatives\n}\n\nvec3 diffuseLobe(in Surface surface, const in PixelInfo pixel, const in LightParams lightParams)\n{\n    return surface.diffuseColor * Fd_Lambert();\n    // return surface.diffuseColor * Fd_Burley(surface.roughness, pixel.NoV, lightParams.NoL, lightParams.LoH);\n}\n\nvec3 specularLobe(const in Surface surface, const in PixelInfo pixel, const in LightParams lightParams)\n{\n    float roughness = surface.roughness;\n\n    float D = distribution(roughness, lightParams.NoH, lightParams.h, pixel.normalWS);\n    float V = visibility(roughness, pixel.NoV, lightParams.NoL);\n    vec3 F = fresnel(surface.f0, surface.f90, lightParams.LoH);\n\n    return (D * V) * F;\n}\n\n    #ifdef IRIDESCENCE\nvec3 iridescenceDiffuseLobe(in Surface surface, const in PixelInfo pixel, const in LightParams lightParams)\n{\n    vec3 f0 = surface.f0;\n    vec3 f90 = vec3(1.0);\n    vec3 iridescenceFresnel = pixel.iridescenceFresnel;\n    float iridescence = surface.iridescence;\n    float VoH = lightParams.VoH;\n    return surface.diffuseColor * Fd_IridescenceLambert(f0, f90, iridescenceFresnel, iridescence, VoH);\n}\n\nvec3 iridescenceSpecularLobe(const in Surface surface, const in PixelInfo pixel, const in LightParams lightParams)\n{\n    float roughness = surface.roughness;\n    float D = distribution(roughness, lightParams.NoH, lightParams.h, pixel.normalWS);\n    float V = visibility(roughness, pixel.NoV, lightParams.NoL);\n\n    float iridescenceFactor = surface.iridescence;\n    vec3 iridescenceFresnel = pixel.iridescenceFresnel;\n    vec3 F = mix(fresnel(surface.f0, lightParams.LoH), iridescenceFresnel, vec3(iridescenceFactor));\n\n    return (D * V) * F;\n}\n    #endif // IRIDESCENCE\n\n    #ifdef CLEARCOAT\nfloat clearCoatLobe(const in Surface surface, const in PixelInfo pixel, const in LightParams lightParams)\n{\n    float roughness = surface.clearCoatRoughness;\n    float clearCoat = surface.clearCoat;\n    vec3 n = pixel.clearCoatNormal;\n    vec3 h = lightParams.h;\n    float LoH = lightParams.LoH;\n\n    float clearCoatNoH = lightParams.clearCoatNoH;\n\n    float D = distribution(roughness, clearCoatNoH, h, n);\n    float V = V_kelemen(LoH);\n\n    return D * V;\n}\n    #endif // CLEARCOAT\n\n    #ifdef SHEEN\nvec3 sheenLobe(const in Surface surface, const in PixelInfo pixel, const in LightParams lightParams)\n{\n    float roughness = surface.sheenRoughness;\n    float NoV = pixel.NoV;\n    float NoH = lightParams.NoH;\n    float NoL = lightParams.NoL;\n\n    float D = D_Charlie(roughness, NoH);\n    float V = V_Neubelt(NoV, NoL);\n    // F = 1.0\n    return D * V * surface.sheenColor;\n}\n    #endif // SHEEN\n\n    #ifdef ANISOTROPIC\nvec3 anisotropyLobe(const in Surface surface, const in PixelInfo pixel, const in LightParams lightParams)\n{\n    float anisotropy = surface.anisotropy;\n    float at = pixel.at;\n    float ab = pixel.ab;\n    vec3 anisotropicT = pixel.anisotropicT;\n    vec3 anisotropicB = pixel.anisotropicB;\n\n    float NoV = pixel.NoV;\n    float ToV = pixel.ToV;\n    float BoV = pixel.BoV;\n\n    vec3 h = lightParams.h;\n    float NoL = lightParams.NoL;\n    float NoH = lightParams.NoH;\n    float VoH = lightParams.VoH;\n    float ToL = lightParams.ToL;\n    float BoL = lightParams.BoL;\n\n    float V = V_SmithGGXCorrelated_Anisotropic(at, ab, ToV, BoV, ToL, BoL, NoV, NoL);\n    float D = D_GGX_Anisotropic(NoH, h, anisotropicT, anisotropicB, at, ab);\n    vec3 F = fresnel(surface.f0, surface.f90, lightParams.LoH);\n    return V * D * F;\n}\n    #endif // ANISOTROPIC\n\nvec3 PBRLighting(const in Surface surface, const in PixelInfo pixel, const in Light light)\n{\n    LightParams lightParams;\n    initLightParams(lightParams, pixel, light);\n\n    float NoL = lightParams.NoL;\n\n    #ifdef IRIDESCENCE\n    vec3 Fd = iridescenceDiffuseLobe(surface, pixel, lightParams);\n    vec3 Fr = iridescenceSpecularLobe(surface, pixel, lightParams);\n    #elif defined(ANISOTROPIC)\n    vec3 Fd = diffuseLobe(surface, pixel, lightParams);\n    vec3 Fr = anisotropyLobe(surface, pixel, lightParams);\n    #else\n    vec3 Fd = diffuseLobe(surface, pixel, lightParams);\n    vec3 Fr = specularLobe(surface, pixel, lightParams);\n    #endif\n\n    #ifdef TRANSMISSION\n    Fd *= 1.0 - surface.transmission;\n    #endif // TRANSMISSION\n\n    vec3 shading = (Fd + Fr * pixel.energyCompensation);\n\n    #ifdef SHEEN\n    vec3 fSheen = sheenLobe(surface, pixel, lightParams);\n    shading *= pixel.sheenScaling;\n    shading += fSheen;\n    #endif // SHEEN\n\n    #ifdef CLEARCOAT\n    float clearCoatNoL = lightParams.clearCoatNoL;\n    float LoH = lightParams.LoH;\n    // default IOR 1.5\n    float FccClearCoat = F_Schlick(0.04, 1.0, LoH) * surface.clearCoat;\n    float attenuation = 1.0 - FccClearCoat;\n    shading *= attenuation * NoL;\n\n    float clearcoat = clearCoatLobe(surface, pixel, lightParams) * FccClearCoat;\n    shading += clearcoat * clearCoatNoL;\n    // NoL has alread multiply\n    NoL = 1.0;\n    #endif // CLEARCOAT\n\n    return shading * light.color * NoL;\n}\n\n    // gi\n    #include "PBRGI.glsl";\n\n#endif // PBRLighting_lib'),PBRShaderLib.init(),ACESShaderLib.init(),BlitScreenShaderInit.init(),UnlitShaderInit.init(),PBRStandardShaderInit.init(),BlinnPhongShaderInit.init(),TrailShaderInit.init(),ParticleShuriKenShaderInit.init(),SkyBoxShaderInit.init(),SkyProceduralShaderInit.init(),SkyPanoramicShaderInit.init(),t.Shader3D.SHADERDEFINE_LEGACYSINGALLIGHTING=t.Shader3D.getDefineByName("LEGACYSINGLELIGHTING"),t.Shader3D.SHADERDEFINE_ENUNIFORMBLOCK=t.Shader3D.getDefineByName("ENUNIFORMBLOCK"),t.Shader3D.SHADERDEFINE_FLOATTEXTURE=t.Shader3D.getDefineByName("FLOATTEXTURE"),t.Shader3D.SHADERDEFINE_FLOATTEXTURE_FIL_LINEAR=t.Shader3D.getDefineByName("FLOATTEXTURE_FIL_LINEAR"),t.Shader3D.SHADERDEFINE_BLITSCREEN_INVERTY=t.Shader3D.getDefineByName("BLITSCREEN_INVERTY"),t.Shader3D.SHADERDEFINE_REMAP_POSITIONZ=t.Shader3D.getDefineByName("REMAP_Z"),t.Shader3D.SHADERDEFINE_LOD_TEXTURE_SAMPLE=t.Shader3D.getDefineByName("LOD_TEXTURE_SAMPLE")}}class SimpleSkinnedMeshRenderer extends SkinnedMeshRenderer{constructor(){super(),this._simpleAnimatorParams=new t.Vector4,this._simpleAnimatorOffset=new t.Vector2,this._baseRenderNode.shaderData.addDefine(SkinnedMeshSprite3DShaderDeclaration.SHADERDEFINE_SIMPLEBONE),this._baseRenderNode.shaderData.addDefine(SkinnedMeshSprite3DShaderDeclaration.SHADERDEFINE_BONE),this._baseRenderNode.renderNodeType=e.BaseRenderType.SimpleSkinRender,this._baseRenderNode.shaderData.setVector(SimpleSkinnedMeshRenderer.SIMPLE_SIMPLEANIMATORPARAMS,new t.Vector4)}get simpleAnimatorTexture(){return this._simpleAnimatorTexture}set simpleAnimatorTexture(e){this._simpleAnimatorTexture=e,this._simpleAnimatorTextureSize=e.width,this._baseRenderNode.shaderData.setTexture(SimpleSkinnedMeshRenderer.SIMPLE_SIMPLEANIMATORTEXTURE,e),e._addReference(),this._baseRenderNode.shaderData.setNumber(SimpleSkinnedMeshRenderer.SIMPLE_SIMPLEANIMATORTEXTURESIZE,this._simpleAnimatorTextureSize)}get simpleAnimatorOffset(){return this._simpleAnimatorOffset}set simpleAnimatorOffset(e){e.cloneTo(this._simpleAnimatorOffset)}_isISkinRenderNode(){return null}_createBaseRenderNode(){return this._ownerSimpleRenderNode=Laya3DRender.Render3DModuleDataFactory.createSimpleSkinRenderNode(),this._ownerSimpleRenderNode}_getcommonUniformMap(){return["Sprite3D","SimpleSkinnedMesh"]}_computeSkinnedData(){this._computeAnimatorParamsData()}renderUpdate(e){super.renderUpdate(e),this._computeSkinnedData(),this._baseRenderNode.transform=this.rootBone?this.rootBone.transform:this.owner.transform}_createRenderElement(){return new SubMeshRenderElement}_computeAnimatorParamsData(){this._cacheMesh&&(this._simpleAnimatorParams.x=this._simpleAnimatorOffset.x,this._simpleAnimatorParams.y=Math.round(this._simpleAnimatorOffset.y)*this._bonesNums*4,this._ownerSimpleRenderNode.setSimpleAnimatorParams(this._simpleAnimatorParams))}setCustomData(e,t=0){this._simpleAnimatorParams.z=e,this._simpleAnimatorParams.w=t,this._ownerSimpleRenderNode.setSimpleAnimatorParams(this._simpleAnimatorParams)}_onMeshChange(e){this._onSkinMeshChange(e),e&&(this._cacheMesh=e,this._setRenderElements())}_cloneTo(e){let t=e;t.simpleAnimatorOffset=this.simpleAnimatorOffset,t.simpleAnimatorTexture=this.simpleAnimatorTexture,t._bonesNums=this._bonesNums,super._cloneTo(e)}_onDestroy(){this._cacheRootBone&&!this._cacheRootBone._destroyed&&this._cacheRootBone.transform.off(t.Event.TRANSFORM_CHANGED,this,this._onWorldMatNeedChange),this._simpleAnimatorTexture&&this._simpleAnimatorTexture._removeReference(),this._simpleAnimatorTexture=null,super._onDestroy()}}class SimpleSkinnedMeshSprite3D extends RenderableSprite3D{constructor(e=null,t=null){super(t),this._meshFilter=this.addComponent(MeshFilter),this._render=this.addComponent(SimpleSkinnedMeshRenderer),e&&(this._meshFilter.sharedMesh=e)}static __init__(){SimpleSkinnedMeshRenderer.SIMPLE_SIMPLEANIMATORPARAMS=SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORPARAMS,SimpleSkinnedMeshRenderer.SIMPLE_SIMPLEANIMATORTEXTURE=SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORTEXTURE,SimpleSkinnedMeshRenderer.SIMPLE_SIMPLEANIMATORTEXTURESIZE=SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORTEXTURESIZE,SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORTEXTURE=t.Shader3D.propertyNameToID("u_SimpleAnimatorTexture"),SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORPARAMS=t.Shader3D.propertyNameToID("u_SimpleAnimatorParams"),SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORTEXTURESIZE=t.Shader3D.propertyNameToID("u_SimpleAnimatorTextureSize");const a=t.LayaGL.renderDeviceFactory.createGlobalUniformMap("SimpleSkinnedMesh");a.addShaderUniform(SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORTEXTURE,"u_SimpleAnimatorTexture",e.ShaderDataType.Texture2D),a.addShaderUniform(SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORPARAMS,"u_SimpleAnimatorParams",e.ShaderDataType.Vector4),a.addShaderUniform(SimpleSkinnedMeshSprite3D.SIMPLE_SIMPLEANIMATORTEXTURESIZE,"u_SimpleAnimatorTextureSize",e.ShaderDataType.Float)}get meshFilter(){return this._meshFilter}get simpleSkinnedMeshRenderer(){return this._render}_parse(e,a){super._parse(e,a);var r=this.simpleSkinnedMeshRenderer,n=e.lightmapIndex;null!=n&&(r.lightmapIndex=n);var i=e.lightmapScaleOffset;i&&(r.lightmapScaleOffset=new t.Vector4(i[0],i[1],i[2],i[3])),null!=e.enableRender&&(r.enabled=e.enableRender),null!=e.receiveShadows&&(r.receiveShadow=e.receiveShadows),null!=e.castShadow&&(r.castShadow=e.castShadow);let o=e.meshPath;if(o){let e=t.Loader.getRes(o);e&&(this.meshFilter.sharedMesh=e)}var s=e.materials;if(s){let e=r.sharedMaterials,a=s.length;e.length=a;for(let r=0;r<a;r++)e[r]=t.Loader.getRes(s[r].path);r.sharedMaterials=e}var l=e.boundBox,h=l.min,d=l.max;if(r.localBounds.setMin(new t.Vector3(h[0],h[1],h[2])),r.localBounds.setMax(new t.Vector3(d[0],d[1],d[2])),r.localBounds=r.localBounds,a){let t=e.rootBone;r.rootBone=a[t];let n=e.bones;for(let e=0,t=n.length;e<t;e++)r.bones.push(a[n[e]]);r.bones=r.bones,r._bonesNums=e.bonesNums?e.bonesNums:r.bones.length}var c=e.animatorTexture;if(c){let e=t.Loader.getRes(c,t.Loader.TEXTURE2D);r.simpleAnimatorTexture=e}}_cloneTo(e,t,a){super._cloneTo(e,t,a)}destroy(e=!0){this._destroyed||(super.destroy(e),this._meshFilter.destroy())}_create(){return new Sprite3D}}SimpleSkinnedMeshSprite3D._tempArray0=[];class TrailTextureMode{}TrailTextureMode.Stretch=0,TrailTextureMode.Tile=1,e.TrailAlignment=void 0,(P=e.TrailAlignment||(e.TrailAlignment={}))[P.View=0]="View",P[P.TransformZ=1]="TransformZ";class TrailGeometry extends GeometryElement{constructor(e){super(t.MeshTopology.TriangleStrip,t.DrawType.DrawArray),this._floatCountPerVertices1=8,this._floatCountPerVertices2=5,this._increaseSegementCount=16,this._activeIndex=0,this._endIndex=0,this._needAddFirstVertex=!1,this._isTempEndVertex=!1,this._vertices1=null,this._vertices2=null,this._lastFixedVertexPosition=new t.Vector3,this.tmpColor=new t.Color,this._disappearBoundsMode=!1,this._owner=e,this.bufferState=new t.BufferState,this._segementCount=this._increaseSegementCount,this._resizeData(this._segementCount,this.bufferState)}_resizeData(e,a){this._subBirthTime=new Float32Array(e),this._subDistance=new Float64Array(e);var r=2*e,n=VertexTrail.vertexDeclaration1,i=VertexTrail.vertexDeclaration2,o=[],s=r*n.vertexStride,l=r*i.vertexStride,h=s+l;this._vertices1=new Float32Array(r*this._floatCountPerVertices1),this._vertices2=new Float32Array(r*this._floatCountPerVertices2),this._vertexBuffer1=Laya3DRender.renderOBJCreate.createVertexBuffer3D(s,t.BufferUsage.Dynamic,!1),this._vertexBuffer1.vertexDeclaration=n,this._vertexBuffer2=Laya3DRender.renderOBJCreate.createVertexBuffer3D(l,t.BufferUsage.Dynamic,!1),this._vertexBuffer2.vertexDeclaration=i,o.push(this._vertexBuffer1),o.push(this._vertexBuffer2),a.applyState(o,null),t.Resource._addMemory(h,h)}_resetData(){var e=this._endIndex-this._activeIndex,a=new Float32Array(this._vertices1.buffer,2*this._floatCountPerVertices1*this._activeIndex*4,2*this._floatCountPerVertices1*e),r=new Float32Array(this._vertices2.buffer,2*this._floatCountPerVertices2*this._activeIndex*4,2*this._floatCountPerVertices2*e),n=new Float64Array(this._subDistance.buffer,8*this._activeIndex,e),i=new Float32Array(this._subBirthTime.buffer,4*this._activeIndex,e);if(e===this._segementCount){var o=this._vertexBuffer1._byteLength+this._vertexBuffer2._byteLength;t.Resource._addMemory(-o,-o),this._vertexBuffer1.destroy(),this._vertexBuffer2.destroy(),this._segementCount+=this._increaseSegementCount,this._resizeData(this._segementCount,this.bufferState)}this._vertices1.set(a,0),this._vertices2.set(r,0),this._subDistance.set(n,0),this._subBirthTime.set(i,0),this._endIndex=e,this._activeIndex=0,this._vertexBuffer1.setData(this._vertices1.buffer,0,2*this._floatCountPerVertices1*this._activeIndex*4,2*this._floatCountPerVertices1*e*4),this._vertexBuffer2.setData(this._vertices2.buffer,0,2*this._floatCountPerVertices2*this._activeIndex*4,2*this._floatCountPerVertices2*e*4)}_updateTrail(e,a,r){t.Vector3.equals(a,r)||(this._endIndex-this._activeIndex==0?this._addTrailByFirstPosition(e,r):this._addTrailByNextPosition(e,r))}_addTrailByFirstPosition(e,t){this._endIndex===this._segementCount&&this._resetData(),this._subDistance[this._endIndex]=0,this._subBirthTime[this._endIndex]=this._owner._curtime,this._endIndex++,t.cloneTo(this._lastFixedVertexPosition),this._needAddFirstVertex=!0}_addTrailByNextPosition(a,r){var n=TrailGeometry._tempVector30,i=TrailGeometry._tempVector31;switch(this._owner.alignment){case e.TrailAlignment.View:var o=a.viewMatrix;t.Vector3.transformCoordinate(r,o,TrailGeometry._tempVector33),t.Vector3.transformCoordinate(this._lastFixedVertexPosition,o,TrailGeometry._tempVector34),t.Vector3.subtract(TrailGeometry._tempVector33,TrailGeometry._tempVector34,n),t.Vector3.cross(TrailGeometry._tempVector33,n,i);break;case e.TrailAlignment.TransformZ:t.Vector3.subtract(r,this._lastFixedVertexPosition,n);var s=TrailGeometry._tempVector32;this._owner._ownerRender.owner.transform.getForward(s),t.Vector3.cross(n,s,i)}t.Vector3.normalize(i,i),t.Vector3.scale(i,this._owner.widthMultiplier/2,i);var l,h,d=t.Vector3.scalarLength(n);this._needAddFirstVertex&&(this._updateVerticesByPositionData(r,i,this._endIndex-1),this._needAddFirstVertex=!1),d-this._owner.minVertexDistance>=t.MathUtils3D.zeroTolerance?(this._isTempEndVertex?(l=this._endIndex-1,h=d-this._subDistance[l],this._updateVerticesByPosition(r,i,d,l),this._owner._totalLength+=h):(this._endIndex===this._segementCount&&this._resetData(),this._updateVerticesByPosition(r,i,d,this._endIndex),this._owner._totalLength+=d,this._endIndex++),r.cloneTo(this._lastFixedVertexPosition),this._isTempEndVertex=!1):(this._isTempEndVertex?(l=this._endIndex-1,h=d-this._subDistance[l],this._updateVerticesByPosition(r,i,d,l),this._owner._totalLength+=h):(this._endIndex===this._segementCount&&this._resetData(),this._updateVerticesByPosition(r,i,d,this._endIndex),this._owner._totalLength+=d,this._endIndex++),this._isTempEndVertex=!0)}_updateVerticesByPositionData(e,a,r){var n=2*this._floatCountPerVertices1*r,i=this._owner._curtime;this._vertices1[n]=e.x,this._vertices1[n+1]=e.y,this._vertices1[n+2]=e.z,this._vertices1[n+3]=-a.x,this._vertices1[n+4]=-a.y,this._vertices1[n+5]=-a.z,this._vertices1[n+6]=i,this._vertices1[n+7]=1,this._vertices1[n+8]=e.x,this._vertices1[n+9]=e.y,this._vertices1[n+10]=e.z,this._vertices1[n+11]=a.x,this._vertices1[n+12]=a.y,this._vertices1[n+13]=a.z,this._vertices1[n+14]=i,this._vertices1[n+15]=0;var o=this._owner._ownerRender.bounds,s=o.getMin(),l=o.getMax(),h=TrailGeometry._tempVector35,d=TrailGeometry._tempVector36,c=TrailGeometry._tempVector32;t.Vector3.add(e,a,h),t.Vector3.subtract(e,a,d),t.Vector3.min(d,h,c),t.Vector3.min(s,c,s),o.setMin(s),t.Vector3.max(h,d,c),t.Vector3.max(l,c,l),o.setMax(l);var u=2*this._floatCountPerVertices1;this._vertexBuffer1.setData(this._vertices1.buffer,4*n,4*n,4*u)}_updateVerticesByPosition(e,t,a,r){this._updateVerticesByPositionData(e,t,r),this._subDistance[r]=a,this._subBirthTime[r]=this._owner._curtime}_updateVertexBufferUV(){var e,a,r;if(this._disappearBoundsMode){e=this._owner._ownerRender.bounds;var n=this._owner._ownerRender.owner.transform.position;e.setMin(n),e.setMax(n),a=e.getMin(),r=e.getMax()}for(var i=this._endIndex,o=0,s=this._owner.colorGradient,l=s.colorAlphaKeysCount-1,h=s.colorRGBKeysCount-1,d=this._owner._totalLength,c=2*this._floatCountPerVertices2,u=this._activeIndex;u<i;u++){var _,m;u!==this._activeIndex&&(o+=this._subDistance[u]),this._owner.textureMode==TrailTextureMode.Stretch?m=_=1-o/d:(m=1-o/d,_=1-(d-o)),h=s.evaluateColorRGB(m,this.tmpColor,h,!0),l=s.evaluateColorAlpha(m,this.tmpColor,l,!0);var f=u*c;if(this._vertices2[f+0]=_,this._vertices2[f+1]=this.tmpColor.r,this._vertices2[f+2]=this.tmpColor.g,this._vertices2[f+3]=this.tmpColor.b,this._vertices2[f+4]=this.tmpColor.a,this._vertices2[f+5]=_,this._vertices2[f+6]=this.tmpColor.r,this._vertices2[f+7]=this.tmpColor.g,this._vertices2[f+8]=this.tmpColor.b,this._vertices2[f+9]=this.tmpColor.a,this._disappearBoundsMode){var S=2*this._floatCountPerVertices1*u,g=TrailGeometry._tempVector32,p=TrailGeometry._tempVector33,D=TrailGeometry._tempVector34;g.setValue(this._vertices1[S+0],this._vertices1[S+1],this._vertices1[S+2]),p.setValue(this._vertices1[S+3],this._vertices1[S+4],this._vertices1[S+5]),t.Vector3.add(g,p,D),t.Vector3.min(D,a,a),t.Vector3.max(D,r,r),t.Vector3.subtract(g,p,D),t.Vector3.min(D,a,a),t.Vector3.max(D,r,r)}}this._disappearBoundsMode&&(e.setMin(a),e.setMax(r),this._disappearBoundsMode=!1);var T=this._activeIndex*c;this._vertexBuffer2.setData(this._vertices2.buffer,4*T,4*T,4*(i*c-T))}_updateDisappear(){for(var e=this._endIndex,a=this._activeIndex;a<e&&this._owner._curtime-this._subBirthTime[a]>=this._owner.time+t.MathUtils3D.zeroTolerance;a++){var r=a+1;if(r!==e&&(this._owner._totalLength-=this._subDistance[r]),this._isTempEndVertex&&r===e-1){var n=this._lastFixedVertexPosition;n.x=this._vertices1[0],n.y=this._vertices1[1],n.z=this._vertices1[2],this._isTempEndVertex=!1}this._activeIndex++,this._disappearBoundsMode=!0}}_getType(){return TrailGeometry._type}_prepareRender(e){return this._endIndex-this._activeIndex>1}_updateRenderParams(e){this.clearRenderParams();var t=2*this._activeIndex,a=2*this._endIndex-t;this.setDrawArrayParams(t,a)}destroy(){super.destroy();var e=this._vertexBuffer1._byteLength+this._vertexBuffer2._byteLength;t.Resource._addMemory(-e,-e),this.bufferState.destroy(),this._vertexBuffer1.destroy(),this._vertexBuffer2.destroy(),this._bufferState=null,this._vertices1=null,this._vertexBuffer1=null,this._vertices2=null,this._vertexBuffer2=null,this._subBirthTime=null,this._subDistance=null,this._lastFixedVertexPosition=null,this._disappearBoundsMode=!1}clear(){this._activeIndex=0,this._endIndex=0,this._disappearBoundsMode=!1,this._subBirthTime.fill(0),this._subDistance.fill(0),this._segementCount=0,this._isTempEndVertex=!1,this._needAddFirstVertex=!1,this._lastFixedVertexPosition.setValue(0,0,0)}}TrailGeometry.ALIGNMENT_VIEW=0,TrailGeometry.ALIGNMENT_TRANSFORM_Z=1,TrailGeometry._tempVector30=new t.Vector3,TrailGeometry._tempVector31=new t.Vector3,TrailGeometry._tempVector32=new t.Vector3,TrailGeometry._tempVector33=new t.Vector3,TrailGeometry._tempVector34=new t.Vector3,TrailGeometry._tempVector35=new t.Vector3,TrailGeometry._tempVector36=new t.Vector3,TrailGeometry._type=GeometryElement._typeCounter++;class TrailFilter{constructor(a){this._textureMode=TrailTextureMode.Stretch,this._totalLength=0,this._lastPosition=new t.Vector3,this._curtime=0,this.alignment=e.TrailAlignment.View,this._ownerRender=a,this._initDefaultData(),this.addRenderElement()}static __init__(){TrailFilter.CURTIME=t.Shader3D.propertyNameToID("u_CurTime"),TrailFilter.LIFETIME=t.Shader3D.propertyNameToID("u_LifeTime"),TrailFilter.WIDTHCURVE=t.Shader3D.propertyNameToID("u_WidthCurve"),TrailFilter.WIDTHCURVEKEYLENGTH=t.Shader3D.propertyNameToID("u_WidthCurveKeyLength");const a=t.LayaGL.renderDeviceFactory.createGlobalUniformMap("TrailRender");a.addShaderUniform(TrailFilter.CURTIME,"u_CurTime",e.ShaderDataType.Float),a.addShaderUniform(TrailFilter.LIFETIME,"u_LifeTime",e.ShaderDataType.Float),a.addShaderUniform(TrailFilter.WIDTHCURVE,"u_WidthCurve",e.ShaderDataType.Buffer),a.addShaderUniform(TrailFilter.WIDTHCURVEKEYLENGTH,"u_WidthCurveKeyLength",e.ShaderDataType.Int)}get time(){return this._time}set time(e){this._time=e,this._ownerRender._baseRenderNode.shaderData.setNumber(TrailFilter.LIFETIME,e)}get minVertexDistance(){return this._minVertexDistance}set minVertexDistance(e){this._minVertexDistance=e}get widthMultiplier(){return this._widthMultiplier}set widthMultiplier(e){this._widthMultiplier=e}get widthCurve(){return this._widthCurve}set widthCurve(e){this._widthCurve=e;var t,a,r=new Float32Array(4*e.length),n=0;for(t=0,a=e.length;t<a;t++)r[n++]=e[t].time,r[n++]=e[t].inTangent,r[n++]=e[t].outTangent,r[n++]=e[t].value;this._ownerRender._baseRenderNode.shaderData.setBuffer(TrailFilter.WIDTHCURVE,r),this._ownerRender._baseRenderNode.shaderData.setInt(TrailFilter.WIDTHCURVEKEYLENGTH,e.length)}get colorGradient(){return this._colorGradient}set colorGradient(e){this._colorGradient=e}get textureMode(){return this._textureMode}set textureMode(e){this._textureMode=e}addRenderElement(){var e=this._ownerRender,t=e._renderElements,a=e.sharedMaterials[0];a||(a=TrailMaterial.defaultMaterial);var r=new RenderElement;r.setTransform(this._ownerRender.owner._transform),r.render=e,r.material=a,this._trialGeometry=new TrailGeometry(this),r.setGeometry(this._trialGeometry),t.push(r)}_update(e){var t=this._ownerRender;const a=this._ownerRender.owner.scene;if(a){this._curtime+=a.timer._delta/1e3,t._baseRenderNode.shaderData.setNumber(TrailFilter.CURTIME,this._curtime);var r=this._ownerRender.owner.transform.position,n=t._renderElements[0]._geometry;n._updateDisappear(),n._updateTrail(e.camera,this._lastPosition,r),n._updateVertexBufferUV(),r.cloneTo(this._lastPosition)}}_initDefaultData(){this.time=5,this.minVertexDistance=.1,this.widthMultiplier=1,this.textureMode=TrailTextureMode.Stretch;var e=[],a=new FloatKeyframe;a.time=0,a.inTangent=0,a.outTangent=0,a.value=1,e.push(a);var r=new FloatKeyframe;r.time=1,r.inTangent=0,r.outTangent=0,r.value=1,e.push(r),this.widthCurve=e;var n=new Gradient(2,2);n.mode=GradientMode.Blend,n.addColorRGB(0,t.Color.WHITE),n.addColorRGB(1,t.Color.WHITE),n.addColorAlpha(0,1),n.addColorAlpha(1,1),this.colorGradient=n}destroy(){this._trialGeometry.destroy(),this._trialGeometry=null,this._widthCurve=null,this._colorGradient=null}clear(){this._trialGeometry.clear(),this._lastPosition.setValue(0,0,0),this._curtime=0,this._totalLength=0}}class SkyPanoramicMaterial extends t.Material{constructor(){super(),this._textureHDRParams=new t.Vector4(1,0,0,1),this.setShaderName("SkyPanoramic"),this.setColorByIndex(SkyPanoramicMaterial.TINTCOLOR,new t.Color(.5,.5,.5,.5)),this.setFloatByIndex(SkyPanoramicMaterial.ROTATION,0),this.setVector4ByIndex(SkyPanoramicMaterial.TEXTURE_HDR_PARAMS,this._textureHDRParams),this.exposure=1.3}static __init__(){SkyPanoramicMaterial.TINTCOLOR=t.Shader3D.propertyNameToID("u_TintColor"),SkyPanoramicMaterial.EXPOSURE=t.Shader3D.propertyNameToID("u_Exposure"),SkyPanoramicMaterial.ROTATION=t.Shader3D.propertyNameToID("u_Rotation"),SkyPanoramicMaterial.TEXTURE=t.Shader3D.propertyNameToID("u_Texture"),SkyPanoramicMaterial.TEXTURE_HDR_PARAMS=t.Shader3D.propertyNameToID("u_Texture_HDR_params")}get tintColor(){return this.getColorByIndex(SkyPanoramicMaterial.TINTCOLOR)}set tintColor(e){this.setColorByIndex(SkyPanoramicMaterial.TINTCOLOR,e)}get exposure(){return this.getFloatByIndex(SkyPanoramicMaterial.EXPOSURE)}set exposure(e){this.setFloatByIndex(SkyPanoramicMaterial.EXPOSURE,e)}get rotation(){return this.getFloatByIndex(SkyPanoramicMaterial.ROTATION)}set rotation(e){this.setFloatByIndex(SkyPanoramicMaterial.ROTATION,e)}get panoramicTexture(){return this.getTextureByIndex(SkyPanoramicMaterial.TEXTURE)}set panoramicTexture(e){this.setTextureByIndex(SkyPanoramicMaterial.TEXTURE,e)}}var B="#define SHADER_NAME BloomVS\n\nvarying vec2 v_Texcoord0;\nvec4 remapPositionZ(vec4 position)\n{\n    #ifdef BLITSCREEN_INVERTY //兼容WGSL\n    position.y = -position.y;\n    #endif\n    return position;\n}\nvoid main()\n{\n    gl_Position = vec4(a_PositionTexcoord.xy, 0.0, 1.0);\n    v_Texcoord0 = a_PositionTexcoord.zw;\n    gl_Position = remapPositionZ(gl_Position);\n}";class BloomEffect extends PostProcessEffect{constructor(){super(),this._shader=null,this._shaderData=t.LayaGL.renderDeviceFactory.createShaderData(null),this._linearColor=new t.Color,this._bloomTextureTexelSize=new t.Vector4,this._shaderThreshold=new t.Vector4,this._shaderParams=new t.Vector4,this._pyramid=null,this._intensity=0,this._threshold=1,this._softKnee=.5,this._diffusion=7,this._anamorphicRatio=0,this._dirtIntensity=0,this._shaderSetting=new t.Vector4,this._dirtTileOffset=new t.Vector4,this._fastMode=!1,this._dirtTexture=null,this.singleton=!0,this.active=!0,this.intensity=1,this.threshold=1,this.softKnee=.5,this.clamp=65472,this.diffusion=7,this.anamorphicRatio=0,this.color=new t.Color(1,1,1,1)}static init(){t.Shader3D.addInclude("StdLib.glsl","#define HALF_MAX       65504.0 // (2 - 2^-10) * 2^15\n\n#define FLT_EPSILON    1.192092896e-07 // Smallest positive number, such that 1.0 + FLT_EPSILON != 1.0\n\nmediump vec4 safeHDR(mediump vec4 c)\n{\n    return min(c, HALF_MAX);\n}\n\nfloat max3(float a, float b, float c)\n{\n    return max(max(a, b), c);\n}\n\nvec3 positivePow(vec3 base, vec3 power)\n{\n    return pow(max(abs(base), vec3(FLT_EPSILON, FLT_EPSILON, FLT_EPSILON)), power);\n}"),t.Shader3D.addInclude("Colors.glsl",'#include "StdLib.glsl";\n\n#define EPSILON 1.0e-4\n\n// Quadratic color thresholding\n// curve = (threshold - knee, knee * 2, 0.25 / knee)\nmediump vec4 quadraticThreshold(mediump vec4 color, mediump float threshold, mediump vec3 curve) {\n\t// Pixel brightness\n\tmediump float br = max3(color.r, color.g, color.b);\n\n\t// Under-threshold part: quadratic curve\n\tmediump float rq = clamp(br - curve.x, 0.0, curve.y);\n\trq = curve.z * rq * rq;\n\n\t// Combine and apply the brightness response curve.\n\tcolor *= max(rq, br - threshold) / max(br, EPSILON);\n\n\treturn color;\n}\n\n\n\n//\n// sRGB transfer functions\n// Fast path ref: http://chilliant.blogspot.com.au/2012/08/srgb-approximations-for-hlsl.html?m=1\n//\n// mediump vec3 sRGBToLinear(mediump vec3 c) {\n// \t#ifdef USE_VERY_FAST_SRGB\n// \t\treturn c * c;\n// \t#elif defined(USE_FAST_SRGB)\n// \t\treturn c * (c * (c * 0.305306011 + 0.682171111) + 0.012522878);\n// \t#else\n// \t\tmediump vec3 linearRGBLo = c / 12.92;\n// \t\tmediump vec3 power=vec3(2.4, 2.4, 2.4);\n// \t\tmediump vec3 linearRGBHi = positivePow((c + 0.055) / 1.055, power);\n// \t\tmediump vec3 linearRGB =vec3((c.r<=0.04045) ? linearRGBLo.r : linearRGBHi.r,(c.g<=0.04045) ? linearRGBLo.g : linearRGBHi.g,(c.b<=0.04045) ? linearRGBLo.b : linearRGBHi.b);\n// \t\treturn linearRGB;\n// \t#endif\n// }\n\n// mediump vec4 sRGBToLinear(mediump vec4 c){\n//     return vec4(sRGBToLinear(c.rgb), c.a);\n// }\n\n\n\n// mediump vec3 linearToSRGB(mediump vec3 c) {\n// \t#ifdef USE_VERY_FAST_SRGB\n// \t\treturn sqrt(c);\n// \t#elif defined(USE_FAST_SRGB)\n// \t\treturn max(1.055 * PositivePow(c, 0.416666667) - 0.055, 0.0);\n// \t#else\n// \t\tmediump vec3 sRGBLo = c * 12.92;\n// \t\tmediump vec3 power=vec3(1.0 / 2.4, 1.0 / 2.4, 1.0 / 2.4);\n// \t\tmediump vec3 sRGBHi = (positivePow(c, power) * 1.055) - 0.055;\n// \t\tmediump vec3 sRGB =vec3((c.r<=0.0031308) ? sRGBLo.r : sRGBHi.r,(c.g<=0.0031308) ? sRGBLo.g : sRGBHi.g,(c.b<=0.0031308) ? sRGBLo.b : sRGBHi.b);\n// \t\treturn sRGB;\n// \t#endif\n// }\n\n// mediump vec4 linearToSRGB(mediump vec4 c){\n//     return vec4(linearToSRGB(c.rgb), c.a);\n// }'),t.Shader3D.addInclude("Sampling.glsl","\n// todo only sampler u_MainTex\nvec4 samplerTex(sampler2D tex, vec2 uv)\n{\n    vec4 mainSampler = texture2D(tex, uv);\n#ifdef Gamma_u_MainTex\n    mainSampler = gammaToLinear(mainSampler);\n#endif // Gamma_u_MainTex\n\n    return mainSampler;\n}\n\n// Better, temporally stable box filtering\n// [Jimenez14] http://goo.gl/eomGso\n// . . . . . . .\n// . A . B . C .\n// . . D . E . .\n// . F . G . H .\n// . . I . J . .\n// . K . L . M .\n// . . . . . . .\nmediump vec4 downsampleBox13Tap(sampler2D tex, vec2 uv, vec2 texelSize)\n{\n    mediump vec4 A = samplerTex(tex, uv + texelSize * vec2(-1.0, -1.0));\n    mediump vec4 B = samplerTex(tex, uv + texelSize * vec2(0.0, -1.0));\n    mediump vec4 C = samplerTex(tex, uv + texelSize * vec2(1.0, -1.0));\n    mediump vec4 D = samplerTex(tex, uv + texelSize * vec2(-0.5, -0.5));\n    mediump vec4 E = samplerTex(tex, uv + texelSize * vec2(0.5, -0.5));\n    mediump vec4 F = samplerTex(tex, uv + texelSize * vec2(-1.0, 0.0));\n    mediump vec4 G = samplerTex(tex, uv);\n    mediump vec4 H = samplerTex(tex, uv + texelSize * vec2(1.0, 0.0));\n    mediump vec4 I = samplerTex(tex, uv + texelSize * vec2(-0.5, 0.5));\n    mediump vec4 J = samplerTex(tex, uv + texelSize * vec2(0.5, 0.5));\n    mediump vec4 K = samplerTex(tex, uv + texelSize * vec2(-1.0, 1.0));\n    mediump vec4 L = samplerTex(tex, uv + texelSize * vec2(0.0, 1.0));\n    mediump vec4 M = samplerTex(tex, uv + texelSize * vec2(1.0, 1.0));\n\n    mediump vec2 scale = vec2(0.5, 0.125);\n    mediump vec2 div = (1.0 / 4.0) * scale;\n\n    mediump vec4 o = (D + E + I + J) * div.x;\n    o += (A + B + G + F) * div.y;\n    o += (B + C + H + G) * div.y;\n    o += (F + G + L + K) * div.y;\n    o += (G + H + M + L) * div.y;\n\n    return o;\n}\n\n// Standard box filtering\nmediump vec4 downsampleBox4Tap(sampler2D tex, vec2 uv, vec2 texelSize)\n{\n    vec4 d = texelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0);\n\n    mediump vec4 s = samplerTex(tex, uv + d.xy);\n    s += samplerTex(tex, uv + d.zy);\n    s += samplerTex(tex, uv + d.xw);\n    s += samplerTex(tex, uv + d.zw);\n\n    return s * (1.0 / 4.0);\n}\n\n// 9-tap bilinear upsampler (tent filter)\n// . . . . . . .\n// . 1 . 2 . 1 .\n// . . . . . . .\n// . 2 . 4 . 2 .\n// . . . . . . .\n// . 1 . 2 . 1 .\n// . . . . . . .\nmediump vec4 upsampleTent(sampler2D tex, vec2 uv, vec2 texelSize, vec4 sampleScale)\n{\n    vec4 d = texelSize.xyxy * vec4(1.0, 1.0, -1.0, 0.0) * sampleScale;\n\n    mediump vec4 s = samplerTex(tex, uv - d.xy);\n    s += samplerTex(tex, uv - d.wy) * 2.0;\n    s += samplerTex(tex, uv - d.zy);\n\n    s += samplerTex(tex, uv + d.zw) * 2.0;\n    s += samplerTex(tex, uv) * 4.0;\n    s += samplerTex(tex, uv + d.xw) * 2.0;\n\n    s += samplerTex(tex, uv + d.zy);\n    s += samplerTex(tex, uv + d.wy) * 2.0;\n    s += samplerTex(tex, uv + d.xy);\n\n    return s * (1.0 / 16.0);\n}\n\n// Standard box filtering\nmediump vec4 upsampleBox(sampler2D tex, vec2 uv, vec2 texelSize, vec4 sampleScale)\n{\n    vec4 d = texelSize.xyxy * vec4(-1.0, -1.0, 1.0, 1.0) * 0.5 * sampleScale;\n\n    mediump vec4 s = samplerTex(tex, uv + d.xy);\n    s += samplerTex(tex, uv + d.zy);\n    s += samplerTex(tex, uv + d.xw);\n    s += samplerTex(tex, uv + d.zw);\n\n    return s * (1.0 / 4.0);\n}");var a={a_PositionTexcoord:[t.VertexMesh.MESH_POSITION0,e.ShaderDataType.Vector4]},r={u_MainTex:e.ShaderDataType.Texture2D,u_MainTex_TexelSize:e.ShaderDataType.Vector4,u_AutoExposureTex:e.ShaderDataType.Texture2D,u_Threshold:e.ShaderDataType.Vector4,u_Params:e.ShaderDataType.Vector4,u_BloomTex:e.ShaderDataType.Texture2D,u_SampleScale:e.ShaderDataType.Float},n=t.Shader3D.add("PostProcessBloom");n.shaderType=t.ShaderFeatureType.PostProcess;var i=new t.SubShader(a,r);n.addSubShader(i);var o=i.addShaderPass(B,'#define SHADER_NAME BloomPreFilter13FS\n\n#include "Color.glsl";\n#include "Colors.glsl";\n#include "Sampling.glsl";\n\nvarying vec2 v_Texcoord0;\n\nmediump vec4 prefilter(mediump vec4 color, vec2 uv)\n{\n    vec4 autoExposureSampler = texture2D(u_AutoExposureTex, uv);\n#ifdef Gamma_u_AutoExposureTex\n    autoExposureSampler = gammaToLinear(autoExposureSampler);\n#endif // Gamma_u_AutoExposureTex\n\n    mediump float autoExposure = autoExposureSampler.r;\n    color *= autoExposure;\n    color = min(vec4(u_Params.x), color); // clamp to max\n    color = quadraticThreshold(color, u_Threshold.x, u_Threshold.yzw);\n    return color;\n}\n\nvoid fragPrefilter13()\n{\n    mediump vec4 color = downsampleBox13Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\n    gl_FragColor = prefilter(safeHDR(color), v_Texcoord0);\n}\n\nvoid main()\n{\n    fragPrefilter13();\n\n    gl_FragColor = outputTransform(gl_FragColor);\n}'),s=o.renderState;(s=o.renderState).depthTest=RenderState.DEPTHTEST_ALWAYS,s.depthWrite=!1,s.cull=RenderState.CULL_NONE,s.blend=RenderState.BLEND_DISABLE,i=new t.SubShader(a,r),n.addSubShader(i),(s=(o=i.addShaderPass(B,'#define SHADER_NAME BloomPreFilter4FS\n\n#include "Color.glsl";\n#include "Colors.glsl";\n#include "Sampling.glsl";\n\nvarying vec2 v_Texcoord0;\n\nmediump vec4 prefilter(mediump vec4 color, vec2 uv)\n{\n    vec4 autoExposureSampler = texture2D(u_AutoExposureTex, uv);\n#ifdef Gamma_u_AutoExposureTex\n    autoExposureSampler = gammaToLinear(autoExposureSampler);\n#endif // Gamma_u_AutoExposureTex\n\n    mediump float autoExposure = autoExposureSampler.r;\n    color *= autoExposure;\n    color = min(vec4(u_Params.x), color); // clamp to max\n    color = quadraticThreshold(color, u_Threshold.x, u_Threshold.yzw);\n    return color;\n}\n\nvoid fragPrefilter4()\n{\n    mediump vec4 color = downsampleBox4Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\n    gl_FragColor = prefilter(safeHDR(color), v_Texcoord0);\n}\n\nvoid main()\n{\n    fragPrefilter4();\n\n    gl_FragColor = outputTransform(gl_FragColor);\n}')).renderState).depthTest=RenderState.DEPTHTEST_ALWAYS,s.depthWrite=!1,s.cull=RenderState.CULL_NONE,s.blend=RenderState.BLEND_DISABLE,i=new t.SubShader(a,r),n.addSubShader(i),(s=(o=i.addShaderPass(B,'#define SHADER_NAME BloomDownSample13FS\n\n#include "Color.glsl";\n#include "Colors.glsl";\n#include "Sampling.glsl";\n\nvarying vec2 v_Texcoord0;\n\nvoid fragDownsample13()\n{\n    mediump vec4 color = downsampleBox13Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\n    gl_FragColor = color;\n}\n\nvoid main()\n{\n    fragDownsample13();\n\n    gl_FragColor = outputTransform(gl_FragColor);\n}')).renderState).depthTest=RenderState.DEPTHTEST_ALWAYS,s.depthWrite=!1,s.cull=RenderState.CULL_NONE,s.blend=RenderState.BLEND_DISABLE,i=new t.SubShader(a,r),n.addSubShader(i),(s=(o=i.addShaderPass(B,'#define SHADER_NAME BloomDownSample4FS\n\n#include "Color.glsl";\n#include "Colors.glsl";\n#include "Sampling.glsl";\n\nvarying vec2 v_Texcoord0;\n\nvoid fragDownsample4()\n{\n    mediump vec4 color = downsampleBox4Tap(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy);\n    gl_FragColor = color;\n}\n\nvoid main()\n{\n    fragDownsample4();\n\n    gl_FragColor = outputTransform(gl_FragColor);\n}')).renderState).depthTest=RenderState.DEPTHTEST_ALWAYS,s.depthWrite=!1,s.cull=RenderState.CULL_NONE,s.blend=RenderState.BLEND_DISABLE,i=new t.SubShader(a,r),n.addSubShader(i),(s=(o=i.addShaderPass(B,'#define SHADER_NAME BloomUpSampleTentFS\n\n#include "Color.glsl";\n#include "Colors.glsl";\n#include "Sampling.glsl";\n\nvarying vec2 v_Texcoord0;\n\nmediump vec4 combine(mediump vec4 bloom, vec2 uv)\n{\n    mediump vec4 color = texture2D(u_BloomTex, uv);\n#ifdef Gamma_u_BloomTex\n    color = gammaToLinear(color);\n#endif // Gamma_u_BloomTex\n    return bloom + color;\n}\n\nvoid fragUpsampleTent()\n{\n    mediump vec4 bloom = upsampleTent(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy, vec4(u_SampleScale));\n    gl_FragColor = combine(bloom, v_Texcoord0);\n}\n\nvoid main()\n{\n    fragUpsampleTent();\n\n    gl_FragColor = outputTransform(gl_FragColor);\n}')).renderState).depthTest=RenderState.DEPTHTEST_ALWAYS,s.depthWrite=!1,s.cull=RenderState.CULL_NONE,s.blend=RenderState.BLEND_DISABLE,i=new t.SubShader(a,r),n.addSubShader(i),(s=(o=i.addShaderPass(B,'#define SHADER_NAME BloomUpSampleBoxFS\n\n#include "Color.glsl";\n#include "Colors.glsl";\n#include "Sampling.glsl";\n\nvarying vec2 v_Texcoord0;\n\nmediump vec4 combine(mediump vec4 bloom, vec2 uv)\n{\n    mediump vec4 color = texture2D(u_BloomTex, uv);\n#ifdef Gamma_u_BloomTex\n    color = gammaToLinear(color);\n#endif // Gamma_u_BloomTex\n    return bloom + color;\n}\n\nvoid fragUpsampleBox()\n{\n    mediump vec4 bloom = upsampleBox(u_MainTex, v_Texcoord0, u_MainTex_TexelSize.xy, vec4(u_SampleScale));\n    gl_FragColor = combine(bloom, v_Texcoord0);\n}\n\nvoid main()\n{\n    fragUpsampleBox();\n\n    gl_FragColor = outputTransform(gl_FragColor);\n}')).renderState).depthTest=RenderState.DEPTHTEST_ALWAYS,s.depthWrite=!1,s.cull=RenderState.CULL_NONE,s.blend=RenderState.BLEND_DISABLE,BloomEffect.CompositeInit(),BloomEffect.__initDefine__()}static CompositeInit(){let a={a_PositionTexcoord:[t.VertexMesh.MESH_POSITION0,e.ShaderDataType.Vector4]},r={u_MainTex:e.ShaderDataType.Texture2D,u_BloomTex:e.ShaderDataType.Texture2D,u_AutoExposureTex:e.ShaderDataType.Texture2D,u_Bloom_DirtTex:e.ShaderDataType.Texture2D,u_BloomTex_TexelSize:e.ShaderDataType.Vector4,u_Bloom_DirtTileOffset:e.ShaderDataType.Vector4,u_Bloom_Settings:e.ShaderDataType.Vector4,u_Bloom_Color:e.ShaderDataType.Color},n=t.Shader3D.add("PostProcessComposite");n.shaderType=t.ShaderFeatureType.PostProcess;let i=new t.SubShader(a,r);n.addSubShader(i);let o=i.addShaderPass("#define SHADER_NAME CompositeVS\nvarying vec2 v_Texcoord0;\nvec4 remapPositionZ(vec4 position)\n{\n    #ifdef BLITSCREEN_INVERTY\n    position.y = -position.y;\n    #endif\n    return position;\n}\nvoid main() {\n\tgl_Position = vec4(a_PositionTexcoord.xy, 0.0, 1.0);\n\tv_Texcoord0 = a_PositionTexcoord.zw;\n\tgl_Position = remapPositionZ(gl_Position);\n}",'#define SHADER_NAME CompositeFS\n\n#include "Color.glsl";\n#include "Colors.glsl";\n#include "Sampling.glsl";\n\nvarying vec2 v_Texcoord0;\n\nvoid main()\n{\n    vec4 autoExposureSampler = texture2D(u_AutoExposureTex, v_Texcoord0);\n#ifdef Gamma_u_AutoExposureTex\n    autoExposureSampler = gammaToLinear(autoExposureSampler);\n#endif // Gamma_u_AutoExposureTex\n    mediump float autoExposure = autoExposureSampler.r;\n\n    mediump vec4 color = vec4(0.0);\n    color = texture2D(u_MainTex, v_Texcoord0);\n#ifdef Gamma_u_MainTex\n    color = gammaToLinear(color);\n#endif // Gamma_u_MainTex\n\n    color.rgb *= autoExposure;\n\n#if defined(BLOOM) || defined(BLOOM_LOW)\n    #ifdef BLOOM\n    mediump vec4 bloom = upsampleTent(u_BloomTex, v_Texcoord0, u_BloomTex_TexelSize.xy, vec4(u_Bloom_Settings.x));\n    #else\n    mediump vec4 bloom = upsampleBox(u_BloomTex, v_Texcoord0, u_BloomTex_TexelSize.xy, vec4(u_Bloom_Settings.x));\n    #endif\n\n    // UVs should be Distort(uv * u_Bloom_DirtTileOffset.xy + u_Bloom_DirtTileOffset.zw)\n    // but considering we use a cover-style scale on the dirt texture the difference\n    // isn\'t massive so we chose to save a few ALUs here instead in case lens distortion\n    // is active\n    mediump vec4 dirt = vec4(texture2D(u_Bloom_DirtTex, v_Texcoord0 * u_Bloom_DirtTileOffset.xy + u_Bloom_DirtTileOffset.zw).rgb, 0.0);\n    #ifdef Gamma_u_Bloom_DirtTex\n    dirt = gammaToLinear(dirt);\n    #endif // Gamma_u_Bloom_DirtTex\n\n    // Additive bloom (artist friendly)\n    bloom *= u_Bloom_Settings.y;\n    dirt *= u_Bloom_Settings.z;\n    mediump vec4 bloomColor = u_Bloom_Color;\n    color += bloom * bloomColor;\n    color += dirt * bloom;\n#endif\n\n    mediump vec4 finalColor = color;\n    // finalColor = linearToSRGB(finalColor);\n    // finalColor.rgb = Dither(finalColor.rgb, v_Texcoord0);//TODO:抖动\n    gl_FragColor = finalColor;\n\n    gl_FragColor = outputTransform(gl_FragColor);\n}').renderState;o.depthTest=RenderState.DEPTHTEST_ALWAYS,o.depthWrite=!1,o.cull=RenderState.CULL_NONE,o.blend=RenderState.BLEND_DISABLE}static __initDefine__(){BloomEffect.SHADERVALUE_MAINTEX=t.Shader3D.propertyNameToID("u_MainTex"),BloomEffect.SHADERVALUE_AUTOEXPOSURETEX=t.Shader3D.propertyNameToID("u_AutoExposureTex"),BloomEffect.SHADERVALUE_SAMPLESCALE=t.Shader3D.propertyNameToID("u_SampleScale"),BloomEffect.SHADERVALUE_THRESHOLD=t.Shader3D.propertyNameToID("u_Threshold"),BloomEffect.SHADERVALUE_PARAMS=t.Shader3D.propertyNameToID("u_Params"),BloomEffect.SHADERVALUE_BLOOMTEX=t.Shader3D.propertyNameToID("u_BloomTex")}get clamp(){return this._clamp}set clamp(e){this._clamp=e}get color(){return this._color}set color(e){this._color=e}get fastMode(){return this._fastMode}set fastMode(e){this._fastMode=e}get dirtTexture(){return this._dirtTexture}set dirtTexture(e){this._dirtTexture&&this._dirtTexture._removeReference(1),this._dirtTexture=e,this._dirtTexture&&this._dirtTexture._addReference(1)}get intensity(){return this._intensity}set intensity(e){this._intensity=Math.max(e,0)}get threshold(){return this._threshold}set threshold(e){this._threshold=Math.max(e,0)}get softKnee(){return this._softKnee}set softKnee(e){this._softKnee=Math.min(Math.max(e,0),1)}get diffusion(){return this._diffusion}set diffusion(e){this._diffusion=Math.min(Math.max(e,1),10)}get anamorphicRatio(){return this._anamorphicRatio}set anamorphicRatio(e){this._anamorphicRatio=Math.min(Math.max(e,-1),1)}get dirtIntensity(){return this._dirtIntensity}set dirtIntensity(e){this._dirtIntensity=Math.max(e,0)}effectInit(e){super.effectInit(e),this._shader=t.Shader3D.find("PostProcessBloom"),this._pyramid=new Array(2*BloomEffect.MAXPYRAMIDSIZE)}getCameraDepthTextureModeFlag(){return 0}release(e){super.release(e),this._shader=null,this._pyramid=[]}render(e){var a=e.command,r=e.camera.viewport;this._shaderData.setTexture(BloomEffect.SHADERVALUE_AUTOEXPOSURETEX,t.Texture2D.whiteTexture);var n,i=this._anamorphicRatio,o=i<0?-i:0,s=i>0?i:0,l=Math.floor(r.width/(2-o)),h=Math.floor(r.height/(2-s)),d=Math.max(l,h);n=Math.log2(d)+this._diffusion-10;var c=Math.floor(n),u=Math.min(Math.max(c,1),BloomEffect.MAXPYRAMIDSIZE),_=.5+n-c;this._shaderData.setNumber(BloomEffect.SHADERVALUE_SAMPLESCALE,_);var m=t.Color.gammaToLinearSpace(this.threshold),f=m*this._softKnee+1e-5;this._shaderThreshold.setValue(m,m-f,2*f,.25/f),this._shaderData.setVector(BloomEffect.SHADERVALUE_THRESHOLD,this._shaderThreshold);var S=t.Color.gammaToLinearSpace(this.clamp);this._shaderParams.setValue(S,0,0,0),this._shaderData.setVector(BloomEffect.SHADERVALUE_PARAMS,this._shaderParams);for(var g=this.fastMode?1:0,p=e.indirectTarget,D=0;D<u;D++){var T=2*D,E=T+1,x=0==D?BloomEffect.SUBSHADER_PREFILTER13+g:BloomEffect.SUBSHADER_DOWNSAMPLE13+g,M=t.RenderTexture.createFromPool(l,h,t.RenderTargetFormat.R8G8B8A8,t.RenderTargetFormat.None,!1,1,!1,!0);if(M.filterMode=t.FilterMode.Bilinear,this._pyramid[T]=M,D!==u-1){var R=t.RenderTexture.createFromPool(l,h,t.RenderTargetFormat.R8G8B8A8,t.RenderTargetFormat.None,!1,1,!1,!0);R.filterMode=t.FilterMode.Bilinear,this._pyramid[E]=R}a.blitScreenTriangle(p,M,null,this._shader,this._shaderData,x),p=M,l=Math.max(Math.floor(l/2),1),h=Math.max(Math.floor(h/2),1)}var A=this._pyramid[2*(u-1)];for(D=u-2;D>=0;D--)E=(T=2*D)+1,M=this._pyramid[T],R=this._pyramid[E],a.setShaderDataTexture(this._shaderData,BloomEffect.SHADERVALUE_BLOOMTEX,M),a.blitScreenTriangle(A,R,null,this._shader,this._shaderData,BloomEffect.SUBSHADER_UPSAMPLETENT+g),A=R;var C=this._linearColor;this.color.toLinear(C);var y=Math.pow(2,this._intensity/10)-1,v=this._shaderSetting;this._shaderSetting.setValue(_,y,this._dirtIntensity,u);var I=this._dirtTexture?this._dirtTexture:t.Texture2D.blackTexture,L=I.width/I.height,P=r.width/r.height,B=this._dirtTileOffset;L>P?B.setValue(P/L,1,.5*(1-B.x),0):L<P&&B.setValue(1,L/P,0,.5*(1-B.y));var O=e.compositeShaderData;this.fastMode?O.addDefine(PostProcess.SHADERDEFINE_BLOOM_LOW):O.addDefine(PostProcess.SHADERDEFINE_BLOOM),this._bloomTextureTexelSize.setValue(1/A.width,1/A.height,A.width,A.height),O.setVector(PostProcess.SHADERVALUE_BLOOM_DIRTTILEOFFSET,B),O.setVector(PostProcess.SHADERVALUE_BLOOM_SETTINGS,v),O.setColor(PostProcess.SHADERVALUE_BLOOM_COLOR,C),O.setTexture(PostProcess.SHADERVALUE_BLOOM_DIRTTEX,I),O.setTexture(PostProcess.SHADERVALUE_BLOOMTEX,A),O.setVector(PostProcess.SHADERVALUE_BLOOMTEX_TEXELSIZE,this._bloomTextureTexelSize);let V=t.Shader3D.find("PostProcessComposite");for(a.blitScreenTriangle(e.indirectTarget,e.destination,e.camera._screenOffsetScale,V,O,0),D=0;D<u;D++)E=(T=2*D)+1,t.RenderTexture.recoverToPool(this._pyramid[T]),0!==D&&D!==u-1&&t.RenderTexture.recoverToPool(this._pyramid[E]);e.deferredReleaseTextures.push(A)}}BloomEffect.SUBSHADER_PREFILTER13=0,BloomEffect.SUBSHADER_PREFILTER4=1,BloomEffect.SUBSHADER_DOWNSAMPLE13=2,BloomEffect.SUBSHADER_DOWNSAMPLE4=3,BloomEffect.SUBSHADER_UPSAMPLETENT=4,BloomEffect.SUBSHADER_UPSAMPLEBOX=5,BloomEffect.MAXPYRAMIDSIZE=16;var O;e.AOQUALITY=void 0,(O=e.AOQUALITY||(e.AOQUALITY={}))[O.High=0]="High",O[O.MEDIUM=1]="MEDIUM",O[O.LOWEST=2]="LOWEST";class ScalableAO extends PostProcessEffect{constructor(){super(),this._aoParams=new t.Vector3,this._aoQuality=e.AOQUALITY.MEDIUM,this._shader=t.Shader3D.find("ScalableAO"),this._shaderData=t.LayaGL.renderDeviceFactory.createShaderData(null),this._aoParams=new t.Vector3(.12,.15,1),this._shaderData.setVector3(ScalableAO.AOParams,this._aoParams),this._shaderData.setVector(BaseCamera.DEPTHZBUFFERPARAMS,new t.Vector4),this._aoBlurHorizontalShader=t.Shader3D.find("AOBlurHorizontal"),this._aoComposition=t.Shader3D.find("AOComposition"),this.aoQuality=e.AOQUALITY.MEDIUM}static init(){ScalableAO.BlurDelty=t.Shader3D.propertyNameToID("u_Delty"),ScalableAO.AOColor=t.Shader3D.propertyNameToID("u_AOColor"),ScalableAO.aoTexture=t.Shader3D.propertyNameToID("u_compositionAoTexture"),ScalableAO.AOParams=t.Shader3D.propertyNameToID("u_AOParams"),ScalableAO.SourceTex=t.Shader3D.propertyNameToID("u_SourceTex"),ScalableAO.SHADERDEFINE_AOHigh=t.Shader3D.getDefineByName("AO_High"),ScalableAO.SHADERDEFINE_AOMEDIUM=t.Shader3D.getDefineByName("AO_MEDIUM"),ScalableAO.SHADERDEFINE_LOWEST=t.Shader3D.getDefineByName("AO_LOWEST"),t.Shader3D.addInclude("AmbientOcclusion.glsl",'#include "Camera.glsl";\n// const \n#define TWO_PI 6.2831852\n\n#define EPSILON         1.0e-4\n#define FLT_EPSILON     1.192092896e-07 // Smallest positive number, such that 1.0 + FLT_EPSILON != 1.0\n\nconst float kContrast = 0.6;\nconst float kGeometryCoeff = 0.8;\nconst float kBeta = 0.002;\n\n\n// varying\nvarying vec2 v_Texcoord0;\n\n#if defined(AO_High)\n\t#define SAMPLE_COUNT 12\n#elif defined(AO_MEDIUM)\n\t#define SAMPLE_COUNT 8\n#else\n\t#define SAMPLE_COUNT 4\n#endif\n\n#ifdef AOLOWEST\n#define SAMPLE_COUNT 8\n#endif\n\n#ifdef AOLOWEST\n#define SAMPLE_COUNT 8\n#endif\n\n\n#define INTENSITY u_AOParams.x\n#define RADIUS u_AOParams.y\n#define DOWNSAMPLE u_AOParams.z\n\nfloat PositivePow(float base, float power)\n{\n    return pow(max(abs(base), float(FLT_EPSILON)), power);\n}\n\n\n// Boundary check for depth sampler\n// (returns a very large value if it lies out of bounds)\nfloat CheckBounds(vec2 uv, float d) \n{\n    float ob = 0.0;\n    // todo\n    if (uv.x < 0.0 || uv.x > 1.0 || uv.y < 0.0 || uv.y > 1.0) \n    {\n        ob = 1.0;\n    }\n    if (d <= 0.00001) {\n        ob += 1.0;\n    }\n\n    return ob * 1e8;\n}\n\nfloat SampleDepth(vec2 uv) \n{\n    float depthTex_Depth = SAMPLE_DEPTH_TEXTURE(u_CameraDepthTexture, uv);\n    float depthTex_Linear01Depth = Linear01Depth(depthTex_Depth, u_ZBufferParams);\n    return  depthTex_Linear01Depth * u_ProjectionParams.y + CheckBounds(uv, depthTex_Linear01Depth);\n}\n\nvec3 SampleNormal(vec2 uv) \n{\n    vec4 col = texture2D(u_CameraDepthNormalsTexture, uv);\n    vec3 depthNormal_Normal = DecodeViewNormalStereo(col);\n    return depthNormal_Normal * vec3(1.0, 1.0, -1.0);\n}\n\nfloat SampleDepthNormal(vec2 uv, out vec3 normal) \n{\n    normal = SampleNormal(uv);\n    return SampleDepth(uv);\n}\n\n// Normal vector comparer (for geometry-aware weighting)\nfloat CompareNormal(vec3 d1, vec3 d2)\n{\n    return smoothstep(kGeometryCoeff, 1.0, dot(d1, d2));\n}\n\n// Accessors for packed AO/normal buffer\nvec4 PackAONormal(float ao, vec3 n) \n{\n    return vec4(ao, n * 0.5 + 0.5);\n}\n\nvec3 GetPackedNormal(vec4 p)\n{\n    return p.gba * 2.0 - 1.0;\n}\n\nfloat GetPackAO(vec4 p)\n{\n    return p.r;\n}\n\n\n');let a={a_PositionTexcoord:[t.VertexMesh.MESH_POSITION0,e.ShaderDataType.Vector4]},r={u_OffsetScale:e.ShaderDataType.Vector4,u_MainTex:e.ShaderDataType.Texture2D,u_MainTex_TexelSize:e.ShaderDataType.Vector4,u_Delty:e.ShaderDataType.Vector2,u_PlugTime:e.ShaderDataType.Vector4,u_AOParams:e.ShaderDataType.Vector3,u_BlurVector:e.ShaderDataType.Vector2,u_AOColor:e.ShaderDataType.Color,u_compositionAoTexture:e.ShaderDataType.Texture2D},n=t.Shader3D.add("ScalableAO");n.shaderType=t.ShaderFeatureType.PostProcess;let i=new t.SubShader(a,r);n.addSubShader(i);let o=i.addShaderPass(M,'#define SHADER_NAME OcclusionEstimationFS\n\n#include "DepthNormalUtil.glsl";\n\n#include "AmbientOcclusion.glsl";\n\n#define FIX_SAMPLING_PATTERN\n\n// Check if the camera is perspective.\n// (returns 1.0 when orthographic)\nfloat CheckPerspective(float x)\n{\n    // todo ortho\n    return mix(x, 1.0, 0.0);\n}\n\nvec3 ReconstructViewPos(vec2 uv, float depth, vec2 p11_22, vec2 p13_31)\n{\n    return vec3((uv * 2.0 - 1.0 - p13_31) / p11_22 * CheckPerspective(depth), depth);\n}\n\n// Pseudo random number generator with 2D coordinates\n// https://stackoverflow.com/questions/12964279/whats-the-origin-of-this-glsl-rand-one-liner\nfloat UVRandom(float u, float v)\n{\n    float f = dot(vec2(12.9898, 78.233), vec2(u, v));\n    return fract(43758.5453 * sin(f));\n}\n\nvec2 CosSin(float theta)\n{\n    // float sn, cs;\n    // sincos(theta, sn, cs);\n    float sn = sin(theta);\n    float cs = cos(theta);\n    return vec2(cs, sn);\n}\n\nfloat GradientNoise(vec2 uv)\n{\n    uv = floor(uv * u_MainTex_TexelSize.zw);\n    float f = dot(vec2(0.06711056, 0.00583715), uv);\n    return fract(52.9829189 * fract(f));\n}\n\n// Sample point picker\nvec3 PickSamplePoint(vec2 uv, float index)\n{\n#if defined(FIX_SAMPLING_PATTERN)\n    float gn = GradientNoise(uv * DOWNSAMPLE);\n    float u = fract(UVRandom(0.0, index + uv.x * 1e-10) + gn) * 2.0 - 1.0;\n    float theta = (UVRandom(1.0, index + uv.x * 1e-10) + gn) * TWO_PI;\n#else\n    float u = UVRandom(uv.x + u_PlugTime.x, uv.y + index) * 2.0 - 1.0;\n    float theta = UVRandom(-uv.x - u_PlugTime.x, uv.y + index) * TWO_PI;\n#endif\n\n    vec3 v = vec3(CosSin(theta) * sqrt(1.0 - u * u), u);\n    float l = sqrt((index + 1.0) / float(SAMPLE_COUNT)) * RADIUS;\n    return v * l;\n}\n\nvoid main()\n{\n    vec2 uv = v_Texcoord0;\n\n    mat3 proj = mat3(u_Projection);\n    vec2 p11_22 = vec2(u_Projection[0][0], u_Projection[1][1]);\n    vec2 p13_31 = vec2(u_Projection[2][0], u_Projection[2][1]);\n\n    vec3 norm_o;\n    float depth_o = SampleDepthNormal(uv, norm_o);\n\n    // Reconstruct the view-space position.\n    vec3 vpos_o = ReconstructViewPos(uv, depth_o, p11_22, p13_31);\n\n    float ao = 0.0;\n\n    for (int s = 0; s < int(SAMPLE_COUNT); s++)\n\t{\n\t    float s_float = float(s);\n\t    vec3 v_s1 = PickSamplePoint(uv, s_float);\n\n\t    v_s1 = faceforward(v_s1, -norm_o, v_s1);\n\t    vec3 vpos_s1 = vpos_o + v_s1;\n\n\t    // Reproject the sample point\n\t    vec3 spos_s1 = proj * vpos_s1;\n\t    vec2 uv_s1_01 = (spos_s1.xy / CheckPerspective(vpos_s1.z) + 1.0) * 0.5;\n\n\t    float depth_s1 = SampleDepth(uv_s1_01);\n\n\t    vec3 vpos_s2 = ReconstructViewPos(uv_s1_01, depth_s1, p11_22, p13_31);\n\t    vec3 v_s2 = vpos_s2 - vpos_o;\n\n\t    float a1 = max(dot(v_s2, norm_o) - kBeta * depth_o, 0.0);\n\t    float a2 = dot(v_s2, v_s2) + EPSILON;\n\n\t    ao += a1 / a2;\n\t}\n\n    ao *= RADIUS;\n\n    ao = PositivePow(ao * INTENSITY / float(SAMPLE_COUNT), kContrast);\n\n    gl_FragColor = PackAONormal(ao, norm_o);\n}\n\n/**\n    0.8741,     0,          0,          0,\n    0,          1.7320,     0,          0,\n    0,          0,          -1.0152,    -1,\n    0,          0,          -0.3046,    0\n**/');o.statefirst=!0,o.renderState.cull=RenderState.CULL_NONE,n=t.Shader3D.add("AOBlurHorizontal"),n.shaderType=t.ShaderFeatureType.PostProcess,i=new t.SubShader(a,r),n.addSubShader(i);let s=i.addShaderPass(M,"#define SHADER_NAME AOBlurHorizontal\n//质量\n#define BLUR_HIGH_QUALITY 0\n\nvarying vec2 v_Texcoord0;\n\n// uniform vec2 u_Delty;\n\nvec3 GetPackedNormal(vec4 p)\n{\n    return p.gba * 2.0 - 1.0;\n}\n\nfloat CompareNormal(vec3 d1, vec3 d2)\n{\n    return smoothstep(0.8, 1.0, dot(d1, d2));\n}\n\nfloat GetPackedAO(vec4 p)\n{\n    return p.r;\n}\n\nvec4 PackAONormal(float ao, vec3 normal)\n{\n    return vec4(ao, normal * 0.5 + 0.5);\n}\n\nvoid main()\n{\n    vec2 delta = vec2(u_MainTex_TexelSize.x * 2.0 * u_Delty.x, u_Delty.y * u_MainTex_TexelSize.y * 2.0);\n    vec2 uv = v_Texcoord0;\n\n// #if defined(BLUR_HIGH_QUALITY) //兼容WGSL\n\n    // High quality 7-tap Gaussian with adaptive sampling\n    vec2 uvtran = uv;\n    vec4 p0 = texture2D(u_MainTex, uv);\n    uvtran = uv - delta;\n    vec4 p1a = texture2D(u_MainTex, uvtran);\n    uvtran = uv + delta;\n    vec4 p1b = texture2D(u_MainTex, uvtran);\n    uvtran = uv - delta * 2.0;\n    vec4 p2a = texture2D(u_MainTex, uvtran);\n    uvtran = uv + delta * 2.0;\n    vec4 p2b = texture2D(u_MainTex, uvtran);\n    uvtran = uv - delta * 3.2307692308;\n    vec4 p3a = texture2D(u_MainTex, uvtran);\n    ;\n    uvtran = uv + delta * 3.2307692308;\n    vec4 p3b = texture2D(u_MainTex, uvtran);\n    ;\n\n    vec3 n0 = GetPackedNormal(p0);\n\n    float w0 = 0.37004405286;\n    float w1a = CompareNormal(n0, GetPackedNormal(p1a)) * 0.31718061674;\n    float w1b = CompareNormal(n0, GetPackedNormal(p1b)) * 0.31718061674;\n    float w2a = CompareNormal(n0, GetPackedNormal(p2a)) * 0.19823788546;\n    float w2b = CompareNormal(n0, GetPackedNormal(p2b)) * 0.19823788546;\n    float w3a = CompareNormal(n0, GetPackedNormal(p3a)) * 0.11453744493;\n    float w3b = CompareNormal(n0, GetPackedNormal(p3b)) * 0.11453744493;\n\n    float s;\n    s = GetPackedAO(p0) * w0;\n    s += GetPackedAO(p1a) * w1a;\n    s += GetPackedAO(p1b) * w1b;\n    s += GetPackedAO(p2a) * w2a;\n    s += GetPackedAO(p2b) * w2b;\n    s += GetPackedAO(p3a) * w3a;\n    s += GetPackedAO(p3b) * w3b;\n\n    s /= w0 + w1a + w1b + w2a + w2b + w3a + w3b;\n\n// #else\n\n//     // Fater 5-tap Gaussian with linear sampling\n//     vec4 p0 = texture2D(u_MainTex, sampler_MainTex, i.texcoordStereo);\n//     vec4 p1a = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, UnityStereoTransformScreenSpaceTex(i.texcoord - delta * 1.3846153846));\n//     vec4 p1b = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, UnityStereoTransformScreenSpaceTex(i.texcoord + delta * 1.3846153846));\n//     vec4 p2a = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, UnityStereoTransformScreenSpaceTex(i.texcoord - delta * 3.2307692308));\n//     vec4 p2b = SAMPLE_TEXTURE2D(_MainTex, sampler_MainTex, UnityStereoTransformScreenSpaceTex(i.texcoord + delta * 3.2307692308));\n\n//     vec2 uvtran = uv;\n//     vec4 p0 = texture2D(u_MainTex, uv);\n//     uvtran = uv - delta * 1.3846153846;\n//     vec4 p1a = texture2D(u_MainTex, uvtran);\n//     uvtran = uv + delta * 1.3846153846;\n//     vec4 p1b = texture2D(u_MainTex, uvtran);\n//     uvtran = uv - delta * 3.2307692308;\n//     vec4 p2a = texture2D(u_MainTex, uvtran);\n//     uvtran = uv + delta * 3.2307692308;\n//     vec4 p2b = texture2D(u_MainTex, uvtran);\n\n//     vec3 n0 = GetPackedNormal(p0);\n\n//     float w0 = 0.2270270270;\n//     float w1a = CompareNormal(n0, GetPackedNormal(p1a)) * 0.3162162162;\n//     float w1b = CompareNormal(n0, GetPackedNormal(p1b)) * 0.3162162162;\n//     float w2a = CompareNormal(n0, GetPackedNormal(p2a)) * 0.0702702703;\n//     float w2b = CompareNormal(n0, GetPackedNormal(p2b)) * 0.0702702703;\n\n//     float s;\n//     s = GetPackedAO(p0) * w0;\n//     s += GetPackedAO(p1a) * w1a;\n//     s += GetPackedAO(p1b) * w1b;\n//     s += GetPackedAO(p2a) * w2a;\n//     s += GetPackedAO(p2b) * w2b;\n\n//     s /= w0 + w1a + w1b + w2a + w2b;\n\n// #endif\n\n    gl_FragColor = PackAONormal(s, n0);\n}");s.statefirst=!0,s.renderState.cull=RenderState.CULL_NONE,n=t.Shader3D.add("AOComposition"),n.shaderType=t.ShaderFeatureType.PostProcess,i=new t.SubShader(a,r),n.addSubShader(i);let l=i.addShaderPass(M,'#define SHADER_NAME AOComposition\n\n#include "Color.glsl";\n\n#define BLUR_HIGH_QUALITY 0\n\nvarying vec2 v_Texcoord0;\n\nvec3 GetPackedNormal(vec4 p)\n{\n    return p.gba * 2.0 - 1.0;\n}\nfloat CompareNormal(vec3 d1, vec3 d2)\n{\n    return smoothstep(0.8, 1.0, dot(d1, d2));\n}\nfloat GetPackedAO(vec4 p)\n{\n    return p.r;\n}\n\n// Geometry-aware bilateral filter (single pass/small kernel)\nfloat BlurSmall(sampler2D tex, vec2 uv, vec2 delta)\n{\n    vec4 p0 = texture2D(tex, uv);\n    vec2 uvtran = uv + vec2(-delta.x, -delta.y);\n    vec4 p1 = texture2D(tex, uvtran);\n    uvtran = uv + vec2(delta.x, -delta.y);\n    vec4 p2 = texture2D(tex, uvtran);\n    uvtran = uv + vec2(-delta.x, delta.y);\n    vec4 p3 = texture2D(tex, uvtran);\n    uvtran = uv + delta;\n    vec4 p4 = texture2D(tex, uvtran);\n\n    vec3 n0 = GetPackedNormal(p0);\n\n    float w0 = 1.0;\n    float w1 = CompareNormal(n0, GetPackedNormal(p1));\n    float w2 = CompareNormal(n0, GetPackedNormal(p2));\n    float w3 = CompareNormal(n0, GetPackedNormal(p3));\n    float w4 = CompareNormal(n0, GetPackedNormal(p4));\n\n    float s;\n    s = GetPackedAO(p0) * w0;\n    s += GetPackedAO(p1) * w1;\n    s += GetPackedAO(p2) * w2;\n    s += GetPackedAO(p3) * w3;\n    s += GetPackedAO(p4) * w4;\n\n    return s / (w0 + w1 + w2 + w3 + w4);\n}\n\nvoid main()\n{\n    vec2 uv = v_Texcoord0;\n    vec2 delty = u_MainTex_TexelSize.xy;\n    float ao = BlurSmall(u_compositionAoTexture, uv, delty);\n    vec4 albedo = texture2D(u_MainTex, uv);\n#ifdef Gamma_u_MainTex\n    albedo = gammaToLinear(albedo);\n#endif // Gamma_u_MainTex\n    vec4 aocolor = vec4(ao * u_AOColor.rgb, ao);\n    albedo.rgb = albedo.rgb * (1.0 - ao) + ao * u_AOColor.rgb * ao;\n    gl_FragColor = albedo;\n\n    gl_FragColor = outputTransform(gl_FragColor);\n}');l.statefirst=!0,l.renderState.cull=RenderState.CULL_NONE}set aoColor(e){this._shaderData.setColor(ScalableAO.AOColor,e)}get aoColor(){return this._shaderData.getColor(ScalableAO.AOColor)}set intensity(e){this._aoParams.x=e,this._shaderData.setVector3(ScalableAO.AOParams,this._aoParams)}get intensity(){return this._aoParams.x}set radius(e){this._aoParams.y=e,this._shaderData.setVector3(ScalableAO.AOParams,this._aoParams)}get radius(){return this._aoParams.y}get aoQuality(){return this._aoQuality}set aoQuality(t){switch(this._aoQuality=t,t){case e.AOQUALITY.High:this._shaderData.addDefine(ScalableAO.SHADERDEFINE_AOHigh),this._shaderData.removeDefine(ScalableAO.SHADERDEFINE_AOMEDIUM),this._shaderData.removeDefine(ScalableAO.SHADERDEFINE_LOWEST);break;case e.AOQUALITY.MEDIUM:this._shaderData.addDefine(ScalableAO.SHADERDEFINE_AOMEDIUM),this._shaderData.removeDefine(ScalableAO.SHADERDEFINE_AOHigh),this._shaderData.removeDefine(ScalableAO.SHADERDEFINE_LOWEST);break;case e.AOQUALITY.LOWEST:this._shaderData.addDefine(ScalableAO.SHADERDEFINE_LOWEST),this._shaderData.removeDefine(ScalableAO.SHADERDEFINE_AOHigh),this._shaderData.removeDefine(ScalableAO.SHADERDEFINE_AOMEDIUM)}}getCameraDepthTextureModeFlag(){return t.DepthTextureMode.DepthAndDepthNormals}render(e){let a=e.command;e.camera.viewport;let r=e.camera;r.depthTextureMode|=t.DepthTextureMode.DepthNormals,r.depthTextureMode|=t.DepthTextureMode.Depth;let n=r.depthNormalTexture,i=r.depthTexture;if(!n||!i)return;n.wrapModeU=t.WrapMode.Clamp,n.wrapModeV=t.WrapMode.Clamp;let o=e.source,s=o.width,l=o.height,h=o.colorFormat,d=t.RenderTargetFormat.None,c=t.RenderTexture.createFromPool(s,l,h,d,!1,1),u=this._shader,_=this._shaderData;a.blitScreenTriangle(e.source,c,null,u,_,0);let m=t.RenderTexture.createFromPool(s,l,h,d,!1,1);a.blitScreenTriangle(c,m,null,this._aoBlurHorizontalShader,_,0),a.setShaderDataVector2(_,ScalableAO.BlurDelty,ScalableAO.deltyVector),a.blitScreenTriangle(m,c,null,this._aoBlurHorizontalShader,this._shaderData,0),a.setShaderDataTexture(_,ScalableAO.aoTexture,c),a.blitScreenTriangle(e.source,e.destination,null,this._aoComposition,this._shaderData,0),e.deferredReleaseTextures.push(c),e.deferredReleaseTextures.push(m)}}ScalableAO.deltyHorizontal=new t.Vector2(1,0),ScalableAO.deltyVector=new t.Vector2(0,1);var V="#define SHADER_NAME SCREENVS\n\nvarying vec2 v_Texcoord0;\n\nvec4 remapPositionZ(vec4 position)\n{\n    #ifdef BLITSCREEN_INVERTY //兼容WGSL\n    position.y = -position.y;\n    #endif\n    return position;\n}\n\nvoid main() {\t\n\tgl_Position = vec4(u_OffsetScale.x*2.0-1.0+(a_PositionTexcoord.x+1.0)*u_OffsetScale.z,(1.0-((u_OffsetScale.y*2.0-1.0+(-a_PositionTexcoord.y+1.0)*u_OffsetScale.w)+1.0)/2.0)*2.0-1.0, 0.0, 1.0);\t\n\tv_Texcoord0 = a_PositionTexcoord.zw;\n\tgl_Position = remapPositionZ(gl_Position);\n}";class GaussianDoF extends PostProcessEffect{constructor(){super(),this._shader=t.Shader3D.find("GaussianDoF"),this._shaderData=t.LayaGL.renderDeviceFactory.createShaderData(null),this._shaderData.setVector3(GaussianDoF.COCPARAMS,new t.Vector3(10,30,1)),this._zBufferParams=new t.Vector4,this._sourceSize=new t.Vector4,this._dowmSampleScale=new t.Vector4}static init(){GaussianDoF.SOURCESIZE=t.Shader3D.propertyNameToID("u_SourceSize"),GaussianDoF.ZBUFFERPARAMS=t.Shader3D.propertyNameToID("u_ZBufferParams"),GaussianDoF.COCPARAMS=t.Shader3D.propertyNameToID("u_CoCParams"),GaussianDoF.DEPTHTEXTURE=t.Shader3D.propertyNameToID("u_CameraDepthTexture"),GaussianDoF.NORMALDEPTHTEXTURE=t.Shader3D.propertyNameToID("u_CameraDepthNormalTexture"),GaussianDoF.FULLCOCTEXTURE=t.Shader3D.propertyNameToID("u_FullCoCTex"),GaussianDoF.DOWNSAMPLESCALE=t.Shader3D.propertyNameToID("u_DownSampleScale"),GaussianDoF.BLURCOCTEXTURE=t.Shader3D.propertyNameToID("u_BlurCoCTex"),GaussianDoF.SHADERDEFINE_DEPTHNORMALTEXTURE=t.Shader3D.getDefineByName("CAMERA_NORMALDEPTH");let a={a_PositionTexcoord:[t.VertexMesh.MESH_POSITION0,e.ShaderDataType.Vector4]},r={u_MainTex:e.ShaderDataType.Texture2D,u_MainTex_TexelSize:e.ShaderDataType.Vector4,u_OffsetScale:e.ShaderDataType.Vector4,u_ZBufferParams:e.ShaderDataType.Vector4,u_CoCParams:e.ShaderDataType.Vector3,u_FullCoCTex:e.ShaderDataType.Texture2D,u_SourceSize:e.ShaderDataType.Vector4,u_DownSampleScale:e.ShaderDataType.Vector4,u_BlurCoCTex:e.ShaderDataType.Texture2D},n=t.Shader3D.add("GaussianDoF");n.shaderType=t.ShaderFeatureType.PostProcess;let i=new t.SubShader(a,r);n.addSubShader(i);let o=i.addShaderPass(V,"#define SHADER_NAME COCFS\n\n#ifdef CAMERA_NORMALDEPTH\nuniform sampler2D u_CameraDepthNormalTexture;\n#else\nuniform sampler2D u_CameraDepthTexture;\n#endif\n\nvarying vec2 v_Texcoord0;\n\n// Z buffer to linear 0..1 depth\nfloat Linear01Depth(float z, vec4 zbufferParams)\n{\n    return 1.0 / (zbufferParams.x * z + zbufferParams.y);\n}\n\n// Z buffer to linear depth\nfloat LinearEyeDepth(float z, vec4 zbufferParams)\n{\n    return 1.0 / (zbufferParams.z * z + zbufferParams.w);\n}\n\nfloat DecodeFloatRG(vec2 enc)\n{\n    vec2 kDecodeDot = vec2(1.0, 1.0 / 255.0);\n    return dot(enc, kDecodeDot);\n}\n\nvoid DecodeDepthNormal(vec4 enc, out float depth)\n{\n    depth = DecodeFloatRG(enc.zw);\n}\n\nvoid main()\n{\n    vec2 uv = v_Texcoord0;\n\n#ifdef CAMERA_NORMALDEPTH\n    vec4 depthNormal = texture2D(u_CameraDepthNormalTexture, uv);\n    float depth = 0.0;\n    DecodeDepthNormal(depthNormal, depth);\n    depth = ((1.0 / depth) - u_ZBufferParams.y) * (1.0 / u_ZBufferParams.x);\n#else\n    float depth = texture2D(u_CameraDepthTexture, uv).x;\n#endif\n\n    depth = LinearEyeDepth(depth, u_ZBufferParams);\n    float farStart = u_CoCParams.x;\n    float farEnd = u_CoCParams.y;\n\n    float coc = (depth - farStart) / (farEnd - farStart);\n    coc = clamp(coc, 0.0, 1.0);\n    gl_FragColor = vec4(coc, coc, coc, 1.0);\n}\n");o.statefirst=!0,o.renderState.cull=RenderState.CULL_NONE;let s=new t.SubShader(a,r);n.addSubShader(s);let l=s.addShaderPass(V,'#define SHADER_NAME PrefilterFS\n\n#include "Color.glsl";\n\nvarying vec2 v_Texcoord0;\n\nconst int kCount = 5;\nvec2 kTaps[5];\n\nvoid main()\n{\n\n    kTaps[0] = vec2(0.0, 0.0);\n    kTaps[1] = vec2(0.9, -0.4);\n    kTaps[2] = vec2(-0.9, 0.4);\n    kTaps[3] = vec2(0.4, 0.9);\n    kTaps[4] = vec2(-0.4, -0.9);\n\n    vec3 colorAcc = vec3(0.0);\n    float farCoCAcc = 0.0;\n    for (int i = 0; i < kCount; i++)\n\t{\n\t    vec2 uv = u_MainTex_TexelSize.xy * kTaps[i] + v_Texcoord0;\n\t    vec3 tapColor = texture2D(u_MainTex, uv).rgb;\n#ifdef Gamma_u_MainTex\n\t    tapColor = gammaToLinear(tapColor);\n#endif // Gamma_u_MainTex\n\n\t    float coc = texture2D(u_FullCoCTex, uv).r;\n\n\t    colorAcc += tapColor * coc;\n\t    farCoCAcc += coc;\n\t}\n    vec3 color = colorAcc * (1.0 / float(kCount));\n    float farCoC = farCoCAcc * (1.0 / float(kCount));\n\n    // float farCoC = texture2D(u_FullCoCTex, v_Texcoord0).x;\n    // vec3 color = texture2D(u_MainTex, v_Texcoord0).rgb;\n    // color *= farCoC;\n\n    gl_FragColor = vec4(color, farCoC);\n\n    gl_FragColor = outputTransform(gl_FragColor);\n}');l.statefirst=!0,l.renderState.cull=RenderState.CULL_NONE;let h=new t.SubShader(a,r);n.addSubShader(h);let d=h.addShaderPass(V,'#define SHADER_NAME BlurHFS\n\n#include "Color.glsl";\n\nvarying vec2 v_Texcoord0;\n\nconst int kTapCount = 3;\nfloat kOffsets[3];\nfloat kCoeffs[3];\n\nvec4 Blur(vec2 dir, float premultiply)\n{\n\n    kOffsets[0] = -1.33333333;\n    kOffsets[1] = 0.00000000;\n    kOffsets[2] = 1.33333333;\n\n    kCoeffs[0] = 0.35294118;\n    kCoeffs[1] = 0.29411765;\n    kCoeffs[2] = 0.3529411;\n\n    vec2 uv = v_Texcoord0;\n    // ivec2 positionSS = ivec2(u_SourceSize.xy * uv);\n\n    vec4 halfColor = texture2D(u_MainTex, uv);\n#ifdef Gamma_u_MainTex\n    halfColor = gammaToLinear(halfColor);\n#endif // Gamma_u_MainTex\n    float samp0CoC = halfColor.a;\n\n    float maxRadius = u_CoCParams.z;\n    vec2 offset = u_SourceSize.zw * dir * samp0CoC * maxRadius;\n\n    vec4 acc = vec4(0.0);\n\n    for (int i = 0; i < kTapCount; i++)\n\t{\n\t    vec2 sampCoord = uv + kOffsets[i] * offset;\n\t    vec4 samp = texture2D(u_MainTex, sampCoord);\n#ifdef Gamma_u_MainTex\n\t    samp = gammaToLinear(samp);\n#endif // Gamma_u_MainTex\n\t    float sampCoC = samp.a;\n\t    vec3 sampColor = samp.rgb;\n\n\t    float weight = clamp(1.0 - (samp0CoC - sampCoC), 0.0, 1.0);\n\t    acc += vec4(sampColor, sampCoC) * kCoeffs[i] * weight;\n\t}\n\n    acc.xyz /= acc.w + 1e-4;\n    return vec4(acc.xyz, samp0CoC);\n}\n\nvoid main()\n{\n    gl_FragColor = Blur(vec2(1.0, 0.0), 1.0);\n\n    gl_FragColor = outputTransform(gl_FragColor);\n}');d.statefirst=!0,d.renderState.cull=RenderState.CULL_NONE;let c=new t.SubShader(a,r);n.addSubShader(c);let u=c.addShaderPass(V,'#define SHADER_NAME BlurVFS\n\n#include "Color.glsl";\n\nvarying vec2 v_Texcoord0;\n\n// todo 3 & 5\nconst int kTapCount = 3;\nfloat kOffsets[3];\nfloat kCoeffs[3];\n\nvec4 Blur(vec2 dir, float premultiply)\n{\n\n    kOffsets[0] = -1.33333333;\n    kOffsets[1] = 0.00000000;\n    kOffsets[2] = 1.33333333;\n\n    kCoeffs[0] = 0.35294118;\n    kCoeffs[1] = 0.29411765;\n    kCoeffs[2] = 0.3529411;\n\n    vec2 uv = v_Texcoord0;\n    // ivec2 positionSS = ivec2(u_SourceSize.xy * uv);\n\n    vec4 halfColor = texture2D(u_MainTex, uv);\n#ifdef Gamma_u_MainTex\n    halfColor = gammaToLinear(halfColor);\n#endif // Gamma_u_MainTex\n    float samp0CoC = halfColor.a;\n\n    float maxRadius = u_CoCParams.z;\n    vec2 offset = u_SourceSize.zw * dir * samp0CoC * maxRadius;\n\n    vec4 acc = vec4(0.0);\n\n    for (int i = 0; i < kTapCount; i++)\n\t{\n\t    vec2 sampCoord = uv + kOffsets[i] * offset;\n\t    vec4 samp = texture2D(u_MainTex, sampCoord);\n#ifdef Gamma_u_MainTex\n\t    samp = gammaToLinear(samp);\n#endif // Gamma_u_MainTex\n\t    float sampCoC = samp.w;\n\t    vec3 sampColor = samp.xyz;\n\n\t    float weight = clamp(1.0 - (samp0CoC - sampCoC), 0.0, 1.0);\n\t    acc += vec4(sampColor, 1.0) * kCoeffs[i] * weight;\n\t}\n\n    acc.xyz /= acc.w + 1e-4;\n    return vec4(acc.xyz, 1.0);\n}\n\nvoid main()\n{\n    gl_FragColor = Blur(vec2(0.0, 1.0), 0.0);\n\n    gl_FragColor = outputTransform(gl_FragColor);\n}\n');u.statefirst=!0,u.renderState.cull=RenderState.CULL_NONE;let _=new t.SubShader(a,r);n.addSubShader(_);let m=_.addShaderPass(V,'#define SHADER_NAME CompositeFS\n\n#include "Color.glsl";\n\nvarying vec2 v_Texcoord0;\n\nvoid main()\n{\n    vec2 uv = v_Texcoord0;\n#ifdef BLITSCREEN_INVERTY\n    uv.y = 1.0 - uv.y;\n#endif\n    vec3 baseColor = texture2D(u_MainTex, uv).rgb;\n#ifdef Gamma_u_MainTex\n    baseColor = gammaToLinear(baseColor);\n#endif // Gamma_u_MainTex\n\n    vec4 samplevalue = texture2D(u_BlurCoCTex, uv);\n    vec3 farColor = samplevalue.rgb;\n    float coc = texture2D(u_FullCoCTex, uv).r;\n\n    vec3 dstColor = vec3(0.0);\n    float dstAlpha = 1.0;\n\n    float blend = sqrt(coc * 3.14 * 2.0);\n    dstColor = farColor * clamp(blend, 0.0, 1.0);\n    dstAlpha = clamp(1.0 - blend, 0.0, 1.0);\n\n    gl_FragColor = vec4(baseColor * dstAlpha + dstColor, 1.0);\n\n    gl_FragColor = outputTransform(gl_FragColor);\n}');m.statefirst=!0,m.renderState.cull=RenderState.CULL_NONE}set farStart(e){let t=this._shaderData.getVector3(GaussianDoF.COCPARAMS);t.x=e,this._shaderData.setVector3(GaussianDoF.COCPARAMS,t)}get farStart(){return this._shaderData.getVector3(GaussianDoF.COCPARAMS).x}set farEnd(e){let t=this._shaderData.getVector3(GaussianDoF.COCPARAMS);t.y=Math.max(t.x,e),this._shaderData.setVector3(GaussianDoF.COCPARAMS,t)}get farEnd(){return this._shaderData.getVector3(GaussianDoF.COCPARAMS).y}set maxRadius(e){let t=this._shaderData.getVector3(GaussianDoF.COCPARAMS);t.z=Math.min(e,2),this._shaderData.setVector3(GaussianDoF.COCPARAMS,t)}get maxRadius(){return this._shaderData.getVector3(GaussianDoF.COCPARAMS).z}_setupShaderValue(e){let t=e.camera;this._dowmSampleScale.setValue(.5,.5,2,2),this._shaderData.setVector(GaussianDoF.DOWNSAMPLESCALE,this._dowmSampleScale);let a=t.farPlane,r=t.nearPlane;this._zBufferParams.setValue(1-a/r,a/r,(r-a)/(r*a),1/r),this._shaderData.setVector(GaussianDoF.ZBUFFERPARAMS,this._zBufferParams)}getCameraDepthTextureModeFlag(){return t.DepthTextureMode.Depth}render(a){let r=a.command;this._setupShaderValue(a);let n=a.source,i=this._shader,o=this._shaderData,s=t.RenderTargetFormat.R16G16B16A16,l=t.RenderTexture.createFromPool(n.width,n.height,s,t.RenderTargetFormat.None,!1,1);r.blitScreenTriangle(n,l,null,i,o,0),l.filterMode=t.FilterMode.Bilinear,this._shaderData.setTexture(GaussianDoF.FULLCOCTEXTURE,l);let h=t.RenderTexture.createFromPool(n.width/2,n.height/2,s,t.RenderTargetFormat.None,!1,1);r.blitScreenTriangle(n,h,null,i,o,1),h.filterMode=t.FilterMode.Bilinear,this._sourceSize.setValue(h.width,h.height,1/h.width,1/h.height),this._shaderData.setShaderData(GaussianDoF.SOURCESIZE,e.ShaderDataType.Vector4,this._sourceSize);let d=t.RenderTexture.createFromPool(h.width,h.height,s,t.RenderTargetFormat.None,!1,1);r.blitScreenTriangle(h,d,null,this._shader,this._shaderData,2);let c=t.RenderTexture.createFromPool(h.width,h.height,s,t.RenderTargetFormat.None,!1,1);r.blitScreenTriangle(d,c,null,this._shader,this._shaderData,3),c.filterMode=t.FilterMode.Bilinear,c.anisoLevel=1,l.filterMode=t.FilterMode.Point,this._shaderData.setTexture(GaussianDoF.BLURCOCTEXTURE,c);let u=t.RenderTexture.createFromPool(n.width,n.height,n.colorFormat,n.depthStencilFormat,!1,1);r.blitScreenTriangle(n,a.destination,null,this._shader,this._shaderData,4),t.RenderTexture.recoverToPool(l),t.RenderTexture.recoverToPool(h),t.RenderTexture.recoverToPool(d),t.RenderTexture.recoverToPool(c),a.deferredReleaseTextures.push(u)}}class LensFlareElementGeomtry extends GeometryElement{constructor(){super(t.MeshTopology.Triangles,t.DrawType.DrawElementInstance),this.indexFormat=t.IndexFormat.UInt16,this._createBuffer()}static init(){let e=.1;LensFlareElementGeomtry.lensQuadVertices=new Float32Array([e,e,1,1,-.1,e,0,1,-.1,-.1,0,0,e,-.1,1,0]),LensFlareElementGeomtry.lensQuadIndex=new Uint16Array([0,2,1,0,3,2]),LensFlareElementGeomtry.vertexDeclaration=new t.VertexDeclaration(16,[new t.VertexElement(0,t.VertexElementFormat.Vector4,0)]),LensFlareElementGeomtry.instanceVertexDeclaration=new t.VertexDeclaration(16,[new t.VertexElement(0,t.VertexElementFormat.Vector4,1)])}_createBuffer(){this._vertexBuffer=Laya3DRender.renderOBJCreate.createVertexBuffer3D(4*LensFlareElementGeomtry.lensQuadVertices.length,t.BufferUsage.Dynamic,!1),this._vertexBuffer.vertexDeclaration=LensFlareElementGeomtry.vertexDeclaration,this._vertexBuffer.setData(LensFlareElementGeomtry.lensQuadVertices.buffer),this._instanceVertexBuffer=Laya3DRender.renderOBJCreate.createVertexBuffer3D(4*LensFlareElementGeomtry.lensFlareElementMax*4,t.BufferUsage.Dynamic,!1),this._instanceVertexBuffer.instanceBuffer=!0,this._instanceVertexBuffer.vertexDeclaration=LensFlareElementGeomtry.instanceVertexDeclaration,this._indexBuffer=Laya3DRender.renderOBJCreate.createIndexBuffer3D(t.IndexFormat.UInt16,LensFlareElementGeomtry.lensQuadIndex.length,t.BufferUsage.Static,!1),this._indexBuffer.setData(LensFlareElementGeomtry.lensQuadIndex),this.bufferState=new t.BufferState,this.bufferState.applyState([this._vertexBuffer,this._instanceVertexBuffer],this._indexBuffer)}get instanceBuffer(){return this._instanceVertexBuffer}_getType(){return LensFlareElementGeomtry._type}_prepareRender(e){return!0}destroy(){super.destroy(),this._vertexBuffer.destroy(),this._instanceVertexBuffer.destroy(),this.bufferState.destroy(),this._indexBuffer.destroy()}_updateRenderParams(e){this.clearRenderParams(),this.setDrawElemenParams(LensFlareElementGeomtry.lensQuadIndex.length,0)}}LensFlareElementGeomtry.PositionUV=0,LensFlareElementGeomtry.PositionRotationScale=1,LensFlareElementGeomtry.lensFlareElementMax=20,LensFlareElementGeomtry._type=GeometryElement._typeCounter++;class LensFlareCMD extends Command{constructor(){super(),this._instanceCount=1,this._transform3D=Laya3DRender.Render3DModuleDataFactory.createTransform(null),this._renderElement=new RenderElement,this._lensFlareGeometry=new LensFlareElementGeomtry,this._renderElement.setTransform(this._transform3D),this._renderElement.setGeometry(this._lensFlareGeometry),this._initMaterial()}get instanceCount(){return this._instanceCount}set instanceCount(e){this._instanceCount=e}_initMaterial(){this._materials=new t.Material,this._materials.setShaderName("LensFlare"),this._materials.materialRenderMode=t.MaterialRenderMode.RENDERMODE_ADDTIVE,this._materials.depthTest=RenderState.DEPTHTEST_ALWAYS,this._materials.cull=RenderState.CULL_NONE,this._renderElement.material=this._materials,this._renderElement.subShaderIndex=0}set center(e){this._materials.setVector2("u_FlareCenter",e)}set rotate(e){this._materials.setFloat("u_rotate",e)}set lensFlareElement(e){this._lensFlareElementData=e,this.applyElementData()}get lensFlareElement(){return this._lensFlareElementData}applyElementData(){this._materials.setTexture("u_FlareTexture",this._lensFlareElementData.texture),this._materials.setColor("u_Tint",this._lensFlareElementData.tint),this._materials.setFloat("u_TintIntensity",this._lensFlareElementData.intensity),this._materials.setVector2("u_Postionoffset",this._lensFlareElementData.positionOffset),this._materials.setFloat("u_Angularoffset",this._lensFlareElementData.angularOffset),this._lensFlareElementData.autoRotate?this._materials.addDefine(LensFlareEffect.SHADERDEFINE_AUTOROTATE):this._materials.removeDefine(LensFlareEffect.SHADERDEFINE_AUTOROTATE),this._lensFlareGeometry.instanceCount=1;let e=new Float32Array([this._lensFlareElementData.startPosition,t.Utils.toAngle(this._lensFlareElementData.rotation),this._lensFlareElementData.scale.x,this._lensFlareElementData.scale.y]);this._lensFlareGeometry.instanceBuffer.setData(e.buffer,0,0,4*e.length)}run(){var e=RenderContext3D._instance;this._materials.setFloat("u_aspectRatio",e.camera.viewport.height/e.camera.viewport.width),e.applyContext(Camera._updateMark),t.Stat.blitDrawCall++}recover(){}destroy(){}}var w,b,N,F;class LensFlareShaderInit{static init(){let a={a_PositionTexcoord:[LensFlareElementGeomtry.PositionUV,e.ShaderDataType.Vector4],a_DistanceRotationScale:[LensFlareElementGeomtry.PositionRotationScale,e.ShaderDataType.Vector4]},r={u_Tint:e.ShaderDataType.Color,u_TintIntensity:e.ShaderDataType.Float,u_FlareTexture:e.ShaderDataType.Texture2D,u_FlareCenter:e.ShaderDataType.Vector2,u_aspectRatio:e.ShaderDataType.Float,u_rotate:e.ShaderDataType.Float,u_Postionoffset:e.ShaderDataType.Vector2,u_Angularoffset:e.ShaderDataType.Float},n={u_Tint:t.Color.WHITE,u_aspectRatio:1},i=t.Shader3D.add("LensFlare",!0,!1);i.shaderType=t.ShaderFeatureType.PostProcess;let o=new t.SubShader(a,r,n);i.addSubShader(o);let s=o.addShaderPass("#define SHADER_NAME LENSFLARESVS\n//attribute vec4 a_PositionTexcoord;\n// x: startPosition y: rotation zw: scale\n// attribute vec4 a_DistanceRotationScale;\n\nvarying vec2 v_Texcoord0;\n\nvec2 rotateVector(vec2 pos, vec2 center, float angle) {\n    float cosAngle = cos(angle);\n    float sinAngle = sin(angle);\n    vec2 offset = pos - center;\n    vec2 rotatedOffset = vec2(\n        offset.x * cosAngle - offset.y * sinAngle,\n        offset.x * sinAngle + offset.y * cosAngle\n    );\n    return center + rotatedOffset;\n}\n\nvec2 rotateVec2(float rad,vec2 pos){\n    float s = sin(rad);\n    float c = cos(rad);\n    float x = pos.x*c-pos.y*s;\n    float y = pos.x*s+c*pos.y;\n    return vec2(x,y);\n}\n\nvec2 scaleVec2(vec2 scale,vec2 pos){\n    float x = scale.x * pos.x;\n    float y = scale.y * pos.y;\n    return vec2(x,y);\n}\n\nvec2 transVec2(vec2 trans,vec2 pos){\n    float x = pos.x + trans.x;\n    float y = pos.y + trans.y;\n    return vec2(x,y);\n}\n\n\nvoid main(){\n    vec2 center = u_FlareCenter;\n    vec2 deltaPos = -2.0 * center;\n    vec2 lenFlarePosition = vec2(a_PositionTexcoord.x, a_PositionTexcoord.y);\n    // aspectRadio scale\n    vec2 aspectRadio = vec2(u_aspectRatio, 1.0);\n    //缩放\n    vec2 scale = vec2(a_DistanceRotationScale.z, a_DistanceRotationScale.w);\n    lenFlarePosition = scaleVec2(scale,lenFlarePosition);\n    //旋转\n    // float rad = acos(dot(normalize(center),vec2(0.0,1.0)));\n    // angular offset\n    #ifdef LENSFLAREAUTOROTATE\n        lenFlarePosition = rotateVec2(u_rotate, lenFlarePosition);\n        float texRotate = a_DistanceRotationScale.y;\n        lenFlarePosition = rotateVec2(texRotate, lenFlarePosition);\n    #endif\n    float angularoffset = u_Angularoffset;\n    lenFlarePosition = rotateVector(lenFlarePosition, center, angularoffset);\n    lenFlarePosition = scaleVec2(aspectRadio,lenFlarePosition);\n    //平移\n    lenFlarePosition = center + deltaPos * a_DistanceRotationScale.x + lenFlarePosition + u_Postionoffset;\n    gl_Position = vec4(lenFlarePosition.x, lenFlarePosition.y, 0.0, 1.0);\n    v_Texcoord0 = a_PositionTexcoord.zw;\n}\n","#define SHADER_NAME LENSFLARESFS\n\nvarying vec2 v_Texcoord0;\n\nvoid main(){\n      gl_FragColor = texture2D(u_FlareTexture, v_Texcoord0)* u_Tint * u_TintIntensity;\n}");s.statefirst=!0,s.renderState.cull=RenderState.CULL_NONE}}class LensFlareElement{constructor(){this._active=!0,this._type="Image",this._tint=new t.Color(1,1,1,1),this._intensity=1,this._texture=t.Texture2D.whiteTexture,this._positionOffset=new t.Vector2(0,0),this._scale=new t.Vector2(1,1),this._autoRotate=!1,this._rotation=0,this._startPosition=0,this._angularOffset=0,this._aspectRatio=!1,this._modulateByLightColor=!1,this._translationScale=new t.Vector2(1,1)}get active(){return this._active}set active(e){this._active=e}get tint(){return this._tint}set tint(e){this._tint=e}get intensity(){return this._intensity}set intensity(e){this._intensity=e}get texture(){return this._texture}set texture(e){this._texture=e}get positionOffset(){return this._positionOffset}set positionOffset(e){this._positionOffset=e}get scale(){return this._scale}set scale(e){this._scale=e}get autoRotate(){return this._autoRotate}set autoRotate(e){this._autoRotate=e}get rotation(){return this._rotation}set rotation(e){this._rotation=e}get startPosition(){return this._startPosition}set startPosition(e){this._startPosition=e}get angularOffset(){return this._angularOffset}set angularOffset(e){this._angularOffset=e}}class LensFlareData extends t.Resource{constructor(){super(!1),this.elements=[]}}class LensFlareEffect extends PostProcessEffect{constructor(){super(),this._effectIntensity=1,this._effectScale=1,this._needUpdate=!1,this.singleton=!1,this._flareCMDS=[],this._flareCMDS.push(new LensFlareCMD),this._center=new t.Vector2,this._tempV3=new t.Vector3,this._tempV4=new t.Vector4}static __initDefine__(){LensFlareEffect.SHADERDEFINE_AUTOROTATE=t.Shader3D.getDefineByName("LENSFLAREAUTOROTATE")}static init(){LensFlareElementGeomtry.init(),LensFlareShaderInit.init(),LensFlareEffect.__initDefine__()}set lensFlareData(e){if(e){this._flareCMDS.length=0;for(let a=0;a<e.elements.length;a++){let r=e.elements[a];if(r.active){var t=new LensFlareCMD;t.lensFlareElement=r,this._flareCMDS.push(t)}}this._lensFlareData=e,this._needUpdate=!0}}get lensFlareData(){return this._lensFlareData}set bindLight(e){e&&(this._light=e,this._needUpdate=!0)}get bindLight(){return this._light}get effectIntensity(){return this._effectIntensity}set effectIntensity(e){this._effectIntensity=e,this._needUpdate=!0}get effectScale(){return this._effectScale}set effectScale(e){this._effectScale=e,this._needUpdate=!0}_updateEffectData(e){if(0!=this._flareCMDS.length){for(let t=0;t<this._flareCMDS.length;t++){if(this._flareCMDS[t].center=this._center,this._flareCMDS[t].rotate=this._rotate,this._needUpdate){let e=this._flareCMDS[t].lensFlareElement;if(!e)continue;e.intensity*=this.effectIntensity;let a=e.scale;a.setValue(a.x*this.effectScale,a.y*this.effectScale),e.scale=a,this._flareCMDS[t].applyElementData()}e.addCustomCMD(this._flareCMDS[t])}this._needUpdate=!1}}caculateDirCenter(e){this._light.direction.cloneTo(this._tempV3),t.Vector3.scale(this._tempV3,-10,this._tempV3),t.Vector3.add(e.transform.position,this._tempV3,this._tempV3),t.Vector3.transformV3ToV4(this._tempV3,e.projectionViewMatrix,this._tempV4),this._center.setValue(this._tempV4.x/this._tempV4.w,this._tempV4.y/this._tempV4.w);var a=t.Utils.toAngle(Math.atan2(this._center.x,this._center.y));a=a<0?a+360:a,a=Math.round(a),this._rotate=2*Math.PI-Math.PI/180*a}caculatePointCenter(e){this._needUpdate=!0}caculateSpotCenter(e){this._needUpdate=!0}render(t){var a=t.command;let r=t.indirectTarget;if(a.setRenderTarget(r,!1,!1),this._light){switch(this._light.lightType){case e.LightType.Directional:this.caculateDirCenter(t.camera);case e.LightType.Point:case e.LightType.Spot:}Math.abs(this._center.x)>1||Math.abs(this._center.y)>1||(this._updateEffectData(a),a.blitScreenQuad(r,t.destination))}}release(e){this._needUpdate=!1}}class PixelLineMaterial extends t.Material{constructor(){super(),this.setShaderName("LineShader"),this._shaderValues.setVector(PixelLineMaterial.COLOR,new t.Vector4(1,1,1,1))}static __initDefine__(){PixelLineMaterial.COLOR=t.Shader3D.propertyNameToID("u_Color")}get color(){return this._shaderValues.getVector(PixelLineMaterial.COLOR)}set color(e){this._shaderValues.setVector(PixelLineMaterial.COLOR,e)}clone(){var e=new PixelLineMaterial;return this.cloneTo(e),e}}class Laya3D{static set PhysicsCreateUtil(e){e&&!Laya3D._PhysicsCreateUtil&&(Laya3D._PhysicsCreateUtil=e,Laya3D._enablePhysics=!0)}static get PhysicsCreateUtil(){return this._PhysicsCreateUtil}static get enablePhysics(){return Laya3D._enablePhysics}static _changeWebGLSize(e,a){t.WebGL.onStageResize(e,a),RenderContext3D.clientWidth=e,RenderContext3D.clientHeight=a}static __init__(){t.Config3D._multiLighting=t.Config3D.enableMultiLight&&t.LayaGL.renderEngine.getCapable(t.RenderCapable.TextureFormat_R32G32B32A32),t.Config3D._uniformBlock=t.Config3D.enableUniformBufferObject&&t.LayaGL.renderEngine.getCapable(t.RenderCapable.UnifromBufferObject),t.Config3D.maxLightCount>2048&&(t.Config3D.maxLightCount=2048,console.warn("Config3D: maxLightCount must less equal 2048."));let e=t.Config3D.lightClusterCount;(e.x>128||e.y>128||e.z>128)&&(e.setValue(Math.min(e.x,128),Math.min(e.y,128),Math.min(e.z,128)),console.warn("Config3D: lightClusterCount X and Y、Z must less equal 128."));let a=4*Math.floor(2048/t.Config3D.lightClusterCount.z-1);a<t.Config3D.maxLightCount&&console.warn("Config3D: if the area light(PointLight、SpotLight) count is large than "+a+",maybe the far away culster will ingonre some light."),t.Config3D._maxAreaLightCountPerClusterAverage=Math.min(a,t.Config3D.maxLightCount),ILaya3D.Scene3D=Scene3D,ILaya3D.Laya3D=Laya3D,t.VertexMesh.__init__(),VertexShurikenParticleBillboard.__init__(),VertexShurikenParticleMesh.__init__(),VertexPositionTexture0.__init__(),VertexTrail.__init__(),VertexPositionTerrain.__init__(),PixelLineVertex.__init__(),SubMeshInstanceBatch.__init__(),ShaderInit3D.__init__(),ShuriKenParticle3DShaderDeclaration.__init__(),SimpleSkinnedMeshSprite3D.__init__(),PBRMaterial.__init__(),PBRStandardMaterial.__init__(),SkyPanoramicMaterial.__init__(),BloomEffect.init(),ScalableAO.init(),GaussianDoF.init(),ColorGradEffect.init(),LensFlareEffect.init(),Mesh.__init__(),PrimitiveMesh.__init__(),Sprite3D.__init__(),RenderableSprite3D.__init__(),MeshSprite3D.__init__(),DepthPass.__init__(),SkinnedMeshSprite3D.__init__(),SimpleSkinnedMeshSprite3D.__init__(),TrailFilter.__init__(),ShuriKenParticle3D.__init__(),PostProcess.__init__(),Scene3D.__init__(),ShadowCasterPass.__init__(),BaseCamera.__init__(),BaseRender.__init__(),MeshRenderer.__init__(),SkyRenderer.__init__(),Camera.__init__(),ShadowUtils.init(),RenderContext3D.__init__(),BlinnPhongMaterial.__initDefine__(),SkyProceduralMaterial.__initDefine__(),UnlitMaterial.__initDefine__(),TrailMaterial.__initDefine__(),ShurikenParticleMaterial.__initDefine__(),SkyBoxMaterial.__initDefine__(),Command.__init__(),BlitFrameBufferCMD.__init__(),BlinnPhongMaterial.defaultMaterial=new BlinnPhongMaterial,BlinnPhongMaterial.defaultMaterial.lock=!0,UnlitMaterial.defaultMaterial=new UnlitMaterial,UnlitMaterial.defaultMaterial.lock=!0;let r=new UnlitMaterial;r.lock=!0,r.enableVertexColor=!0,PixelLineMaterial.defaultMaterial=r,TrailMaterial.defaultMaterial=new TrailMaterial,TrailMaterial.defaultMaterial.lock=!0,t.Texture2D.__init__(),t.TextureCube.__init__(),t.Texture2DArray.__init__(),SkyBox.__init__(),SkyDome.__init__(),ScreenQuad.__init__(),t.HalfFloatUtils.__init__()}static __initPhysics__(){return Laya3D._PhysicsCreateUtil?(Laya3D._enablePhysics=!0,Laya3D._PhysicsCreateUtil.initialize()):(Laya3D._enablePhysics=!1,Promise.resolve())}}Laya3D._enablePhysics=!1,window.Laya3D=Laya3D,t.Laya.addInitCallback((()=>Laya3D.__initPhysics__())),e.FogMode=void 0,(w=e.FogMode||(e.FogMode={}))[w.Linear=0]="Linear",w[w.EXP=1]="EXP",w[w.EXP2=2]="EXP2";class Scene3D extends t.Sprite{constructor(){super(),this._reflectionsSource=0,this._reflectionsResolution="256",this._reflectionsIblSamples=128,this._lightCount=0,this._pointLights=new LightQueue,this._spotLights=new LightQueue,this._directionLights=new LightQueue,this._alternateLights=new AlternateLightQueue,this._lightmaps=[],this._skyRenderer=new SkyRenderer,this._time=0,this._physicsStepTime=0,this._sunColor=new t.Color(1,1,1),this._sundir=new t.Vector3,this._id=Scene3D.sceneID++,this._collsionTestList=[],this._key=new t.SubmitKey,this._cameraPool=[],this._UI3DManager=new UI3DManager,this.currentCreationLayer=Math.pow(2,0),this.enableLight=!0,this._ShadowMapupdateFrequency=1,this.componentElementMap=new Map,this._componentElementDatasMap={},this._is3D=!0,this._componentDriver=new t.ComponentDriver,this._timer=t.ILaya.timer,this._sceneModuleData=Laya3DRender.Render3DModuleDataFactory.createSceneModuleData(),t.LayaEnv.isConch&&2!=window.conchConfig.getGraphicsAPI()&&(this._nativeObj=new window.conchSubmitScene3D(this.renderSubmit.bind(this))),Laya3D.enablePhysics&&(this._physicsManager=Laya3D.PhysicsCreateUtil.createPhysicsManger(Scene3D.physicsSettings)),this._shaderValues=t.LayaGL.renderDeviceFactory.createShaderData(null),this._shaderValues.addDefines(t.Shader3D._configDefineValues),t.Config3D._uniformBlock&&(this._sceneUniformObj=t.UniformBufferObject.getBuffer(t.UniformBufferObject.UBONAME_SCENE,0),this._sceneUniformData=Scene3D.createSceneUniformBlock(),this._sceneUniformObj||(this._sceneUniformObj=t.UniformBufferObject.create(t.UniformBufferObject.UBONAME_SCENE,t.BufferUsage.Dynamic,this._sceneUniformData.getbyteLength(),!0)),this._shaderValues._addCheckUBO(t.UniformBufferObject.UBONAME_SCENE,this._sceneUniformObj,this._sceneUniformData),this._shaderValues.setUniformBuffer(Scene3D.SCENEUNIFORMBLOCK,this._sceneUniformObj),this._shaderValues._addCheckUBO(t.UniformBufferObject.UBONAME_SHADOW,Scene3D._shadowCasterPass._castDepthBufferOBJ,Scene3D._shadowCasterPass._castDepthBufferData),this._shaderValues.setUniformBuffer(t.Shader3D.propertyNameToID(t.UniformBufferObject.UBONAME_SHADOW),Scene3D._shadowCasterPass._castDepthBufferOBJ)),this._fogParams=new t.Vector4(300,1e3,.01,0),this.enableFog=!1,this.fogStart=300,this.fogEnd=1e3,this.fogDensity=.01,this.fogColor=new t.Color(.7,.7,.7),this.fogMode=e.FogMode.Linear,this.GIRotate=0,this._scene=this,this._sceneRenderManager=new SceneRenderManager,t.Config3D.debugFrustumCulling,this._volumeManager=new VolumeManager,this._UI3DManager=new UI3DManager,this.sceneReflectionProb=this._volumeManager.reflectionProbeManager.sceneReflectionProbe,this._sceneReflectionProb.reflectionIntensity=1,this.ambientColor=new t.Color(.212,.227,.259),Scene3D.componentManagerMap.forEach(((e,t)=>{let a=e;this.componentElementMap.set(t,new a)}))}static set _updateMark(e){RenderContext3D._instance._contextOBJ.cameraUpdateMask=e}static get _updateMark(){return RenderContext3D._instance._contextOBJ.cameraUpdateMask}static regManager(e,t){Scene3D.componentManagerMap.set(e,t)}static shaderValueInit(){Scene3DShaderDeclaration.SHADERDEFINE_FOG=t.Shader3D.getDefineByName("FOG"),Scene3DShaderDeclaration.SHADERDEFINE_FOG_LINEAR=t.Shader3D.getDefineByName("FOG_LINEAR"),Scene3DShaderDeclaration.SHADERDEFINE_FOG_EXP=t.Shader3D.getDefineByName("FOG_EXP"),Scene3DShaderDeclaration.SHADERDEFINE_FOG_EXP2=t.Shader3D.getDefineByName("FOG_EXP2"),Scene3DShaderDeclaration.SHADERDEFINE_DIRECTIONLIGHT=t.Shader3D.getDefineByName("DIRECTIONLIGHT"),Scene3DShaderDeclaration.SHADERDEFINE_POINTLIGHT=t.Shader3D.getDefineByName("POINTLIGHT"),Scene3DShaderDeclaration.SHADERDEFINE_SPOTLIGHT=t.Shader3D.getDefineByName("SPOTLIGHT"),Scene3DShaderDeclaration.SHADERDEFINE_SHADOW=t.Shader3D.getDefineByName("SHADOW"),Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_CASCADE=t.Shader3D.getDefineByName("SHADOW_CASCADE"),Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SOFT_SHADOW_LOW=t.Shader3D.getDefineByName("SHADOW_SOFT_SHADOW_LOW"),Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SOFT_SHADOW_HIGH=t.Shader3D.getDefineByName("SHADOW_SOFT_SHADOW_HIGH"),Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT=t.Shader3D.getDefineByName("SHADOW_SPOT"),Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_LOW=t.Shader3D.getDefineByName("SHADOW_SPOT_SOFT_SHADOW_LOW"),Scene3DShaderDeclaration.SHADERDEFINE_SHADOW_SPOT_SOFT_SHADOW_HIGH=t.Shader3D.getDefineByName("SHADOW_SPOT_SOFT_SHADOW_HIGH"),Scene3D.FOGCOLOR=t.Shader3D.propertyNameToID("u_FogColor"),Scene3D.FOGPARAMS=t.Shader3D.propertyNameToID("u_FogParams"),Scene3D.DIRECTIONLIGHTCOUNT=t.Shader3D.propertyNameToID("u_DirationLightCount"),Scene3D.LIGHTBUFFER=t.Shader3D.propertyNameToID("u_LightBuffer"),Scene3D.CLUSTERBUFFER=t.Shader3D.propertyNameToID("u_LightClusterBuffer"),Scene3D.TIME=t.Shader3D.propertyNameToID("u_Time"),Scene3D.GIRotate=t.Shader3D.propertyNameToID("u_GIRotate"),Scene3D.SCENEUNIFORMBLOCK=t.Shader3D.propertyNameToID(t.UniformBufferObject.UBONAME_SCENE);let a=Scene3D.sceneUniformMap=t.LayaGL.renderDeviceFactory.createGlobalUniformMap("Scene3D");t.Config3D._uniformBlock?a.addShaderBlockUniform(Scene3D.SCENEUNIFORMBLOCK,t.UniformBufferObject.UBONAME_SCENE,[{id:Scene3D.TIME,propertyName:"u_Time",uniformtype:e.ShaderDataType.Float},{id:Scene3D.FOGPARAMS,propertyName:"u_FogParams",uniformtype:e.ShaderDataType.Vector4},{id:Scene3D.FOGCOLOR,propertyName:"u_FogColor",uniformtype:e.ShaderDataType.Vector4}]):(a.addShaderUniform(Scene3D.FOGCOLOR,"u_FogColor",e.ShaderDataType.Color),a.addShaderUniform(Scene3D.FOGPARAMS,"u_FogParams",e.ShaderDataType.Vector4),a.addShaderUniform(Scene3D.TIME,"u_Time",e.ShaderDataType.Float)),a.addShaderUniform(Scene3D.DIRECTIONLIGHTCOUNT,"u_DirationLightCount",e.ShaderDataType.Int),a.addShaderUniform(Scene3D.LIGHTBUFFER,"u_LightBuffer",e.ShaderDataType.Texture2D),a.addShaderUniform(Scene3D.CLUSTERBUFFER,"u_LightClusterBuffer",e.ShaderDataType.Texture2D),a.addShaderUniform(Scene3D.GIRotate,"u_GIRotate",e.ShaderDataType.Float)}static legacyLightingValueInit(){Scene3D.LIGHTDIRECTION=t.Shader3D.propertyNameToID("u_DirectionLight.direction"),Scene3D.sceneUniformMap.addShaderUniform(Scene3D.LIGHTDIRECTION,"u_DirectionLight.direction",e.ShaderDataType.Vector3),Scene3D.LIGHTDIRCOLOR=t.Shader3D.propertyNameToID("u_DirectionLight.color"),Scene3D.sceneUniformMap.addShaderUniform(Scene3D.LIGHTDIRCOLOR,"u_DirectionLight.color",e.ShaderDataType.Vector3),Scene3D.LIGHTMODE=t.Shader3D.propertyNameToID("u_DirectionLight.lightMode"),Scene3D.sceneUniformMap.addShaderUniform(Scene3D.LIGHTMODE,"u_DirectionLight.lightMode",e.ShaderDataType.Int),Scene3D.POINTLIGHTPOS=t.Shader3D.propertyNameToID("u_PointLight.position"),Scene3D.sceneUniformMap.addShaderUniform(Scene3D.POINTLIGHTPOS,"u_PointLight.position",e.ShaderDataType.Vector3),Scene3D.POINTLIGHTRANGE=t.Shader3D.propertyNameToID("u_PointLight.range"),Scene3D.sceneUniformMap.addShaderUniform(Scene3D.POINTLIGHTRANGE,"u_PointLight.range",e.ShaderDataType.Float),Scene3D.POINTLIGHTATTENUATION=t.Shader3D.propertyNameToID("u_PointLight.attenuation"),Scene3D.sceneUniformMap.addShaderUniform(Scene3D.POINTLIGHTATTENUATION,"u_PointLight.attenuation",e.ShaderDataType.Float),Scene3D.POINTLIGHTCOLOR=t.Shader3D.propertyNameToID("u_PointLight.color"),Scene3D.sceneUniformMap.addShaderUniform(Scene3D.POINTLIGHTCOLOR,"u_PointLight.color",e.ShaderDataType.Vector3),Scene3D.POINTLIGHTMODE=t.Shader3D.propertyNameToID("u_PointLight.lightMode"),Scene3D.sceneUniformMap.addShaderUniform(Scene3D.POINTLIGHTMODE,"u_PointLight.lightMode",e.ShaderDataType.Int),Scene3D.SPOTLIGHTPOS=t.Shader3D.propertyNameToID("u_SpotLight.position"),Scene3D.sceneUniformMap.addShaderUniform(Scene3D.SPOTLIGHTPOS,"u_SpotLight.position",e.ShaderDataType.Vector3),Scene3D.SPOTLIGHTDIRECTION=t.Shader3D.propertyNameToID("u_SpotLight.direction"),Scene3D.sceneUniformMap.addShaderUniform(Scene3D.SPOTLIGHTDIRECTION,"u_SpotLight.direction",e.ShaderDataType.Vector3),Scene3D.SPOTLIGHTSPOTANGLE=t.Shader3D.propertyNameToID("u_SpotLight.spot"),Scene3D.sceneUniformMap.addShaderUniform(Scene3D.SPOTLIGHTSPOTANGLE,"u_SpotLight.spot",e.ShaderDataType.Float),Scene3D.SPOTLIGHTRANGE=t.Shader3D.propertyNameToID("u_SpotLight.range"),Scene3D.sceneUniformMap.addShaderUniform(Scene3D.SPOTLIGHTRANGE,"u_SpotLight.range",e.ShaderDataType.Float),Scene3D.SPOTLIGHTCOLOR=t.Shader3D.propertyNameToID("u_SpotLight.color"),Scene3D.sceneUniformMap.addShaderUniform(Scene3D.SPOTLIGHTCOLOR,"u_SpotLight.color",e.ShaderDataType.Vector3),Scene3D.SPOTLIGHTMODE=t.Shader3D.propertyNameToID("u_SpotLight.lightMode"),Scene3D.sceneUniformMap.addShaderUniform(Scene3D.SPOTLIGHTMODE,"u_SpotLight.lightMode",e.ShaderDataType.Int)}static createSceneUniformBlock(){if(!Scene3D.SceneUBOData){let e=new Map;e.set("u_Time",t.UniformBufferParamsType.Number),e.set("u_FogParams",t.UniformBufferParamsType.Vector4),e.set("u_FogColor",t.UniformBufferParamsType.Vector4);let a=new Map;e.forEach(((e,r)=>{a.set(t.Shader3D.propertyNameToID(r),e)})),Scene3D.SceneUBOData=new t.UnifromBufferData(a)}return Scene3D.SceneUBOData}static __init__(){if(t.Config3D._multiLighting){const r=4;var e=t.Config3D.maxLightCount,a=t.Config3D.lightClusterCount;Cluster.instance=new Cluster(a.x,a.y,a.z,Math.min(t.Config3D.maxLightCount,t.Config3D._maxAreaLightCountPerClusterAverage)),Scene3D._lightTexture=Utils3D._createFloatTextureBuffer(r,e),Scene3D._lightTexture.lock=!0,Scene3D._lightPixles=new Float32Array(e*r*4)}Scene3D.shaderValueInit();var r=t.Shader3D._configDefineValues;t.Config3D._multiLighting||(r.add(t.Shader3D.SHADERDEFINE_LEGACYSINGALLIGHTING),Scene3D.legacyLightingValueInit()),Scene3D._shadowCasterPass=new ShadowCasterPass,t.Config3D._uniformBlock&&r.add(t.Shader3D.SHADERDEFINE_ENUNIFORMBLOCK),t.LayaGL.renderEngine.getCapable(t.RenderCapable.TextureFormat_R32G32B32A32)&&r.add(t.Shader3D.SHADERDEFINE_FLOATTEXTURE),t.LayaGL.renderEngine.getCapable(t.RenderCapable.Texture_FloatLinearFiltering)&&r.add(t.Shader3D.SHADERDEFINE_FLOATTEXTURE_FIL_LINEAR)}static load(e,a){t.ILaya.loader.load(e).then((e=>{if(a){let r;if(e){let a=e.create();r=a instanceof t.Scene?a._scene3D:a}a.runWith([r])}}))}get scene2D(){return this._scene2D}set sceneRenderableManager(e){e.list=this._sceneRenderManager.list,this._sceneRenderManager=e}get sceneRenderableManager(){return this._sceneRenderManager}get enableFog(){return this._enableFog}set enableFog(e){this._enableFog!==e&&(this._enableFog=e,e?this._shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG):this._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG))}get fogMode(){return this._fogMode}set fogMode(t){switch(this._fogMode=t,t){case e.FogMode.Linear:this._shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG_LINEAR),this._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG_EXP),this._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG_EXP2);break;case e.FogMode.EXP:this._shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG_EXP),this._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG_LINEAR),this._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG_EXP2);break;case e.FogMode.EXP2:this._shaderValues.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG_EXP2),this._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG_LINEAR),this._shaderValues.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_FOG_EXP)}}get fogColor(){return this._shaderValues.getColor(Scene3D.FOGCOLOR)}set fogColor(e){this._shaderValues.setColor(Scene3D.FOGCOLOR,e)}get fogStart(){return this._fogParams.x}set fogStart(e){this._fogParams.x=e,this.fogParams=this._fogParams}get fogEnd(){return this._fogParams.y}set fogEnd(e){this._fogParams.y=e,this.fogParams=this._fogParams}get fogDensity(){return this._fogParams.z}set fogDensity(e){this._fogParams.z=e,this.fogParams=this._fogParams}get fogParams(){return this._shaderValues.getVector(Scene3D.FOGPARAMS)}set fogParams(e){this._shaderValues.setVector(Scene3D.FOGPARAMS,e)}set GIRotate(e){this._shaderValues.setNumber(Scene3D.GIRotate,e)}get GIRotate(){return this._shaderValues.getNumber(Scene3D.GIRotate)}get ambientMode(){return this._sceneReflectionProb.ambientMode}set ambientMode(e){this._sceneReflectionProb.ambientMode=e}get sceneReflectionProb(){return this._sceneReflectionProb}set sceneReflectionProb(e){this._sceneReflectionProb=e}get ambientColor(){return this._sceneReflectionProb.ambientColor}set ambientColor(e){this._sceneReflectionProb.ambientColor=e}get ambientIntensity(){return this._sceneReflectionProb.ambientIntensity}set ambientIntensity(e){this._sceneReflectionProb.ambientIntensity=e}get reflectionIntensity(){return this._sceneReflectionProb.reflectionIntensity}set reflectionIntensity(e){this._sceneReflectionProb.reflectionIntensity=e}get ambientSH(){return this._sceneReflectionProb.ambientSH}set ambientSH(e){this._sceneReflectionProb.ambientSH=e}get iblTex(){return this._sceneReflectionProb.iblTex}set iblTex(e){this._sceneReflectionProb.iblTex=e}get iblTexRGBD(){return this._sceneReflectionProb.iblTexRGBD}set iblTexRGBD(e){this._sceneReflectionProb.iblTexRGBD=e}get skyRenderer(){return this._skyRenderer}get physicsSimulation(){return this._physicsManager}get timer(){return this._timer}set timer(e){this._timer=e}get lightmaps(){return this._lightmaps.slice()}set lightmaps(e){var t=this._lightmaps;if(t)for(var a=0,r=t.length;a<r;a++){(i=t[a]).lightmapColor&&i.lightmapColor._removeReference(),i.lightmapDirection&&i.lightmapDirection._removeReference()}if(e){var n=e.length;for(t.length=n,a=0;a<n;a++){var i;(i=e[a]).lightmapColor&&i.lightmapColor._addReference(),i.lightmapDirection&&i.lightmapDirection._addReference(),t[a]=i}}else t.length=0;this._sceneModuleData.lightmapDirtyFlag=Scene3D._updateMark}get shadowMapFrequency(){return this._ShadowMapupdateFrequency}set shadowMapFrequency(e){this._ShadowMapupdateFrequency=e}set componentElementDatasMap(e){this._componentElementDatasMap=e,this.componentElementMap.forEach(((e,t)=>{e.Init(this._componentElementDatasMap[t])}))}get componentElementDatasMap(){return this._componentElementDatasMap}_update(){var e=this.timer._delta/1e3;if(this._time+=e,this._shaderValues.setNumber(Scene3D.TIME,this._time),t.LayaEnv.isPlaying&&(this._physicsStepTime+=e,this._physicsStepTime>Scene3D.physicsSettings.fixedTimeStep)){let e=this._physicsManager;Laya3D.enablePhysics&&t.Stat.enablePhysicsUpdate&&e.update(this._physicsStepTime),this._physicsStepTime=0}this._volumeManager.needreCaculateAllRenderObjects()?this._volumeManager.reCaculateAllRenderObjects(this._sceneRenderManager.list):this._volumeManager.handleMotionlist(),this.componentElementMap.forEach((t=>{t.update(e)})),this._componentDriver.callStart(),this._componentDriver.callUpdate(),this._componentDriver.callLateUpdate(),this._componentDriver.callDestroy(),this._sceneRenderManager.renderUpdate(),this.skyRenderer.renderUpdate(RenderContext3D._instance),this._renderByEditor||this._UI3DManager.update()}_binarySearchIndexInCameraPool(e){for(var t,a=0,r=this._cameraPool.length-1;a<=r;){t=Math.floor((a+r)/2);var n=this._cameraPool[t]._renderingOrder;if(n==e._renderingOrder)return t;n>e._renderingOrder?r=t-1:a=t+1}return a}_getGroup(){return this._group}_setGroup(e){this._group=e}_onActive(){super._onActive(),t.ILaya.stage._scene3Ds.push(this)}_onInActive(){super._onInActive();var e=t.ILaya.stage._scene3Ds;e.splice(e.indexOf(this),1)}_prepareSceneToRender(){var e=this._shaderValues;if(t.Config3D._multiLighting&&t.Stat.enableMulLight){var a=Scene3D._lightTexture,r=Scene3D._lightPixles;const x=a.width,M=4*x;var n=0,i=t.Stat.enableLight?this._directionLights._length:0,o=this._directionLights._elements;if(i>0){var s=this._directionLights.getBrightestLight();this._mainDirectionLight=o[s],this._directionLights.normalLightOrdering(s);for(var l=0;l<i;l++,n++){var h=(T=o[l]).direction,d=M*n;(p=T._intensityColor).x=t.Color.gammaToLinearSpace(T.color.r),p.y=t.Color.gammaToLinearSpace(T.color.g),p.z=t.Color.gammaToLinearSpace(T.color.b),t.Vector3.scale(p,T._intensity,p),T.owner.transform.worldMatrix.getForward(h),t.Vector3.normalize(h,h),r[d]=p.x,r[d+1]=p.y,r[d+2]=p.z,r[d+3]=T._lightmapBakedType,r[d+4]=h.x,r[d+5]=h.y,r[d+6]=h.z,0==l&&(this._sunColor=T.color,this._sundir=h)}e.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_DIRECTIONLIGHT)}else e.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_DIRECTIONLIGHT),this._mainDirectionLight=null;var c=t.Stat.enableLight?this._pointLights._length:0;if(c>0){var u=this._pointLights._elements,_=this._pointLights.getBrightestLight();this._mainPointLight=u[_],this._pointLights.normalLightOrdering(_);for(l=0;l<c;l++,n++){var m=(E=u[l]).owner.transform.position;d=M*n;(p=E._intensityColor).x=t.Color.gammaToLinearSpace(E.color.r),p.y=t.Color.gammaToLinearSpace(E.color.g),p.z=t.Color.gammaToLinearSpace(E.color.b),t.Vector3.scale(p,E._intensity,p),r[d]=p.x,r[d+1]=p.y,r[d+2]=p.z,r[d+3]=E.range,r[d+4]=m.x,r[d+5]=m.y,r[d+6]=m.z,r[d+7]=E._lightmapBakedType}e.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_POINTLIGHT)}else e.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_POINTLIGHT),this._mainPointLight=null;var f=t.Stat.enableLight?this._spotLights._length:0;if(f>0){var S=this._spotLights._elements,g=this._spotLights.getBrightestLight();this._mainSpotLight=S[g],this._spotLights.normalLightOrdering(g);for(l=0;l<f;l++,n++){var p,D=S[l];h=D.direction,m=D.owner.transform.position,d=M*n;(p=D._intensityColor).x=t.Color.gammaToLinearSpace(D.color.r),p.y=t.Color.gammaToLinearSpace(D.color.g),p.z=t.Color.gammaToLinearSpace(D.color.b),t.Vector3.scale(p,D._intensity,p),D.owner.transform.worldMatrix.getForward(h),t.Vector3.normalize(h,h),r[d]=p.x,r[d+1]=p.y,r[d+2]=p.z,r[d+3]=D.range,r[d+4]=m.x,r[d+5]=m.y,r[d+6]=m.z,r[d+7]=D.spotAngle*Math.PI/180,r[d+8]=h.x,r[d+9]=h.y,r[d+10]=h.z,r[d+11]=D._lightmapBakedType}e.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SPOTLIGHT)}else e.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SPOTLIGHT),this._mainSpotLight=null;n>0&&a.setSubPixelsData(0,0,x,n,r,0,!1,!1,!1),e.setTexture(Scene3D.LIGHTBUFFER,a),e.setInt(Scene3D.DIRECTIONLIGHTCOUNT,this._directionLights._length),e.setTexture(Scene3D.CLUSTERBUFFER,Cluster.instance._clusterTexture)}else{if(Scene3D.LIGHTDIRECTION||Scene3D.legacyLightingValueInit(),this._directionLights._length>0&&t.Stat.enableLight){var T=this._directionLights._elements[0];this._mainDirectionLight=T,T._intensityColor.x=t.Color.gammaToLinearSpace(T.color.r),T._intensityColor.y=t.Color.gammaToLinearSpace(T.color.g),T._intensityColor.z=t.Color.gammaToLinearSpace(T.color.b),t.Vector3.scale(T._intensityColor,T._intensity,T._intensityColor),T.owner.transform.worldMatrix.getForward(T.direction),t.Vector3.normalize(T.direction,T.direction),e.setVector3(Scene3D.LIGHTDIRCOLOR,T._intensityColor),e.setVector3(Scene3D.LIGHTDIRECTION,T.direction),e.setInt(Scene3D.LIGHTMODE,T._lightmapBakedType),0==l&&(this._sunColor=T.color,this._sundir=T.direction),e.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_DIRECTIONLIGHT)}else e.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_DIRECTIONLIGHT);if(this._pointLights._length>0&&t.Stat.enableLight){var E=this._pointLights._elements[0];this._mainPointLight=E,E._intensityColor.x=t.Color.gammaToLinearSpace(E.color.r),E._intensityColor.y=t.Color.gammaToLinearSpace(E.color.g),E._intensityColor.z=t.Color.gammaToLinearSpace(E.color.b),t.Vector3.scale(E._intensityColor,E._intensity,E._intensityColor),e.setVector3(Scene3D.POINTLIGHTCOLOR,E._intensityColor),e.setVector3(Scene3D.POINTLIGHTPOS,E.owner.transform.position),e.setNumber(Scene3D.POINTLIGHTRANGE,E.range),e.setInt(Scene3D.POINTLIGHTMODE,E._lightmapBakedType),e.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_POINTLIGHT)}else e.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_POINTLIGHT);if(this._spotLights._length>0&&t.Stat.enableLight){var x=this._spotLights._elements[0];this._mainSpotLight=x,x._intensityColor.x=t.Color.gammaToLinearSpace(x.color.r),x._intensityColor.y=t.Color.gammaToLinearSpace(x.color.g),x._intensityColor.z=t.Color.gammaToLinearSpace(x.color.b),t.Vector3.scale(x._intensityColor,x._intensity,x._intensityColor),e.setVector3(Scene3D.SPOTLIGHTCOLOR,x._intensityColor),e.setVector3(Scene3D.SPOTLIGHTPOS,x.owner.transform.position),x.owner.transform.worldMatrix.getForward(x.direction),t.Vector3.normalize(x.direction,x.direction),e.setVector3(Scene3D.SPOTLIGHTDIRECTION,x.direction),e.setNumber(Scene3D.SPOTLIGHTRANGE,x.range),e.setNumber(Scene3D.SPOTLIGHTSPOTANGLE,x.spotAngle*Math.PI/180),e.setInt(Scene3D.SPOTLIGHTMODE,x._lightmapBakedType),e.addDefine(Scene3DShaderDeclaration.SHADERDEFINE_SPOTLIGHT)}else e.removeDefine(Scene3DShaderDeclaration.SHADERDEFINE_SPOTLIGHT)}}get cullInfoCamera(){return this._cullInfoCamera}_setCullCamera(e){this._cullInfoCamera=e}recaculateCullCamera(){this._cullInfoCamera=this._cameraPool[0],this._cameraPool.forEach((e=>{this.cullInfoCamera.maxlocalYDistance<e.maxlocalYDistance&&(this._cullInfoCamera=e)}))}_addCamera(e){for(var t=this._binarySearchIndexInCameraPool(e),a=e._renderingOrder,r=this._cameraPool.length;t<r&&this._cameraPool[t]._renderingOrder<=a;)t++;this._cameraPool.splice(t,0,e)}_removeCamera(e){this._cameraPool.splice(this._cameraPool.indexOf(e),1)}_addRenderObject(e){this._sceneRenderManager.addRenderObject(e),e._addReflectionProbeUpdate()}_removeRenderObject(e){this._sceneRenderManager.removeRenderObject(e)}destroy(e=!0){if(!this._destroyed){super.destroy(e),this._nativeObj=null,this._skyRenderer.destroy(),this._skyRenderer=null,this._directionLights=null,this._pointLights=null,this._spotLights=null,this._alternateLights=null,this._shaderValues.destroy(),RenderContext3D._instance.scene==this&&(RenderContext3D._instance.scene=null),this._shaderValues=null,this.sceneRenderableManager.destroy(),this._sceneRenderManager=null,this._cameraPool=null,this._physicsManager&&this._physicsManager.destroy();var t=this._lightmaps;if(t)for(var a=0,r=t.length;a<r;a++){var n=t[a];n.lightmapColor&&n.lightmapColor._removeReference(),n.lightmapDirection&&n.lightmapDirection._removeReference()}this._lightmaps=null,this._volumeManager.destroy(),this._componentDriver.callDestroy()}}getComponentElementManager(e){return this.componentElementMap.get(e)}render(e){}renderSubmit(){if(!(this._children.length<=0||this._renderByEditor)){var e,a;for(this._prepareSceneToRender(),Scene3D._updateMark++,e=0,a=this._cameraPool.length;e<a;e++){var r=this._cameraPool[e];r.enableRender&&r.activeInHierarchy&&(r.renderTarget?r.enableBuiltInRenderTexture||(r.enableBuiltInRenderTexture=!1):r.enableBuiltInRenderTexture||(r.enableBuiltInRenderTexture=!0),r.render(this),r._offScreenRenderTexture||this.blitMainCanvans(r._internalRenderTexture,r.normalizedViewport,r),r._cacheDepth||r._needInternalRenderTexture()&&!r._internalRenderTexture._inPool&&t.RenderTexture.recoverToPool(r._internalRenderTexture))}t.Context.set2DRenderConfig(),t.RenderTexture.clearPool()}}blitMainCanvans(e,a,r){if(e){Scene3D.mainCavansViewPort.x=RenderContext3D.clientWidth*a.x|0,Scene3D.mainCavansViewPort.y=RenderContext3D.clientHeight*a.y|0,Scene3D.mainCavansViewPort.width=RenderContext3D.clientWidth*a.width|0,Scene3D.mainCavansViewPort.height=RenderContext3D.clientHeight*a.height|0,e.filterMode=t.FilterMode.Bilinear,r.fxaa&&BlitFrameBufferCMD.shaderdata.addDefine(BaseCamera.SHADERDEFINE_FXAA);var n=BlitFrameBufferCMD.create(e,null,Scene3D.mainCavansViewPort,null,null,BlitFrameBufferCMD.shaderdata);n.run(),n.recover(),t.RenderTexture2D._clear=!1,BlitFrameBufferCMD.shaderdata.removeDefine(BaseCamera.SHADERDEFINE_FXAA)}}reUse(e,t){return 0}setGlobalShaderValue(e,a,r){var n=t.Shader3D.propertyNameToID(e);this._shaderValues.setShaderData(n,a,r)}get fogRange(){return this._fogParams.y-this.fogParams.x}set fogRange(e){this._fogParams.y=e+this.fogParams.x,this.fogParams=this._fogParams}setlightmaps(e){for(var t=this._lightmaps,a=0,r=t.length;a<r;a++)t[a].lightmapColor._removeReference();if(!e)throw new Error("Scene3D: value value can't be null.");var n=e.length;for(t.length=n,a=0;a<n;a++){var i=e[a];i._addReference(),t[a]||(t[a]=new Lightmap),t[a].lightmapColor=i}}getlightmaps(){for(var e=new Array(this._lightmaps.length),t=0;t<this._lightmaps.length;t++)e[t]=this._lightmaps[t].lightmapColor;return e}}Scene3D.physicsSettings=new PhysicsSettings,Scene3D.mainCavansViewPort=new t.Viewport(0,0,1,1),Scene3D.componentManagerMap=new Map,e.CameraClearFlags=void 0,(b=e.CameraClearFlags||(e.CameraClearFlags={}))[b.SolidColor=0]="SolidColor",b[b.Sky=1]="Sky",b[b.DepthOnly=2]="DepthOnly",b[b.Nothing=3]="Nothing",b[b.ColorOnly=4]="ColorOnly",e.CameraEventFlags=void 0,(N=e.CameraEventFlags||(e.CameraEventFlags={}))[N.BeforeForwardOpaque=0]="BeforeForwardOpaque",N[N.BeforeSkyBox=2]="BeforeSkyBox",N[N.BeforeTransparent=4]="BeforeTransparent",N[N.BeforeImageEffect=6]="BeforeImageEffect",N[N.AfterEveryThing=8]="AfterEveryThing";class Camera extends BaseCamera{constructor(a=0,r=.3,n=1e3){super(r,n),this._updateViewMatrix=!0,this._postProcess=null,this._enableHDR=!1,this._viewportParams=new t.Vector4,this._projectionParams=new t.Vector4,this._needBuiltInRenderTexture=!1,this._msaa=!1,this._fxaa=!1,this._offScreenRenderTexture=null,this._internalRenderTexture=null,this._canBlitDepth=!1,this._internalCommandBuffer=new CommandBuffer,this._depthTextureFormat=t.RenderTargetFormat.DEPTH_32,this._cameraEventCommandBuffer={},this._shadowCasterCommanBuffer=[],this._clusterPlaneCacheFlag=new t.Vector2(-1,-1),this._screenOffsetScale=new t.Vector4,this.enableRender=!0,this.clearFlag=e.CameraClearFlags.SolidColor,this._renderDataModule=Laya3DRender.Render3DModuleDataFactory.createCameraModuleData(),this._Render3DProcess=Laya3DRender.Render3DPassFactory.createRender3DProcess(),this._renderDataModule.transform=this.transform,this._viewMatrix=new t.Matrix4x4,this._projectionMatrix=new t.Matrix4x4,this._projectionViewMatrix=new t.Matrix4x4,this._viewport=new t.Viewport(0,0,0,0),this._normalizedViewport=new t.Viewport(0,0,1,1),this._rayViewport=new t.Viewport(0,0,0,0),this._aspectRatio=a,this._boundFrustum=new BoundFrustum(new t.Matrix4x4),this.depthTextureMode=0,this.opaquePass=!1,this._calculateProjectionMatrix(),t.ILaya.stage.on(t.Event.RESIZE,this,this._onScreenSizeChanged),this.transform.on(t.Event.TRANSFORM_CHANGED,this,this._onTransformChanged),this.opaquePass=!1,this._internalCommandBuffer.context=RenderContext3D._instance,this._renderDataModule.farplane=this.farPlane,this._renderDataModule.nearplane=this.nearPlane,this._renderDataModule.fieldOfView=this.fieldOfView,this._renderDataModule.aspectRatio=this.aspectRatio}static get _updateMark(){return RenderContext3D._instance._contextOBJ.cameraUpdateMask}static set _updateMark(e){RenderContext3D._instance._contextOBJ.cameraUpdateMask=e}static drawRenderTextureByScene(e,a,r){if(!r)return null;Scene3D._updateMark++,a.parent?(a.sceneRenderableManager.renderUpdate(),a.skyRenderer.renderUpdate(RenderContext3D._instance)):a._update(),a._prepareSceneToRender(),a._setCullCamera(e);let n=e.renderTarget;e.renderTarget=r;let i=e.scene;return e._scene=a,e.render(a),e.renderTarget=n,a.recaculateCullCamera(),a._componentDriver.callPostRender(),e._internalRenderTexture&&!e._internalRenderTexture._inPool&&t.RenderTexture.recoverToPool(e._internalRenderTexture),e._scene=i,r}static getTexturePixel(e){let a=e.filterMode;e.filterMode=t.FilterMode.Point;let r,n=t.RenderTargetFormat.R8G8B8,i=e.width*e.height;switch(e.format){case t.TextureFormat.R32G32B32A32:case t.TextureFormat.R16G16B16A16:n=t.RenderTargetFormat.R32G32B32A32,r=new Float32Array(4*i);break;case t.TextureFormat.R32G32B32:case t.TextureFormat.R16G16B16:n=t.RenderTargetFormat.R32G32B32,r=new Float32Array(3*i);break;case t.TextureFormat.R5G6B5:case t.TextureFormat.R8G8B8:n=t.RenderTargetFormat.R8G8B8,r=new Uint8Array(3*i);break;default:n=t.RenderTargetFormat.R8G8B8A8,r=new Uint8Array(4*i)}let o=t.RenderTexture.createFromPool(e.width,e.height,n,t.RenderTargetFormat.None,!1,0,!1),s=new CommandBuffer;return s.blitScreenQuad(e,o),s.context=RenderContext3D._instance,s._applyOne(),e.filterMode=a,o.getData(0,0,e.width,e.height,r),o.destroy(),r}static getTexturePixelAsync(e){let a=e.filterMode;e.filterMode=t.FilterMode.Point;let r,n=t.RenderTargetFormat.R8G8B8,i=e.width*e.height;switch(e.format){case t.TextureFormat.R32G32B32A32:case t.TextureFormat.R16G16B16A16:n=t.RenderTargetFormat.R32G32B32A32,r=new Float32Array(4*i);break;case t.TextureFormat.R32G32B32:case t.TextureFormat.R16G16B16:n=t.RenderTargetFormat.R32G32B32,r=new Float32Array(3*i);break;case t.TextureFormat.R5G6B5:case t.TextureFormat.R8G8B8:n=t.RenderTargetFormat.R8G8B8,r=new Uint8Array(3*i);break;default:n=t.RenderTargetFormat.R8G8B8A8,r=new Uint8Array(4*i)}let o=t.RenderTexture.createFromPool(e.width,e.height,n,t.RenderTargetFormat.None,!1,0,!1),s=new CommandBuffer;s.blitScreenQuad(e,o),s.context=RenderContext3D._instance,s._applyOne(),e.filterMode=a;const l=o.getDataAsync(0,0,e.width,e.height,r);return o.destroy(),l}static drawTextureCubePixelByScene(e,a,r,n,i){let o,s,l=t.RenderTargetFormat.R8G8B8,h=r*r;switch(n){case t.TextureFormat.R32G32B32A32:case t.TextureFormat.R16G16B16A16:l=t.RenderTargetFormat.R32G32B32A32,h*=4,s=4;break;case t.TextureFormat.R32G32B32:case t.TextureFormat.R16G16B16:l=t.RenderTargetFormat.R32G32B32,h*=3,s=4;break;case t.TextureFormat.R5G6B5:case t.TextureFormat.R8G8B8:l=t.RenderTargetFormat.R8G8B8,h*=3,s=1;break;case t.TextureFormat.R8G8B8A8:l=t.RenderTargetFormat.R8G8B8A8,o=new Uint8Array(4*h),h*=4,s=1;break;default:throw"Type is not supported"}let d=new t.RenderTexture(r,r,l,t.RenderTargetFormat.DEPTH_16,!1,0,!1,!1);e.fieldOfView=90,e.cullingMask=i;let c=[],u=[new t.Quaternion(0,1,0,0),new t.Quaternion(0,0,0,1),new t.Quaternion(0,.7071068,0,.7071068),new t.Quaternion(0,.7071068,0,-.7071068),new t.Quaternion(0,.7071068,-.7071068,0),new t.Quaternion(0,-.7071068,-.7071068,0)];for(var _=0;_<6;_++)e.transform.rotation=u[_],this.drawRenderTextureByScene(e,a,d),o=4==s?new Float32Array(h):new Uint8Array(h),c[_]=d.getData(0,0,r,r,o);return d.destroy(),c}static drawTextureCubeByScene(e,a,r,n,i,o=0){e.transform.position=a;let s=this.drawTextureCubePixelByScene(e,r,n,i,o);switch(i){case t.TextureFormat.R32G32B32A32:case t.TextureFormat.R16G16B16A16:t.TextureFormat.R32G32B32A32;break;case t.TextureFormat.R32G32B32:case t.TextureFormat.R16G16B16:t.TextureFormat.R32G32B32;break;case t.TextureFormat.R5G6B5:case t.TextureFormat.R8G8B8:t.TextureFormat.R8G8B8;break;case t.TextureFormat.R8G8B8A8:t.TextureFormat.R8G8B8A8;break;default:throw"Type is not supported"}let l=new t.TextureCube(n,i,!0,!1);return l.setPixelsData(s,!1,!1),l}static __init__(){Camera.depthPass=new DepthPass}set nearPlane(e){super.nearPlane=e,this._renderDataModule.nearplane=e}get nearPlane(){return this._nearPlane}set farPlane(e){super.farPlane=e,this._renderDataModule.farplane=e}get farPlane(){return this._farPlane}set fieldOfView(e){super.fieldOfView=e,this._renderDataModule.fieldOfView=e}get fieldOfView(){return this._fieldOfView}get aspectRatio(){if(0===this._aspectRatio){var e=this.viewport;return e.width/e.height}return this._aspectRatio}set aspectRatio(e){if(e<0)throw new Error("Camera: the aspect ratio has to be a positive real number.");this._aspectRatio=e,this._renderDataModule.aspectRatio=e,this._calculateProjectionMatrix()}get viewport(){return this._offScreenRenderTexture?this._calculationViewport(this._normalizedViewport,this._offScreenRenderTexture.width,this._offScreenRenderTexture.height):this._calculationViewport(this._normalizedViewport,this.clientWidth,this.clientHeight),this._viewport}set viewport(e){var t,a;this._offScreenRenderTexture?(t=this._offScreenRenderTexture.width,a=this._offScreenRenderTexture.height):(t=this.clientWidth,a=this.clientHeight),this._normalizedViewport.x=e.x/t,this._normalizedViewport.y=e.y/a,this._normalizedViewport.width=e.width/t,this._normalizedViewport.height=e.height/a,this._calculationViewport(this._normalizedViewport,t,a),this._calculateProjectionMatrix()}get clientWidth(){return t.ILaya.stage.needUpdateCanvasSize(),t.Config3D.customResolution?t.Config3D.pixelRatio*t.Config3D._resoluWidth|0:RenderContext3D.clientWidth*t.Config3D.pixelRatio|0}get clientHeight(){return t.ILaya.stage.needUpdateCanvasSize(),t.Config3D.customResolution?t.Config3D.pixelRatio*t.Config3D._resoluHeight|0:RenderContext3D.clientHeight*t.Config3D.pixelRatio|0}set msaa(e){t.LayaGL.renderEngine.getCapable(t.RenderCapable.MSAA)?this._msaa=e:this._msaa=!1}get msaa(){return this._msaa&&t.Stat.enablemsaa}set fxaa(e){this._fxaa=e}get fxaa(){return this._fxaa}get normalizedViewport(){return this._normalizedViewport}set normalizedViewport(e){var t,a;this._offScreenRenderTexture?(t=this._offScreenRenderTexture.width,a=this._offScreenRenderTexture.height):(t=this.clientWidth,a=this.clientHeight),this._normalizedViewport!==e&&e.cloneTo(this._normalizedViewport),this._calculationViewport(e,t,a),this._calculateProjectionMatrix()}get viewMatrix(){if(this._updateViewMatrix){var e=this.transform.getWorldLossyScale(),t=e.x,a=e.y,r=e.z,n=this._viewMatrix.elements;this.transform.worldMatrix.cloneTo(this._viewMatrix),n[0]/=t,n[1]/=t,n[2]/=t,n[4]/=a,n[5]/=a,n[6]/=a,n[8]/=r,n[9]/=r,n[10]/=r,this._viewMatrix.invert(this._viewMatrix),this._updateViewMatrix=!1,this.skyRenderElement._renderElementOBJ&&this.skyRenderElement.calculateViewMatrix(this._viewMatrix)}return this._viewMatrix}get projectionMatrix(){return this._projectionMatrix}set projectionMatrix(e){this._projectionMatrix=e,this._useUserProjectionMatrix=!0}get projectionViewMatrix(){return t.Matrix4x4.multiply(this.projectionMatrix,this.viewMatrix,this._projectionViewMatrix),this._renderDataModule.setProjectionViewMatrix(this._projectionViewMatrix),this._projectionViewMatrix}get boundFrustum(){return this._boundFrustum.matrix=this.projectionViewMatrix,this._boundFrustum}get renderTarget(){return this._offScreenRenderTexture}set renderTarget(e){var t=this._offScreenRenderTexture;t!==e&&(t&&(t._isCameraTarget=!1),e&&(e._isCameraTarget=!0),this._offScreenRenderTexture=e,this._calculateProjectionMatrix())}get postProcess(){return this._postProcess}set postProcess(e){this._postProcess=e}get enableHDR(){return this._enableHDR}set enableHDR(e){!e||t.LayaGL.renderEngine.getCapable(t.RenderCapable.RenderTextureFormat_R16G16B16A16)?this._enableHDR=e:console.warn("Camera:can't enable HDR in this device.")}get enableBuiltInRenderTexture(){return this._needBuiltInRenderTexture}set enableBuiltInRenderTexture(e){this._needBuiltInRenderTexture=e}get depthTextureMode(){return this._depthTextureMode}set depthTextureMode(e){this._depthTextureMode=e,t.LayaGL.renderEngine.getCapable(t.RenderCapable.RenderTextureFormat_Depth)||(this._depthTextureMode&=~t.DepthTextureMode.Depth)}set opaquePass(e){e!=this._opaquePass&&(e||(this._shaderValues.setTexture(BaseCamera.OPAQUETEXTURE,t.Texture2D.blackTexture),this._shaderValues.setVector(BaseCamera.OPAQUETEXTUREPARAMS,t.Vector4.ONE),this._opaqueTexture&&t.RenderTexture.recoverToPool(this._opaqueTexture),this._opaqueTexture=null),this._opaquePass=e)}get opaquePass(){return this._opaquePass}get depthTextureFormat(){return this._depthTextureFormat}set depthTextureFormat(e){this._depthTextureFormat=e}set enableBlitDepth(e){e!=this._canBlitDepth&&(this._canBlitDepth=e,this._cacheDepth=e,this._internalRenderTexture&&t.RenderTexture.recoverToPool(this._internalRenderTexture),!this._internalRenderTexture._inPool&&(this._internalRenderTexture=t.RenderTexture.createFromPool(this.viewport.width,this.viewport.height,this._getRenderTextureFormat(),this.depthTextureFormat,!1,this.msaa?4:1,this._canBlitDepth,this._needRenderGamma(this._getRenderTextureFormat()))),e||this._cacheDepthTexture&&!this._cacheDepthTexture._inPool&&t.RenderTexture.recoverToPool(this._cacheDepthTexture))}get enableBlitDepth(){return this._canBlitDepth}get canblitDepth(){return this._canBlitDepth&&this._internalRenderTexture&&null!=this._internalRenderTexture.depthStencilFormat}_calculationViewport(e,t,a){var r=e.x*t,n=e.y*a,i=r+Math.max(e.width*t,0),o=n+Math.max(e.height*a,0),s=Math.ceil(r),l=Math.ceil(n),h=Math.floor(i),d=Math.floor(o),c=s-r>=.5?Math.floor(r):s,u=l-n>=.5?Math.floor(n):l,_=i-h>=.5?Math.ceil(i):h,m=o-d>=.5?Math.ceil(o):d;this._viewport.x=c,this._viewport.y=u,this._viewport.width=_-c,this._viewport.height=m-u}_calculateProjectionMatrix(){if(!this._useUserProjectionMatrix){if(this._orthographic){var e=.5*this.orthographicVerticalSize,a=e*this.aspectRatio;t.Matrix4x4.createOrthoOffCenter(-a,a,-e,e,this.nearPlane,this.farPlane,this._projectionMatrix)}else t.Matrix4x4.createPerspective(3.1416*this.fieldOfView/180,this.aspectRatio,this.nearPlane,this.farPlane,this._projectionMatrix);this.skyRenderElement._renderElementOBJ&&this.skyRenderElement.caluclateProjectionMatrix(this._projectionMatrix,this.aspectRatio,this.nearPlane,this.farPlane,this.fieldOfView,this.orthographic)}}_isLayerVisible(e){return 0!=(Math.pow(2,e)&this.cullingMask)}_onTransformChanged(e){(e&=Transform3D.TRANSFORM_WORLDMATRIX)&&(this._updateViewMatrix=!0)}_parse(e,a){super._parse(e,a);var r=e.clearFlag;void 0!==r&&(this.clearFlag=r);var n=e.viewport;this.normalizedViewport=new t.Viewport(n[0],n[1],n[2],n[3]);var i=e.enableHDR;void 0!==i&&(this.enableHDR=i)}clone(){let e=super.clone();return e.clearFlag=this.clearFlag,this.clearColor.cloneTo(e.clearColor),e.clearColor=e.clearColor,e.viewport=this.viewport,this.normalizedViewport.cloneTo(e.normalizedViewport),e.enableHDR=this.enableHDR,e.farPlane=this.farPlane,e.nearPlane=this.nearPlane,e.fieldOfView=this.fieldOfView,e.orthographic=this.orthographic,e.orthographicVerticalSize=this.orthographicVerticalSize,e.opaquePass=this.opaquePass,e._cameraEventCommandBuffer=this._cameraEventCommandBuffer,e.opaquePass=this.opaquePass,e}_getCanvasWidth(){return this._offScreenRenderTexture?this._offScreenRenderTexture.width:this.clientWidth}_getCanvasHeight(){return this._offScreenRenderTexture?this._offScreenRenderTexture.height:this.clientHeight}_getRenderTexture(){return this._internalRenderTexture||this._offScreenRenderTexture}_needRenderGamma(e){switch(e){case t.RenderTargetFormat.R8G8B8:case t.RenderTargetFormat.R8G8B8A8:return!0;default:return!1}}_needInternalRenderTexture(){let e=this.enableBuiltInRenderTexture;if(this.renderTarget){if(this.msaa&&(e=e||!(this.renderTarget.samples>1)),this.enableHDR)switch(this.renderTarget.format){case t.TextureFormat.R16G16B16A16:case t.TextureFormat.R16G16B16:case t.TextureFormat.R32G32B32A32:case t.TextureFormat.R32G32B32:break;default:e=!0}this.postProcess&&this.postProcess.enable&&this.postProcess.effects.length>0&&(e=!0),1==this.normalizedViewport.width&&1==this.normalizedViewport.height&&0==this.normalizedViewport.x&&0==this.normalizedViewport.y||(e=!0)}return e}_getRenderTextureFormat(){return this._enableHDR?t.RenderTargetFormat.R16G16B16A16:t.RenderTargetFormat.R8G8B8A8}_updateCameraRenderData(e){this._prepareCameraToRender(),this._applyViewProject(this.viewMatrix,this._projectionMatrix,e.invertY),this._contextApply(e)}_prepareCameraToRender(){super._prepareCameraToRender();var e=this.viewport;this._viewportParams.setValue(e.x,e.y,e.width,e.height);let a=t.LayaGL.renderEngine._screenInvertY?!RenderContext3D._instance.invertY:RenderContext3D._instance.invertY;this._projectionParams.setValue(this._nearPlane,this._farPlane,a?-1:1,1/this.farPlane),this._shaderValues.setVector(BaseCamera.VIEWPORT,this._viewportParams),this._shaderValues.setVector(BaseCamera.PROJECTION_PARAMS,this._projectionParams)}_contextApply(e){e.viewMatrix=this.viewMatrix,e.projectionMatrix=this.projectionMatrix,e.projectionViewMatrix=this.projectionViewMatrix}_applyViewProject(e,a,r){var n;r?(t.Matrix4x4.multiply(BaseCamera._invertYScaleMatrix,a,BaseCamera._invertYProjectionMatrix),t.Matrix4x4.multiply(BaseCamera._invertYProjectionMatrix,e,BaseCamera._invertYProjectionViewMatrix),a=BaseCamera._invertYProjectionMatrix,n=BaseCamera._invertYProjectionViewMatrix):(t.Matrix4x4.multiply(a,e,this._projectionViewMatrix),this._renderDataModule.setProjectionViewMatrix(this._projectionViewMatrix),n=this._projectionViewMatrix),this._shaderValues.setMatrix4x4(BaseCamera.VIEWMATRIX,e),this._shaderValues.setMatrix4x4(BaseCamera.PROJECTMATRIX,a),this._shaderValues.setMatrix4x4(BaseCamera.VIEWPROJECTMATRIX,n)}_updateClusterPlaneXY(){var e=this.fieldOfView,a=this.aspectRatio;if(this._clusterPlaneCacheFlag.x!==e||this._clusterPlaneCacheFlag.y!==a){var r=t.Config3D.lightClusterCount,n=r.x,i=r.y,o=n+1,s=i+1,l=this._clusterXPlanes,h=this._clusterYPlanes;if(!l){l=this._clusterXPlanes=new Array(o),h=this._clusterYPlanes=new Array(s);for(var d=0;d<o;d++)l[d]=new t.Vector3;for(d=0;d<s;d++)h[d]=new t.Vector3}var c=Math.tan(this.fieldOfView/2*Math.PI/180),u=this.aspectRatio*c,_=2*c/i,m=2*u/n;for(d=0;d<o;d++){var f=m*d-u,S=1/Math.sqrt(1+f*f);l[d].setValue(S,0,-f*S)}for(d=0;d<s;d++){f=c-_*d;var g=-1/Math.sqrt(1+f*f);h[d].setValue(0,g,-f*g)}this._clusterPlaneCacheFlag.x=e,this._clusterPlaneCacheFlag.y=a}}_addCasterShadowCommandBuffer(e){this._shadowCasterCommanBuffer.indexOf(e)<0&&this._shadowCasterCommanBuffer.push(e)}_removeCasterShadowCommandBuffer(e){var t=this._shadowCasterCommanBuffer.indexOf(e);-1!=t&&this._shadowCasterCommanBuffer.splice(t,1)}_preRenderMainPass(a,r,n,i){if(a.camera=this,a.cameraShaderValue=this._shaderValues,Camera._updateMark++,n&&!this._offScreenRenderTexture&&(this.clearFlag==e.CameraClearFlags.DepthOnly||this.clearFlag==e.CameraClearFlags.Nothing))if(t.RenderTexture.bindCanvasRender)t.RenderTexture.bindCanvasRender!=this._internalRenderTexture&&(this._internalCommandBuffer.clear(),this._internalCommandBuffer.blitScreenQuad(t.RenderTexture.bindCanvasRender,this._internalRenderTexture),this._internalCommandBuffer._applyOne());else if(this._enableHDR){var o=t.RenderTexture.createFromPool(i.width,i.height,t.RenderTargetFormat.R8G8B8,t.RenderTargetFormat.DEPTH_16,!1,1);o.filterMode=t.FilterMode.Bilinear,this._renderEngine.copySubFrameBuffertoTex(o._texture,0,0,0,i.x,RenderContext3D.clientHeight-(i.y+i.height),i.width,i.height),this._internalCommandBuffer.clear(),this._internalCommandBuffer.blitScreenQuad(o,this._internalRenderTexture),this._internalCommandBuffer._apply(!0),t.RenderTexture.recoverToPool(o)}}get depthTexture(){return this._depthTexture}set depthTexture(e){this._depthTexture=e}get depthNormalTexture(){return this._depthNormalsTexture}set depthNormalTexture(e){this._depthNormalsTexture=e}_aftRenderMainPass(e){this._cacheDepth&&this._internalRenderTexture&&(this._cacheDepthTexture&&!this._cacheDepthTexture._inPool&&t.RenderTexture.recoverToPool(this._cacheDepthTexture),this._cacheDepthTexture=this._internalRenderTexture),Camera.depthPass.cleanUp()}_createOpaqueTexture(e,a){if(!this._opaqueTexture){let e=this._getRenderTexture();this._opaqueTexture=t.RenderTexture.createFromPool(1024,1024,e.colorFormat,t.RenderTargetFormat.None,!0,1,!1,!0),this._opaqueTexture.filterMode=t.FilterMode.Bilinear,this._opaqueTexture.wrapModeU=t.WrapMode.Clamp,this._opaqueTexture.wrapModeV=t.WrapMode.Clamp,this._shaderValues.setTexture(BaseCamera.OPAQUETEXTURE,this._opaqueTexture);let a=new t.Vector4;a.x=this._opaqueTexture.width,a.y=this._opaqueTexture.height,a.z=this._opaqueTexture.maxMipmapLevel,this._shaderValues.setVector(BaseCamera.OPAQUETEXTUREPARAMS,a)}}render(a){let r=RenderContext3D._instance;r.scene=a,r.camera=this,a._setCullCamera(this);let n=this.viewport,i=this._needInternalRenderTexture();if(i){let e=this.msaa?4:1,a=this._getRenderTextureFormat(),r=this.depthTextureFormat,i=this._needRenderGamma(a),o=t.RenderTexture.createFromPool(n.width,n.height,a,r,!1,e,this.canblitDepth,i);o.filterMode=t.FilterMode.Bilinear,this._internalRenderTexture=o}else this._internalRenderTexture=null;r.invertY=!1;let o=this._getRenderTexture();o&&(r.invertY=!!o._isCameraTarget&&!t.LayaGL.renderEngine._screenInvertY),this._prepareCameraToRender(),this._applyViewProject(this.viewMatrix,this.projectionMatrix,r.invertY),this._contextApply(r),this._cameraUniformData&&this._cameraUniformUBO&&this._cameraUniformUBO.setDataByUniformBufferData(this._cameraUniformData),this.clearFlag==e.CameraClearFlags.Sky&&(a.skyRenderer.setRenderElement(this.skyRenderElement),this.skyRenderElement.renderpre(r)),a._componentDriver.callPreRender(),this._preRenderMainPass(r,a,i,n),t.Config3D._multiLighting&&Cluster.instance.update(this,a),this._Render3DProcess.fowardRender(r._contextOBJ,this),a._componentDriver.callPostRender()}viewportPointToRay(e,a){this._rayViewport.x=this.viewport.x,this._rayViewport.y=this.viewport.y,this._rayViewport.width=t.ILaya.stage._width,this._rayViewport.height=t.ILaya.stage._height,Picker.calculateCursorRay(e,this._rayViewport,this._projectionMatrix,this.viewMatrix,null,a)}normalizedViewportPointToRay(e,a){var r=Camera._tempVector20,n=this.normalizedViewport;e.x=e.x*t.Config3D.pixelRatio,e.y=e.y*t.Config3D.pixelRatio,r.x=e.x*n.width,r.y=e.y*n.height,Picker.calculateCursorRay(r,this.viewport,this._projectionMatrix,this.viewMatrix,null,a)}worldToViewportPoint(e,a){t.Matrix4x4.multiply(this._projectionMatrix,this._viewMatrix,this._projectionViewMatrix),this.viewport.project(e,this._projectionViewMatrix,a);var r=t.Config3D.pixelRatio;let n=(a.x-this.viewport.x)/r,i=(a.y-this.viewport.y)/r;a.x=n+this.viewport.x,a.y=i+this.viewport.y,a.x=a.x/t.ILaya.stage.clientScaleX|0,a.y=a.y/t.ILaya.stage.clientScaleY|0}worldToNormalizedViewportPoint(e,a){this.worldToViewportPoint(e,a),a.x=a.x/t.ILaya.stage.width,a.y=a.y/t.ILaya.stage.height}convertScreenCoordToOrthographicCoord(e,a){if(this._orthographic){var r=this.clientWidth,n=this.clientHeight,i=this.orthographicVerticalSize*this.aspectRatio/r,o=this.orthographicVerticalSize/n;return a.x=(-r/2+e.x*t.ILaya.stage.clientScaleX)*i,a.y=(n/2-e.y*t.ILaya.stage.clientScaleY)*o,a.z=(this.nearPlane-this.farPlane)*(e.z+1)/2-this.nearPlane,t.Vector3.transformCoordinate(a,this.transform.worldMatrix,a),!0}return!1}destroy(e=!0){this._internalRenderTexture&&!this._internalRenderTexture._inPool&&t.RenderTexture.recoverToPool(this._internalRenderTexture),this._offScreenRenderTexture=null,this.transform.off(t.Event.TRANSFORM_CHANGED,this,this._onTransformChanged),t.ILaya.stage.off(t.Event.RESIZE,this,this._onScreenSizeChanged),this._cameraEventCommandBuffer={},this._shaderValues.destroy(),RenderContext3D._instance.camera==this&&(RenderContext3D._instance.cameraShaderValue=null,RenderContext3D._instance.camera=null),super.destroy(e)}addCommandBuffer(e,t){var a=this._cameraEventCommandBuffer[e];a||(a=this._cameraEventCommandBuffer[e]=[]),a.indexOf(t)<0&&a.push(t),t._camera=this,t.casterShadow&&this._addCasterShadowCommandBuffer(t)}removeCommandBuffer(e,t){var a=this._cameraEventCommandBuffer[e];if(!a)throw"Camera:unknown event.";var r=a.indexOf(t);-1!=r&&a.splice(r,1),t.casterShadow&&this._removeCasterShadowCommandBuffer(t)}removeCommandBuffers(e){this._cameraEventCommandBuffer[e]&&(this._cameraEventCommandBuffer[e].length=0)}_create(){return new Camera}}Camera._tempVector20=new t.Vector2,Camera._context3DViewPortCatch=new t.Viewport(0,0,0,0),Camera._contextScissorPortCatch=new t.Vector4(0,0,0,0);class LightSprite extends Sprite3D{constructor(){super()}get color(){return this._light.color}set color(e){this._light.color=e}get mode(){return this._light.lightmapBakedType}set mode(e){this._light.lightmapBakedType=e}get intensity(){return this._light.intensity}set intensity(e){this._light.intensity=e}get shadowMode(){return this._light.shadowMode}set shadowMode(e){this._light.shadowMode=e}get shadowDistance(){return this._light.shadowDistance}set shadowDistance(e){this._light.shadowDistance=e}get shadowResolution(){return this._light.shadowResolution}set shadowResolution(e){this._light.shadowResolution=e}get shadowDepthBias(){return this._light.shadowDepthBias}set shadowDepthBias(e){this._light.shadowDepthBias=e}get shadowNormalBias(){return this._light.shadowNormalBias}set shadowNormalBias(e){this._light.shadowNormalBias=e}get shadowStrength(){return this._light.shadowStrength}set shadowStrength(e){this._light.shadowStrength=e}get shadowNearPlane(){return this._light.shadowNearPlane}set shadowNearPlane(e){this._light.shadowNearPlane=e}get lightmapBakedType(){return this._light.lightmapBakedType}set lightmapBakedType(e){this._light.lightmapBakedType=e}get lightWorldMatrix(){return this._light.lightWorldMatrix}_parse(e,t){super._parse(e,t);var a=e.color;this.color.r=a[0],this.color.g=a[1],this.color.b=a[2],this.intensity=e.intensity,this.lightmapBakedType=e.lightmapBakedType}_cloneTo(e,t,a){super._cloneTo(e,t,a);var r=e;r.color=this.color.clone(),r.intensity=this.intensity,r.lightmapBakedType=this.lightmapBakedType}_addToLightQueue(){}_removeFromLightQueue(){}_create(){return new Sprite3D}}class EffectMaterial extends t.Material{constructor(){super(),this.setShaderName("Unlit"),this.setVector4ByIndex(UnlitMaterial.TILINGOFFSET,new t.Vector4(1,1,0,0)),this.setColorByIndex(UnlitMaterial.ALBEDOCOLOR,new t.Color(1,1,1,1)),this.renderMode=EffectMaterial.RENDERMODE_ADDTIVE}get color(){return this.getColorByIndex(UnlitMaterial.ALBEDOCOLOR)}set color(e){this.setColorByIndex(UnlitMaterial.ALBEDOCOLOR,e)}get texture(){return this.getTextureByIndex(UnlitMaterial.ALBEDOTEXTURE)}set texture(e){e?this.addDefine(UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE):this.removeDefine(UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE),this.setTextureByIndex(UnlitMaterial.ALBEDOTEXTURE,e)}get tilingOffset(){return this.getVector4ByIndex(UnlitMaterial.TILINGOFFSET)}set tilingOffset(e){e?this.setVector4ByIndex(UnlitMaterial.TILINGOFFSET,e):this.getVector4ByIndex(UnlitMaterial.TILINGOFFSET).setValue(1,1,0,0)}clone(){var e=new EffectMaterial;return this.cloneTo(e),e}set renderMode(e){switch(e){case EffectMaterial.RENDERMODE_ADDTIVE:this.renderQueue=t.Material.RENDERQUEUE_TRANSPARENT,this.alphaTest=!1,this.depthWrite=!1,this.cull=RenderState.CULL_NONE,this.blend=RenderState.BLEND_ENABLE_ALL,this.blendSrc=RenderState.BLENDPARAM_SRC_ALPHA,this.blendDst=RenderState.BLENDPARAM_ONE,this.depthTest=RenderState.DEPTHTEST_LEQUAL,this.addDefine(t.Material.SHADERDEFINE_ADDTIVEFOG);break;case EffectMaterial.RENDERMODE_ALPHABLENDED:this.renderQueue=t.Material.RENDERQUEUE_TRANSPARENT,this.alphaTest=!1,this.depthWrite=!1,this.cull=RenderState.CULL_NONE,this.blend=RenderState.BLEND_ENABLE_ALL,this.blendSrc=RenderState.BLENDPARAM_SRC_ALPHA,this.blendDst=RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA,this.depthTest=RenderState.DEPTHTEST_LEQUAL,this.removeDefine(t.Material.SHADERDEFINE_ADDTIVEFOG);break;default:throw new Error("MeshEffectMaterial : renderMode value error.")}}}EffectMaterial.RENDERMODE_ADDTIVE=0,EffectMaterial.RENDERMODE_ALPHABLENDED=1;class ExtendTerrainMaterial extends t.Material{constructor(){super(),this.setShaderName("ExtendTerrain"),this.renderMode=ExtendTerrainMaterial.RENDERMODE_OPAQUE}static __initDefine__(){ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1=t.Shader3D.getDefineByName("ExtendTerrain_DETAIL_NUM1"),ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2=t.Shader3D.getDefineByName("ExtendTerrain_DETAIL_NUM2"),ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3=t.Shader3D.getDefineByName("ExtendTerrain_DETAIL_NUM3"),ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4=t.Shader3D.getDefineByName("ExtendTerrain_DETAIL_NUM4"),ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5=t.Shader3D.getDefineByName("ExtendTerrain_DETAIL_NUM5"),ExtendTerrainMaterial.SPLATALPHATEXTURE=t.Shader3D.propertyNameToID("u_SplatAlphaTexture"),ExtendTerrainMaterial.DIFFUSETEXTURE1=t.Shader3D.propertyNameToID("u_DiffuseTexture1"),ExtendTerrainMaterial.DIFFUSETEXTURE2=t.Shader3D.propertyNameToID("u_DiffuseTexture2"),ExtendTerrainMaterial.DIFFUSETEXTURE3=t.Shader3D.propertyNameToID("u_DiffuseTexture3"),ExtendTerrainMaterial.DIFFUSETEXTURE4=t.Shader3D.propertyNameToID("u_DiffuseTexture4"),ExtendTerrainMaterial.DIFFUSETEXTURE5=t.Shader3D.propertyNameToID("u_DiffuseTexture5"),ExtendTerrainMaterial.DIFFUSESCALEOFFSET1=t.Shader3D.propertyNameToID("u_DiffuseScaleOffset1"),ExtendTerrainMaterial.DIFFUSESCALEOFFSET2=t.Shader3D.propertyNameToID("u_DiffuseScaleOffset2"),ExtendTerrainMaterial.DIFFUSESCALEOFFSET3=t.Shader3D.propertyNameToID("u_DiffuseScaleOffset3"),ExtendTerrainMaterial.DIFFUSESCALEOFFSET4=t.Shader3D.propertyNameToID("u_DiffuseScaleOffset4"),ExtendTerrainMaterial.DIFFUSESCALEOFFSET5=t.Shader3D.propertyNameToID("u_DiffuseScaleOffset5")}get splatAlphaTexture(){return this._shaderValues.getTexture(ExtendTerrainMaterial.SPLATALPHATEXTURE)}set splatAlphaTexture(e){this._shaderValues.setTexture(ExtendTerrainMaterial.SPLATALPHATEXTURE,e)}get diffuseTexture1(){return this._shaderValues.getTexture(ExtendTerrainMaterial.DIFFUSETEXTURE1)}set diffuseTexture1(e){this._shaderValues.setTexture(ExtendTerrainMaterial.DIFFUSETEXTURE1,e),this._setDetailNum(1)}get diffuseTexture2(){return this._shaderValues.getTexture(ExtendTerrainMaterial.DIFFUSETEXTURE2)}set diffuseTexture2(e){this._shaderValues.setTexture(ExtendTerrainMaterial.DIFFUSETEXTURE2,e),this._setDetailNum(2)}get diffuseTexture3(){return this._shaderValues.getTexture(ExtendTerrainMaterial.DIFFUSETEXTURE3)}set diffuseTexture3(e){this._shaderValues.setTexture(ExtendTerrainMaterial.DIFFUSETEXTURE3,e),this._setDetailNum(3)}get diffuseTexture4(){return this._shaderValues.getTexture(ExtendTerrainMaterial.DIFFUSETEXTURE4)}set diffuseTexture4(e){this._shaderValues.setTexture(ExtendTerrainMaterial.DIFFUSETEXTURE4,e),this._setDetailNum(4)}get diffuseTexture5(){return this._shaderValues.getTexture(ExtendTerrainMaterial.DIFFUSETEXTURE5)}set diffuseTexture5(e){this._shaderValues.setTexture(ExtendTerrainMaterial.DIFFUSETEXTURE5,e),this._setDetailNum(5)}set diffuseScaleOffset1(e){this._shaderValues.setVector(ExtendTerrainMaterial.DIFFUSESCALEOFFSET1,e)}set diffuseScaleOffset2(e){this._shaderValues.setVector(ExtendTerrainMaterial.DIFFUSESCALEOFFSET2,e)}set diffuseScaleOffset3(e){this._shaderValues.setVector(ExtendTerrainMaterial.DIFFUSESCALEOFFSET3,e)}set diffuseScaleOffset4(e){this._shaderValues.setVector(ExtendTerrainMaterial.DIFFUSESCALEOFFSET4,e)}set diffuseScaleOffset5(e){this._shaderValues.setVector(ExtendTerrainMaterial.DIFFUSESCALEOFFSET5,e)}set renderMode(e){switch(e){case ExtendTerrainMaterial.RENDERMODE_OPAQUE:this.renderQueue=t.Material.RENDERQUEUE_OPAQUE,this.depthWrite=!0,this.cull=RenderState.CULL_BACK,this.blend=RenderState.BLEND_DISABLE,this.depthTest=RenderState.DEPTHTEST_LESS;break;case ExtendTerrainMaterial.RENDERMODE_TRANSPARENT:this.renderQueue=t.Material.RENDERQUEUE_OPAQUE,this.depthWrite=!1,this.cull=RenderState.CULL_BACK,this.blend=RenderState.BLEND_ENABLE_ALL,this.blendSrc=RenderState.BLENDPARAM_SRC_ALPHA,this.blendDst=RenderState.BLENDPARAM_ONE_MINUS_SRC_ALPHA,this.depthTest=RenderState.DEPTHTEST_LEQUAL;break;default:throw new Error("ExtendTerrainMaterial:renderMode value error.")}}_setDetailNum(e){switch(e){case 1:this._shaderValues.addDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1),this._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2),this._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3),this._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4),this._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);break;case 2:this._shaderValues.addDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2),this._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1),this._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3),this._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4),this._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);break;case 3:this._shaderValues.addDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3),this._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1),this._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2),this._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4),this._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);break;case 4:this._shaderValues.addDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4),this._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1),this._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2),this._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3),this._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5);break;case 5:this._shaderValues.addDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM5),this._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM1),this._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM2),this._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM3),this._shaderValues.removeDefine(ExtendTerrainMaterial.SHADERDEFINE_DETAIL_NUM4)}}clone(){var e=new ExtendTerrainMaterial;return this.cloneTo(e),e}}ExtendTerrainMaterial.RENDERMODE_OPAQUE=1,ExtendTerrainMaterial.RENDERMODE_TRANSPARENT=2;class TrailRenderer extends BaseRender{constructor(){super(),this._projectionViewWorldMatrix=new t.Matrix4x4}_getcommonUniformMap(){return["Sprite3D","TrailRender"]}_createBaseRenderNode(){return Laya3DRender.Render3DModuleDataFactory.createMeshRenderNode()}_onAdded(){super._onAdded(),this._trailFilter=new TrailFilter(this),this._setRenderElements()}get time(){return this._trailFilter.time}set time(e){this._trailFilter.time=e}get minVertexDistance(){return this._trailFilter.minVertexDistance}set minVertexDistance(e){this._trailFilter.minVertexDistance=e}get widthMultiplier(){return this._trailFilter.widthMultiplier}set widthMultiplier(e){this._trailFilter.widthMultiplier=e}get widthCurve(){return this._trailFilter.widthCurve}set widthCurve(e){this._trailFilter.widthCurve=e}get colorGradient(){return this._trailFilter.colorGradient}set colorGradient(e){this._trailFilter.colorGradient=e}get textureMode(){return this._trailFilter.textureMode}set textureMode(e){this._trailFilter.textureMode=e}get alignment(){return this._trailFilter.alignment}set alignment(e){this._trailFilter.alignment=e}_onEnable(){super._onEnable(),this.owner._transform.position.cloneTo(this._trailFilter._lastPosition)}renderUpdate(e){this._calculateBoundingBox(),this._renderElements.forEach(((t,a)=>{var r,n;let i=t._geometry;t._renderElementOBJ.isRender=i._prepareRender(e),i._updateRenderParams(e);let o=null!==(r=this.sharedMaterial)&&void 0!==r?r:TrailMaterial.defaultMaterial;o=null!==(n=this.sharedMaterials[a])&&void 0!==n?n:o,t.material=o,t._renderElementOBJ.materialRenderQueue=o.renderQueue}))}get bounds(){return this._bounds}_calculateBoundingBox(){let e=RenderContext3D._instance;this.boundsChange=!1,this._trailFilter._update(e)}clear(){this._trailFilter.clear()}_onDestroy(){this._trailFilter.destroy(),super._onDestroy()}_cloneTo(e){super._cloneTo(e);let t=e;t.time=this.time,t.minVertexDistance=this.minVertexDistance;var a=[],r=this.widthCurve;for(let e=0,t=this.widthCurve.length;e<t;e++)a.push(r[e].clone());t.widthCurve=a,t.colorGradient=this.colorGradient.clone(),t.textureMode=this.textureMode,t.alignment=this.alignment}}class SphericalHarmonicsL2{constructor(){this._coefficients=new Float32Array(27)}getCoefficient(e,t){return this._coefficients[9*e+t]}setCoefficient(e,t,a){this._coefficients[9*e+t]=a}setCoefficients(e,t,a,r,n,i,o,s,l,h){var d=9*e;this._coefficients[d]=t,this._coefficients[++d]=a,this._coefficients[++d]=r,this._coefficients[++d]=n,this._coefficients[++d]=i,this._coefficients[++d]=o,this._coefficients[++d]=s,this._coefficients[++d]=l,this._coefficients[++d]=h}cloneTo(e){if(this!==e)for(var t=this._coefficients,a=e._coefficients,r=0;r<27;r++)a[r]=t[r]}}SphericalHarmonicsL2._default=new SphericalHarmonicsL2;class SphericalHarmonicsL2Generater{static surfaceArea(e,t){return Math.atan2(e*t,Math.sqrt(e*e+t*t+1))}static uv2Dir(e,a,r,n){switch(r){case t.TextureCubeFace.PositiveX:n.x=1,n.y=-a,n.z=-e;break;case t.TextureCubeFace.NegativeX:n.x=-1,n.y=-a,n.z=e;break;case t.TextureCubeFace.PositiveY:n.x=e,n.y=1,n.z=a;break;case t.TextureCubeFace.NegativeY:n.x=e,n.y=-1,n.z=-a;break;case t.TextureCubeFace.PositiveZ:n.x=e,n.y=-a,n.z=1;break;case t.TextureCubeFace.NegativeZ:n.x=-e,n.y=-a,n.z=-1}}static sh_eval_9(e,t,a,r){const n=Math.sqrt,i=Math.PI;switch(e){case 0:return.5*n(1/i);case 1:return.5*-a*n(3/i);case 2:return.5*r*n(3/i);case 3:return.5*-t*n(3/i);case 4:return t*a*.5*n(15/i);case 5:return-a*r*.5*n(15/i);case 6:return.25*(3*r*r-1)*n(5/i);case 7:return-t*r*.5*n(15/i);case 8:return.25*(t*t-a*a)*n(15/i);default:return 0}}static CalCubemapSH(e,a,r,n=!0){let i=r,o=r,s=this._tempSHR.fill(0),l=this._tempSHG.fill(0),h=this._tempSHB.fill(0),d=new t.Vector3;for(let r=0;r<6;r++){let c=e[r];for(let e=0;e<o;e++)for(let u=0;u<i;u++){let _=(u+.5)/i*2-1,m=(e+.5)/o*2-1,f=1/i,S=1/o,g=_-f,p=m-S,D=_+f,T=m+S,E=this.surfaceArea(g,p)-this.surfaceArea(g,T)-this.surfaceArea(D,p)+this.surfaceArea(D,T);this.uv2Dir(_,m,r,d),t.Vector3.normalize(d,d);let x=(u+e*i)*a,M=c[x],R=c[x+1],A=c[x+2];n&&(M=t.Color.gammaToLinearSpace(M),R=t.Color.gammaToLinearSpace(R),A=t.Color.gammaToLinearSpace(A));for(let e=0;e<this.SH_Count;e++){let t=this.sh_eval_9(e,d.x,d.y,d.z);s[e]+=M*t*E,l[e]+=R*t*E,h[e]+=A*t*E}}}let c=new SphericalHarmonicsL2;for(let e=0;e<this.SH_Count;e++){let t=this.k[e],a=s[e];c.setCoefficient(0,e,a*t);let r=l[e];c.setCoefficient(1,e,r*t);let n=h[e];c.setCoefficient(2,e,n*t)}return c}static CalGradientSH(e,a,r,n=!0){console.time("Gradient SH");let i=this._tempSkyPixels,o=this._tempEquatorPixels,s=this._tempGroundPixels;const fillPixelBuffer=(e,a,r)=>{let n=new t.Color(a.x,a.y,a.z,1);r&&n.toLinear(n);let i=Math.min(n.r,1),o=Math.min(n.g,1),s=Math.min(n.b,1);for(let t=0;t<e.length;t+=3)e[t]=i,e[t+1]=o,e[t+2]=s};fillPixelBuffer(i,e,n),fillPixelBuffer(o,a,n),fillPixelBuffer(s,r,n);let l=[];l[t.TextureCubeFace.PositiveY]=i,l[t.TextureCubeFace.NegativeY]=s,l[t.TextureCubeFace.PositiveX]=o,l[t.TextureCubeFace.NegativeX]=o,l[t.TextureCubeFace.PositiveZ]=o,l[t.TextureCubeFace.NegativeZ]=o;let h=SphericalHarmonicsL2Generater.CalCubemapSH(l,3,this.GradientSimulateSize,!1);return console.timeEnd("Gradient SH"),h}}SphericalHarmonicsL2Generater._tempSHR=new Float32Array(9),SphericalHarmonicsL2Generater._tempSHG=new Float32Array(9),SphericalHarmonicsL2Generater._tempSHB=new Float32Array(9),SphericalHarmonicsL2Generater.k=[.28209479177387814,-.32573500793527993,.32573500793527993,-.32573500793527993,.2731371076480198,-.2731371076480198,.07884789131313,-.2731371076480198,.1365685538240099],SphericalHarmonicsL2Generater.GradientSimulateSize=3,SphericalHarmonicsL2Generater.SH_Count=9,SphericalHarmonicsL2Generater._tempSkyPixels=new Float32Array(SphericalHarmonicsL2Generater.GradientSimulateSize*SphericalHarmonicsL2Generater.GradientSimulateSize*3),SphericalHarmonicsL2Generater._tempEquatorPixels=new Float32Array(SphericalHarmonicsL2Generater.GradientSimulateSize*SphericalHarmonicsL2Generater.GradientSimulateSize*3),SphericalHarmonicsL2Generater._tempGroundPixels=new Float32Array(SphericalHarmonicsL2Generater.GradientSimulateSize*SphericalHarmonicsL2Generater.GradientSimulateSize*3);class DirectionLightCom extends Light{constructor(){super(),this._direction=new t.Vector3,this._shadowTwoCascadeSplits=1/3,this._shadowFourCascadeSplits=new t.Vector3,this._lightType=e.LightType.Directional,this.shadowCascadesMode=e.ShadowCascadesMode.NoCascades,this.shadowFourCascadeSplits=new t.Vector3(1/15,.2,7/15),this.shadowTwoCascadeSplits=1/3}set direction(e){e.cloneTo(this.direction),this._dataModule.setDirection(this._direction)}get direction(){return this._direction}get shadowCascadesMode(){return this._dataModule.shadowCascadesMode}set shadowCascadesMode(e){this._dataModule.shadowCascadesMode=e}get shadowTwoCascadeSplits(){return this._dataModule.shadowTwoCascadeSplits}set shadowTwoCascadeSplits(e){this._dataModule.shadowTwoCascadeSplits=e}get shadowFourCascadeSplits(){return this._shadowFourCascadeSplits}set shadowFourCascadeSplits(e){if(e.x>e.y||e.y>e.z||e.z>1)throw"DiretionLight:Invalid value.";e.cloneTo(this._shadowFourCascadeSplits),this._dataModule.setShadowFourCascadeSplits(this._shadowFourCascadeSplits)}_creatModuleData(){this._dataModule=Laya3DRender.Render3DModuleDataFactory.createDirectLight()}_addToLightQueue(){this.owner.scene._directionLights.add(this)}_removeFromLightQueue(){this.owner.scene._directionLights.remove(this)}_create(){return new DirectionLightCom}}class PointLightCom extends Light{constructor(){super(),this._lightType=e.LightType.Point,this.range=6}get range(){return this._range}set range(e){this._range=e,this._dataModule.range=e}_creatModuleData(){this._dataModule=Laya3DRender.Render3DModuleDataFactory.createPointLight()}_addToLightQueue(){this.owner.scene._pointLights.add(this)}_removeFromLightQueue(){this.owner.scene._pointLights.remove(this)}_parse(e,t){super._parse(e,t),this.range=e.range}_cloneTo(t){super._cloneTo(t);var a=t;a.range=this.range,a._lightType=e.LightType.Point}_create(){return new PointLightCom}}class SpotLightCom extends Light{constructor(){super(),this.spotAngle=30,this.range=10,this._direction=new t.Vector3,this._lightType=e.LightType.Spot}set direction(e){e.cloneTo(this.direction),this._dataModule.setDirection(this._direction)}get direction(){return this._direction}get spotAngle(){return this._dataModule.spotAngle}set spotAngle(e){this._dataModule.spotAngle=Math.max(Math.min(e,179),0)}get range(){return this._dataModule.spotRange}set range(e){this._dataModule.spotRange=e}_creatModuleData(){this._dataModule=Laya3DRender.Render3DModuleDataFactory.createSpotLight()}_addToLightQueue(){this.owner.scene._spotLights.add(this)}_removeFromLightQueue(){this.owner.scene._spotLights.remove(this)}_parse(e,t){super._parse(e,t),this.range=e.range,this.spotAngle=e.spotAngle}_cloneTo(e){super._cloneTo(e);var t=e;t.range=this.range,t.spotAngle=this.spotAngle}_create(){return new SpotLightCom}}class VolumetricGI extends Volume{constructor(){super(),this._type=VolumeManager.VolumetricGIType,this._probeCounts=new t.Vector3,this._probeStep=new t.Vector3,this._params=new t.Vector4(8,16,0,0),this._dataModule=Laya3DRender.Render3DModuleDataFactory.createVolumetricGI(),this._dataModule.setParams(this._params),this._volumetricProbeID=VolumetricGI.getID(),this._dataModule.intensity=1}static getID(){return VolumetricGI.volumetricCount++}_onEnable(){super._onEnable(),this._dataModule.updateMark=ILaya3D.Scene3D._updateMark}get irradiance(){return this._irradiance}set irradiance(e){this._irradiance!=e&&(this._irradiance&&this._irradiance._removeReference(),e&&e._addReference(),this._dataModule.irradiance=e._texture,this._dataModule.updateMark=ILaya3D.Scene3D._updateMark)}get distance(){return this._distance}set distance(e){this._distance!=e&&(this._distance&&this._distance._removeReference(),e&&e._addReference(),this._dataModule.distance=e._texture,this._dataModule.updateMark=ILaya3D.Scene3D._updateMark)}get normalBias(){return this._params.z}set normalBias(e){this._params.z=e,this._dataModule.setParams(this._params),this._dataModule.updateMark=ILaya3D.Scene3D._updateMark}get viewBias(){return this._params.w}set viewBias(e){this._params.w=e,this._dataModule.setParams(this._params),this._dataModule.updateMark=ILaya3D.Scene3D._updateMark}get irradianceTexel(){return this._params.x}get distanceTexel(){return this._params.y}get intensity(){return this._dataModule.intensity}set intensity(e){e!=this._dataModule.intensity&&(e=Math.max(e,0),this._dataModule.updateMark=ILaya3D.Scene3D._updateMark)}get probeCounts(){return this._probeCounts}set probeCounts(e){e.equal(this._probeCounts)||(e.cloneTo(this._probeCounts),this._dataModule.setProbeCounts(e),this._dataModule.updateMark=ILaya3D.Scene3D._updateMark)}get probeStep(){return this._probeStep}set probeStep(e){e.equal(this._probeStep)||(e.cloneTo(this._probeStep),this._dataModule.setProbeStep(e),this._dataModule.updateMark=ILaya3D.Scene3D._updateMark)}_onDestroy(){this.irradiance=null,this.distance=null}_cloneTo(e){e.irradiance=this.irradiance,e.distance=this.distance,this._probeCounts.cloneTo(e._probeCounts),this.probeStep.cloneTo(e.probeStep),e.normalBias=this.normalBias,e.viewBias=this.viewBias,e.intensity=this.intensity}}VolumetricGI.volumetricCount=0,e.AreaShape=void 0,(F=e.AreaShape||(e.AreaShape={}))[F.rectangle=0]="rectangle",F[F.ellipse=1]="ellipse";class AreaLightCom extends Light{constructor(){super(),this._lightType=e.LightType.Area,this._lightmapBakedType=e.LightMode.bakeOnly,this._spread=90,this._maxBounces=1024,this._size=new t.Vector2(1,1),this._areaShape=e.AreaShape.rectangle,this._power=100}get lightmapBakedType(){return e.LightMode.bakeOnly}set lightmapBakedType(t){this._lightmapBakedType=e.LightMode.bakeOnly}get shape(){return this._areaShape}set shape(e){this._areaShape=e}set power(e){this._power=e}get power(){return this._power}set size(e){e&&e.cloneTo(this._size)}get size(){return this._size}set spread(e){this._spread=Math.min(Math.max(0,e),180)}get spread(){return this._spread}set maxBounces(e){this._maxBounces=e}get maxBounces(){return this._maxBounces}_addToLightQueue(){}_removeFromLightQueue(){}_parse(e,t){super._parse(e,t)}_cloneTo(e){super._cloneTo(e)}_create(){return new AreaLightCom}}const U=new t.Vector3;new t.Vector3;class LODInfo{constructor(e){this._mincullRate=e,this._renders=[],this._cachSprite3D=[]}set mincullRate(e){this._mincullRate=e}get mincullRate(){return this._mincullRate}set group(e){if(e!=this._group){if(this._group)for(let e=0,a=this._renders.length;e<a;e++){let a=this._renders[e];a.owner.transform.off(t.Event.TRANSFORM_CHANGED,this._group._updateRecaculateFlag),a._LOD=-1}this._group=e;for(let e=0,a=this._renders.length;e<a;e++){let a=this._renders[e];a.owner.transform.on(t.Event.TRANSFORM_CHANGED,this._group,this._group._updateRecaculateFlag),a._LOD=this._lodIndex}}}set renders(e){this._cachSprite3D=e;for(var t=0,a=e.length;t<a;t++)this.addNode(e[t])}get renders(){return this._cachSprite3D}addNode(e){if(!e)return;let a=e;if(a._isRenderNode>0){let r=a.components;for(let e of r)e instanceof BaseRender&&-1==this._renders.indexOf(e)&&this._renders.push(e);this._group&&e.transform.on(t.Event.TRANSFORM_CHANGED,this._group,this._group._updateRecaculateFlag)}for(var r=0,n=e.numChildren;r<n;r++)this.addNode(e.getChildAt(r))}removeNode(a){let r=a;if(r._isRenderNode>0){let n,i=r.components;for(let r of i)r instanceof BaseRender&&-1==(n=this._renders.indexOf(r))&&(this._renders.splice(n,1),r.setRenderbitFlag(e.RenderBitFlag.RenderBitFlag_CullFlag,!1),this._group&&a.transform.off(t.Event.TRANSFORM_CHANGED,this._group._updateRecaculateFlag))}for(var n=0,i=a.numChildren;n<i;n++)this.removeNode(a.getChildAt(n))}removeAllRender(){this._renders.forEach((t=>{t.setRenderbitFlag(e.RenderBitFlag.RenderBitFlag_CullFlag,!1)}))}}class LODGroup extends t.Component{constructor(){super(),this._needcaculateBounds=!1,this._lods=[],this._visialIndex=-1,this._bounds=new Bounds,this._lodPosition=new t.Vector3,this.runInEditor=!0}shadowCullPass(){return!1}get lods(){return this._lods}set lods(e){this._lods=e;for(var t=0,a=this._lods.length;t<a;t++){let e=this._lods[t];e._lodIndex=t,e.group=this}this._updateRecaculateFlag(),this._lodCount=this._lods.length}get nowRate(){return this._nowRate}get bounds(){return this.recalculateBounds(),this._bounds}_onEnable(){super._onEnable();for(var e=0,t=this._lods.length;e<t;e++)this._setLODinvisible(e);this._visialIndex=-1,this._applyVisibleRate(1)}_onDisable(){super._onDisable(),this._lods.forEach((e=>{e.removeAllRender()}))}_applyVisibleRate(e){for(var t=0;t<this._lodCount;t++){if(e>this._lods[t].mincullRate)return-1==t?(this._setLODvisible(t),void(this._visialIndex=t)):t==this._visialIndex?void 0:(-1!=this._visialIndex&&this._setLODinvisible(this._visialIndex),this._setLODvisible(t),void(this._visialIndex=t))}-1!=this._visialIndex&&(this._setLODinvisible(this._visialIndex),this._visialIndex=-1)}_setLODvisible(t){let a=this._lods[t];for(var r=0,n=a._renders.length;r<n;r++)a._renders[r].setRenderbitFlag(e.RenderBitFlag.RenderBitFlag_CullFlag,!1)}_setLODinvisible(t){let a=this._lods[t];for(var r=0,n=a._renders.length;r<n;r++)a._renders[r].setRenderbitFlag(e.RenderBitFlag.RenderBitFlag_CullFlag,!0)}onDestroy(){this._lods.forEach((e=>{let t=e._renders;for(var a=0;a<t.length;a++)e.removeNode(t[a].owner)}))}_updateRecaculateFlag(){this._needcaculateBounds=!0}_cloneTo(e){super._cloneTo(e);let cloneHierachFun=(e,t,a)=>{let r=((e,t)=>{let a=[],r=e;for(;r;)r instanceof Sprite3D&&a.push(r),r=r.parent;let n=t;for(;n&&-1==a.indexOf(n);)n=n.parent;return n})(e,t);if(!r)return null;let n=[];Utils3D._getHierarchyPath(r,e,n);let i=[];Utils3D._getHierarchyPath(r,t,i);let o=Utils3D._getParentNodeByHierarchyPath(a,n);return o?Utils3D._getNodeByHierarchyPath(o,i):null},t=[];for(let a=0,r=this._lodCount;a<r;a++){let r=this._lods[a],n=new LODInfo(r.mincullRate);t.push(n),r._renders.forEach((t=>{let a=cloneHierachFun(this.owner,t.owner,e.owner);a&&n.addNode(a)}))}e.lods=t}recalculateBounds(){if(!this._needcaculateBounds)return;let e=!0;for(let t=0,a=this._lods.length;t<a;t++){this._lods[t]._renders.forEach((t=>{e?(t.bounds.cloneTo(this._bounds),e=!1):Bounds.merge(this._bounds,t.bounds,this._bounds)}))}this._lodPosition=this._bounds.getCenter();let t=this._bounds.getExtent();this._size=2*Math.max(t.x,t.y,t.z),this._needcaculateBounds=!1}onPreRender(){this.recalculateBounds();let e=this.owner.scene.cullInfoCamera,a=e.maxlocalYDistance,r=e.boundFrustum;t.Vector3.subtract(this._lodPosition,e.transform.position,U);let n=U.length();if(n>e.farPlane||0==r.containsPoint(this._lodPosition))return;let i=n/e.farPlane*a,o=this._size/i;this._nowRate=o,this._applyVisibleRate(o)}}class PixelLineData{constructor(){this.startPosition=new t.Vector3,this.endPosition=new t.Vector3,this.startColor=new t.Color,this.endColor=new t.Color,this.startNormal=new t.Vector3,this.endNormal=new t.Vector3}cloneTo(e){this.startPosition.cloneTo(e.startPosition),this.endPosition.cloneTo(e.endPosition),this.startColor.cloneTo(e.startColor),this.endColor.cloneTo(e.endColor),this.startNormal.cloneTo(e.startPosition),this.endNormal.cloneTo(e.endPosition)}}class PixelLineFilter extends GeometryElement{constructor(e,a){super(t.MeshTopology.Lines,t.DrawType.DrawArray),this._floatCountPerVertices=10,this._minUpdate=Number.MAX_VALUE,this._maxUpdate=Number.MIN_VALUE,this._floatBound=new Float32Array(6),this._calculateBound=!0,this._maxLineCount=0,this._lineCount=0;var r=2*a;this._ownerRender=e,this._maxLineCount=a,this._vertices=new Float32Array(r*this._floatCountPerVertices),this._vertexBuffer=Laya3DRender.renderOBJCreate.createVertexBuffer3D(PixelLineVertex.vertexDeclaration.vertexStride*r,t.BufferUsage.Static,!1),this._vertexBuffer.vertexDeclaration=PixelLineVertex.vertexDeclaration;var n=new t.BufferState;this.bufferState=n,this.bufferState.applyState([this._vertexBuffer],null);var i=PixelLineFilter._tempVector0,o=PixelLineFilter._tempVector1;i.setValue(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),o.setValue(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE),this._bounds=new Bounds(i,o)}_getType(){return PixelLineFilter._type}_resizeLineData(e){var a=2*e,r=this._vertices;this._vertexBuffer.destroy(),this._maxLineCount=e;var n=a*this._floatCountPerVertices;this._vertices=new Float32Array(n),this._vertexBuffer=Laya3DRender.renderOBJCreate.createVertexBuffer3D(PixelLineVertex.vertexDeclaration.vertexStride*a,t.BufferUsage.Static,!1),this._vertexBuffer.vertexDeclaration=PixelLineVertex.vertexDeclaration,n<r.length?(this._vertices.set(new Float32Array(r.buffer,0,n)),this._vertexBuffer.setData(this._vertices.buffer,0,0,4*n)):(this._vertices.set(r),this._vertexBuffer.setData(this._vertices.buffer,0,0,4*r.length)),this.bufferState.applyState([this._vertexBuffer],null),this._minUpdate=Number.MAX_VALUE,this._maxUpdate=Number.MIN_VALUE}_updateLineVertices(e,a,r,n,i,o=null,s=null){a&&(this._vertices[e+0]=a.x,this._vertices[e+1]=a.y,this._vertices[e+2]=a.z),n&&(this._vertices[e+3]=n.r,this._vertices[e+4]=n.g,this._vertices[e+5]=n.b,this._vertices[e+6]=n.a),o&&(this._vertices[e+7]=o.x,this._vertices[e+8]=o.y,this._vertices[e+9]=o.z),r&&(this._vertices[e+10]=r.x,this._vertices[e+11]=r.y,this._vertices[e+12]=r.z),i&&(this._vertices[e+13]=i.r,this._vertices[e+14]=i.g,this._vertices[e+16]=i.b,this._vertices[e+16]=i.a),s&&(this._vertices[e+17]=s.x,this._vertices[e+18]=s.y,this._vertices[e+19]=s.z),this._minUpdate=Math.min(this._minUpdate,e),this._maxUpdate=Math.max(this._maxUpdate,e+2*this._floatCountPerVertices);var l=this._bounds,h=this._floatBound,d=l.getMin(),c=l.getMax();t.Vector3.min(d,a,d),t.Vector3.min(d,r,d),t.Vector3.max(c,a,c),t.Vector3.max(c,r,c),l.setMin(d),l.setMax(c),h[0]=d.x,h[1]=d.y,h[2]=d.z,h[3]=c.x,h[4]=c.y,h[5]=c.z,this._ownerRender.boundsChange=!0}_reCalculateBound(){if(this._calculateBound){var e=this._vertices,t=PixelLineFilter._tempVector0,a=PixelLineFilter._tempVector1;t.setValue(Number.MAX_VALUE,Number.MAX_VALUE,Number.MAX_VALUE),a.setValue(-Number.MAX_VALUE,-Number.MAX_VALUE,-Number.MAX_VALUE);for(var r=0;r<2*this._lineCount;++r){var n=this._floatCountPerVertices*r,i=e[n+0],o=e[n+1],s=e[n+2];t.x=Math.min(i,t.x),t.y=Math.min(o,t.y),t.z=Math.min(s,t.z),a.x=Math.max(i,a.x),a.y=Math.max(o,a.y),a.z=Math.max(s,a.z)}this._bounds.setMin(t),this._bounds.setMax(a);var l=this._floatBound;l[0]=t.x,l[1]=t.y,l[2]=t.z,l[3]=a.x,l[4]=a.y,l[5]=a.z,this._calculateBound=!1}}_removeLineData(e){var t=2*this._floatCountPerVertices,a=e+1,r=e*t,n=this._vertices,i=new Float32Array(n.buffer,a*t*4,(this._lineCount-a)*t);n.set(i,r),this._minUpdate=Math.min(this._minUpdate,r),this._maxUpdate=Math.max(this._maxUpdate,r+i.length),this._lineCount--;var o=this._floatBound,s=n[r],l=n[r+1],h=n[r+2],d=n[r+7],c=n[r+8],u=n[r+9],_=o[0],m=o[1],f=o[2],S=o[3],g=o[4],p=o[5];s!==_&&s!==S&&l!==m&&l!==g&&h!==f&&h!==p&&d!==_&&d!==S&&c!==m&&c!==g&&u!==f&&u!==p||(this._calculateBound=!0)}_updateLineData(e,t,a,r,n,i=null,o=null){var s=2*this._floatCountPerVertices;this._updateLineVertices(e*s,t,a,r,n,i,o),this._calculateBound=!0}_updateLineDatas(e,t){for(var a=2*this._floatCountPerVertices,r=t.length,n=0;n<r;n++){var i=t[n];this._updateLineVertices((e+n)*a,i.startPosition,i.endPosition,i.startColor,i.endColor,i.startNormal,i.endNormal)}this._calculateBound=t.length>0}_getLineData(e,t){var a=t.startPosition,r=t.startColor,n=t.endPosition,i=t.endColor,o=t.startNormal,s=t.endNormal,l=this._vertices,h=e*this._floatCountPerVertices*2;a.x=l[h+0],a.y=l[h+1],a.z=l[h+2],r.r=l[h+3],r.g=l[h+4],r.b=l[h+5],r.a=l[h+6],o.x=l[h+7],o.y=l[h+8],o.z=l[h+9],n.x=l[h+10],n.y=l[h+11],n.z=l[h+12],i.r=l[h+13],i.g=l[h+14],i.b=l[h+15],i.a=l[h+16],s.x=l[h+17],s.y=l[h+18],s.z=l[h+19]}_updateRenderParams(e){this.clearRenderParams(),this._minUpdate!==Number.MAX_VALUE&&this._maxUpdate!==Number.MIN_VALUE&&(this._vertexBuffer.setData(this._vertices.buffer,4*this._minUpdate,4*this._minUpdate,4*(this._maxUpdate-this._minUpdate)),this._minUpdate=Number.MAX_VALUE,this._maxUpdate=Number.MIN_VALUE),this._lineCount>0&&this.setDrawArrayParams(0,2*this._lineCount)}destroy(){this._destroyed||(super.destroy(),this.bufferState.destroy(),this._vertexBuffer.destroy(),this._bufferState=null,this._vertexBuffer=null,this._vertices=null)}}PixelLineFilter._tempVector0=new t.Vector3,PixelLineFilter._tempVector1=new t.Vector3,PixelLineFilter._type=GeometryElement._typeCounter++;class PixelLineRenderer extends BaseRender{constructor(){super(),this._isRenderActive=!1,this._isInRenders=!1,this._needUpdatelines=!1,this._lines=[],this._projectionViewWorldMatrix=new t.Matrix4x4,this._pixelLineFilter=new PixelLineFilter(this,20),this._baseRenderNode.shaderData.addDefine(MeshSprite3DShaderDeclaration.SHADERDEFINE_COLOR),this.geometryBounds=this._pixelLineFilter._bounds}get bounds(){return this._pixelLineFilter._reCalculateBound(),super.bounds}get pixelLinesDatas(){return this._needUpdatelines&&this._updateLineDatas(),this._lines}set pixelLinesDatas(e){this.clear(),this.addLines(e)}get maxLineCount(){return this._pixelLineFilter._maxLineCount}set maxLineCount(e){this._pixelLineFilter._resizeLineData(e),this._pixelLineFilter._lineCount=Math.min(this._pixelLineFilter._lineCount,e)}get lineCount(){return this._pixelLineFilter._lineCount}_onAdded(){super._onAdded(),this._changeRenderObjects(0,PixelLineMaterial.defaultMaterial)}_onEnable(){this._isRenderActive=!0,0!=this._pixelLineFilter._lineCount&&(this.owner.scene._addRenderObject(this),this._isInRenders=!0),this._setBelongScene(this.owner.scene)}_onDisable(){this._pixelLineFilter&&0!=this._pixelLineFilter._lineCount&&this._isRenderActive&&(this.owner.scene._removeRenderObject(this),this._isInRenders=!1),this._isRenderActive=!1,this._setUnBelongScene()}_createBaseRenderNode(){return Laya3DRender.Render3DModuleDataFactory.createMeshRenderNode()}renderUpdate(e){this._renderElements.forEach(((t,a)=>{var r,n;t._renderElementOBJ.isRender=t._geometry._prepareRender(e),t._geometry._updateRenderParams(e);let i=null!==(r=this.sharedMaterial)&&void 0!==r?r:UnlitMaterial.defaultMaterial;i=null!==(n=this.sharedMaterials[a])&&void 0!==n?n:i,t.material=i,t._renderElementOBJ.materialRenderQueue=i.renderQueue}))}_changeRenderObjects(e,t){var a=this._renderElements;t||(t=PixelLineMaterial.defaultMaterial);var r=a[e];r||(r=a[e]=new RenderElement),r.setTransform(this.owner._transform),r.setGeometry(this._pixelLineFilter),r.render=this,r.material=t,this._setRenderElements()}_pixelLinesDataChange(e){if(null!=e){let t=parseInt(e),a=this._lines[t];a&&this.setLine(t,a.startPosition,a.endPosition,a.startColor,a.endColor)}}addLine(e,t,a,r){if(this._pixelLineFilter._lineCount===this._pixelLineFilter._maxLineCount)throw"PixelLineSprite3D: lineCount has equal with maxLineCount.";this._pixelLineFilter._updateLineData(this._pixelLineFilter._lineCount++,e,t,a,r),this._isRenderActive&&!this._isInRenders&&this._pixelLineFilter._lineCount>0&&(this.owner.scene&&this.owner.scene._addRenderObject(this),this._isInRenders=!0),this._needUpdatelines=!0}addLineWithNormal(e,t,a,r,n,i){if(this._pixelLineFilter._lineCount===this._pixelLineFilter._maxLineCount)throw"PixelLineSprite3D: lineCount has equal with maxLineCount.";this._pixelLineFilter._updateLineData(this._pixelLineFilter._lineCount++,e,t,a,r,n,i),this._isRenderActive&&!this._isInRenders&&this._pixelLineFilter._lineCount>0&&(this.owner.scene&&this.owner.scene._addRenderObject(this),this._isInRenders=!0),this._needUpdatelines=!0}addLines(e){var t=this._pixelLineFilter._lineCount,a=e.length;if(t+a>this._pixelLineFilter._maxLineCount)throw"PixelLineSprite3D: lineCount plus lines count must less than maxLineCount.";this._pixelLineFilter._updateLineDatas(t,e),this._pixelLineFilter._lineCount+=a,this.boundsChange=!0,this._isRenderActive&&!this._isInRenders&&this._pixelLineFilter._lineCount>0&&(this.owner.scene&&this.owner.scene._addRenderObject(this),this._isInRenders=!0),this._needUpdatelines=!0}removeLine(e){if(!(e<this._pixelLineFilter._lineCount))throw"PixelLineSprite3D: index must less than lineCount.";this._pixelLineFilter._removeLineData(e),this._isRenderActive&&this._isInRenders&&0==this._pixelLineFilter._lineCount&&(this.owner.scene&&this.owner.scene._removeRenderObject(this),this._isInRenders=!1),this._needUpdatelines=!0}setLine(e,t,a,r,n){if(!(e<this._pixelLineFilter._lineCount))throw"PixelLineSprite3D: index must less than lineCount.";{this._pixelLineFilter._updateLineData(e,t,a,r,n);let i=this._lines[e];i&&(r.cloneTo(i.startColor),n.cloneTo(i.endColor),t.cloneTo(i.startPosition),a.cloneTo(i.endPosition))}}setLineWithNormal(e,t,a,r,n,i,o){if(!(e<this._pixelLineFilter._lineCount))throw"PixelLineSprite3D: index must less than lineCount.";{this._pixelLineFilter._updateLineData(e,t,a,r,n,i,o);let s=this._lines[e];s&&(r.cloneTo(s.startColor),n.cloneTo(s.endColor),t.cloneTo(s.startPosition),a.cloneTo(s.endPosition),i&&i.cloneTo(s.startNormal),o&&o.cloneTo(s.endNormal))}}getLine(e,t){if(!(e<this.lineCount))throw"PixelLineSprite3D: index must less than lineCount.";this._pixelLineFilter._getLineData(e,t)}_updateLineDatas(){let e=this.lineCount;this._lines=[];for(let t=0;t<e;t++){let e=new PixelLineData;this.getLine(t,e),this._lines.push(e)}this._needUpdatelines=!1}clear(){this._pixelLineFilter._lineCount=0,this._isRenderActive&&this._isInRenders&&(this.owner.scene&&this.owner.scene._removeRenderObject(this),this._isInRenders=!1)}_onDestroy(){this._pixelLineFilter.destroy(),this._pixelLineFilter=null,super._onDestroy()}_cloneTo(e){super._cloneTo(e);let t=e;t.maxLineCount=this.maxLineCount;const a=this.lineCount;let r=new PixelLineData;for(let e=0,n=a;e<n;e++)this.getLine(e,r),t.addLine(r.startPosition,r.endPosition,r.startColor,r.endColor)}}class AnimatorPlayState{constructor(){this._currentState=null}get currentState(){return this._currentState}set currentState(e){this._currentState=e,this._currentState.curTransition=null}get normalizedTime(){return this._normalizedTime}get duration(){return this._duration}get animatorState(){return this._currentState}_resetPlayState(e,t){this._finish=!1,this._playEventIndex=0,this._startPlayTime=e,this._elapsedTime=e,this._lastIsFront=!0,this._normalizedTime=this._elapsedTime/t;var a=this._normalizedTime%1;this._normalizedPlayTime=a<0?a+1:a}_cloneTo(e){e._finish=this._finish,e._startPlayTime=this._startPlayTime,e._playEventIndex=this._playEventIndex,e._elapsedTime=this._elapsedTime,e._normalizedTime=this._normalizedTime,e._normalizedPlayTime=this._normalizedPlayTime,e._lastIsFront=this._lastIsFront}}class AnimatorControllerLayer{constructor(e){this._referenceCount=0,this._playType=-1,this._crossDuration=-1,this._crossMark=0,this._crossNodesOwnersCount=0,this._crossNodesOwners=[],this._crossNodesOwnersIndicesMap={},this._srcCrossClipNodeIndices=[],this._destCrossClipNodeIndices=[],this._states=[],this._playStateInfo=new AnimatorPlayState,this._crossPlayStateInfo=new AnimatorPlayState,this.blendingMode=AnimatorControllerLayer.BLENDINGMODE_OVERRIDE,this.defaultWeight=1,this.playOnWake=!0,this.enable=!0,this.name=e}get defaultState(){return this._defaultState}set defaultState(e){this._defaultState=e}get avatarMask(){return this._avatarMask}set avatarMask(e){this._avatarMask=e}get defaultStateName(){return this._defaultState?this._defaultState.name:null}set defaultStateName(e){if(this._defaultState=this.getAnimatorState(e),null==this._defaultState)if(0==this._states.length)this._defaultStateNameCatch=e;else for(var t=this._states.length-1;t>=0;t--)if(this._states[t].name==e){this._defaultState=this._states[t];break}}get states(){return this._states}set states(e){if(this._states!==e){if(this._states.length>0){let t=this._states.filter((t=>-1==e.indexOf(t)));for(let e of t)this.removeState(e)}if(e.length>0){let t=e.filter((e=>-1==this._states.indexOf(e)));for(let e of t)this.addState(e)}this._states.length=0,this._states.push(...e)}}_removeClip(e,t,a){var r=a._clip,n=e[t];if(e.splice(t,1),this._animator){var i=r._nodes,o=n._nodeOwners;r._removeReference();for(var s=0,l=i.count;s<l;s++)this._animator._removeKeyframeNodeOwner(o,i.getNodeByIndex(s))}}_getReferenceCount(){return this._referenceCount}_addReference(e=1){for(var t=0,a=this._states.length;t<a;t++)this._states[t]._addReference(e);this._referenceCount+=e}_removeReference(e=1){for(var t=0,a=this._states.length;t<a;t++)this._states[t]._removeReference(e);this._referenceCount-=e}_clearReference(){this._removeReference(-this._referenceCount)}getCurrentPlayState(){return this._playStateInfo}getAnimatorState(e){var t;for(let a=0;a<this._states.length;a++)if(this._states[a].name==e){t=this._states[a];break}return t||null}addState(e){var t=e.name;if(this.getAnimatorState(t))throw"AnimatorControllerLayer:this stat's name has exist.";this._states.push(e),t==this._defaultStateNameCatch&&(this._defaultState=e,this._defaultStateNameCatch=null),this._animator&&(e._clip&&e._clip._addReference(),this._animator._getOwnersByClip(e))}removeState(e){for(var t=this._states,a=-1,r=0,n=t.length;r<n;r++)if(t[r]===e){a=r;break}-1!==a&&this._removeClip(t,a,e)}destroy(){this._clearReference(),this._states=[],this._playStateInfo=null,this._crossPlayStateInfo=null,this._defaultState=null}cloneTo(e){var t=e;t.name=this.name,t.blendingMode=this.blendingMode,t.defaultWeight=this.defaultWeight,t.playOnWake=this.playOnWake,this.avatarMask&&(t.avatarMask=this._avatarMask.clone())}clone(){var e=new AnimatorControllerLayer(this.name);return this.cloneTo(e),e}}AnimatorControllerLayer.BLENDINGMODE_OVERRIDE=0,AnimatorControllerLayer.BLENDINGMODE_ADDTIVE=1;class AnimatorResource{static getAnimatorResource(e,a){return"simpleSkinnedMeshRenderer"===a?e.getComponent(SimpleSkinnedMeshRenderer):e.getComponent(t.ClassUtils.getClass(a))}}class AnimatorState extends t.EventDispatcher{constructor(){super(),this._referenceCount=0,this._clip=null,this._nodeOwners=[],this._currentFrameIndices=null,this._isLooping=0,this._realtimeDatas=[],this._scripts=null,this._transitions=[],this._soloTransitions=[],this.speed=1,this.clipStart=0,this.clipEnd=1,this.cycleOffset=0}get clip(){return this._clip}set clip(a){if(this._clip!==a){if(this._clip&&this._referenceCount>0&&this._clip._removeReference(this._referenceCount),a){var r=this._realtimeDatas,n=a._nodes,i=n.count;this._currentFrameIndices=new Int16Array(i),this._resetFrameIndices(),this._referenceCount>0&&a._addReference(this._referenceCount),this._realtimeDatas.length=i;for(var o=0;o<i;o++)switch(n.getNodeByIndex(o).type){case e.KeyFrameValueType.Float:break;case e.KeyFrameValueType.Position:case e.KeyFrameValueType.Scale:case e.KeyFrameValueType.RotationEuler:case e.KeyFrameValueType.Vector3:r[o]=new t.Vector3;break;case e.KeyFrameValueType.Rotation:r[o]=new t.Quaternion;break;case e.KeyFrameValueType.Vector2:r[o]=new t.Vector2;break;case e.KeyFrameValueType.Vector4:case e.KeyFrameValueType.Color:r[o]=new t.Vector4;break;default:throw"AnimationClipParser04:unknown type."}}this._clip=a}}get islooping(){return 0!=this._isLooping?1==this._isLooping:this._clip.islooping}get transitions(){return this._transitions}set transitions(e){this._transitions=e}get soloTransitions(){return this._soloTransitions}set soloTransitions(e){this._soloTransitions=e}_eventStart(e,t){if(this.event(AnimatorState.EVENT_OnStateEnter),this._scripts)for(var a=0,r=this._scripts.length;a<r;a++)this._scripts[a].setPlayScriptInfo(e,t,this),this._scripts[a].onStateEnter()}_eventExit(){if(this.event(AnimatorState.EVENT_OnStateExit),this.curTransition=null,this._scripts)for(let e=0,t=this._scripts.length;e<t;e++)this._scripts[e].onStateExit()}_eventStateUpdate(e){if(this.event(AnimatorState.EVENT_OnStateUpdate,e),this._scripts)for(var t=0,a=this._scripts.length;t<a;t++)this._scripts[t].onStateUpdate(e)}_eventLoop(){if(this.event(AnimatorState.EVENT_OnStateLoop),this._scripts)for(let e=0,t=this._scripts.length;e<t;e++)this._scripts[e].onStateLoop&&this._scripts[e].onStateLoop()}_eventtransition(e,t){let a=this._soloTransitions.length;if(a>0){for(var r=0;r<a;r++)if(this._soloTransitions[r].check(e,t))return this._soloTransitions[r];return null}let n=this._transitions.length;for(r=0;r<n;r++)if(this._transitions[r].check(e,t))return this._transitions[r];return null}_getReferenceCount(){return this._referenceCount}_addReference(e=1){this._clip&&this._clip._addReference(e),this._referenceCount+=e}_removeReference(e=1){this._clip&&this._clip._removeReference(e),this._referenceCount-=e}_clearReference(){this._removeReference(-this._referenceCount)}_resetFrameIndices(){for(var e=0,t=this._currentFrameIndices.length;e<t;e++)this._currentFrameIndices[e]=-1}addScript(e){var t=new e;return this._scripts=this._scripts||[],this._scripts.push(t),t}getScript(e){if(this._scripts)for(var t=0,a=this._scripts.length;t<a;t++){var r=this._scripts[t];if(r instanceof e)return r}return null}getScripts(e){var t=null;if(this._scripts)for(var a=0,r=this._scripts.length;a<r;a++){var n=this._scripts[a];n instanceof e&&(t=t||[]).push(n)}return t}cloneTo(e){var t=e;t.name=this.name,t.speed=this.speed,t.clipStart=this.clipStart,t.clipEnd=this.clipEnd,t.clip=this._clip}clone(){var e=new AnimatorState;return this.cloneTo(e),e}}AnimatorState.EVENT_OnStateEnter="OnStartEnter",AnimatorState.EVENT_OnStateUpdate="OnStateUpdate",AnimatorState.EVENT_OnStateLoop="OnStateLoop",AnimatorState.EVENT_OnStateExit="OnStateExit";class AvatarMask{constructor(e){this._avatarPathMap=(null==e?void 0:e._avatarPathMap)||{}}getTransformActive(e){return this._avatarPathMap[e]}setTransformActive(e,t){this._avatarPathMap[e]=t}getAllTranfromPath(){return this._avatarPathMap}clone(){var e=new AvatarMask;return this.cloneTo(e),e}cloneTo(e){var t=e;for(var a in this._avatarPathMap)t.setTransformActive(a,this._avatarPathMap[a])}}class Animator extends t.Component{constructor(){super(),this._keyframeNodeOwners=[],this._updateMode=t.AnimatorUpdateMode.Normal,this._lowUpdateDelty=20,this._animatorParams={},this._linkAvatarSpritesData={},this._linkAvatarSprites=[],this._renderableSprites=[],this.cullingMode=Animator.CULLINGMODE_CULLCOMPLETELY,this._finishSleep=!1,this._controllerLayers=[],this._speed=1,this._keyframeNodeOwnerMap={},this._updateMark=0}set controller(e){this._controller=e,this._controller&&this._controller.updateTo(this)}get controller(){return this._controller}get speed(){return this._speed}set speed(e){this._speed=e}set updateMode(e){this._updateMode=e}set lowUpdateDelty(e){this._lowUpdateDelty=e}get controllerLayerCount(){return this._controllerLayers.length}set animatorParams(e){this._animatorParams=e}get animatorParams(){return this._animatorParams}set sleep(e){this._finishSleep=e}get sleep(){return this._finishSleep}_addKeyframeNodeOwner(e,a,r){var n=a._indexInList,i=a.fullPath,o=this._keyframeNodeOwnerMap[i];let s=!1;if(o)o.referenceCount++,e[n]=o;else{for(var l=r,h=0,d=a.propertyCount;h<d&&((l=l[a.getPropertyByIndex(h)])instanceof t.Material&&(s=!0),l);h++);(o=this._keyframeNodeOwnerMap[i]=new KeyframeNodeOwner).isMaterial=s,o.fullPath=i,o.indexInList=this._keyframeNodeOwners.length,o.referenceCount=1,o.propertyOwner=r,o.nodePath=a.nodePath,o.callbackFunData=a.callbackFunData,o.callParams=a.callParams,o.getCallbackNode();var c=a.propertyCount,u=[];for(h=0;h<c;h++)u[h]=a.getPropertyByIndex(h);if(o.property=u,o.type=a.type,l)if(0===a.type)o.defaultValue=l;else{var _=new l.constructor;l.cloneTo(_),o.defaultValue=_,o.value=new l.constructor,o.crossFixedValue=new l.constructor}this._keyframeNodeOwners.push(o),e[n]=o}}_removeKeyframeNodeOwner(e,t){var a=t.fullPath,r=this._keyframeNodeOwnerMap[a];r&&(r.referenceCount--,0===r.referenceCount&&(delete this._keyframeNodeOwnerMap[a],this._keyframeNodeOwners.splice(this._keyframeNodeOwners.indexOf(r),1)),e[t._indexInList]=null)}_getOwnersByClip(e){if(e._clip){var t=e._clip._nodes,a=t.count,r=e._nodeOwners;r.length=a;for(var n=0;n<a;n++){for(var i=t.getNodeByIndex(n),o=this.owner,s=0,l=i.ownerPathCount;s<l;s++){var h=i.getOwnerPathByIndex(s);if(""===h)break;if(!(o=o.getChildByName(h)))break}if(o){var d=i.propertyOwner;const e=o;d&&(o=o[d]),o||(o=AnimatorResource.getAnimatorResource(e,d)),o&&this._addKeyframeNodeOwner(r,i,o)}}}}_updatePlayer(e,t,a,r,n){var i=e._clip._duration*(e.clipEnd-e.clipStart),o=t._elapsedTime,s=o+a;t._lastElapsedTime=o,t._elapsedTime=s;var l=s/i;t._normalizedTime=l;var h=l%1;if(t._normalizedPlayTime=h<0?h+1:h,t._duration=i,s>=i)if(r){let t=Math.floor(s/i);Math.floor(o/i)!=t&&e._eventLoop()}else t._finish=!0,t._elapsedTime=i,t._normalizedPlayTime=1;!t._finish&&e._eventStateUpdate(t._normalizedPlayTime),this._applyTransition(e,n,e._eventtransition(t._normalizedPlayTime,this.animatorParams))}_applyTransition(e,t,a){a&&a!=e.curTransition&&(e.curTransition=a,this.crossFade(a.destState.name,a.transduration,t,a.transstartoffset))}_updateStateFinish(e,t){t._finish&&e._eventExit()}_updateEventScript(e,a){if(!this.owner._getBit(t.NodeFlags.HAS_SCRIPT))return;let r=e._clip,n=r._animationEvents;if(!n||0==n.length||null==a.animatorState)return;let i=r._duration,o=a._normalizedPlayTime*i,s=a._parentPlayTime;null==s&&(s=i*a.animatorState.clipStart),o<s&&this._eventScript(n,s,i*a.animatorState.clipEnd),this._eventScript(n,s,o),a._parentPlayTime=o}_eventScript(e,t,a){let r=this.owner.components;for(let n=0,i=e.length;n<i;n++){let i=e[n];if(i.time>t&&i.time<=a)for(let e=0,t=r.length;e<t;e++){let t=r[e];if(t._isScript()){let e=t[i.eventName];e&&e.apply(t,i.params)}}else if(i.time>a)break}}_updateClipDatas(e,t,a,r=null){var n=e._clip,i=n._duration,o=e.clipStart*i+a._normalizedPlayTime*a._duration,s=e._currentFrameIndices,l=a._elapsedTime>a._lastElapsedTime;n._evaluateClipDatasRealTime(n._nodes,o,s,t,l,e._realtimeDatas,r)}_applyFloat(e,t,a,r,n,i){if(t.updateMark===this._updateMark)if(a)e+=r*i;else{e=e+r*(i-e)}else if(n)e=a?t.defaultValue+i:i;else if(a)e=t.defaultValue+r*i;else{var o=t.defaultValue;e=o+r*(i-o)}return e}_applyVec2(e,t,a,r,n,i){if(!e)return null;if(t.updateMark===this._updateMark)if(a)e.x+=r*i.x,e.y+=r*i.y;else{var o=e;e.x=o.x+r*(i.x-o.x),e.y=o.y+r*(i.y-o.y)}else if(n)a?(e.x=t.defaultValue.x+i.x,e.y=t.defaultValue.y+i.y):i.cloneTo(e);else if(a)e.x=t.defaultValue.x+r*i.x,e.y=t.defaultValue.y+r*i.y;else{var s=t.defaultValue;e.x=s.x+r*(i.x-s.x),e.y=s.y+r*(i.y-s.y)}return e}_applyVec3(e,t,a,r,n,i){if(!e)return null;if(t.updateMark===this._updateMark)if(a)e.x+=r*i.x,e.y+=r*i.y,e.z+=r*i.z;else{var o=e;e.x=o.x+r*(i.x-o.x),e.y=o.y+r*(i.y-o.y),e.z=o.z+r*(i.z-o.z)}else if(n)a?(e.x=t.defaultValue.x+i.x,e.y=t.defaultValue.y+i.y,e.z=t.defaultValue.z+i.z):i.cloneTo(e);else if(a)e.x=t.defaultValue.x+r*i.x,e.y=t.defaultValue.y+r*i.y,e.z=t.defaultValue.z+r*i.z;else{var s=t.defaultValue;e.x=s.x+r*(i.x-s.x),e.y=s.y+r*(i.y-s.y),e.z=s.z+r*(i.z-s.z)}return e}_applyVec4(e,t,a,r,n,i){if(!e)return null;if(t.updateMark===this._updateMark)if(a)e.x+=r*i.x,e.y+=r*i.y,e.z+=r*i.z,e.w+=r*i.w;else{var o=e;e.x=o.x+r*(i.x-o.x),e.y=o.y+r*(i.y-o.y),e.z=o.z+r*(i.z-o.z),e.w=o.w+r*(i.w-o.w)}else if(n)a?(e.x=t.defaultValue.x+i.x,e.y=t.defaultValue.y+i.y,e.z=t.defaultValue.z+i.z,e.w=t.defaultValue.w+i.w):i.cloneTo(e);else if(a)e.x=t.defaultValue.x+r*i.x,e.y=t.defaultValue.y+r*i.y,e.z=t.defaultValue.z+r*i.z,e.w=t.defaultValue.w+r*i.w;else{var s=t.defaultValue;e.x=s.x+r*(i.x-s.x),e.y=s.y+r*(i.y-s.y),e.z=s.z+r*(i.z-s.z),e.w=s.w+r*(i.w-s.w)}return e}_applyColor(e,t,a,r,n,i){if(!e)return null;if(t.updateMark===this._updateMark)if(a)e.r+=r*i.x,e.g+=r*i.y,e.b+=r*i.z,e.a+=r*i.w;else{var o=e;e.r=o.r+r*(i.x-o.r),e.g=o.g+r*(i.y-o.g),e.b=o.b+r*(i.z-o.b),e.a=o.a+r*(i.w-o.a)}else if(n)a?(e.r=t.defaultValue.r+i.x,e.g=t.defaultValue.g+i.y,e.b=t.defaultValue.b+i.z,e.a=t.defaultValue.a+i.w):e.setValue(i.x,i.y,i.z,i.w);else if(a)e.r=t.defaultValue.r+r*i.x,e.g=t.defaultValue.g+r*i.y,e.b=t.defaultValue.b+r*i.z,e.a=t.defaultValue.a+r*i.w;else{var s=t.defaultValue;e.r=s.r+r*(i.x-s.r),e.g=s.g+r*(i.y-s.g),e.b=s.b+r*(i.z-s.b),e.a=s.a+r*(i.w-s.a)}return e}_applyPositionAndRotationEuler(e,t,a,r,n,i){if(e.updateMark===this._updateMark)if(t)i.x+=a*n.x,i.y+=a*n.y,i.z+=a*n.z;else{var o=i.x,s=i.y,l=i.z;i.x=o+a*(n.x-o),i.y=s+a*(n.y-s),i.z=l+a*(n.z-l)}else if(r)if(t){var h=e.defaultValue;i.x=h.x+n.x,i.y=h.y+n.y,i.z=h.z+n.z}else i.x=n.x,i.y=n.y,i.z=n.z;else if(h=e.defaultValue,t)i.x=h.x+a*n.x,i.y=h.y+a*n.y,i.z=h.z+a*n.z;else{var d=h.x,c=h.y,u=h.z;i.x=d+a*(n.x-d),i.y=c+a*(n.y-c),i.z=u+a*(n.z-u)}}_applyRotation(e,a,r,n,i,o){if(e.updateMark===this._updateMark)if(a){var s=Animator._tempQuaternion1;Utils3D.quaternionWeight(i,r,s),s.normalize(s),t.Quaternion.multiply(o,s,o)}else t.Quaternion.lerp(o,i,r,o);else if(n)if(a){var l=e.defaultValue;t.Quaternion.multiply(l,i,o)}else o.x=i.x,o.y=i.y,o.z=i.z,o.w=i.w;else l=e.defaultValue,a?(s=Animator._tempQuaternion1,Utils3D.quaternionWeight(i,r,s),s.normalize(s),t.Quaternion.multiply(l,s,o)):t.Quaternion.lerp(l,i,r,o)}_applyScale(e,t,a,r,n,i){if(e.updateMark===this._updateMark)if(t){var o=Animator._tempVector31;Utils3D.scaleWeight(n,a,o),i.x=i.x*o.x,i.y=i.y*o.y,i.z=i.z*o.z}else Utils3D.scaleBlend(i,n,a,i);else if(r)if(t){var s=e.defaultValue;i.x=s.x*n.x,i.y=s.y*n.y,i.z=s.z*n.z}else i.x=n.x,i.y=n.y,i.z=n.z;else s=e.defaultValue,t?(o=Animator._tempVector31,Utils3D.scaleWeight(n,a,o),i.x=s.x*o.x,i.y=s.y*o.y,i.z=s.z*o.z):Utils3D.scaleBlend(s,n,a,i)}_applyCrossData(a,r,n,i,o,s,l){var h=a.propertyOwner;let d;if(h){switch(a.type){case e.KeyFrameValueType.Float:for(var c=(A=a.property).length-1,u=0;u<c&&(h=h[A[u]]);u++);var _=o+l*(s-o);a.value=_,d=A[c],a.isMaterial?h&&h.setFloat(d,this._applyFloat(h.getFloat(d),a,r,n,i,_)):h&&(h[d]=this._applyFloat(h[d],a,r,n,i,_)),a.callbackFun&&a.animatorDataSetCallBack();break;case e.KeyFrameValueType.Position:var m=h.localPosition,f=a.value,S=o.x,g=o.y,p=o.z;f.x=S+l*(s.x-S),f.y=g+l*(s.y-g),f.z=p+l*(s.z-p),this._applyPositionAndRotationEuler(a,r,n,i,f,m),h.localPosition=m;break;case e.KeyFrameValueType.Rotation:var D=h.localRotation,T=a.value;t.Quaternion.lerp(o,s,l,T),this._applyRotation(a,r,n,i,T,D),h.localRotation=D;break;case e.KeyFrameValueType.Scale:var E=h.localScale,x=a.value;Utils3D.scaleBlend(o,s,l,x),this._applyScale(a,r,n,i,x,E),h.localScale=E;break;case e.KeyFrameValueType.RotationEuler:var M=h.localRotationEuler,R=a.value;S=o.x,g=o.y,p=o.z,R.x=S+l*(s.x-S),R.y=g+l*(s.y-g),R.z=p+l*(s.z-p),this._applyPositionAndRotationEuler(a,r,n,i,R,M),h.localRotationEuler=M;break;case e.KeyFrameValueType.Color:for(c=(A=a.property).length-1,u=0;u<c&&(h=h[A[u]]);u++);let C=a.value;C.x=o.r+l*(s.r-o.r),C.y=o.g+l*(s.g-o.g),C.z=o.b+l*(s.b-o.b),C.w=o.a+l*(s.a-o.a),a.value=C,d=A[c],a.isMaterial?h&&h.setColor(d,this._applyColor(h.getColor(d),a,r,n,i,C)):h&&(h[d]=this._applyColor(h[d],a,r,n,i,C)),a.callbackFun&&a.animatorDataSetCallBack();break;case e.KeyFrameValueType.Vector2:for(c=(A=a.property).length-1,u=0;u<c&&(h=h[A[u]]);u++);let y=a.value;y.x=o.r+l*(s.r-o.r),y.y=o.g+l*(s.g-o.g),a.value=y,d=A[c],a.isMaterial?h&&h.setVector2(d,this._applyVec2(h.getVector2(d),a,r,n,i,y)):h&&(h[d]=this._applyVec2(h[d],a,r,n,i,y)),a.callbackFun&&a.animatorDataSetCallBack();break;case e.KeyFrameValueType.Vector4:for(c=(A=a.property).length-1,u=0;u<c&&(h=h[A[u]]);u++);let v=a.value;v.x=o.x+l*(s.x-o.x),v.y=o.y+l*(s.y-o.y),v.z=o.z+l*(s.z-o.z),a.value=v,d=A[c],a.isMaterial?h&&h.setVector4(d,this._applyVec4(h.getVector4(d),a,r,n,i,v)):h&&(h[d]=this._applyVec4(h[d],a,r,n,i,v)),a.callbackFun&&a.animatorDataSetCallBack();break;case e.KeyFrameValueType.Vector3:var A;for(c=(A=a.property).length-1,u=0;u<c&&(h=h[A[u]]);u++);let I=a.value;I.x=o.x+l*(s.x-o.x),I.y=o.y+l*(s.y-o.y),I.z=o.z+l*(s.z-o.z),a.value=I,d=A[c],a.isMaterial?h&&h.setVector3(d,this._applyVec3(h.getVector3(d),a,r,n,i,I)):h&&(h[d]=this._applyVec3(h[d],a,r,n,i,I)),a.callbackFun&&a.animatorDataSetCallBack()}a.updateMark=this._updateMark}}_setClipDatasToNode(t,a,r,n,i=null){for(var o=t._realtimeDatas,s=t._clip._nodes,l=t._nodeOwners,h=0,d=s.count;h<d;h++){var c=l[h];if(c){var u=s.getNodeByIndex(h);if(i.avatarMask&&!i.avatarMask.getTransformActive(u.nodePath))continue;var _=c.propertyOwner;let t;if(_){switch(c.type){case e.KeyFrameValueType.Float:for(var m=(T=c.property).length-1,f=0;f<m&&(_=_[T[f]]);f++);let i=T[m];c.isMaterial?_&&_.setFloat(i,this._applyFloat(0,c,a,r,n,o[h])):(_&&(_[i]=this._applyFloat(_[i],c,a,r,n,o[h])),c.callbackFun&&c.animatorDataSetCallBack());break;case e.KeyFrameValueType.Position:var S=_.localPosition;this._applyPositionAndRotationEuler(c,a,r,n,o[h],S),_.localPosition=S;break;case e.KeyFrameValueType.Rotation:var g=_.localRotation;this._applyRotation(c,a,r,n,o[h],g),_.localRotation=g;break;case e.KeyFrameValueType.Scale:var p=_.localScale;this._applyScale(c,a,r,n,o[h],p),_.localScale=p;break;case e.KeyFrameValueType.RotationEuler:var D=_.localRotationEuler;this._applyPositionAndRotationEuler(c,a,r,n,o[h],D),_.localRotationEuler=D;break;case e.KeyFrameValueType.Vector2:for(m=(T=c.property).length-1,f=0;f<m&&(_=_[T[f]]);f++);t=T[m],c.isMaterial?_&&_.getVector2(t)&&_.setVector2(t,this._applyVec2(_.getVector2(t),c,a,r,n,o[h])):(_&&(_[t]=this._applyVec2(_[t],c,a,r,n,o[h])),c.callbackFun&&c.animatorDataSetCallBack());break;case e.KeyFrameValueType.Vector3:for(m=(T=c.property).length-1,f=0;f<m&&(_=_[T[f]]);f++);t=T[m],c.isMaterial?_&&_.getVector3(t)&&_.setVector3(t,this._applyVec3(_.getVector3(t),c,a,r,n,o[h])):(_&&(_[t]=this._applyVec3(_[t],c,a,r,n,o[h])),c.callbackFun&&c.animatorDataSetCallBack());break;case e.KeyFrameValueType.Vector4:for(m=(T=c.property).length-1,f=0;f<m&&(_=_[T[f]]);f++);t=T[m],c.isMaterial?_&&_.getVector4(t)&&_.setVector4(t,this._applyVec4(_.getVector4(t),c,a,r,n,o[h])):(_&&(_[t]=this._applyVec4(_[t],c,a,r,n,o[h])),c.callbackFun&&c.animatorDataSetCallBack());break;case e.KeyFrameValueType.Color:var T;for(m=(T=c.property).length-1,f=0;f<m&&(_=_[T[f]]);f++);t=T[m],c.isMaterial?_&&_.getColor(t)&&_.setColor(t,this._applyColor(_.getColor(t),c,a,r,n,o[h])):(_&&(_[t]=this._applyColor(_[t],c,a,r,n,o[h])),c.callbackFun&&c.animatorDataSetCallBack())}c.updateMark=this._updateMark}}}}_setCrossClipDatasToNode(e,t,a,r,n){for(var i=e._crossNodesOwners,o=e._crossNodesOwnersCount,s=e.blendingMode!==AnimatorControllerLayer.BLENDINGMODE_OVERRIDE,l=e.defaultWeight,h=a._realtimeDatas,d=e._destCrossClipNodeIndices,c=a._nodeOwners,u=t._realtimeDatas,_=e._srcCrossClipNodeIndices,m=t._nodeOwners,f=0;f<o;f++){var S=i[f];if(S){var g=_[f],p=d[f];if(-1==g&&-1==p)continue;var D=-1!==g?u[g]:c[p].defaultValue;if(null==D)continue;var T=-1!==p?h[p]:m[g].defaultValue;if(T||(T=m[g].defaultValue),null==T)continue;e.avatarMask&&!e.avatarMask.getTransformActive(S.nodePath)||this._applyCrossData(S,s,l,n,D,T,r)}}}_setFixedCrossClipDatasToNode(e,t,a,r){for(var n=e._crossNodesOwners,i=e._crossNodesOwnersCount,o=e.blendingMode!==AnimatorControllerLayer.BLENDINGMODE_OVERRIDE,s=e.defaultWeight,l=t._realtimeDatas,h=e._destCrossClipNodeIndices,d=0;d<i;d++){var c=n[d];if(c){var u,_=h[d],m=c.crossFixedValue;u=-1!=_&&l[_]?l[_]:c.defaultValue,this._applyCrossData(c,o,s,r,m,u,a)}}}_revertDefaultKeyframeNodes(t){for(var a=t._nodeOwners,r=0,n=a.length;r<n;r++){var i=a[r];if(i){var o=i.propertyOwner;let t;if(o)switch(i.type){case e.KeyFrameValueType.Float:for(var s=(f=i.property).length-1,l=0;l<s&&(o=o[f[l]]);l++);let a=f[s];i.isMaterial?o&&o.setFloat(a,i.defaultValue):(o&&(o[a]=i.defaultValue),i.callbackFun&&i.animatorDataSetCallBack());break;case e.KeyFrameValueType.Position:var h=o.localPosition,d=i.defaultValue;h.x=d.x,h.y=d.y,h.z=d.z,o.localPosition=h;break;case e.KeyFrameValueType.Rotation:var c=o.localRotation,u=i.defaultValue;c.x=u.x,c.y=u.y,c.z=u.z,c.w=u.w,o.localRotation=c;break;case e.KeyFrameValueType.Scale:var _=o.localScale;d=i.defaultValue,_.x=d.x,_.y=d.y,_.z=d.z,o.localScale=_;break;case e.KeyFrameValueType.RotationEuler:var m=o.localRotationEuler;d=i.defaultValue,m.x=d.x,m.y=d.y,m.z=d.z,o.localRotationEuler=m;break;case e.KeyFrameValueType.Vector2:for(s=(f=i.property).length-1,l=0;l<s&&(o=o[f[l]]);l++);t=f[s],i.isMaterial?o&&o.getVector2(t)&&o.setVector2(t,i.defaultValue):(o&&(o[t]=i.defaultValue),i.callbackFun&&i.animatorDataSetCallBack());break;case e.KeyFrameValueType.Vector3:for(s=(f=i.property).length-1,l=0;l<s&&(o=o[f[l]]);l++);t=f[s],i.isMaterial?o&&o.getVector3(t)&&o.setVector3(t,i.defaultValue):(o&&(o[t]=i.defaultValue),i.callbackFun&&i.animatorDataSetCallBack());break;case e.KeyFrameValueType.Vector4:for(s=(f=i.property).length-1,l=0;l<s&&(o=o[f[l]]);l++);t=f[s],i.isMaterial?o&&o.getVector3(t)&&o.setVector3(t,i.defaultValue):(o&&(o[t]=i.defaultValue),i.callbackFun&&i.animatorDataSetCallBack());break;case e.KeyFrameValueType.Color:var f;for(s=(f=i.property).length-1,l=0;l<s&&(o=o[f[l]]);l++);t=f[s];let r=Animator._tempColor;r.r=i.defaultValue.x,r.g=i.defaultValue.y,r.b=i.defaultValue.z,r.a=i.defaultValue.w,i.isMaterial?o&&o.getColor(t)&&o.setColor(t,r):(o&&(o[t]=r),i.callbackFun&&i.animatorDataSetCallBack());break;default:throw"Animator:unknown type."}}}}onAfterDeserialize(){let e=this.controllerLayers;if(e&&null==this.controller){delete this.controllerLayers,this._controllerLayers.length=0;for(let t of e)this.addControllerLayer(t)}}_onEnable(){for(let e=0,t=this._controllerLayers.length;e<t;e++)if(this._controllerLayers[e].playOnWake){let t=this.getDefaultState(e);t&&this.play(null,e,t.cycleOffset)}}_onDestroy(){for(let e=0,t=this._controllerLayers.length;e<t;e++)this._controllerLayers[e]._removeReference()}_applyUpdateMode(e){let a;switch(this._updateMode){case t.AnimatorUpdateMode.Normal:a=e;break;case t.AnimatorUpdateMode.LowFrame:a=t.Stat.loopCount%this._lowUpdateDelty==0?e*this._lowUpdateDelty:0;break;case t.AnimatorUpdateMode.UnScaleTime:a=0}return a}_handleSpriteOwnersBySprite(e,t,a){for(var r=0,n=this._controllerLayers.length;r<n;r++)if(this._controllerLayers[r].enable)for(var i=this._controllerLayers[r]._states,o=0,s=i.length;o<s;o++){var l=i[o],h=l._clip,d=t.join("/"),c=h._nodesMap[d];if(c)for(var u=l._nodeOwners,_=0,m=c.length;_<m;_++)e?this._addKeyframeNodeOwner(u,c[_],a):this._removeKeyframeNodeOwner(u,c[_])}}_parse(e){for(var a=e.playOnWake,r=e.layers,n=0;n<r.length;n++){var i=r[n],o=new AnimatorControllerLayer(i.name);o.defaultWeight=0===n?1:i.weight;var s=i.blendingMode;s&&(o.blendingMode=s),this.addControllerLayer(o);for(var l=i.states,h=0,d=l.length;h<d;h++){var c=l[h],u=c.clipPath;if(u){var _,m=c.name;if(_=t.Loader.getRes(u)){var f=new AnimatorState;f.name=m,f.clip=_,c.speed&&(f.speed=c.speed),o.addState(f),0===h&&(this.getControllerLayer(n).defaultState=f)}}}void 0!==a&&(o.playOnWake=a);let e=i.avatarMask;if(e){let t=new AvatarMask;for(var S in o.avatarMask=t,e)t.setTransformActive(S,e[S])}}var g=e.cullingMode;void 0!==g&&(this.cullingMode=g)}onUpdate(){let e=this.owner._scene.timer._delta/1e3;var a,r;if((e=this._applyUpdateMode(e),0!==this._speed&&0!==e)&&t.Stat.enableAnimatorUpdate)for(this._updateMark++,a=0,r=this._controllerLayers.length;a<r;a++){var n=this._controllerLayers[a];if(n.enable){var i=n._playStateInfo;if(!this.sleep||!i._finish||0!=n._playType){var o=n._crossPlayStateInfo;switch(d=n.blendingMode!==AnimatorControllerLayer.BLENDINGMODE_OVERRIDE,n._playType){case 0:var s=i.currentState;s._clip;var l=this._speed*s.speed,h=i._finish;h||this._updatePlayer(s,i,e*l,s.islooping,a);var d=n.blendingMode!==AnimatorControllerLayer.BLENDINGMODE_OVERRIDE;this._updateClipDatas(s,d,i,n.avatarMask),this._setClipDatasToNode(s,d,n.defaultWeight,0===a,n),h||this._updateEventScript(s,i),h||this._updateStateFinish(s,i);break;case 1:(s=i.currentState)._clip;var c=n._crossPlayState,u=c._clip,_=n._crossDuration,m=o._startPlayTime,f=u._duration-m,S=_>f&&0!=f?f/_:1,g=this._speed*c.speed;this._updatePlayer(c,o,e*S*g,u.islooping,a);var p=(o._elapsedTime-m)/S/_,D=!1;p>=1?(this._updateClipDatas(c,d,o,n.avatarMask),this._setClipDatasToNode(c,d,n.defaultWeight,0===a,n),n._playType=0,i.currentState=c,o._cloneTo(i)):(i._finish||(l=this._speed*s.speed,D=!0,this._updatePlayer(s,i,e*l,s.islooping,a),this._updateClipDatas(s,d,i,n.avatarMask)),this._updateClipDatas(c,d,o,n.avatarMask),this._setCrossClipDatasToNode(n,s,c,p,0===a)),this._updateEventScript(s,i),this._updateEventScript(c,o),this._updateStateFinish(c,o),D&&this._updateStateFinish(i.currentState,i);break;case 2:u=(c=n._crossPlayState)._clip,_=n._crossDuration,m=o._startPlayTime,S=_>(f=u._duration-m)?f/_:1,g=this._speed*c.speed,this._updatePlayer(c,o,e*S*g,c.islooping,a),(p=(o._elapsedTime-m)/S/_)>=1?(this._updateClipDatas(c,d,o,n.avatarMask),this._setClipDatasToNode(c,d,1,0===a,n),n._playType=0,i.currentState=c,o._cloneTo(i)):(this._updateClipDatas(c,d,o,n.avatarMask),this._setFixedCrossClipDatasToNode(n,c,p,0===a)),this._updateEventScript(c,o),this._updateStateFinish(c,o)}}}}}_cloneTo(e){var t=e;t.cullingMode=this.cullingMode;for(var a=0,r=this._controllerLayers.length;a<r;a++){var n=this._controllerLayers[a];t.addControllerLayer(n.clone());for(var i=n._states,o=0,s=i.length;o<s;o++){var l=i[o].clone(),h=t.getControllerLayer(a);h.addState(l),0==o&&(h.defaultState=l)}}t.controller=this._controller}getDefaultState(e=0){return this._controllerLayers[e].defaultState}addState(e,t=0){this._controllerLayers[t].addState(e),console.warn("Animator:this function is discard,please use animatorControllerLayer.addState() instead.")}removeState(e,t=0){this._controllerLayers[t].removeState(e),console.warn("Animator:this function is discard,please use animatorControllerLayer.removeState() instead.")}addControllerLayer(e){this._controllerLayers.push(e),e._animator=this,e._addReference();for(var t=e._states,a=0,r=t.length;a<r;a++)this._getOwnersByClip(t[a])}getControllerLayer(e=0){return this._controllerLayers[e]}play(e=null,t=0,a=Number.NEGATIVE_INFINITY){var r=this._controllerLayers[t];if(r){var n=r.defaultState;if(!e&&!n)throw new Error("Animator:must have default clip value,please set clip property.");var i=r._playStateInfo,o=i.currentState,s=e?r.getAnimatorState(e):n;if(!s._clip)return;var l=s._clip._duration,h=s._clip._duration*(s.clipEnd-s.clipStart);o!==s?(a!==Number.NEGATIVE_INFINITY?i._resetPlayState(l*a,h):i._resetPlayState(0,h),null!==o&&o!==s&&this._revertDefaultKeyframeNodes(o),r._playType=0,i.currentState=s):a!==Number.NEGATIVE_INFINITY&&(i._resetPlayState(l*a,h),r._playType=0),s._scripts,s._eventStart(this,t)}else console.warn("Invalid layerIndex "+t+".");this.owner._scene&&this.onUpdate()}crossFade(e,t,a=0,r=Number.NEGATIVE_INFINITY){var n=this._controllerLayers[a];if(n){var i=n.getAnimatorState(e);if(i){var o=n._playType;if(-1===o)return void this.play(e,a,r);var s=n._crossPlayStateInfo,l=n._crossNodesOwners,h=n._crossNodesOwnersIndicesMap,d=n._playStateInfo.currentState,c=i._nodeOwners,u=n._destCrossClipNodeIndices,_=i._clip,m=_._nodes,f=_._nodesDic,S=0;switch(o){case 0:var g=d._nodeOwners,p=n._srcCrossClipNodeIndices,D=d._clip,T=D._nodes,E=D._nodesDic;n._playType=1;var x=++n._crossMark;S=n._crossNodesOwnersCount=0;for(var M=0,R=T.count;M<R;M++){var A=T.getNodeByIndex(M),C=A._indexInList,y=g[C];if(y){var v=A.fullPath;p[S]=C;var I=f[v];u[S]=I?I._indexInList:-1,h[v]=x,l[S]=y,S++}}for(M=0,R=m.count;M<R;M++){var L=(I=m.getNodeByIndex(M))._indexInList,P=c[L];if(P){var B=I.fullPath;E[B]||(p[S]=-1,u[S]=L,h[B]=x,l[S]=P,S++)}}break;case 1:case 2:for(n._playType=2,M=0,R=l.length;M<R;M++){var O=l[M];O.saveCrossFixedValue(),I=f[O.fullPath],u[M]=I?I._indexInList:-1}for(S=n._crossNodesOwnersCount,x=n._crossMark,M=0,R=m.count;M<R;M++)(P=c[L=(I=m.getNodeByIndex(M))._indexInList])&&h[B=I.fullPath]!==x&&(u[S]=L,h[B]=x,O=c[L],l[S]=O,O.saveCrossFixedValue(),S++)}n._crossNodesOwnersCount=S,n._crossPlayState=i,n._crossDuration=d._clip._duration*t,r!==Number.NEGATIVE_INFINITY?s._resetPlayState(_._duration*r,n._crossDuration):s._resetPlayState(0,n._crossDuration),i._eventStart(this,a)}else console.warn("Invalid name "+a+".")}else console.warn("Invalid layerIndex "+a+".")}setParamsTrigger(e){let a;a="number"==typeof e?e:t.AnimatorStateCondition.conditionNameToID(e),this._animatorParams[a]=!0}setParamsNumber(e,a){let r;r="number"==typeof e?e:t.AnimatorStateCondition.conditionNameToID(e),this._animatorParams[r]=a}setParamsBool(e,a){let r;r="number"==typeof e?e:t.AnimatorStateCondition.conditionNameToID(e),this._animatorParams[r]=a}getParamsvalue(e){let a;return a="number"==typeof e?e:t.AnimatorStateCondition.conditionNameToID(e),this._animatorParams[a]}getCurrentAnimatorPlayState(e=0){return this._controllerLayers[e]._playStateInfo}}Animator._tempVector31=new t.Vector3,Animator._tempColor=new t.Color,Animator._tempQuaternion1=new t.Quaternion,Animator.CULLINGMODE_ALWAYSANIMATE=0,Animator.CULLINGMODE_CULLCOMPLETELY=2;class AnimatorTransition{constructor(){this._conditions=[],this._exitByTime=!0,this._exitTime=.85,this._transduration=.15,this._transstartoffset=0,this._mute=!1}get name(){return this._name}set name(e){this._name=e}get mute(){return this._mute}set mute(e){this._mute=e}get destState(){return this._destState}set destState(e){this._destState=e}get conditions(){return this._conditions}set conditions(e){for(var t=this._conditions.length-1;t>=0;t--)this.removeCondition(this._conditions[t]);for(t=0;t<e.length;t++)this.addCondition(e[t])}get exitByTime(){return this._exitByTime}set exitByTime(e){this._exitByTime=e}set transduration(e){this._transduration=Math.max(0,Math.min(e,1))}get transduration(){return this._transduration}set transstartoffset(e){this._transstartoffset=Math.max(0,Math.min(e,1))}get transstartoffset(){return this._transstartoffset}set exitTime(e){this._exitTime=Math.max(0,Math.min(e,1))}get exitTime(){return this._exitTime}addCondition(e){-1==this._conditions.indexOf(e)&&this._conditions.push(e)}removeCondition(e){let t=this._conditions.indexOf(e);-1!=t&&this._conditions.splice(t,0)}check(e,a){if(this._mute)return!1;if(0==this._conditions.length){if(e>=this._exitTime)return!0}else{if(this._exitByTime&&e<this._exitTime)return!1;for(var r=0;r<this._conditions.length;r++){let e=this._conditions[r];if(e.checkState(a[e.id]))return e.type==t.AniStateConditionType.Trigger&&(a[e.id]=!1),!0}}return!1}}class AnimatorController extends t.Resource{constructor(e){super();let a=t.AnimatorControllerParse.parse(e);this.data=a.ret,this.clipsID=a.clipsID}getLayers(){let e=this.data.controllerLayers,t=[];for(let a=e.length-1;a>=0;a--){let r=e[a],n=new AnimatorControllerLayer(r.name);r.avatarMask&&(n.avatarMask=r.avatarMask),t.unshift(n);for(let e in r)if("avatarMask"!=e&&"name"!=e&&"states"!=e&&null!=r[e])try{n[e]=r[e]}catch(e){}this.getState(r.states,n,this.data)}return t}updateTo(e){let a=e._controllerLayers;for(let e=0,t=a.length;e<t;e++)a[e]._removeReference();a.length=0;let r=this.getLayers();for(let t=0,a=r.length;t<a;t++)e.addControllerLayer(r[t]);let n=this.data.animatorParams;if(n)for(let a=n.length-1;a>=0;a--){let r=n[a];if(t.AniParmType.Bool==r.type)e.setParamsBool(r.name,Boolean(r.val));else if(t.AniParmType.Float==r.type){let t=Number(r.val);isNaN(t)&&(t=0),e.setParamsNumber(r.name,t)}else t.AniParmType.Trigger==r.type&&r.val&&e.setParamsTrigger(r.name)}}createState(e,a,r){if(!e)return null;let n={},i=null;for(let o=e.length-1;o>=0;o--){let s=e[o],l=s.states;if(l){let e=this.createState(l,a,r);e&&(a[s.id]=e.states[e.id]);continue}if(0>Number(s.id)){if("-1"==s.id){let e=s.soloTransitions;e&&0<e.length&&(i=e[0].id)}continue}let h=new AnimatorState;a[s.id]=h,n[s.id]=h;for(let e in s)try{if("scripts"==e){let a=s[e];if(a&&Array.isArray(a))for(let e=a.length-1;e>=0;e--){let r=a[e];r&&0==r.indexOf("res://")&&(r=r.substring(6));let n=t.ClassUtils.getClass(r);n&&h.addScript(n)}continue}if("soloTransitions"==e)continue;null!=s[e]&&(h[e]=s[e])}catch(e){}r.addState(h)}return{id:i,states:n}}setExitTransition(e,t,a,r,n){for(let i in e){let o=a[i];if(o){let s=o.transitions,l=o.soloTransitions,h=e[i];for(let e=t.length-1;e>=0;e--){let o=t[e];if("-3"!=o.id)for(let e=h.length-1;e>=0;e--){let t=h[e],n=new AnimatorTransition;n.destState=a[o.id],o.conditions&&this.addConditions(o.conditions,n,r),t.conditions&&this.addConditions(t.conditions,n,r);for(let e in o)"solo"!=e&&"id"!=e&&"conditions"!=e&&(n[e]=o[e]);o.solo?l.unshift(n):s.unshift(n)}else null==n[i]&&(n[i]=[]),n[i].push(o)}}}}setTransitions(e,t,a,r,n){if(!e)return null;let i={};for(let n=e.length-1;n>=0;n--){let o=e[n];if(o.states){let e=this.setTransitions(o.states,t,a,r,o);if(e){let a=o.soloTransitions;a&&this.setExitTransition(e,a,t,r,i)}}}for(let o=e.length-1;o>=0;o--){let s=e[o];if(s.states)continue;if("-1"==s.id){if(s.soloTransitions&&0<s.soloTransitions.length){null==n?a.defaultState=t[s.soloTransitions[0].id]:t[n.id]=t[s.soloTransitions[0].id];continue}}else{if("-2"==s.id){let e=s.soloTransitions;if(e)for(let a=e.length-1;a>=0;a--){let n=e[a],i=t[n.id];if(i)for(let e in t){let a=t[e],o=new AnimatorTransition;o.destState=i,n.conditions&&this.addConditions(n.conditions,o,r);for(let e in n)"solo"!=e&&"id"!=e&&"conditions"!=e&&(o[e]=n[e]);n.solo?a.soloTransitions.unshift(o):a.transitions.unshift(o)}}continue}if("-3"==s.id)continue}let l=s.soloTransitions;if(l&&t[s.id]){let e=t[s.id].transitions,a=t[s.id].soloTransitions;for(let n=l.length-1;n>=0;n--){let o=l[n];if("-3"==o.id){null==i[s.id]&&(i[s.id]=[]),i[s.id].push(o);continue}let h=new AnimatorTransition;t[o.id]&&(h.destState=t[o.id]),o.conditions&&this.addConditions(o.conditions,h,r);for(let e in o)"solo"!=e&&"id"!=e&&"conditions"!=e&&(h[e]=o[e]);o.solo?a.unshift(h):e.unshift(h)}}}return i}getState(e,t,a){if(e){let r={};this.createState(e,r,t),this.setTransitions(e,r,t,a)}}addConditions(e,a,r){let n=r.animatorParams;if(null!=n&&0!=n.length)for(let r=0,i=e.length;r<i;r++){let i,o=e[r],s=null;for(let e=n.length-1;e>=0;e--)if(n[e].id==o.id){s=n[e];break}if(null==s)return;if(s.type==t.AniParmType.Bool){let e=new t.AnimatorStateBoolCondition(s.name);e.compareFlag=Boolean(o.checkValue),i=e}else if(s.type==t.AniParmType.Float){let e=new t.AnimatorStateNumberCondition(s.name);e.numberValue=Number(o.checkValue),e.compareFlag=o.type,i=e}else if(s.type==t.AniParmType.Trigger){i=new t.AnimatorStateTriggerCondition(s.name)}a.addCondition(i)}}}class BatchMark{constructor(){this.updateMark=-1,this.indexInList=-1,this.batched=!1}}class InstanceBatchManager{constructor(){this._instanceBatchOpaqueMarks=[],this.updateCountMark=0}_getData(e,t,a){return null==a&&(a=Array),"boolean"==typeof e?t[e?0:1]||(t[e?0:1]=new a):t[e]||(t[e]=new a)}getInstanceBatchOpaquaMark(e){let t=!!e._transform&&e._transform._isFrontFaceInvert,a=e._baseRender._receiveShadow,r=(e._material._id<<17)+(e._geometry._id<<2)+(Number(t)<<1)+Number(a),n=((e._baseRender._probReflection?e._baseRender._probReflection._reflectionProbeID:-1)+1<<10)+(e._baseRender.lightmapIndex+1<<20)+((e._baseRender._lightProb?e._baseRender._lightProb._volumetricProbeID:-1)+1);var i=this._getData(r,this._instanceBatchOpaqueMarks);return this._getData(n,i,BatchMark)}}InstanceBatchManager.instance=new InstanceBatchManager;const G=new t.Vector3;new t.Vector3;class BatchRender extends BaseRender{constructor(){super(),this._lodInstanceRenderElement={},this._RenderBitFlag=e.RenderBitFlag.RenderBitFlag_Batch,this._renderElements=[],this._lodInstanceRenderElement[-1]=[],this._batchList=new t.SingletonList}get checkLOD(){return this._checkLOD}set checkLOD(e){this._checkLOD=e}set lodCullRateArray(e){this._checkLOD&&(e.sort(((e,t)=>t-e)),this._lodRateArray=e)}get lodCullRateArray(){return this._lodRateArray}_canBatch(e){return e._batchRender,!1}_onEnable(){if(super._onEnable(),this._batchList)for(let e=0,t=this._batchList.length;e<t;e++)this._batchList.elements[e].setRenderbitFlag(this._RenderBitFlag,!0)}_onDisable(){if(super._onDisable(),this._batchList)for(let e=0,t=this._batchList.length;e<t;e++)this._batchList.elements[e].setRenderbitFlag(this._RenderBitFlag,!1)}_changeLOD(e){this._cacheLod!=e&&(this._cacheLod==this.lodCullRateArray.length-1&&(e=-1),this._renderElements=this._lodInstanceRenderElement[e],this._lodInstanceRenderElement[e]&&-1!=e?(this._renderElements||(this._renderElements=[]),this._renderElements=this._renderElements.concat(this._lodInstanceRenderElement[-1])):this._renderElements=this._lodInstanceRenderElement[-1])}onPreRender(){if(!this.checkLOD||!this._lodRateArray||this._lodRateArray.length<1)this._changeLOD(0);else{let e=this.owner.scene.cullInfoCamera,a=e.maxlocalYDistance;t.Vector3.subtract(this._bounds.getCenter(),e.transform.position,G);let r=G.length()/e.farPlane*a,n=this._lodsize/r;for(let e=0;e<this._lodRateArray.length;e++)if(!(n<this._lodRateArray[e])){this._changeLOD(e);break}}}_batchOneRender(e){return!1}_removeOneRender(e){}_updateOneRender(e){}addList(e){for(var t=0,a=e.length;t<a;t++){let a=e[t];this._canBatch(a)&&this._batchList.add(a)}}reBatch(){let e=this._batchList.length,t=this._batchList.elements;for(var a=0;a<e;a++){let e=t[a];this._batchOneRender(e)}}_restorRenderNode(){for(let e=0,t=this._batchList.length;e<t;e++)this._removeOneRender(this._batchList.elements[e])}_clear(){this._restorRenderNode(),this._renderElements=[],this._batchList.destroy(),this._batchList=new t.SingletonList,this._lodInstanceRenderElement={},this._lodInstanceRenderElement[-1]=[]}}class StaticInstanceBatchRender extends BatchRender{constructor(){super(),this._insBatchMarksNums=[],this._insElementMarksArray=[],this._instanceBatchminNums=10,this._updateChangeElement=[],this.checkLOD=!0,this._batchManager=new InstanceBatchManager,this._RenderBitFlag=e.RenderBitFlag.RenderBitFlag_InstanceBatch}_isRenderNodeAllCanInstanceBatch(e){let t=e._renderElements;for(var a=0,r=t.length;a<r;a++){if(!t[a].material._shader._enableInstancing)return!1}return!0}_sumInstanceBatch(e){let t=e._renderElements;for(var a=0,r=t.length;a<r;a++){let e=t[a];var n=this._batchManager.getInstanceBatchOpaquaMark(e);-1==n.indexInList&&(n.indexInList=this._insBatchMarksNums.length,this._insBatchMarksNums.push(0)),this._insBatchMarksNums[n.indexInList]+=1}}_batchOneElement(e,t){var a=this._batchManager.getInstanceBatchOpaquaMark(e);if(-1==a.indexInList)return;let r=this._insElementMarksArray[a.indexInList];r||(r=this._createInstanceElement(e,t,a));let n=r._instanceBatchElementList;n.length==InstanceRenderElement.maxInstanceCount&&(this._insBatchMarksNums.push(this._insBatchMarksNums[a.indexInList]),a.indexInList=this._insBatchMarksNums.length-1,r=this._createInstanceElement(e,t,a),n=r._instanceBatchElementList),-1==n.indexof(e)&&(n.add(e),r._isUpdataData=!0,-1==this._updateChangeElement.indexOf(r)&&this._updateChangeElement.push(r))}_removeOneElement(e,t){this._batchManager.getInstanceBatchOpaquaMark(e).indexInList}_updateOneElement(e,t){}_createInstanceElement(e,t,a){let r=new InstanceRenderElement;r.render=t,r._geometry.subMesh=e._geometry,r.material=e.material,r.setTransform(null),r.renderSubShader=e.renderSubShader;let n=r._instanceBatchElementList;return n.length=0,n.add(e),this._insElementMarksArray[a.indexInList]=r,a.batched=!0,this._lodInstanceRenderElement[t._LOD]||(this._lodInstanceRenderElement[t._LOD]=[]),this._lodInstanceRenderElement[t._LOD].push(r),r}_canBatch(e){let t=e._renderElements;for(var a=0,r=t.length;a<r;a++){let e=t[a];var n=this._batchManager.getInstanceBatchOpaquaMark(e);if(this._insBatchMarksNums[n.indexInList]<this._instanceBatchminNums||e.material.renderQueue>=3e3)return!1}return!0}_calculateBoundingBox(){let e=this._bounds;for(let t=0,a=this._batchList.length;t<a;t++)0==t?this._batchList.elements[t].bounds.cloneTo(e):Bounds.merge(e,this._batchList.elements[t].bounds,e);let t=this._bounds.getExtent();return this._lodsize=2*Math.max(t.x,t.y,t.z),this._bounds}_onDestroy(){super._onDestroy()}_batchOneRender(t){if(!this._canBatch(t))return!1;this.boundsChange=!0;let a=t._renderElements;for(let e=0,r=a.length;e<r;e++){let r=a[e];this._batchOneElement(r,t)}return t._batchRender=this,t.setRenderbitFlag(e.RenderBitFlag.RenderBitFlag_InstanceBatch,!0),!0}_removeOneRender(t){if(this._canBatch(t)&&-1!=this._batchList.indexof(t)){this.boundsChange=!0;let a=t._renderElements;for(let e=0,r=a.length;e<r;e++){let r=a[e];this._removeOneElement(r,t)}t._batchRender=null,t.setRenderbitFlag(e.RenderBitFlag.RenderBitFlag_InstanceBatch,!1)}}_updateOneRender(e){if(this._canBatch(e)&&-1!=this._batchList.indexof(e)){this.boundsChange=!0;let t=e._renderElements;for(let a=0,r=t.length;a<r;a++){let r=t[a];this._updateOneElement(r,e)}}}_clear(){super._clear(),this._insElementMarksArray.forEach((e=>{e&&e.destroy()})),this._insElementMarksArray=[],this._updateChangeElement=[],this._insBatchMarksNums=[]}addList(e){this._batchList||(this._batchList=new t.SingletonList);let a=[];for(var r=0;r<e.length;r++){let t=e[r];t._batchRender||this._isRenderNodeAllCanInstanceBatch(t)&&(a.push(t),this._sumInstanceBatch(t))}r=0;for(var n=a.length;r<n;r++){let e=a[r];this._canBatch(e)&&this._batchList.add(e)}}reBatch(){let e=this._batchList.length,t=this._batchList.elements;for(var a=0;a<e;a++){let e=t[a];this._batchOneRender(e)}}}class StatiVertexMergeBatchRender extends BatchRender{_addList(e){}}class StaticBatchVolume extends Volume{constructor(){super(),this._customBatchs=[],this.checkLOD=!0,this._enableStaticInstanceBatch=!1,this._enableStaticVertexMergeBatch=!1,this._cacheRender=new t.SingletonList,this._batchRender=new t.SingletonList,this._enableCustomBatch=!1}_getStaticInstanceBatchRender(){let e=this.owner.getComponent(StaticInstanceBatchRender);return e||(e=this.owner.addComponent(StaticInstanceBatchRender)),e}_getStatiVertexMergeBatchRender(){let e=this.owner.getComponent(StatiVertexMergeBatchRender);return e||(e=this.owner.addComponent(StatiVertexMergeBatchRender)),e}get checkLOD(){return this._checkLOD}set checkLOD(e){this._checkLOD=e,this._enableStaticInstanceBatch&&(this._instanceBatchRender.checkLOD=e),this._enableStaticVertexMergeBatch&&(this._vertexMergeBatchRender.checkLOD=e),this._enableCustomBatch&&this._customBatchs.forEach((t=>{t.checkLOD=e}))}get enableStaticInstanceBatchRender(){return this._enableStaticInstanceBatch}set enableStaticInstanceBatchRender(e){!this._instanceBatchRender&&e&&(this._instanceBatchRender=this._getStaticInstanceBatchRender()),e!=this._enableStaticInstanceBatch&&(this._instanceBatchRender.enabled=!!e,this._enableStaticInstanceBatch=e)}get enableMergeBatchRender(){return this._enableStaticVertexMergeBatch}set enableMergeBatchRender(e){!this._vertexMergeBatchRender&&e&&(this._vertexMergeBatchRender=this._getStatiVertexMergeBatchRender()),e!=this._enableStaticVertexMergeBatch&&(this._vertexMergeBatchRender.enabled=!!e,this._enableStaticVertexMergeBatch=e)}get enableCustomBatchRender(){return this._enableCustomBatch}set enableCustomBatchRender(e){this._enableCustomBatch=e,this._customBatchs.forEach((t=>{t.enabled=e}))}set customBatchRenders(e){this._customBatchs&&this._customBatchs.forEach((e=>{this.owner._destroyComponent(e)})),this._customBatchs=e,this._customBatchs.forEach((e=>{this.owner.addComponentInstance(e)})),this.enableCustomBatchRender=this._enableCustomBatch}get customBatchRenders(){return this._customBatchs}_restorRenderNode(){this.enableCustomBatchRender&&this._customBatchs.forEach((e=>{e._clear()})),this._enableStaticInstanceBatch&&this._instanceBatchRender._clear(),this.enableCustomBatchRender&&this._vertexMergeBatchRender._clear()}__addRenderNodeToBatch(e){this.enableCustomBatchRender&&this._customBatchs.forEach((t=>{t._batchOneRender(e)})),this._enableStaticInstanceBatch&&this._instanceBatchRender._batchOneRender(e)||!this.enableCustomBatchRender||this._vertexMergeBatchRender._batchOneRender(e)}__removeRenderNodeFromBatch(e){e._batchRender._removeOneRender(e)}_onEnable(){super._onEnable(),this._enableStaticInstanceBatch&&this._instanceBatchRender&&(this._instanceBatchRender.enabled=!0),this._enableStaticVertexMergeBatch&&this._vertexMergeBatchRender&&(this._vertexMergeBatchRender.enabled=!0),this.enableCustomBatchRender&&this._customBatchs.forEach((e=>{e.enabled=!0}))}_onDisable(){super._onDisable(),this._enableStaticInstanceBatch&&this._instanceBatchRender&&(this._instanceBatchRender.enabled=!1),this._enableStaticVertexMergeBatch&&this._vertexMergeBatchRender&&(this._vertexMergeBatchRender.enabled=!1),this.enableCustomBatchRender&&this._customBatchs.forEach((e=>{e.enabled=!1}))}_addRenderNode(t){if(t.renderNode.staticMask==e.StaticFlag.StaticBatch){if(-1!=this._cacheRender.indexof(t))return;this._cacheRender.add(t),this._batchRender.length>0&&this.__addRenderNodeToBatch(t)}}_removeRenderNode(t){t.renderNode.staticMask==e.StaticFlag.StaticBatch&&-1!=this._batchRender.indexof(t)&&(this.__removeRenderNodeFromBatch(t),this._batchRender.remove(t))}_VolumeChange(){super._VolumeChange(),this._cacheRender.clear()}onStart(){this.reBatch()}reBatch(){this._cacheRender.elements.length=this._cacheRender.length,this._batchRender.clear(),this._restorRenderNode(),this.enableCustomBatchRender&&this._customBatchs.forEach((e=>{e.addList(this._cacheRender.elements),e.reBatch()})),this._enableStaticInstanceBatch&&(this._instanceBatchRender.addList(this._cacheRender.elements),this._instanceBatchRender.reBatch()),this.enableCustomBatchRender&&(this._vertexMergeBatchRender.addList(this._cacheRender.elements),this._vertexMergeBatchRender.reBatch());for(var e=0,t=this._cacheRender.length;e<t;e++)this._cacheRender.elements[e]._batchRender&&this._batchRender.add(this._cacheRender.elements[e])}}class UI3DGeometry extends GeometryElement{constructor(e){super(t.MeshTopology.Triangles,t.DrawType.DrawElement),this._owner=e,this.bufferState=new t.BufferState,this._bound=new Bounds,this._createBuffer(),this.indexFormat=t.IndexFormat.UInt16}get bounds(){return this._bound}_createBuffer(){var e=t.VertexMesh.getVertexDeclaration("POSITION,NORMAL,UV"),a=.5,r=.5;this._vertex=new Float32Array([-.5,r,0,0,0,1,0,0,a,r,0,0,0,1,1,0,-.5,-.5,0,0,0,1,0,1,a,-.5,0,0,0,1,1,1]),this._index=new Uint16Array([0,1,2,3,2,1]),this._vertexBuffer=Laya3DRender.renderOBJCreate.createVertexBuffer3D(4*this._vertex.length,t.BufferUsage.Dynamic,!1),this._vertexBuffer.vertexDeclaration=e,this._vertexBuffer.setData(this._vertex.buffer),this._indexBuffer=Laya3DRender.renderOBJCreate.createIndexBuffer3D(t.IndexFormat.UInt16,this._index.length,t.BufferUsage.Static,!1),this._indexBuffer.setData(this._index),this.bufferState=new t.BufferState,this.bufferState.applyState([this._vertexBuffer],this._indexBuffer),this._bound.setExtent(new t.Vector3(a,r,a)),this._bound.setCenter(new t.Vector3(0,0,0)),this._positionArray=[new t.Vector3,new t.Vector3,new t.Vector3,new t.Vector3],this._positionArray[0].set(-.5,a,0),this._positionArray[1].set(r,a,0),this._positionArray[2].set(-.5,-.5,0),this._positionArray[3].set(r,-.5,0)}_resizeViewVertexData(e,a,r,n,i){var o=e.x/2,s=e.y/2;n?(UI3DGeometry.tempV0.set(-o,s,0),Utils3D.billboardTrans(UI3DGeometry.tempV0,a,r,this._positionArray[0]),UI3DGeometry.tempV0.set(o,s,0),Utils3D.billboardTrans(UI3DGeometry.tempV0,a,r,this._positionArray[1]),UI3DGeometry.tempV0.set(-o,-s,0),Utils3D.billboardTrans(UI3DGeometry.tempV0,a,r,this._positionArray[2]),UI3DGeometry.tempV0.set(o,-s,0),Utils3D.billboardTrans(UI3DGeometry.tempV0,a,r,this._positionArray[3]),this._vertex[3]=this._vertex[11]=this._vertex[19]=this._vertex[27]=-a.x,this._vertex[4]=this._vertex[12]=this._vertex[20]=this._vertex[28]=-a.y,this._vertex[5]=this._vertex[13]=this._vertex[21]=this._vertex[29]=-a.z):(this._positionArray[0].set(-o,s,0),this._positionArray[1].set(o,s,0),this._positionArray[2].set(-o,-s,0),this._positionArray[3].set(o,-s,0)),t.Vector3.add(this._positionArray[0],i,this._positionArray[0]),t.Vector3.add(this._positionArray[1],i,this._positionArray[1]),t.Vector3.add(this._positionArray[2],i,this._positionArray[2]),t.Vector3.add(this._positionArray[3],i,this._positionArray[3]),this._changeVertex(e)}_resizeVertexData(e){var t=e.x/2,a=e.y/2;this._positionArray[0].set(-t,a,0),this._positionArray[1].set(t,a,0),this._positionArray[2].set(-t,-a,0),this._positionArray[3].set(t,-a,0),this._changeVertex(e)}_resizeWorldVertexData(e,a){let applyMat=(e,a)=>(t.Vector3.transformV3ToV3(e,a,e),e);var r=e.x/2,n=e.y/2;this._positionArray[0].set(-r,n,0),this._positionArray[1].set(r,n,0),this._positionArray[2].set(-r,-n,0),this._positionArray[3].set(r,-n,0),applyMat(this._positionArray[0],a),applyMat(this._positionArray[1],a),applyMat(this._positionArray[2],a),applyMat(this._positionArray[3],a),this._changeVertex(e)}_changeVertex(e){this._vertex[0]=this._positionArray[0].x,this._vertex[1]=this._positionArray[0].y,this._vertex[2]=this._positionArray[0].z,this._vertex[8]=this._positionArray[1].x,this._vertex[9]=this._positionArray[1].y,this._vertex[10]=this._positionArray[1].z,this._vertex[16]=this._positionArray[2].x,this._vertex[17]=this._positionArray[2].y,this._vertex[18]=this._positionArray[2].z,this._vertex[24]=this._positionArray[3].x,this._vertex[25]=this._positionArray[3].y,this._vertex[26]=this._positionArray[3].z,this._vertexBuffer.setData(this._vertex.buffer,0,0,4*this._vertex.length),UI3DGeometry.tempV0.setValue(e.x/2,e.y/2,0),this._bound.setExtent(UI3DGeometry.tempV0);let t=(this._positionArray[3].x-this._positionArray[2].x)/2,a=(this._positionArray[0].y-this._positionArray[2].y)/2;UI3DGeometry.tempV0.setValue(this._positionArray[2].x+t,this._positionArray[2].y+a,this._positionArray[2].z),this._bound.setCenter(UI3DGeometry.tempV0)}_updateRenderParams(e){this.clearRenderParams(),this.setDrawElemenParams(6,0)}destroy(){super.destroy(),this.bufferState.destroy(),this._vertexBuffer.destroy(),this._indexBuffer.destroy(),this.bufferState=null,this._vertexBuffer=null,this._indexBuffer=null,delete this._vertex,delete this._index}}UI3DGeometry.tempV0=new t.Vector3,UI3DGeometry._type=GeometryElement._typeCounter++;class UI3D extends BaseRender{constructor(){super(),this._sizeChange=!0,this._view=!0,this._bindPropertyName="u_AlbedoTexture",this._hit=!1,this._worldParams=new t.Vector4,this._uiPlane=new Plane(new t.Vector3,0),this._size=new t.Vector2(1,1),this._resolutionRate=128,this._shellSprite=new t.Sprite,this._shellSprite.name="UI3D",this._shellSprite._setBit(t.NodeFlags.DISPLAYED_INSTAGE,!0),this._shellSprite._setBit(t.NodeFlags.ACTIVE_INHIERARCHY,!0),this._shellSprite._parent=t.ILaya.stage,this._baseRenderNode.shaderData.addDefine(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV0),this._matrix=new t.Matrix4x4,this._scale=new t.Vector3(1,1,1)}set sprite(e){e!=this._uisprite&&(this._uisprite=e,this._shellSprite.removeChildren(0,this._shellSprite.numChildren-1),e&&this._shellSprite.addChild(e),this._resizeRT(),this.boundsChange=!0)}get sprite(){return this._uisprite}set prefab(e){this._prefab=e,this.sprite=e?e.create():null}get prefab(){return this._prefab}set scale(e){e.x<=0||e.y<=0||(e.cloneTo(this._size),this._resizeRT(),this.boundsChange=!0,this._scale.setValue(e.x,e.y,1))}get scale(){return this._size}set renderMode(e){this.sharedMaterial.materialRenderMode=e,this.boundsChange=!0}get renderMode(){return this.sharedMaterial||(this.sharedMaterial=this._ui3DMat),this.sharedMaterial.materialRenderMode}set cull(e){this.sharedMaterial&&(this.sharedMaterial.cull=e)}get cull(){let e=this.sharedMaterial;return e||(e=this._ui3DMat),e.cull}get resolutionRate(){return this._resolutionRate}set resolutionRate(e){e<=0||this._resolutionRate!=e&&(this._resolutionRate=e,this._resizeRT())}get billboard(){return this._view}set billboard(e){this._view=e,this._sizeChange=!0,this.boundsChange=!0}get enableHit(){return this._hit}set enableHit(e){this._hit=e}_creatDefaultMat(){this._ui3DMat||(this._ui3DMat=new UnlitMaterial,this._ui3DMat.materialRenderMode=t.MaterialRenderMode.RENDERMODE_OPAQUE,this._ui3DMat.cull=RenderState.CULL_BACK)}_addRenderElement(){var e=this._renderElements;this.sharedMaterial||(this._creatDefaultMat(),this.sharedMaterial=this._ui3DMat),this._setMaterialTexture();var t=this.sharedMaterial,a=new RenderElement;a.setTransform(this.owner._transform),a.render=this,a.material=t,a.renderSubShader=a.material.shader.getSubShaderAt(0),this._geometry=new UI3DGeometry(this),a.setGeometry(this._geometry),e.push(a),this._setRenderElements(),this.geometryBounds=this._geometry.bounds}_resizeRT(){let e=this._size.x*this._resolutionRate,a=this._size.y*this._resolutionRate;this._rendertexure2D?this._rendertexure2D.width==e&&this._rendertexure2D.height==a||(this._rendertexure2D.destroy(),this._rendertexure2D=new t.RenderTexture2D(e,a,t.RenderTargetFormat.R8G8B8A8,t.RenderTargetFormat.None),this._rendertexure2D._invertY=!0,this._setMaterialTexture()):(this._rendertexure2D=new t.RenderTexture2D(e,a,t.RenderTargetFormat.R8G8B8A8,t.RenderTargetFormat.None),this._rendertexure2D._invertY=!0),this._submitRT()}onPreRender(){if(this.billboard){this._sizeChange=!1;let e=this.owner.scene.cullInfoCamera;t.Matrix4x4.createAffineTransformation(this._transform.position,e.transform.rotation,this._scale,this._matrix)}else this._sizeChange&&(this._sizeChange=!1,this._transform.worldMatrix.cloneTo(this._matrix))}_parseHit(e){let a,r,n=UI3D._ray;if(!this._uisprite||!t.LayaEnv.isPlaying)return null;this._matrix.invert(UI3D.TempMatrix),t.Vector3.transformCoordinate(e.origin,UI3D.TempMatrix,n.origin),t.Vector3.TransformNormal(e.direction,UI3D.TempMatrix,n.direction),n.direction.normalize();let i=0,o=0,s=-n.origin.z/n.direction.z;if(s<0)return null;a=n.origin.x+s*n.direction.x,r=n.origin.y+s*n.direction.y,i=a+.5,o=r+.5;let l=i*this._rendertexure2D.width,h=(1-o)*this._rendertexure2D.height,d=t.InputManager.inst.getSpriteUnderPoint(this._uisprite,l,h);return d||null}getUITexture(){return this._rendertexure2D}_getCameraDistance(e){return t.Vector3.distance(e,this.owner.transform.position)}_renderUpdate(e){let t=this._baseRenderNode.shaderData;t.setMatrix4x4(Sprite3D.WORLDMATRIX,this._matrix);let a=this.owner.transform,r=this._worldParams;r.x=a.getFrontFaceValue(),t.setVector(Sprite3D.WORLDINVERTFRONT,r)}renderUpdate(e){this._renderElements.forEach((t=>{let a=t._geometry;t._renderElementOBJ.isRender=a._prepareRender(e),a._updateRenderParams(e)}))}_submitRT(){this._rendertexure2D&&this._shellSprite.drawToTexture(this._rendertexure2D.width,this._rendertexure2D.height,0,0,this._rendertexure2D),this._setMaterialTexture()}_setMaterialTexture(){this._rendertexure2D?(this.sharedMaterial.addDefine(UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE),this.sharedMaterial.setTexture(this._bindPropertyName,this._rendertexure2D)):this.sharedMaterial.removeDefine(UnlitMaterial.SHADERDEFINE_ALBEDOTEXTURE)}_checkUIPos(e){return!!this.enableHit&&this._parseHit(e)}_calculateBoundingBox(){var e=this._transform.worldMatrix;this._geometry.bounds._tranform(e,this._bounds)}_onAdded(){super._onAdded(),this._addRenderElement()}_onDisable(){super._onDisable(),this.owner.transform.off(t.Event.TRANSFORM_CHANGED,this,this._transByRotate),this.owner.scene._UI3DManager.remove(this)}_onEnable(){super._onEnable(),this.owner.scene._UI3DManager.add(this),this.owner.transform.on(t.Event.TRANSFORM_CHANGED,this,this._transByRotate)}_onDestroy(){super._onDestroy(),this._rendertexure2D&&this._rendertexure2D.destroy(),this._uisprite&&this._uisprite.destroy(),this._shellSprite&&this._shellSprite.destroy(),this._ui3DMat&&this._ui3DMat.destroy(),this._resolutionRate=null,this._uiPlane=null,this._size=null,this._scale=null,this._matrix=null}_transByRotate(){this.billboard||(this._sizeChange=!0),this.boundsChange=!0}}UI3D.TempMatrix=new t.Matrix4x4,UI3D.temp0=new t.Vector3,UI3D.temp1=new t.Vector3,UI3D.temp2=new t.Vector3,UI3D.DEBUG=!1,UI3D._ray=new Ray(new t.Vector3,new t.Vector3);var H;t.Loader.registerLoader(["lani"],class{load(e){let a=t.AssetDb.inst.getSubAssetURL(e.url,e.uuid,null,"lani");return e.loader.fetch(a,"arraybuffer",e.progress.createCallback(),e.options).then((e=>e?AnimationClip._parse(e):null))}},t.Loader.ANIMATIONCLIP);t.Loader.registerLoader(["ltc","ltcb","ltcb.ls","cubemap"],class{constructor(){H||(H={"WhiteTextureCube.ltc":t.TextureCube.whiteTexture,"BlackTextureCube.ltc":t.TextureCube.blackTexture,"GrayTextureCube.ltc":t.TextureCube.grayTexture})}load(e){if(-1!=e.url.indexOf("internal/")){let a=H[t.Utils.getBaseName(e.url)];if(a)return Promise.resolve(a)}if("ktx"==e.ext||"cubemap"==e.ext){let a=e.url;return"cubemap"==e.ext&&(a=t.AssetDb.inst.getSubAssetURL(a,e.uuid,"0","ktx")),e.loader.fetch(a,"arraybuffer",e.progress.createCallback(),e.options).then((a=>{if(!a)return null;let r=t.KTXTextureInfo.getKTXTextureInfo(a);if(r.dimension!=t.TextureDimension.Cube)return t.Loader.warn("ktxInfo.dimension != TextureDimension.Cube! "+e.url),null;let n=new t.TextureCube(r.width,r.format,r.mipmapCount>1,r.sRGB);n.setKTXData(r);let i=e.obsoluteInst;return i&&i instanceof t.TextureCube&&(n=this.move(i,n)),n}))}return"ltcb"==e.ext||"ltcb.ls"==e.ext?e.loader.fetch(e.url,"arraybuffer",e.progress.createCallback(),e.options).then((a=>{if(!a)return null;let r=new t.Byte(a),n=r.readUTFString();if("LAYATEXTURECUBE:0000"!==n)return console.warn(`CubemapBinLoader: unknow version. ${n}`),null;let i=r.readUint8(),o=r.getUint8(),s=r.readUint16(),l=r.getUint8(),h=r.getUint8(),d=r.getUint8(),c=r.getUint8(),u=new t.TextureCube(s,i,o>1);u.setPixelsData(null,!1,!1),u.filterMode=l,u.wrapModeU=h,u.wrapModeV=d,u.anisoLevel=c;let _=r.pos,m=s;for(let e=0;e<o;e++){let t=new Array(6),r=m*m*u._getFormatByteCount();for(let e=0;e<6;e++)t[e]=new Uint8Array(a,_,r),_+=r;u.updateSubPixelsData(t,0,0,m,m,e,!1,!1,!1),m/=2}let f=e.obsoluteInst;return f&&f instanceof t.TextureCube&&(u=this.move(f,u)),u})):e.loader.fetch(e.url,"json",e.progress.createCallback(.2),e.options).then((a=>{if(!a)return null;let r=t.URL.getPath(e.url),n=[t.URL.join(r,a.front),t.URL.join(r,a.back),t.URL.join(r,a.left),t.URL.join(r,a.right),t.URL.join(r,a.up),t.URL.join(r,a.down)];return Promise.all(n.map((t=>t?e.loader.fetch(t,"image",e.progress.createCallback(),e.options):Promise.resolve(null)))).then((a=>{var r,n;let i=e.options.constructParams,o=i?i[0]:null!==(n=null===(r=a[0])||void 0===r?void 0:r.width)&&void 0!==n?n:1,s=i?i[1]:t.TextureFormat.R8G8B8A8,l=!!i&&i[3],h=!i||i[5],d=new t.TextureCube(o,s,l,h);d.setImageData(a,!1,!1);let c=e.obsoluteInst;return c&&c instanceof t.TextureCube&&(d=this.move(c,d)),d}))}))}move(e,a){return e._texture=a._texture,e.width=a.width,e.height=a.height,e.obsolute=!1,delete t.Resource._idResourcesMap[a.id],e}},t.Loader.TEXTURECUBE);class LoadModelV04{static parse(e,t,a,r){LoadModelV04._mesh=a,LoadModelV04._subMeshes=r,LoadModelV04._version=t,LoadModelV04._readData=e,LoadModelV04.READ_DATA(),LoadModelV04.READ_BLOCK(),LoadModelV04.READ_STRINGS();for(var n=0,i=LoadModelV04._BLOCK.count;n<i;n++){LoadModelV04._readData.pos=LoadModelV04._BLOCK.blockStarts[n];var o=LoadModelV04._readData.getUint16(),s=LoadModelV04._strings[o],l=LoadModelV04["READ_"+s];if(null==l)throw new Error("model file err,no this function:"+o+" "+s);l.call(null)}LoadModelV04._strings.length=0,LoadModelV04._readData=null,LoadModelV04._version=null,LoadModelV04._mesh=null,LoadModelV04._subMeshes=null}static _readString(){return LoadModelV04._strings[LoadModelV04._readData.getUint16()]}static READ_DATA(){LoadModelV04._DATA.offset=LoadModelV04._readData.getUint32(),LoadModelV04._DATA.size=LoadModelV04._readData.getUint32()}static READ_BLOCK(){for(var e=LoadModelV04._BLOCK.count=LoadModelV04._readData.getUint16(),t=LoadModelV04._BLOCK.blockStarts=[],a=LoadModelV04._BLOCK.blockLengths=[],r=0;r<e;r++)t.push(LoadModelV04._readData.getUint32()),a.push(LoadModelV04._readData.getUint32())}static READ_STRINGS(){var e=LoadModelV04._readData.getUint32(),t=LoadModelV04._readData.getUint16(),a=LoadModelV04._readData.pos;LoadModelV04._readData.pos=e+LoadModelV04._DATA.offset;for(var r=0;r<t;r++)LoadModelV04._strings[r]=LoadModelV04._readData.readUTFString();LoadModelV04._readData.pos=a}static READ_MESH(){LoadModelV04._readString();var e,a=LoadModelV04._readData.__getBuffer(),r=0,n=LoadModelV04._readData.getInt16(),i=LoadModelV04._DATA.offset;for(e=0;e<n;e++){var o,s=i+LoadModelV04._readData.getUint32(),l=LoadModelV04._readData.getUint32(),h=a.slice(s,s+l),d=new Float32Array(h),c=LoadModelV04._readString();switch(LoadModelV04._version){case"LAYAMODEL:0301":case"LAYAMODEL:0400":o=t.VertexMesh.getVertexDeclaration(c);break;case"LAYAMODEL:0401":o=t.VertexMesh.getVertexDeclaration(c,!1);break;default:throw new Error("LoadModelV03: unknown version.")}if(!o)throw new Error("LoadModelV03: unknown vertexDeclaration.");var u=Laya3DRender.renderOBJCreate.createVertexBuffer3D(4*d.length,t.BufferUsage.Static,!0);u.vertexDeclaration=o,u.setData(d.buffer),LoadModelV04._mesh._vertexBuffer=u,LoadModelV04._mesh._vertexCount+=u._byteLength/o.vertexStride,r+=4*d.length}var _=i+LoadModelV04._readData.getUint32(),m=LoadModelV04._readData.getUint32(),f=new Uint16Array(a.slice(_,_+m)),S=Laya3DRender.renderOBJCreate.createIndexBuffer3D(t.IndexFormat.UInt16,m/2,t.BufferUsage.Static,!0);S.setData(f),LoadModelV04._mesh._indexBuffer=S,r+=2*S.indexCount,LoadModelV04._mesh._setBuffer(LoadModelV04._mesh._vertexBuffer,S),LoadModelV04._mesh._setCPUMemory(r),LoadModelV04._mesh._setGPUMemory(r);var g=LoadModelV04._mesh._boneNames=[],p=LoadModelV04._readData.getUint16();for(g.length=p,e=0;e<p;e++)g[e]=LoadModelV04._strings[LoadModelV04._readData.getUint16()];LoadModelV04._readData.pos+=8;var D=LoadModelV04._readData.getUint32(),T=LoadModelV04._readData.getUint32(),E=new Float32Array(a.slice(i+D,i+D+T)),x=E.length,M=LoadModelV04._mesh._inverseBindPosesBuffer=new ArrayBuffer(4*x);for(LoadModelV04._mesh._inverseBindPoses=[],LoadModelV04._mesh._instanceBufferStateType=0!=x?Mesh.MESH_INSTANCEBUFFER_TYPE_SIMPLEANIMATOR:Mesh.MESH_INSTANCEBUFFER_TYPE_NORMAL,e=0;e<x;e+=16){var R=new t.Matrix4x4(E[e+0],E[e+1],E[e+2],E[e+3],E[e+4],E[e+5],E[e+6],E[e+7],E[e+8],E[e+9],E[e+10],E[e+11],E[e+12],E[e+13],E[e+14],E[e+15],new Float32Array(M,4*e,16));LoadModelV04._mesh._inverseBindPoses[e/16]=R}return!0}static READ_SUBMESH(){var e=LoadModelV04._readData.__getBuffer(),t=new SubMesh(LoadModelV04._mesh);LoadModelV04._readData.getInt16(),LoadModelV04._readData.getUint32(),LoadModelV04._readData.getUint32();var a=LoadModelV04._readData.getUint32(),r=LoadModelV04._readData.getUint32(),n=LoadModelV04._mesh._indexBuffer;t._indexBuffer=n,t._setIndexRange(a,r);var i=LoadModelV04._mesh._vertexBuffer;t._vertexBuffer=i;var o=LoadModelV04._DATA.offset,s=t._subIndexBufferStart,l=t._subIndexBufferCount,h=t._boneIndicesList,d=LoadModelV04._readData.getUint16();s.length=d,l.length=d,h.length=d;var c=LoadModelV04._mesh._skinnedMatrixCaches,u=LoadModelV04._subMeshes.length;c.length=LoadModelV04._mesh._inverseBindPoses.length;for(var _=0;_<d;_++){s[_]=LoadModelV04._readData.getUint32(),l[_]=LoadModelV04._readData.getUint32();for(var m=LoadModelV04._readData.getUint32(),f=LoadModelV04._readData.getUint32(),S=h[_]=new Uint16Array(e.slice(o+m,o+m+f)),g=S.length,p=0;p<g;p++){var D=S[p];c[D]||(c[D]=new skinnedMatrixCache(u,_,p))}}return LoadModelV04._subMeshes.push(t),!0}}LoadModelV04._BLOCK={count:0},LoadModelV04._DATA={offset:0,size:0},LoadModelV04._strings=[];class MorphTarget{constructor(){this.fullWeight=1}}class MorphTargetChannel{constructor(){this.targetCount=0,this.targets=new Array}getTargetByIndex(e){return this.targets[e]}addTarget(e){this.targetCount++,this.targets.push(e),this.targets.sort(((e,t)=>e.fullWeight-t.fullWeight))}}class MorphTargetData{constructor(){this.targets=new Array,this.channels=new Array,this.bounds=new Bounds,this.params=new t.Vector4}addMorphChannel(e){e._index=this.channels.length,this.channels.push(e),e.targets.forEach((e=>{e._index=this.targets.length,this.targets.push(e)}))}getMorphChannel(e){return this.channels.find((t=>t.name==e))}getMorphChannelbyIndex(e){return this.channels[e]}get targetCount(){return this.targets.length}get channelCount(){return this.channels.length}initData(){if(t.LayaGL.renderEngine.getCapable(t.RenderCapable.Texture3D)){let e=this.targets.length,a=t.LayaGL.renderEngine.getParams(t.RenderParams.MAX_Texture_Size),r=this.vertexCount,n=this.vertexDec,i=n.vertexStride/4,o=n.vertexElementCount;this.elementCount=o;let s=Math.floor(o*r/a)+1,l=4;this.targetTexture=new t.Texture2DArray(a,s,e,t.TextureFormat.R32G32B32A32,!1,!1,!1),this.targetTexture.filterMode=t.FilterMode.Point,this.targetTexture.anisoLevel=1,this.targetTexture.lock=!0;let h=new Float32Array(a*s*e*l).fill(0),d=this.attributeOffset=new t.Vector4(0,0,0,0);d.x=n._vertexElements.indexOf(n.getVertexElementByUsage(t.VertexMesh.MESH_POSITION0)),d.y=n._vertexElements.indexOf(n.getVertexElementByUsage(t.VertexMesh.MESH_NORMAL0)),d.z=n._vertexElements.indexOf(n.getVertexElementByUsage(t.VertexMesh.MESH_TANGENT0));let c=a*s;for(let a=0;a<e;a++){let e=this.targets[a];for(let s=0;s<r;s++){let r=(a*c+s*o)*l;n._vertexElements.forEach(((a,n)=>{let o=r+4*n,l=a.offset/4,d=s*i+l;switch(a.elementUsage){case t.VertexMesh.MESH_POSITION0:case t.VertexMesh.MESH_NORMAL0:h[o]=e.data[d],h[o+1]=e.data[d+1],h[o+2]=e.data[d+2];break;case t.VertexMesh.MESH_TANGENT0:h[o]=e.data[d],h[o+1]=e.data[d+1],h[o+2]=e.data[d+2],h[o+3]=e.data[d+3]}}))}}this.targetTexture.setPixelsData(h,!1,!1),this.params.setValue(this.targetTexture.width,this.targetTexture.height,this.elementCount,this.channelCount)}}destroy(){this.targetTexture&&(this.targetTexture.lock=!1,this.targetTexture.destroy(),this.targetTexture=null),this.targets=null,this.channels=null}clone(){let e=new MorphTargetData;e.bounds.setMin(this.bounds.getMin()),e.bounds.setMax(this.bounds.getMax()),e.vertexCount=this.vertexCount,e.vertexDec=this.vertexDec;let t=this.channelCount;for(let a=0;a<t;a++){let t=this.getMorphChannelbyIndex(a),r=new MorphTargetChannel;r.name=t.name;let n=t.targetCount;for(let e=0;e<n;e++){let a=t.getTargetByIndex(e),n=new MorphTarget;n.name=a.name,n.fullWeight=a.fullWeight,n.data=new Float32Array(a.data),r.addTarget(n)}e.addMorphChannel(r)}return e.initData(),e}}class LoadModelV05{static parse(e,t,a,r){LoadModelV05._mesh=a,LoadModelV05._subMeshes=r,LoadModelV05._version=t,LoadModelV05._readData=e,LoadModelV05.READ_DATA(),LoadModelV05.READ_BLOCK(),LoadModelV05.READ_STRINGS();for(var n=0,i=LoadModelV05._BLOCK.count;n<i;n++){LoadModelV05._readData.pos=LoadModelV05._BLOCK.blockStarts[n];var o=LoadModelV05._readData.getUint16(),s=LoadModelV05._strings[o],l=LoadModelV05["READ_"+s];null==l?console.warn("model file err,no this function:"+o+" "+s):l.call(null)}LoadModelV05._strings.length=0,LoadModelV05._readData=null,LoadModelV05._version=null,LoadModelV05._mesh=null,LoadModelV05._subMeshes=null}static _readString(){return LoadModelV05._strings[LoadModelV05._readData.getUint16()]}static READ_DATA(){LoadModelV05._DATA.offset=LoadModelV05._readData.getUint32(),LoadModelV05._DATA.size=LoadModelV05._readData.getUint32()}static READ_BLOCK(){for(var e=LoadModelV05._BLOCK.count=LoadModelV05._readData.getUint16(),t=LoadModelV05._BLOCK.blockStarts=[],a=LoadModelV05._BLOCK.blockLengths=[],r=0;r<e;r++)t.push(LoadModelV05._readData.getUint32()),a.push(LoadModelV05._readData.getUint32())}static READ_STRINGS(){var e=LoadModelV05._readData.getUint32(),t=LoadModelV05._readData.getUint16(),a=LoadModelV05._readData.pos;LoadModelV05._readData.pos=e+LoadModelV05._DATA.offset;for(var r=0;r<t;r++)LoadModelV05._strings[r]=LoadModelV05._readData.readUTFString();LoadModelV05._readData.pos=a}static READ_MESH(){var e,a=0;LoadModelV05._readString();var r=LoadModelV05._readData,n=r.__getBuffer(),i=r.getInt16(),o=LoadModelV05._DATA.offset;for(e=0;e<i;e++){var s,l,h,d=o+r.getUint32(),c=r.getUint32(),u=LoadModelV05._readString(),_=t.VertexMesh.getVertexDeclaration(u,!1),m=_.vertexStride,f=u.split(","),S=f.length,g=LoadModelV05._mesh;switch(LoadModelV05._version){case"LAYAMODEL:05":case"LAYAMODEL:0501":case"LAYAMODEL:0502":s=n.slice(d,d+c*m),l=new Float32Array(s),h=new Uint8Array(s);break;case"LAYAMODEL:COMPRESSION_05":case"LAYAMODEL:COMPRESSION_0501":s=new ArrayBuffer(m*c),l=new Float32Array(s),h=new Uint8Array(s);var p=r.pos;r.pos=d;for(var D=0;D<c;D++)for(var T,E=D*m,x=0;x<S;x++)switch(f[x]){case"POSITION":l[T=E/4]=t.HalfFloatUtils.convertToNumber(r.getUint16()),l[T+1]=t.HalfFloatUtils.convertToNumber(r.getUint16()),l[T+2]=t.HalfFloatUtils.convertToNumber(r.getUint16()),E+=12;break;case"NORMAL":l[T=E/4]=r.getUint8()/127.5-1,l[T+1]=r.getUint8()/127.5-1,l[T+2]=r.getUint8()/127.5-1,E+=12;break;case"COLOR":case"BLENDWEIGHT":l[T=E/4]=r.getUint8()/255,l[T+1]=r.getUint8()/255,l[T+2]=r.getUint8()/255,l[T+3]=r.getUint8()/255,E+=16;break;case"UV":case"UV1":l[T=E/4]=t.HalfFloatUtils.convertToNumber(r.getUint16()),l[T+1]=t.HalfFloatUtils.convertToNumber(r.getUint16()),E+=8;break;case"BLENDINDICES":h[E]=r.getUint8(),h[E+1]=r.getUint8(),h[E+2]=r.getUint8(),h[E+3]=r.getUint8(),E+=4;break;case"TANGENT":l[T=E/4]=r.getUint8()/127.5-1,l[T+1]=r.getUint8()/127.5-1,l[T+2]=r.getUint8()/127.5-1,l[T+3]=r.getUint8()/127.5-1,E+=16}r.pos=p}var M=Laya3DRender.renderOBJCreate.createVertexBuffer3D(s.byteLength,t.BufferUsage.Static,!0);M.vertexDeclaration=_,M.setData(s);c=M._byteLength/_.vertexStride;g._indexFormat=c>65535?t.IndexFormat.UInt32:t.IndexFormat.UInt16,g._vertexBuffer=M,g._vertexCount+=c,a+=4*l.length}var R,A=o+r.getUint32(),C=r.getUint32();R=g.indexFormat==t.IndexFormat.UInt32?new Uint32Array(n.slice(A,A+C)):new Uint16Array(n.slice(A,A+C));var y=Laya3DRender.renderOBJCreate.createIndexBuffer3D(g.indexFormat,R.length,t.BufferUsage.Static,!0);if(y.setData(R),g._indexBuffer=y,g._setBuffer(g._vertexBuffer,y),a+=2*y.indexCount,g._setCPUMemory(a),g._setGPUMemory(a),"LAYAMODEL:0501"==LoadModelV05._version||"LAYAMODEL:COMPRESSION_0501"==LoadModelV05._version||"LAYAMODEL:0502"==LoadModelV05._version){var v=g.bounds,I=v.getMin(),L=v.getMax();I.setValue(r.getFloat32(),r.getFloat32(),r.getFloat32()),L.setValue(r.getFloat32(),r.getFloat32(),r.getFloat32()),v.setMin(I),v.setMax(L),g.bounds=v}var P=g._boneNames=[],B=r.getUint16();for(P.length=B,e=0;e<B;e++)P[e]=LoadModelV05._strings[r.getUint16()];var O=r.getUint32(),V=r.getUint32(),w=new Float32Array(n.slice(o+O,o+O+V)),b=w.length,N=g._inverseBindPosesBuffer=new ArrayBuffer(4*b);for(g._inverseBindPoses=[],g._instanceBufferStateType=0!=b?Mesh.MESH_INSTANCEBUFFER_TYPE_SIMPLEANIMATOR:Mesh.MESH_INSTANCEBUFFER_TYPE_NORMAL,e=0;e<b;e+=16){var F=new t.Matrix4x4(w[e+0],w[e+1],w[e+2],w[e+3],w[e+4],w[e+5],w[e+6],w[e+7],w[e+8],w[e+9],w[e+10],w[e+11],w[e+12],w[e+13],w[e+14],w[e+15],new Float32Array(N,4*e,16));g._inverseBindPoses[e/16]=F}return!0}static READ_SUBMESH(){var e=LoadModelV05._readData,t=e.__getBuffer(),a=new SubMesh(LoadModelV05._mesh);e.getInt16();var r=e.getUint32(),n=e.getUint32(),i=LoadModelV05._mesh._indexBuffer;a._indexBuffer=i,a._setIndexRange(r,n);var o=LoadModelV05._mesh._vertexBuffer;a._vertexBuffer=o;var s=LoadModelV05._DATA.offset,l=a._subIndexBufferStart,h=a._subIndexBufferCount,d=a._boneIndicesList,c=e.getUint16();l.length=c,h.length=c,d.length=c;var u=LoadModelV05._mesh._skinnedMatrixCaches,_=LoadModelV05._subMeshes.length;u.length=LoadModelV05._mesh._inverseBindPoses.length;for(var m=0;m<c;m++){l[m]=e.getUint32(),h[m]=e.getUint32();for(var f=e.getUint32(),S=e.getUint32(),g=d[m]=new Uint16Array(t.slice(s+f,s+f+S)),p=0,D=g.length;p<D;p++){var T=g[p];u[T]||(u[T]=new skinnedMatrixCache(_,m,p))}}return LoadModelV05._subMeshes.push(a),!0}static READ_MORPH(){let e=LoadModelV05._readData,a=e.__getBuffer(),r=LoadModelV05._DATA.offset,n=LoadModelV05._mesh,i=n.morphTargetData=new MorphTargetData,o=LoadModelV05._strings[e.getUint16()];i.vertexDec=t.VertexMesh.getVertexDeclaration(o);let s=i.bounds,l=s.getMin(),h=s.getMax();l.set(e.getFloat32(),e.getFloat32(),e.getFloat32()),h.set(e.getFloat32(),e.getFloat32(),e.getFloat32()),s.setMin(l),s.setMax(h);let d=e.readUint16();for(let t=0;t<d;t++){let t=new MorphTargetChannel;t.name=LoadModelV05._strings[e.getUint16()];let n=e.readUint16();for(let i=0;i<n;i++){let n=new MorphTarget,i=LoadModelV05._strings[e.getUint16()];n.name=i,n.fullWeight=e.readFloat32();let o=e.readUint32(),s=e.readUint32();n.data=new Float32Array(a.slice(r+o,r+o+s)),t.addTarget(n)}i.addMorphChannel(t)}return i.vertexCount=n.vertexCount,i.initData(),!0}static READ_UVSIZE(){LoadModelV05._mesh._width=LoadModelV05._readData.readUint16(),LoadModelV05._mesh._height=LoadModelV05._readData.readUint16()}}LoadModelV05._BLOCK={count:0},LoadModelV05._DATA={offset:0,size:0},LoadModelV05._strings=[];class MeshReader{static _parse(e){var t=new Mesh;return MeshReader.read(e,t,t._subMeshes),t}static read(e,a,r){var n=new t.Byte(e);n.pos=0;var i=n.readUTFString();switch(i){case"LAYAMODEL:0301":case"LAYAMODEL:0400":case"LAYAMODEL:0401":LoadModelV04.parse(n,i,a,r);break;case"LAYAMODEL:05":case"LAYAMODEL:COMPRESSION_05":case"LAYAMODEL:0501":case"LAYAMODEL:COMPRESSION_0501":case"LAYAMODEL:0502":LoadModelV05.parse(n,i,a,r);break;default:throw new Error("unknown mesh version: "+i)}a._setSubMeshes(r),"LAYAMODEL:0501"!=i&&"LAYAMODEL:COMPRESSION_0501"!=i&&"LAYAMODEL:0502"!=i&&a.calculateBounds()}}t.Loader.registerLoader(["lm"],class{load(e){let a=t.AssetDb.inst.getSubAssetURL(e.url,e.uuid,null,"lm");return e.loader.fetch(a,"arraybuffer",e.progress.createCallback(),e.options).then((e=>e?MeshReader._parse(e):null))}},t.Loader.MESH);class HierarchyParserV2{static _createSprite3DInstance(e,t,a){let r;switch(e.type){case"Scene3D":r=new Scene3D;break;case"Sprite3D":r=new Sprite3D;break;case"MeshSprite3D":r=new MeshSprite3D,a&&e.props.isStatic&&a.push(r);break;case"SkinnedMeshSprite3D":r=new SkinnedMeshSprite3D;break;case"SimpleSkinnedMeshSprite3D":r=new SimpleSkinnedMeshSprite3D;break;case"ShuriKenParticle3D":r=new ShuriKenParticle3D;break;case"Camera":r=new Camera;break;case"ReflectionProbe":r=new Sprite3D,r.addComponent(ReflectionProbe);break;default:throw new Error("Utils3D:unidentified class type in (.lh) file.")}let n=e.child;if(n)for(let e=0,i=n.length;e<i;e++){let i=HierarchyParserV2._createSprite3DInstance(n[e],t,a);r.addChild(i)}return t[e.instanceID]=r,r}static _createComponentInstance(e,a,r){let n=a[e.instanceID];n._parse(e.props,a);let i=e.child;if(i)for(let e=0,t=i.length;e<t;e++)HierarchyParserV2._createComponentInstance(i[e],a,r);let o=e.components;if(o)for(let e=0,a=o.length;e<a;e++){let a=o[e],i=t.ClassUtils.getClass(a.type);if(i){n.addComponent(i)._parse(a,r)}else console.warn(`Unidentified component type: ${a.type}.`)}}static _createNodeByJson02(e,t){let a={},r={component:[],data:[]},n=HierarchyParserV2._createSprite3DInstance(e,a,t);return HierarchyParserV2._createComponentInstance(e,a,r),HierarchyParserV2._createInteractInstance(r,a),n}static _createInteractInstance(e,t){let a=e.component,r=e.data;for(let e=0,n=a.length;e<n;e++)a[e]._parseInteractive(r[e],t)}static parse(e){let t,a=e.data,r=[];switch(e.version){case"LAYAHIERARCHY:02":case"LAYASCENE3D:02":t=HierarchyParserV2._createNodeByJson02(a,r);break;default:t=HierarchyParserV2._createNodeByJson(a,r)}return t}static _createNodeByJson(e,a){let r;switch(e.type){case"Scene3D":r=new Scene3D;break;case"Sprite3D":r=new Sprite3D;break;case"MeshSprite3D":r=new MeshSprite3D,a&&e.props.isStatic&&a.push(r);break;case"SkinnedMeshSprite3D":r=new SkinnedMeshSprite3D;break;case"ShuriKenParticle3D":r=new ShuriKenParticle3D;break;case"Camera":r=new Camera;break;default:throw new Error(`Unidentified node type ${e.type}`)}let n=e.child;if(n)for(let e=0,t=n.length;e<t;e++){let t=HierarchyParserV2._createNodeByJson(n[e],a);r.addChild(t)}let i=e.components;if(i)for(let e=0,a=i.length;e<a;e++){let a=i[e],n=t.ClassUtils.getClass(a.type);if(n){r.addComponent(n)._parse(a)}else console.warn(`Unidentified component type: ${a.type}.`)}return r._parse(e.props,null),r}static collectResourceLinks(e,a){let r={},n=[];function addInnerUrl(e,i,o,s){let l=r[e];return void 0===l&&(l=t.URL.join(a,e),n.push({url:l,type:i,constructParams:o,propertyParams:s}),r[e]=l),l}return function check(e){let a=e.props;switch(e.type){case"Scene3D":let r=a.lightmaps;if(r)for(let e=0,a=r.length;e<a;e++){let a=r[e];if(a.path)a.path=addInnerUrl(a.path,t.Loader.TEXTURE2D,a.constructParams,a.propertyParams);else{let e=a.color;e.path=addInnerUrl(e.path,t.Loader.TEXTURE2D,e.constructParams,e.propertyParams);let r=a.direction;r&&(r.path=addInnerUrl(r.path,t.Loader.TEXTURE2D,r.constructParams,r.propertyParams))}}let n=a.reflectionTexture;n&&(a.reflection=addInnerUrl(n,t.Loader.TEXTURECUBE));let i=a.reflection;if(i&&(a.reflection=addInnerUrl(i,t.Loader.TEXTURECUBE)),a.sky){let e=a.sky.material;e&&(e.path=addInnerUrl(e.path,t.Loader.MATERIAL))}break;case"Camera":let o=a.skyboxMaterial;o&&(o.path=addInnerUrl(o.path,t.Loader.MATERIAL));break;case"TrailSprite3D":case"MeshSprite3D":case"SkinnedMeshSprite3D":case"SimpleSkinnedMeshSprite3D":let s=a.meshPath;s&&(a.meshPath=addInnerUrl(s,t.Loader.MESH));let l=a.materials;if(l)for(let e=0,a=l.length;e<a;e++)l[e].path=addInnerUrl(l[e].path,t.Loader.MATERIAL);"SimpleSkinnedMeshSprite3D"==e.type&&a.animatorTexture&&(a.animatorTexture=addInnerUrl(a.animatorTexture,t.Loader.TEXTURE2D));break;case"ShuriKenParticle3D":if(a.main){let e=a.renderer.resources,r=e.mesh,n=e.material;r&&(e.mesh=addInnerUrl(r,t.Loader.MESH)),n&&(e.material=addInnerUrl(n,t.Loader.MATERIAL))}else{let e=a.meshPath;e&&(a.meshPath=addInnerUrl(e,t.Loader.MESH)),a.material.path=addInnerUrl(a.material.path,t.Loader.MATERIAL)}break;case"Terrain":addInnerUrl(a.dataPath,t.Loader.TERRAINRES);break;case"ReflectionProbe":let h=a.reflection;h&&(a.reflection=addInnerUrl(h,t.Loader.TEXTURECUBE))}let r=e.components;if(r)for(let e=0,a=r.length;e<a;e++){let a=r[e];switch(a.type){case"Animator":let e=a.clipPaths;if(e)for(let a=0,r=e.length;a<r;a++)e[a]=addInnerUrl(e[a],t.Loader.ANIMATIONCLIP);else{let e=a.layers;for(let a=0;a<e.length;a++){let r=e[a].states;for(let e=0,a=r.length;e<a;e++){let a=r[e].clipPath;a&&(r[e].clipPath=addInnerUrl(a,t.Loader.ANIMATIONCLIP))}}}break;case"PhysicsCollider":case"Rigidbody3D":case"CharacterController":let r=a.shapes;for(let e=0;e<r.length;e++){let a=r[e];if("MeshColliderShape"===a.type){let e=a.mesh;e&&(a.mesh=addInnerUrl(e,t.Loader.MESH))}}}}let n=e.child;if(n)for(let e=0,t=n.length;e<t;e++)check(n[e])}(e.data),n}}t.HierarchyLoader.v2=HierarchyParserV2;t.Loader.registerLoader(["lavm"],class{load(e){return e.loader.fetch(e.url,"json",e.progress.createCallback(),e.options).then((e=>e?new AvatarMask(e):null))}});t.Loader.registerLoader(["glsl","vs","fs"],class{load(e){let a=e.url;return e.loader.fetch(a,"text",e.progress.createCallback(),e.options).then((a=>a?t.ShaderCompile.addInclude(e.url,a,!0):null))}});t.Loader.registerLoader(["controller"],class{load(e){return e.loader.fetch(e.url,"json",e.progress.createCallback(.2),e.options).then((t=>{let a=new AnimatorController(t);if(a.data&&a.data.controllerLayers){let t=a.data.controllerLayers,r=[];for(let a=t.length-1;a>=0;a--){t[a].avatarMask&&this.loadAvatarMask(t[a],r,e);let n=t[a].states;this.loadStates(n,r,e)}return Promise.all(r).then((()=>a))}return a}))}loadAvatarMask(e,a,r){let n=t.URL.getPath(r.url);if(e.avatarMask&&e.avatarMask._$uuid&&""!=e.avatarMask._$uuid){let i=t.URL.getResURLByUUID(e.avatarMask._$uuid);i.startsWith("res://")||(i=t.URL.join(n,i)),a.push(r.loader.load(i).then((t=>{e.avatarMask=t})))}else e.avatarMask=null}loadStates(e,a,r){let n=t.URL.getPath(r.url);for(let i=e.length-1;i>=0;i--){if(e[i].clip&&e[i].clip._$uuid){let o=t.URL.getResURLByUUID(e[i].clip._$uuid);o.startsWith("res://")||(o=t.URL.join(n,o)),a.push(r.loader.load(o).then((t=>{e[i].clip=t})))}e[i].states&&this.loadStates(e[i].states,a,r)}}});let k=t.ClassUtils.regClass;k("Sprite3D",Sprite3D),k("Scene3D",Scene3D),k("Camera",Camera),k("LightSprite",LightSprite),k("AreaLightCom",AreaLightCom),k("DirectionLightCom",DirectionLightCom),k("PointLightCom",PointLightCom),k("SpotLightCom",SpotLightCom),k("RenderableSprite3D",RenderableSprite3D),k("MeshSprite3D",MeshSprite3D),k("MeshFilter",MeshFilter),k("BaseRender",BaseRender),k("MeshRenderer",MeshRenderer),k("SimpleSkinnedMeshSprite3D",SimpleSkinnedMeshSprite3D),k("SkinnedMeshSprite3D",SkinnedMeshSprite3D),k("SkinnedMeshRenderer",SkinnedMeshRenderer),k("SimpleSkinnedMeshRenderer",SimpleSkinnedMeshRenderer),k("SkyRenderer",SkyRenderer),k("TrailFilter",TrailFilter),k("TrailRenderer",TrailRenderer),k("PixelLineRenderer",PixelLineRenderer),k("PixelLineData",PixelLineData),k("Gradient",Gradient),k("Transform3D",Transform3D),k("Lightmap",Lightmap),k("ReflectionProbe",ReflectionProbe),k("VolumetricGI",VolumetricGI),k("StaticBatchVolume",StaticBatchVolume),k("StaticInstanceBatchRender",StaticInstanceBatchRender),k("SphericalHarmonicsL2",SphericalHarmonicsL2),k("Viewport",t.Viewport),k("Bounds",Bounds),k("BoundBox",BoundBox),k("TextureCube",t.TextureCube),k("Mesh",Mesh),k("FloatKeyframe",FloatKeyframe),k("RenderTexture",t.RenderTexture),k("Animator",Animator),k("AnimatorController",AnimatorController),k("AnimatorControllerLayer",AnimatorControllerLayer),k("AnimatorState",AnimatorState),k("AnimationClip",AnimationClip),k("AvatarMask",AvatarMask),k("UI3D",UI3D),k("Material",t.Material),k("BlinnPhongMaterial",BlinnPhongMaterial),k("EffectMaterial",EffectMaterial),k("ExtendTerrainMaterial",ExtendTerrainMaterial),k("PBRStandardMaterial",PBRStandardMaterial),k("SkyBoxMaterial",SkyBoxMaterial),k("SkyPanoramicMaterial",SkyPanoramicMaterial),k("SkyProceduralMaterial",SkyProceduralMaterial),k("UnlitMaterial",UnlitMaterial),k("ShurikenParticleMaterial",ShurikenParticleMaterial),k("TrailMaterial",TrailMaterial),k("ShuriKenParticle3D",ShuriKenParticle3D),k("ShurikenParticleRenderer",ShurikenParticleRenderer),k("ShurikenParticleSystem",ShurikenParticleSystem),k("Burst",Burst),k("Emission",Emission),k("BaseShape",BaseShape),k("BoxShape",BoxShape),k("CircleShape",CircleShape),k("ConeShape",ConeShape),k("HemisphereShape",HemisphereShape),k("SphereShape",SphereShape),k("FrameOverTime",FrameOverTime),k("GradientAngularVelocity",GradientAngularVelocity),k("GradientColor",GradientColor),k("GradientDataInt",GradientDataInt),k("GradientDataNumber",GradientDataNumber),k("GradientSize",GradientSize),k("GradientVelocity",GradientVelocity),k("StartFrame",StartFrame),k("TextureSheetAnimation",TextureSheetAnimation),k("ColorOverLifetime",ColorOverLifetime),k("RotationOverLifetime",RotationOverLifetime),k("SizeOverLifetime",SizeOverLifetime),k("VelocityOverLifetime",VelocityOverLifetime),k("LODInfo",LODInfo),k("LODGroup",LODGroup),k("DirectionLightCom",DirectionLightCom),k("MeshRenderer",MeshRenderer),k("MeshFilter",MeshFilter),k("MeshRenderer",MeshRenderer),k("SkinnedMeshRenderer",SkinnedMeshRenderer),k("SimpleSkinnedMeshRenderer",SimpleSkinnedMeshRenderer),k("SkyRenderer",SkyRenderer),k("PostProcess",PostProcess),k("PostProcessEffect",PostProcessEffect),k("BloomEffect",BloomEffect),k("GaussianDoF",GaussianDoF),k("ScalableAO",ScalableAO),k("ColorGradEffect",ColorGradEffect),k("LensFlareEffect",LensFlareEffect),k("LensFlareElement",LensFlareElement),k("LensFlareData",LensFlareData);class HitResult{constructor(){this.succeeded=!1,this.collider=null,this.point=new t.Vector3,this.normal=new t.Vector3,this.hitFraction=0,this._inPool=!1}}class LensFlareSettingsLoader{load(e){return e.loader.fetch(e.url,"json",e.progress.createCallback(),e.options).then((a=>{if(!a)return null;let r=new LensFlareData,n=t.URL.getPath(e.url),i=[],o=a.elements;if(o)for(let a=o.length-1;a>=0;a--){let r=o[a];if(r.texture&&r.texture._$uuid&&""!=r.texture._$uuid){let a=t.URL.getResURLByUUID(r.texture._$uuid);a.startsWith("res://")||(a=t.URL.join(n,a)),i.push(e.loader.load(a).then((e=>{r.texture=e})))}r.tint&&(r.tint=new t.Color(r.tint.r,r.tint.g,r.tint.b,r.tint.a)),r.positionOffset&&(r.positionOffset=new t.Vector2(r.positionOffset.x,r.positionOffset.y)),r.scale&&(r.scale=new t.Vector2(r.scale.x,r.scale.y))}return Promise.all(i).then((()=>(r.elements=o,r)))}))}}t.Loader.registerLoader(["lensflare"],LensFlareSettingsLoader);var z={};class Texture2DArrayLoader{constructor(){z||(z={default:t.Texture2DArray.defaultTexture})}load(e){if(-1!=e.url.indexOf("internal/")){const a=z[t.Utils.getBaseName(e.url)];if(a)return Promise.resolve(a)}return e.loader.fetch(e.url,"json",e.progress.createCallback(),e.options).then((a=>{if(!a)return null;let r=a.width,n=a.height,i=a.depth,o=a.format,s=a.mipmap,l=a.sRGB,h=!!a.premultiplyAlpha,d=!!a.invertY,c=a.textures,u=[];for(let e=0;e<c.length;e++)u.push(c[e]);return Promise.all(u.map((t=>t?e.loader.fetch(t,"image",e.progress.createCallback(),e.options):Promise.resolve(null)))).then((e=>{if(t.LayaGL.renderEngine.getCapable(t.RenderCapable.Texture3D)){let a=new t.Texture2DArray(r,n,i,o,s,l);return a.setImageData(e,h,d),a}return null}))}))}}t.Loader.registerLoader(["tex2darray"],Texture2DArrayLoader,t.Loader.TEXTURE2DARRAY);class BoundSphere{constructor(e=new t.Vector3,a=0){this._center=e,this._radius=a}set center(e){e.cloneTo(this._center)}get center(){return this._center}set radius(e){this._radius=e}get radius(){return this._radius}toDefault(){this._center.toDefault(),this._radius=0}static createFromSubPoints(e,a,r,n){if(null==e)throw new Error("points");if(a<0||a>=e.length)throw new Error("start"+a+"Must be in the range [0, "+(e.length-1)+"]");if(r<0||a+r>e.length)throw new Error("count"+r+"Must be in the range <= "+e.length+"}");var i=a+r,o=BoundSphere._tempVector3;o.x=0,o.y=0,o.z=0;for(var s=a;s<i;++s)t.Vector3.add(e[s],o,o);var l=n.center;t.Vector3.scale(o,1/r,l);var h=0;for(s=a;s<i;++s){var d=t.Vector3.distanceSquared(l,e[s]);d>h&&(h=d)}n.radius=Math.sqrt(h)}static createfromPoints(e,t){if(null==e)throw new Error("points");BoundSphere.createFromSubPoints(e,0,e.length,t)}intersectsRayDistance(e){return CollisionUtils.intersectsRayAndSphereRD(e,this)}intersectsRayPoint(e,t){return CollisionUtils.intersectsRayAndSphereRP(e,this,t)}cloneTo(e){var t=e;this._center.cloneTo(t._center),t._radius=this._radius}clone(){var e=new BoundSphere(new t.Vector3,0);return this.cloneTo(e),e}}BoundSphere._tempVector3=new t.Vector3;class BoundsImpl{constructor(e,a){this._updateFlag=0,this._center=new t.Vector3,this._extent=new t.Vector3,this._boundBox=new BoundBox(new t.Vector3,new t.Vector3),e&&e.cloneTo(this._boundBox.min),a&&a.cloneTo(this._boundBox.max),this._setUpdateFlag(BoundsImpl._UPDATE_MIN|BoundsImpl._UPDATE_MAX,!1),this._setUpdateFlag(BoundsImpl._UPDATE_CENTER|BoundsImpl._UPDATE_EXTENT,!0)}get min(){return this.getMin()}set min(e){this.setMin(e)}get max(){return this.getMax()}set max(e){this.setMax(e)}setMin(e){var t=this._boundBox.min;e!==t&&e.cloneTo(t),this._setUpdateFlag(BoundsImpl._UPDATE_CENTER|BoundsImpl._UPDATE_EXTENT,!0),this._setUpdateFlag(BoundsImpl._UPDATE_MIN,!1)}getMin(){var e=this._boundBox.min;return this._getUpdateFlag(BoundsImpl._UPDATE_MIN)&&(this._getMin(this.getCenter(),this.getExtent(),e),this._setUpdateFlag(BoundsImpl._UPDATE_MIN,!1)),e}setMax(e){var t=this._boundBox.max;e!==t&&e.cloneTo(t),this._setUpdateFlag(BoundsImpl._UPDATE_CENTER|BoundsImpl._UPDATE_EXTENT,!0),this._setUpdateFlag(BoundsImpl._UPDATE_MAX,!1)}getMax(){var e=this._boundBox.max;return this._getUpdateFlag(BoundsImpl._UPDATE_MAX)&&(this._getMax(this.getCenter(),this.getExtent(),e),this._setUpdateFlag(BoundsImpl._UPDATE_MAX,!1)),e}setCenter(e){e!==this._center&&e.cloneTo(this._center),this._getMin(this._center,this._extent,this._boundBox.min),this._getMax(this._center,this._extent,this._boundBox.max),this._setUpdateFlag(BoundsImpl._UPDATE_CENTER|BoundsImpl._UPDATE_MIN|BoundsImpl._UPDATE_MAX,!1)}getCenter(){return this._getUpdateFlag(BoundsImpl._UPDATE_CENTER)&&(this._getCenter(this.getMin(),this.getMax(),this._center),this._setUpdateFlag(BoundsImpl._UPDATE_CENTER,!1)),this._center}setExtent(e){e!==this._extent&&e.cloneTo(this._extent),this._getMin(this._center,this._extent,this._boundBox.min),this._getMax(this._center,this._extent,this._boundBox.max),this._setUpdateFlag(BoundsImpl._UPDATE_CENTER|BoundsImpl._UPDATE_MIN|BoundsImpl._UPDATE_MAX,!1)}getExtent(){return this._getUpdateFlag(BoundsImpl._UPDATE_EXTENT)&&(this._getExtent(this.getMin(),this.getMax(),this._extent),this._setUpdateFlag(BoundsImpl._UPDATE_EXTENT,!1)),this._extent}_getUpdateFlag(e){return 0!=(this._updateFlag&e)}_setUpdateFlag(e,t){t?this._updateFlag|=e:this._updateFlag&=~e}_getCenter(e,a,r){t.Vector3.add(e,a,r),t.Vector3.scale(r,.5,r)}_getExtent(e,a,r){t.Vector3.subtract(a,e,r),t.Vector3.scale(r,.5,r)}_getMin(e,a,r){t.Vector3.subtract(e,a,r)}_getMax(e,a,r){t.Vector3.add(e,a,r)}_rotateExtents(e,t,a){var r=e.x,n=e.y,i=e.z,o=t.elements;a.x=Math.abs(o[0]*r)+Math.abs(o[4]*n)+Math.abs(o[8]*i),a.y=Math.abs(o[1]*r)+Math.abs(o[5]*n)+Math.abs(o[9]*i),a.z=Math.abs(o[2]*r)+Math.abs(o[6]*n)+Math.abs(o[10]*i)}_tranform(e,a){var r=a._center,n=a._extent;t.Vector3.transformCoordinate(this.getCenter(),e,r),this._rotateExtents(this.getExtent(),e,n),a._boundBox.setCenterAndExtent(r,n),a._updateFlag=0}_getBoundBox(){if(this._updateFlag&BoundsImpl._UPDATE_MIN){var e=this._boundBox.min;this._getMin(this.getCenter(),this.getExtent(),e),this._setUpdateFlag(BoundsImpl._UPDATE_MIN,!1)}if(this._updateFlag&BoundsImpl._UPDATE_MAX){var t=this._boundBox.max;this._getMax(this.getCenter(),this.getExtent(),t),this._setUpdateFlag(BoundsImpl._UPDATE_MAX,!1)}return this._boundBox}calculateBoundsintersection(e){var t=this.getMax(),a=this.getMin(),r=e.getMax(),n=e.getMin(),i=W,o=Y,s=this.getExtent(),l=e.getExtent();return i.setValue(Math.max(t.x,r.x)-Math.min(a.x,n.x),Math.max(t.y,r.y)-Math.min(a.y,n.y),Math.max(t.z,r.z)-Math.min(a.z,n.z)),o.setValue(2*(s.x+l.x),2*(s.y+l.y),2*(s.z+l.z)),i.x>o.x||i.y>o.y||i.z>o.z?-1:(o.x-i.x)*(o.y-i.y)*(o.z-i.z)}cloneTo(e){var t=e;this.getMin().cloneTo(t._boundBox.min),this.getMax().cloneTo(t._boundBox.max),this.getCenter().cloneTo(t._center),this.getExtent().cloneTo(t._extent),t._updateFlag=0}clone(){var e=new BoundsImpl(new t.Vector3,new t.Vector3);return this.cloneTo(e),e}}BoundsImpl._UPDATE_MIN=1,BoundsImpl._UPDATE_MAX=2,BoundsImpl._UPDATE_CENTER=4,BoundsImpl._UPDATE_EXTENT=8;const W=new t.Vector3,Y=new t.Vector3;class RandX{constructor(e){if(!(e instanceof Array)||4!==e.length)throw new Error("Rand:Seed must be an array with 4 numbers");this._state0U=0|e[0],this._state0L=0|e[1],this._state1U=0|e[2],this._state1L=0|e[3]}randomint(){var e=this._state0U,t=this._state0L,a=this._state1U,r=this._state1L,n=(r>>>0)+(t>>>0),i=a+e+(n/2>>>31)>>>0,o=n>>>0;this._state0U=a,this._state0L=r;var s=0,l=0;s=(e^=s=e<<23|(-512&t)>>>9)^a,l=(t^=l=t<<23)^r;s^=e>>>18,l^=t>>>18|(262143&e)<<14;return s^=a>>>5,l^=r>>>5|(31&a)<<27,this._state1U=s,this._state1L=l,[i,o]}random(){var e=this.randomint(),t=e[0],a=1023<<20|t>>>12,r=0|(e[1]>>>12|(4095&t)<<20);return RandX._CONVERTION_BUFFER.setUint32(0,a,!1),RandX._CONVERTION_BUFFER.setUint32(4,r,!1),RandX._CONVERTION_BUFFER.getFloat64(0,!1)-1}}var X,Q,K,Z,j,J,q,$;RandX._CONVERTION_BUFFER=new DataView(new ArrayBuffer(8)),RandX.defaultRand=new RandX([0,Date.now()/65536,0,Date.now()%65536]),e.ShadowLightType=void 0,(X=e.ShadowLightType||(e.ShadowLightType={}))[X.DirectionLight=0]="DirectionLight",X[X.SpotLight=1]="SpotLight",X[X.PointLight=2]="PointLight";class Physics3DUtils{}Physics3DUtils.COLLISIONFILTERGROUP_DEFAULTFILTER=1,Physics3DUtils.COLLISIONFILTERGROUP_STATICFILTER=2,Physics3DUtils.COLLISIONFILTERGROUP_KINEMATICFILTER=4,Physics3DUtils.COLLISIONFILTERGROUP_DEBRISFILTER=8,Physics3DUtils.COLLISIONFILTERGROUP_SENSORTRIGGER=16,Physics3DUtils.COLLISIONFILTERGROUP_CHARACTERFILTER=32,Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER1=64,Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER2=128,Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER3=256,Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER4=512,Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER5=1024,Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER6=2048,Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER7=4096,Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER8=8192,Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER9=16384,Physics3DUtils.COLLISIONFILTERGROUP_CUSTOMFILTER10=32768,Physics3DUtils.COLLISIONFILTERGROUP_ALLFILTER=-1,Physics3DUtils.PHYSXDEFAULTMASKVALUE=4294967295;class Size{constructor(e,t){this._width=0,this._height=0,this._width=e,this._height=t}static get fullScreen(){return new Size(-1,-1)}get width(){return-1===this._width?RenderContext3D.clientWidth:this._width}get height(){return-1===this._height?RenderContext3D.clientHeight:this._height}}e.RenderCMDType=void 0,(Q=e.RenderCMDType||(e.RenderCMDType={}))[Q.DrawNode=0]="DrawNode",Q[Q.DrawElement=1]="DrawElement",Q[Q.Blit=2]="Blit",Q[Q.ChangeData=3]="ChangeData",Q[Q.ChangeShaderDefine=4]="ChangeShaderDefine",Q[Q.ChangeViewPort=5]="ChangeViewPort",Q[Q.ChangeRenderTarget=6]="ChangeRenderTarget";class IndexBuffer3D{constructor(e,a,r=t.BufferUsage.Static,n=!1){switch(this._indexType=t.IndexFormat.UInt16,this._deviceBuffer=t.LayaGL.renderDeviceFactory.createIndexBuffer(r),this._deviceBuffer.indexType=this._indexType=e,this._deviceBuffer.indexCount=this._indexCount=a,this._canRead=n,this.bufferUsage=r,e){case t.IndexFormat.UInt32:this._indexTypeByteCount=4;break;case t.IndexFormat.UInt16:this._indexTypeByteCount=2;break;case t.IndexFormat.UInt8:this._indexTypeByteCount=1;break;default:throw new Error("unidentification index type.")}var i=this._indexTypeByteCount*a;if(this._byteLength=i,this._deviceBuffer._setIndexDataLength(i),n)switch(e){case t.IndexFormat.UInt32:this._buffer=new Uint32Array(a);break;case t.IndexFormat.UInt16:this._buffer=new Uint16Array(a);break;case t.IndexFormat.UInt8:this._buffer=new Uint8Array(a)}}get indexType(){return this._indexType}get indexTypeByteCount(){return this._indexTypeByteCount}get indexCount(){return this._indexCount}get canRead(){return this._canRead}setData(e,a=0,r=0,n=4294967295){var i=this._indexTypeByteCount;if(0!==r||4294967295!==n)switch(this._indexType){case t.IndexFormat.UInt32:e=new Uint32Array(e.buffer,r*i,n);break;case t.IndexFormat.UInt16:e=new Uint16Array(e.buffer,r*i,n);break;case t.IndexFormat.UInt8:e=new Uint8Array(e.buffer,r*i,n)}if(this._deviceBuffer._setIndexData(e,a*i),this._canRead)if(0!==a||0!==r||4294967295!==n){var o=this._buffer.length-a;if(n>o&&(n=o),typeof e==typeof this._buffer&&e.length==n)this._buffer.set(e,a);else for(var s=0;s<n;s++)this._buffer[a+s]=e[s]}else this._buffer=e}getData(){if(this._canRead)return this._buffer;throw new Error("Can't read data from VertexBuffer with only write flag!")}destroy(){this._deviceBuffer.destroy(),this._buffer=null,this._byteLength=0,this._indexCount=0}}class VertexBuffer3D{constructor(e,a,r=!1){this._float32Reader=null,this._deviceBuffer=t.LayaGL.renderDeviceFactory.createVertexBuffer(a),this._canRead=r,this._byteLength=e,this._deviceBuffer.setDataLength(e),this.bufferUsage=a,this._canRead&&(this._buffer=new Uint8Array(e),this._float32Reader=new Float32Array(this._buffer.buffer))}get vertexDeclaration(){return this._deviceBuffer.vertexDeclaration}set vertexDeclaration(e){this._deviceBuffer.vertexDeclaration=e}get instanceBuffer(){return this._deviceBuffer.instanceBuffer}set instanceBuffer(e){this._deviceBuffer.instanceBuffer=e}get canRead(){return this._canRead}setData(e,t=0,a=0,r=Number.MAX_SAFE_INTEGER){if(this._deviceBuffer.setData(e,t,a,r),0!==a||r!==Number.MAX_SAFE_INTEGER){var n=new Uint8Array(e,a,r);this._canRead&&this._buffer.set(n,t)}else this._canRead&&this._buffer.set(new Uint8Array(e),t)}getUint8Data(){if(this._canRead)return this._buffer;throw new Error("Can't read data from VertexBuffer with only write flag!")}getFloat32Data(){if(this._canRead)return this._float32Reader;throw new Error("Can't read data from VertexBuffer with only write flag!")}markAsUnreadbale(){this._canRead=!1,this._buffer=null,this._float32Reader=null}destroy(){this._deviceBuffer.destroy(),this._buffer=null,this._float32Reader=null,this._byteLength=0}}class LengencyRenderEngine3DFactory{createVertexBuffer3D(e,t,a=!1){return new VertexBuffer3D(e,t,a)}createIndexBuffer3D(e,a,r=t.BufferUsage.Static,n=!1){return new IndexBuffer3D(e,a,r,n)}}t.Laya.addBeforeInitCallback((()=>{Laya3DRender.renderOBJCreate||(Laya3DRender.renderOBJCreate=new LengencyRenderEngine3DFactory)})),e.ECharacterCapable=void 0,(K=e.ECharacterCapable||(e.ECharacterCapable={}))[K.Charcater_Gravity=0]="Charcater_Gravity",K[K.Charcater_CollisionGroup=1]="Charcater_CollisionGroup",K[K.Charcater_WorldPosition=2]="Charcater_WorldPosition",K[K.Charcater_Move=3]="Charcater_Move",K[K.Charcater_Jump=4]="Charcater_Jump",K[K.Charcater_StepOffset=5]="Charcater_StepOffset",K[K.Character_UpDirection=6]="Character_UpDirection",K[K.Character_FallSpeed=7]="Character_FallSpeed",K[K.Character_SlopeLimit=8]="Character_SlopeLimit",K[K.Character_PushForce=9]="Character_PushForce",K[K.Character_Radius=10]="Character_Radius",K[K.Character_Height=11]="Character_Height",K[K.Character_offset=12]="Character_offset",K[K.Character_Skin=13]="Character_Skin",K[K.Character_minDistance=14]="Character_minDistance",K[K.Character_EventFilter=15]="Character_EventFilter",K[K.Character_SimulateGravity=16]="Character_SimulateGravity",e.EColliderCapable=void 0,(Z=e.EColliderCapable||(e.EColliderCapable={}))[Z.Collider_CollisionGroup=0]="Collider_CollisionGroup",Z[Z.Collider_Friction=1]="Collider_Friction",Z[Z.Collider_RollingFriction=2]="Collider_RollingFriction",Z[Z.Collider_Restitution=3]="Collider_Restitution",Z[Z.Collider_AllowTrigger=4]="Collider_AllowTrigger",Z[Z.Collider_DynamicFriction=5]="Collider_DynamicFriction",Z[Z.Collider_StaticFriction=6]="Collider_StaticFriction",Z[Z.Collider_BounceCombine=7]="Collider_BounceCombine",Z[Z.Collider_FrictionCombine=8]="Collider_FrictionCombine",Z[Z.Collider_EventFilter=9]="Collider_EventFilter",Z[Z.Collider_CollisionDetectionMode=10]="Collider_CollisionDetectionMode",Z[Z.RigidBody_CanKinematic=11]="RigidBody_CanKinematic",Z[Z.RigidBody_AllowSleep=12]="RigidBody_AllowSleep",Z[Z.RigidBody_Gravity=13]="RigidBody_Gravity",Z[Z.RigidBody_LinearDamp=14]="RigidBody_LinearDamp",Z[Z.RigidBody_AngularDamp=15]="RigidBody_AngularDamp",Z[Z.RigidBody_LinearVelocity=16]="RigidBody_LinearVelocity",Z[Z.RigidBody_AngularVelocity=17]="RigidBody_AngularVelocity",Z[Z.RigidBody_Mass=18]="RigidBody_Mass",Z[Z.RigidBody_WorldPosition=19]="RigidBody_WorldPosition",Z[Z.RigidBody_WorldOrientation=20]="RigidBody_WorldOrientation",Z[Z.RigidBody_InertiaTensor=21]="RigidBody_InertiaTensor",Z[Z.RigidBody_MassCenter=22]="RigidBody_MassCenter",Z[Z.RigidBody_MaxAngularVelocity=23]="RigidBody_MaxAngularVelocity",Z[Z.RigidBody_MaxDepenetrationVelocity=24]="RigidBody_MaxDepenetrationVelocity",Z[Z.RigidBody_SleepThreshold=25]="RigidBody_SleepThreshold",Z[Z.RigidBody_SleepAngularVelocity=26]="RigidBody_SleepAngularVelocity",Z[Z.RigidBody_SolverIterations=27]="RigidBody_SolverIterations",Z[Z.RigidBody_AllowDetectionMode=28]="RigidBody_AllowDetectionMode",Z[Z.RigidBody_AllowKinematic=29]="RigidBody_AllowKinematic",Z[Z.RigidBody_AllowCharacter=30]="RigidBody_AllowCharacter",Z[Z.RigidBody_LinearFactor=31]="RigidBody_LinearFactor",Z[Z.RigidBody_AngularFactor=32]="RigidBody_AngularFactor",Z[Z.RigidBody_ApplyForce=33]="RigidBody_ApplyForce",Z[Z.RigidBody_ClearForce=34]="RigidBody_ClearForce",Z[Z.RigidBody_ApplyForceWithOffset=35]="RigidBody_ApplyForceWithOffset",Z[Z.RigidBody_ApplyTorque=36]="RigidBody_ApplyTorque",Z[Z.RigidBody_ApplyImpulse=37]="RigidBody_ApplyImpulse",Z[Z.RigidBody_ApplyTorqueImpulse=38]="RigidBody_ApplyTorqueImpulse",e.EJointCapable=void 0,(j=e.EJointCapable||(e.EJointCapable={}))[j.Joint_Anchor=0]="Joint_Anchor",j[j.Joint_ConnectAnchor=1]="Joint_ConnectAnchor";class FrustumCulling{static cullingRenderBounds(e,t){for(var a=t.cullPlaneCount,r=t.cullPlanes,n=e.getMin(),i=e.getMax(),o=n.x,s=n.y,l=n.z,h=i.x,d=i.y,c=i.z,u=!0,_=0;_<a;_++){var m=r[_],f=m.normal;if(m.distance+f.x*(f.x<0?o:h)+f.y*(f.y<0?s:d)+f.z*(f.z<0?l:c)<0){u=!1;break}}return u}}FrustumCulling._tempV30=new t.Vector3,FrustumCulling._tempV31=new t.Vector3;class RenderElementBatch{constructor(){RenderElementBatch.instance=this,this._instanceBatchManager=InstanceBatchManager.instance,this._recoverList=new t.SingletonList}recoverData(){let e=this._recoverList.elements;for(let t=0,a=this._recoverList.length;t<a;t++){e[t].recover()}this._recoverList.length=0}batch(e){e.length,e.length=0,this._instanceBatchManager.updateCountMark++,e.elements}}class WebXRCamera extends Camera{constructor(){super(...arguments),this.isWebXR=!0}get renderTarget(){return this._internalRenderTexture}set renderTarget(e){this._internalRenderTexture=e}set clientWidth(e){this._clientWidth=e}set clientHeight(e){this._clientHeight=e}get clientWidth(){return this._clientWidth}get clientHeight(){return this._clientHeight}_restoreView(e){var t,a,r=this.viewport,n=r.width,i=r.height;this._needInternalRenderTexture()?(t=0,a=0):(t=r.x,a=this._getCanvasHeight()-r.y-i),e.viewport(t,a,n,i)}render(){if(this.activeInHierarchy){this.viewport;var e=RenderContext3D._instance;e.scene=this._scene,e.pipelineMode=e.configPipeLineMode}}_renderMainPass(e,t,a,r,n,i){}_calculateProjectionMatrix(){}clear(e){e.viewport(0,0,this._clientWidth,this._clientHeight),e.scissor(0,0,this._clientWidth,this._clientHeight),e.clearColor(this.clearColor.r,this.clearColor.g,this.clearColor.b,this.clearColor.a),t.RenderStateContext.setDepthMask(!0),e.clear(e.COLOR_BUFFER_BIT|e.DEPTH_BUFFER_BIT)}destroy(){super.destroy(!0)}}class WebXRRenderTexture extends t.RenderTexture{constructor(){super(1,1,1,t.RenderTargetFormat.STENCIL_8,!1,1),this.frameLoop=-1}set frameBuffer(e){this._frameBuffer=e}_create(e,t){}}class WebXRSessionManager extends t.EventDispatcher{constructor(){super(),this.currentTimestamp=-1,this.defaultHeightCompensation=1.7,this._sessionEnded=!1}get referenceSpace(){return this._referenceSpace}set referenceSpace(e){this._referenceSpace=e}get sessionMode(){return this._sessionMode}exitXR(){this.endXRRenderLoop(),this.event(WebXRSessionManager.EVENT_MANAGER_END)}initializeXRGL(e,t){return t.makeXRCompatible().then((()=>!0))}initializeAsync(){return this._xrNavigator=navigator,this._xrNavigator.xr?Promise.resolve():Promise.reject("WebXR not available")}isSessionSupportedAsync(e){if(!navigator.xr)return Promise.resolve(!1);this._xrNavigator=navigator;return navigator.xr.isSessionSupported||navigator.xr.supportsSession?navigator.xr.isSessionSupported(e):Promise.resolve(!1)}initializeSessionAsync(e="immersive-vr",t={}){return this._xrNavigator.xr.requestSession("immersive-vr").then((t=>(this.session=t,this._sessionMode=e,this._sessionEnded=!1,this.session.addEventListener("end",(()=>{this._sessionEnded=!0,this.exitXR()}),{once:!0}),this.session)))}resetReferenceSpace(){this.referenceSpace=this.baseReferenceSpace}runXRRenderLoop(){this.session.requestAnimationFrame.bind(this.session);let fn=(e,a)=>{this._updateByXrFrame(a,e),this.event(WebXRSessionManager.EVENT_FRAME_LOOP,[a]),t.ILaya.stage._loop(),this.session.requestAnimationFrame(fn)};this.session.requestAnimationFrame(fn)}endXRRenderLoop(){}_updateByXrFrame(e,t){this.currentFrame=e,this.currentTimestamp=t}setReferenceSpaceTypeAsync(e="local-floor"){return this.session.requestReferenceSpace(e).then((e=>e),(e=>this.session.requestReferenceSpace("viewer").then((e=>{const t=new XRRigidTransform({x:0,y:-this.defaultHeightCompensation,z:0});return e.getOffsetReferenceSpace(t)}),(e=>{throw'XR initialization failed: required "viewer" reference space type not supported.'})))).then((e=>(this.referenceSpace=this.baseReferenceSpace=e,this.referenceSpace)))}updateRenderStateAsync(e){return e.baseLayer&&(this._baseLayer=e.baseLayer),this.session.updateRenderState(e)}get currentFrameRate(){var e;return null===(e=this.session)||void 0===e?void 0:e.frameRate}get supportedFrameRates(){var e;return null===(e=this.session)||void 0===e?void 0:e.supportedFrameRates}updateTargetFrameRate(e){return this.session.updateTargetFrameRate(e)}destroy(){this._sessionEnded||this.exitXR()}}WebXRSessionManager.EVENT_MANAGER_END="xrManagerDestory",WebXRSessionManager.EVENT_FRAME_LOOP="xrFrameLoop";class WebXRCameraManager{constructor(e,a=null){this._referenceQuaternion=new t.Quaternion,this._referencedPosition=new t.Vector3,this._firstFrame=!0,this._XRRenderTexture=new WebXRRenderTexture,this._rigCameras=new Array,this._position=new t.Vector3,this.owner=e,this.owner.enableRender=!1,this.owner.aspectRatio||console.warn("owner is not Camera"),this._webXRSessionManager=a,this._webXRSessionManager.on(WebXRSessionManager.EVENT_FRAME_LOOP,this,this._updateFromXRSession),this._webXRSessionManager.on(WebXRSessionManager.EVENT_FRAME_LOOP,this,this._updateReferenceSpace),this._webXRSessionManager.on(WebXRSessionManager.EVENT_MANAGER_END,this,this.destroy)}get position(){return this._position}set position(e){e.cloneTo(this._position)}set rotationQuaternion(e){e.cloneTo(this._referenceQuaternion)}get rotationQuaternion(){return this._referenceQuaternion}get rigCameras(){return this._rigCameras}_updateFromXRSession(){let e=this._webXRSessionManager.currentFrame&&this._webXRSessionManager.currentFrame.getViewerPose(this._webXRSessionManager.referenceSpace);const t=e.transform.position,a=e.transform.orientation;this._referenceQuaternion.setValue(a.x,a.y,a.z,a.w),this._referencedPosition.setValue(t.x,t.y,t.z),this._firstFrame?(this._firstFrame=!1,this.position.y+=this._referencedPosition.y,this._referenceQuaternion.setValue(0,0,0,1)):(this.rotationQuaternion=this._referenceQuaternion,this.position=this._referencedPosition),this.rigCameras.length!==e.views.length&&this._updateNumberOfRigCameras(e.views.length),e.views.forEach(((e,t)=>{const a=this.rigCameras[t];"right"===e.eye?a.name="right":"left"===e.eye&&(a.name="left");const r=e.transform.position,n=e.transform.orientation;if(a.transform.position.setValue(r.x,r.y,r.z),a.transform.rotation.setValue(n.x,n.y,n.z,n.w),a.transform.position=a.transform.position,a.transform.rotation=a.transform.rotation,this._webXRSessionManager.session.renderState.baseLayer){var i=this._webXRSessionManager.session.renderState.baseLayer.getViewport(e),o=this._webXRSessionManager.session.renderState.baseLayer.framebufferWidth,s=this._webXRSessionManager.session.renderState.baseLayer.framebufferHeight;this._XRRenderTexture.frameBuffer=this._webXRSessionManager.session.renderState.baseLayer.framebuffer,a.renderTarget=this._XRRenderTexture,a.clientWidth=o,a.clientHeight=s;var l=a.viewport;l.x=i.x,l.y=i.y,l.width=i.width,l.height=i.height,a.viewport=l,a.projectionMatrix.cloneByArray(e.projectionMatrix)}}))}_updateNumberOfRigCameras(e=1){for(;this.rigCameras.length<e;){var t=new WebXRCamera(this.owner.aspectRatio,this.owner.nearPlane,this.owner.farPlane);t.clearFlag=this.owner.clearFlag,t.clearColor=this.owner.clearColor,this.owner.addChild(t),this.rigCameras.push(t)}for(;this.rigCameras.length>e;){let e=this.rigCameras.pop();this.owner.removeChild(e)}}_updateReferenceSpace(){}destroy(){this.owner.enableRender=!0,this._webXRSessionManager.off(WebXRSessionManager.EVENT_FRAME_LOOP,this,this._updateFromXRSession),this._webXRSessionManager.off(WebXRSessionManager.EVENT_FRAME_LOOP,this,this._updateReferenceSpace),this._webXRSessionManager.off(WebXRSessionManager.EVENT_MANAGER_END,this,this.destroy),this._rigCameras.forEach((e=>{e.destroy()})),this._rigCameras=null,this._XRRenderTexture.destroy()}}class AxiGamepad extends t.EventDispatcher{constructor(e,t){super(),this.axisData=new Array,this.handness=e,this.axisData.length=t,this.axisLength=t}update(e){for(let a=0,r=0;a<e.axes.length;a+=2,++r)this.axisData[r]||(this.axisData[r]=new t.Vector2),this.axisData[r].setValue(e.axes[a],e.axes[a+1]),this.outPutStickValue(this.axisData[r],r)}outPutStickValue(e,t){const a=AxiGamepad.EVENT_OUTPUT+t.toString();this.event(a,[e])}destroy(){for(let e=0;e<this.axisLength;e++){let t=AxiGamepad.EVENT_OUTPUT+e.toString();this.offAll(t)}}}AxiGamepad.EVENT_OUTPUT="outputAxi_id";class ButtonGamepad extends t.EventDispatcher{constructor(e,t){super(),this.lastTouch=!1,this.lastPress=!1,this.lastPressValue=0,this.touch=!1,this.press=!1,this.pressValue=0,this.handness=e,this.index=t}update(e){this.lastTouch=this.touch,this.lastPress=this.press,this.lastPressValue=this.pressValue,this.touch=e.touched,this.press=e.pressed,this.pressValue=e.value,(this.lastTouch||this.touch)&&(this.lastTouch!=this.touch&&this.touch?this.touchEnter():this.lastTouch==this.touch&&this.touch?this.touchStay():this.lastTouch==this.touch||this.touch||this.touchOut(),this.lastPress!=this.press&&this.press?this.pressEnter():this.lastPress==this.press&&this.press?this.pressStay():this.lastPress==this.press||this.press||this.pressOut(),this.touch&&this.outpressed())}touchEnter(){this.event(ButtonGamepad.EVENT_TOUCH_ENTER)}touchStay(){this.event(ButtonGamepad.EVENT_TOUCH_STAY)}touchOut(){this.event(ButtonGamepad.EVENT_TOUCH_OUT)}pressEnter(){this.event(ButtonGamepad.EVENT_PRESS_ENTER)}pressStay(){this.event(ButtonGamepad.EVENT_PRESS_STAY)}pressOut(){this.event(ButtonGamepad.EVENT_PRESS_OUT)}outpressed(){this.event(ButtonGamepad.EVENT_PRESS_VALUE,[this.pressValue])}destroy(){this.offAll(ButtonGamepad.EVENT_PRESS_ENTER),this.offAll(ButtonGamepad.EVENT_PRESS_STAY),this.offAll(ButtonGamepad.EVENT_PRESS_OUT),this.offAll(ButtonGamepad.EVENT_PRESS_ENTER),this.offAll(ButtonGamepad.EVENT_PRESS_STAY),this.offAll(ButtonGamepad.EVENT_PRESS_OUT),this.offAll(ButtonGamepad.EVENT_PRESS_VALUE)}}ButtonGamepad.EVENT_TOUCH_ENTER="touchEnter",ButtonGamepad.EVENT_TOUCH_STAY="touchStay",ButtonGamepad.EVENT_TOUCH_OUT="touchOut",ButtonGamepad.EVENT_PRESS_ENTER="pressEnter",ButtonGamepad.EVENT_PRESS_STAY="pressStay",ButtonGamepad.EVENT_PRESS_OUT="pressOut",ButtonGamepad.EVENT_PRESS_VALUE="outpressed";class WebXRInput extends t.EventDispatcher{constructor(e){super(),this.preButtonEventList=[],this.preAxisEventList=[],this.handness=e,this.position=new t.Vector3,this.rotation=new t.Quaternion,this.ray=new Ray(new t.Vector3,new t.Vector3)}_updateByXRPose(e,a){const r=e.getPose(this._inputSource.targetRaySpace,a);if(this._lastXRPose=r,r){const e=r.transform.position,a=r.transform.orientation;WebXRInput.tempQua.setValue(a.x,a.y,a.z,a.w),this.ray.origin.setValue(e.x,e.y,e.z),t.Vector3.transformQuat(t.Vector3.UnitZ,WebXRInput.tempQua,this.ray.direction),t.Vector3.scale(this.ray.direction,-1,this.ray.direction)}if(this._inputSource.gripSpace){let t=e.getPose(this._inputSource.gripSpace,a);if(t){const e=t.transform.position,a=t.transform.orientation;this.position.setValue(e.x,e.y,e.z),this.rotation.setValue(a.x,a.y,a.z,a.w)}}this.event(WebXRInput.EVENT_FRAMEUPDATA_WEBXRINPUT,[this]),this._handleProcessGamepad()}_handleProcessGamepad(){const e=this._inputSource.gamepad;if(this.gamepadAxis||(this.gamepadAxis=new AxiGamepad(this.handness,e.axes.length),this.preAxisEventList.forEach((e=>{this.gamepadAxis.on(e.eventnam,e.caller,e.listener)}))),!this.gamepadButton){this.gamepadButton=[];for(let t=0;t<e.buttons.length;++t)this.gamepadButton.push(new ButtonGamepad(this.handness,t));this.preButtonEventList.forEach((e=>{this.addButtonEvent(e.index,e.type,e.caller,e.listener)}))}this.gamepadAxis.update(e);for(let t=0;t<e.buttons.length;++t){this.gamepadButton[t].update(e.buttons[t])}}addButtonEvent(e,t,a,r){if(this.gamepadButton){this.gamepadButton[e].on(t,a,r)}else this.preButtonEventList.push({index:e,type:t,caller:a,listener:r})}addAxisEvent(e,t,a,r){if(this.gamepadAxis){const n=t+e.toString();this.gamepadAxis.on(n,a,r)}else this.preAxisEventList.push({eventnam:t+e.toString(),caller:a,listener:r})}offAxisEvent(e,t,a,r){if(this.gamepadAxis){const n=t+e.toString();this.gamepadAxis.off(n,a,r)}}offButtonEvent(e,t,a,r){if(this.gamepadButton){this.gamepadButton[e].off(t,a,r)}}destroy(){this.preButtonEventList=null,this.ray=null,this.position=null,this.rotation=null,this.gamepadAxis.destroy(),this.gamepadButton.forEach((e=>{e.destroy()}))}}WebXRInput.HANDNESS_LEFT="left",WebXRInput.HANDNESS_RIGHT="right",WebXRInput.EVENT_FRAMEUPDATA_WEBXRINPUT="frameXRInputUpdate",WebXRInput.tempQua=new t.Quaternion;class WebXRInputManager{constructor(e,a){this.controllers=new Map,this.controllerHandMesh=new Map,this.controllerLineRender=new Map,this.lineColor=t.Color.RED,this.rayLength=2,this.webXRSessionManager=e,this.webXRCameraManager=a,this.webXRSessionManager.on(WebXRSessionManager.EVENT_MANAGER_END,this,this.destory),this.webXRSessionManager.on(WebXRSessionManager.EVENT_FRAME_LOOP,this,this._updateFromXRFrame)}_updataMeshRender(e){const a=e.handness;if(this.controllerHandMesh.has(a)){let t=this.controllerHandMesh.get(a);t.transform.position=e.position,t.transform.rotation=e.rotation}if(this.controllerLineRender.has(a)){let r=this.controllerLineRender.get(a);r.clear();let n=e.ray;WebXRInputManager.tempVec.setValue(n.origin.x,n.origin.y,n.origin.z),t.Vector3.scale(n.direction,this.rayLength,WebXRInputManager.tempVec1),t.Vector3.add(WebXRInputManager.tempVec,WebXRInputManager.tempVec1,WebXRInputManager.tempVec1),r.addLine(WebXRInputManager.tempVec,WebXRInputManager.tempVec1,this.lineColor,this.lineColor)}}_updateFromXRFrame(e){const t=this.webXRSessionManager.session,a=this.webXRSessionManager.referenceSpace;for(let r of t.inputSources){const t=r.handedness;let n;n=this.controllers.has(t)?this.controllers.get(t):this.getController(t),n&&(n=this.controllers.get(t),n._inputSource=r,n._updateByXRPose(e,a))}}bindMeshNode(e,t){this.controllerHandMesh.set(t,e)}bindRayNode(e,t){this.controllerLineRender.set(t,e)}getController(e){if("left"!=e&&"right"!=e)return null;if(!this.controllers.has(e)){let t=new WebXRInput(e);this.controllers.set(e,t),t.on(WebXRInput.EVENT_FRAMEUPDATA_WEBXRINPUT,this,this._updataMeshRender)}return this.controllers.get(e)}destory(){this.webXRSessionManager.off(WebXRSessionManager.EVENT_FRAME_LOOP,this,this._updateFromXRFrame);for(let e in this.controllers)this.controllers.get(e).off("frameXRInputUpdate",this,this._updataMeshRender),this.controllers.get(e).destroy();this.controllers=null,this.controllerHandMesh=null,this.controllerLineRender=null}}WebXRInputManager.tempVec=new t.Vector3,WebXRInputManager.tempVec1=new t.Vector3;class WebXRExperienceHelper{static supportXR(e){return WebXRExperienceHelper.xr_Manager.isSessionSupportedAsync(e).then((e=>(WebXRExperienceHelper.supported=e,e)))}static enterXRAsync(e,t,a){return"immersive-ar"===e&&"unbounded"!==t&&console.warn("We recommend using 'unbounded' reference space type when using 'immersive-ar' session mode"),WebXRExperienceHelper.xr_Manager.initializeSessionAsync(e).then((()=>WebXRExperienceHelper.xr_Manager.setReferenceSpaceTypeAsync(t))).then((()=>WebXRExperienceHelper.xr_Manager.initializeXRGL(e,LayaGL.renderEngine.gl))).then((()=>(WebXRExperienceHelper.glInstance=LayaGL.renderEngine.gl,WebXRExperienceHelper.xr_Manager.updateRenderStateAsync({depthFar:a.depthFar,depthNear:a.depthNear,baseLayer:new XRWebGLLayer(WebXRExperienceHelper.xr_Manager.session,LayaGL.renderEngine.gl)})))).then((()=>(WebXRExperienceHelper.xr_Manager.runXRRenderLoop(),WebXRExperienceHelper.xr_Manager)))}static setWebXRCamera(e,t){return new WebXRCameraManager(e,t)}static setWebXRInput(e,t){return new WebXRInputManager(e,t)}}WebXRExperienceHelper.xr_Manager=new WebXRSessionManager,WebXRExperienceHelper.supported=!1,WebXRExperienceHelper.canvasOptions={antialias:!0,depth:!0,stencil:!1,alpha:!0,multiview:!1,framebufferScaleFactor:1};e.D6MotionType=void 0,(J=e.D6MotionType||(e.D6MotionType={}))[J.eX=0]="eX",J[J.eY=1]="eY",J[J.eZ=2]="eZ",J[J.eTWIST=3]="eTWIST",J[J.eSWING1=4]="eSWING1",J[J.eSWING2=5]="eSWING2",e.D6Axis=void 0,(q=e.D6Axis||(e.D6Axis={}))[q.eLOCKED=0]="eLOCKED",q[q.eLIMITED=1]="eLIMITED",q[q.eFREE=2]="eFREE",e.D6Drive=void 0,($=e.D6Drive||(e.D6Drive={}))[$.eX=0]="eX",$[$.eY=1]="eY",$[$.eZ=2]="eZ",$[$.eSWING=3]="eSWING",$[$.eTWIST=4]="eTWIST",$[$.eSLERP=5]="eSLERP";var ee=t.Script;class HLODRender extends BaseRender{constructor(){super(),this._singleton=!1}get curHLODRS(){return this._curHLODRS}set curHLODRS(e){this._curHLODRS||(this._renderElements=[],this._renderElements.push(new RenderElement),this._renderElements[0].render=this),e!=this._curHLODRS&&(this._changeMesh(e.HLODMesh),this._curHLODRS=e,this._createRenderelementByHLODElement(this._curHLODRS,this._renderElements[0]))}_createRenderelementByHLODElement(e,t){t.setGeometry(e.HLODMesh),t.material=e.material}_changeMesh(e){var t=this._baseRenderNode.shaderData;this.boundsChange=!0;let a=MeshFilter._meshVerticeDefine;if(this.curHLODRS){MeshUtil.getMeshDefine(this.curHLODRS.HLODMesh.batchMesh,a);for(var r=0,n=a.length;r<n;r++)t.removeDefine(MeshFilter._meshVerticeDefine[r])}if(e){MeshUtil.getMeshDefine(e.batchMesh,a);for(r=0,n=MeshFilter._meshVerticeDefine.length;r<n;r++)t.addDefine(MeshFilter._meshVerticeDefine[r])}this._curSubBatchMeshBounds.length=e.batchSubMeshInfo.length;for(let t=0,a=e.batchSubMeshInfo.length;t<a;t++)this._curSubBatchMeshBounds[t]=this._curSubBatchMeshBounds[t]?this._curSubBatchMeshBounds[t]:new Bounds}_applyLightMapParams(){if(this._scene){var e=this._baseRenderNode.shaderData,t=this._curHLODRS.lightmap;t&&t.lightmapColor?(e.setTexture(RenderableSprite3D.LIGHTMAP,t.lightmapColor),e.addDefine(RenderableSprite3D.SAHDERDEFINE_LIGHTMAP),t.lightmapDirection?(e.setTexture(RenderableSprite3D.LIGHTMAP_DIRECTION,t.lightmapDirection),e.addDefine(RenderableSprite3D.SHADERDEFINE_LIGHTMAP_DIRECTIONAL)):e.removeDefine(RenderableSprite3D.SHADERDEFINE_LIGHTMAP_DIRECTIONAL)):(e.removeDefine(RenderableSprite3D.SAHDERDEFINE_LIGHTMAP),e.removeDefine(RenderableSprite3D.SHADERDEFINE_LIGHTMAP_DIRECTIONAL))}}_calculateBoundingBox(){if(this._curHLODRS){var e=this._curHLODRS.HLODMesh;if(e){var t=this._transform.worldMatrix;e.batchMesh.bounds._tranform(t,this._bounds)}for(let a=0,r=this._curSubBatchMeshBounds.length;a<r;a++)e.batchSubMeshInfo[a].bounds._tranform(t,this._curSubBatchMeshBounds[a])}}_renderUpdate(e){this._applyLightMapParams(),this._baseRenderNode.shaderData.setMatrix4x4(Sprite3D.WORLDMATRIX,this._transform.worldMatrix)}_needRender(e,t){if(e){if(e.intersects(this.bounds)){let t=this.curHLODRS.HLODMesh.drawSubMeshs,a=this._curHLODRS.HLODMesh.batchSubMeshInfo;t.length=0;for(let r=0,n=this._curSubBatchMeshBounds.length;r<n;r++)e.intersects(this._curSubBatchMeshBounds[r])&&t.push(a[r]);return this._curHLODRS.HLODMesh.drawSubMeshs=t,!0}return!1}return!0}onEnable(){super.onEnable()}onDisable(){super.onDisable()}onDestroy(){super.onDestroy(),this._renderElements.forEach((e=>{e.material._removeReference(),e.destroy()})),this._renderElements=null}_cloneTo(e){}}const te=new t.Vector3;class HLOD extends t.Component{constructor(){super(),this._singleton=!0}get bounds(){return this._bounds}set bounds(e){this._bounds=e,this.recalculateBounds()}get lodResource(){return this._resourceList}set lodResource(e){this._resourceList=e}set lodCullRateArray(e){e.sort(((e,t)=>t-e)),this._lodRateArray=e}get lodCullRateArray(){return this._lodRateArray}_applyLODResource(e){this._curLODSource=e;let t=e.resources;for(let e=0,a=t.length;e<a;e++){let a=this.owner.addComponent(HLODRender);this._curRender.push(a),a.curHLODRS=t[e]}}_releaseGroupRender(){this._curRender.forEach((e=>{e.destroy()})),this._curRender=[]}recalculateBounds(){let e=this._bounds.getExtent();this._size=2*Math.max(e.x,e.y,e.z)}onPreRender(){let e=this.owner.scene.cullInfoCamera,a=e.maxlocalYDistance,r=e.boundFrustum;t.Vector3.subtract(this.owner.transform.position,e.transform.position,te);let n=te.length();if(n>e.farPlane||0==r.containsPoint(this.owner.transform.position))return;let i=n/e.farPlane*a,o=this._size/i;for(let e=0;e<this._lodRateArray.length;e++)if(!(o<this._lodRateArray[e])){this.applyResource(this._resourceList[e]);break}}onUpdate(){this._curLODSource.updateMark=Camera._updateMark}applyResource(e){e!=this._curLODSource&&(e.loaded?this._curLODSource&&(this._releaseGroupRender(),this._applyLODResource(e)):e.load(this.applyResource,this))}onEnable(){super.onEnable()}onDisable(){super.onDisable()}onDestroy(){super.onDestroy()}_cloneTo(e){throw"cant clone HLOD"}}class StaticBatchSubInfo{constructor(){this.indexStart=0,this.indexCount=0,this.meshBounds=new Bounds(new t.Vector3,new t.Vector3),this.needRender=!1}}class StaticBatchSubMesh extends GeometryElement{constructor(){super(t.MeshTopology.Triangles,t.DrawType.DrawElement),this.subInfos=[]}addSubMesh(e,t,a){let r=new StaticBatchSubInfo;r.indexCount=e,r.indexStart=t,a.cloneTo(r.meshBounds),this.subInfos.push(r)}_getType(){return StaticBatchSubMesh._type}_updateRenderParams(e){this.clearRenderParams();let a=e.camera.transform.position;this.subInfos.sort(((e,r)=>{let n=e.meshBounds.getCenter(),i=t.Vector3.distanceSquared(n,a),o=r.meshBounds.getCenter();return i-t.Vector3.distanceSquared(o,a)}));for(const e of this.subInfos)e.needRender&&this.setDrawElemenParams(e.indexCount,e.indexStart*this.indexByteCount)}_prepareRender(e){return!!this.subInfos.find((e=>e.needRender))}destroy(){for(const e of this.subInfos);this.subInfos=null}}StaticBatchSubMesh._type=GeometryElement._typeCounter++;const ae=new t.Matrix4x4,re=[0,1,2],ne=[0,2,1];class StaticBatchMesh{constructor(){this._bufferState=new t.BufferState,this._staticSubMeshes=new Map,this.bounds=new Bounds}static create(e){let a,r=new StaticBatchMesh,n=e.vertexCount,i=e.indexCount,o=e.vertexDec,s=o.vertexStride/4,l=new ArrayBuffer(o.vertexStride*n),h=new Float32Array(l),d=t.IndexFormat.UInt16,c=2;n>65535?(d=t.IndexFormat.UInt32,c=4,a=new Uint32Array(i)):a=new Uint16Array(i),o.getVertexElementByUsage(t.VertexMesh.MESH_POSITION0),o.getVertexElementByUsage(t.VertexMesh.MESH_NORMAL0),o.getVertexElementByUsage(t.VertexMesh.MESH_TEXTURECOORDINATE1),o.getVertexElementByUsage(t.VertexMesh.MESH_TANGENT0);let u,_=0,m=0,f=0;for(const n of e.renders){let e=n.lightmapScaleOffset;u||(u=r.bounds,n.bounds.cloneTo(u)),Bounds.merge(u,n.bounds,u);let i=n.owner,l=i.transform._isFrontFaceInvert,S=i.transform.worldMatrix,g=ae;S.invert(g),g.transpose();let p=n.getMesh(),D=p.vertexCount,T=p.indexCount,E=p._vertexBuffer.getFloat32Data();h.set(E,_);for(let a=0;a<D;a++){let r=a*s;for(const a of o._vertexElements)switch(r+=a.offset/4,a.elementUsage){case t.VertexMesh.MESH_POSITION0:Utils3D.transformVector3ArrayToVector3ArrayCoordinate(E,r,S,h,_+r);break;case t.VertexMesh.MESH_NORMAL0:case t.VertexMesh.MESH_TANGENT0:Utils3D.transformVector3ArrayToVector3ArrayNormal(E,r,g,h,_+r);break;case t.VertexMesh.MESH_TEXTURECOORDINATE1:Utils3D.transformLightingMapTexcoordArray(E,r,e,h,_+r)}}let x=p._indexBuffer.getData(),M=l?ne:re;for(let e=0;e<T;e+=3)a[f+e]=x[e+M[0]]+m,a[f+e+1]=x[e+M[1]]+m,a[f+e+2]=x[e+M[2]]+m;let R=p.subMeshCount;for(let e=0;e<R;e++){let t=n.sharedMaterials[e]||BlinnPhongMaterial.defaultMaterial,a=r._staticSubMeshes.get(t);a||(a=new StaticBatchSubMesh,a.indexByteCount=c,r._staticSubMeshes.set(t,a),a.bufferState=r._bufferState,a.indexFormat=d);let i=p.getSubMesh(e);a.addSubMesh(i.indexCount,i._indexStart+f,n.bounds)}_+=E.length,m+=D,f+=x.length}let S=Laya3DRender.renderOBJCreate.createVertexBuffer3D(l.byteLength,t.BufferUsage.Static,!1);S.vertexDeclaration=o,S.setData(l);let g=Laya3DRender.renderOBJCreate.createIndexBuffer3D(d,i,t.BufferUsage.Static,!1);return g.setData(a),r.setBuffer(S,g),r}setBuffer(e,t){let a=this._bufferState;this._vertexBuffer=e,this._indexBuffer=t,a.applyState([e],t)}destroy(){this._staticSubMeshes.forEach((e=>{e.destroy()})),this._staticSubMeshes.clear(),this._staticSubMeshes=null,this._bufferState.destroy()}}class StaticBatchMeshRenderElement extends RenderElement{constructor(){super()}getInvertFront(){return!1}}class StaticBatchMeshRender extends BaseRender{constructor(){super(),this._singleton=!1}static create(e){let t=new StaticBatchMeshRender;return t.mergeInfo=e,t}get staticMesh(){return this._staticMesh}get mergeInfo(){return this._mergeInfo}set mergeInfo(e){this._mergeInfo=e;let t=StaticBatchMesh.create(e);this._staticMesh=t,this.lightmapIndex=e.lightmapIndex,this._staticMesh=t,this.geometryBounds=t.bounds;let a=MeshFilter._meshVerticeDefine,r=this._baseRenderNode.shaderData;this._getMeshDefine(t,a);for(const e of a)r.addDefine(e);this._renderElements.forEach((e=>{e.material._removeReference(),e.destroy()})),this._renderElements=[],t._staticSubMeshes.forEach(((e,t)=>{let a=new StaticBatchMeshRenderElement;this._renderElements.push(a),a.render=this,a.material=t,a.setGeometry(e),t._addReference()})),t.bounds.cloneTo(this.bounds)}_calculateBoundingBox(){}_renderUpdate(e){}_getMeshDefine(e,a){let r=e._vertexBuffer.vertexDeclaration._vertexElements;for(const e of r)switch(e.elementUsage){case t.VertexMesh.MESH_COLOR0:a.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_COLOR);break;case t.VertexMesh.MESH_TEXTURECOORDINATE0:a.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV0);break;case t.VertexMesh.MESH_TEXTURECOORDINATE1:a.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_UV1);break;case t.VertexMesh.MESH_TANGENT0:a.push(MeshSprite3DShaderDeclaration.SHADERDEFINE_TANGENT)}}_needRender(e,t){if(e){if(e.intersects(this.bounds)){let t=!1;return this.staticMesh._staticSubMeshes.forEach((a=>{for(const r of a.subInfos)r.needRender=e.intersects(r.meshBounds),t=t||r.needRender})),t}return!1}return!0}onEnable(){super.onEnable(),this.mergeInfo.renders.forEach((t=>{t.setRenderbitFlag(e.RenderBitFlag.RenderBitFlag_Batch,!0)}))}onDisable(){super.onDisable(),this.mergeInfo.renders.forEach((t=>{t.setRenderbitFlag(e.RenderBitFlag.RenderBitFlag_Batch,!1)}))}onDestroy(){super.onDestroy(),this._renderElements.forEach((e=>{e.material._removeReference(),e.destroy()})),this._renderElements=null,this._staticMesh.destroy(),this._staticMesh=null}_cloneTo(e){e.mergeInfo=this.mergeInfo}}class StaticMeshMergeInfo{constructor(){this._renders=[],this.vertexCount=0,this.indexCount=0}static create(e){let t=e.getMesh();e.owner;let a=new StaticMeshMergeInfo;return a.lightmapIndex=e.lightmapIndex,a.receiveShadow=e.receiveShadow,a.vertexDec=t?t.getVertexDeclaration():null,a}get renders(){return this._renders}match(e){let t=e.getMesh();e.owner;let a=!0;return a=a&&this.lightmapIndex==e.lightmapIndex,a=a&&this.receiveShadow==e.receiveShadow,a=a&&this.vertexDec==t.getVertexDeclaration(),a}addElement(e){this.renders.push(e);let t=e.getMesh();this.vertexCount+=t.vertexCount,this.indexCount+=t.indexCount}destroy(){this._renders=null}}const ie=new t.Vector2,oe=new Ray(new t.Vector3,new t.Vector3),se=new HitResult;t.InputManager.prototype.getSprite3DUnderPoint=function(a,r){se.succeeded=!1;var n=a*=this._stage.clientScaleX,i=r*=this._stage.clientScaleY,o=a/t.Render._mainCanvas.width,s=r/t.Render._mainCanvas.height;a=this._stage.width*o,r=this._stage.height*s,ie.setValue(a,r);for(let a of this._stage._scene3Ds){let r=a._physicsManager,o=a._UI3DManager,s=a._cameraPool;for(let a=s.length-1;a>=0;a--){let l=s[a],h=l.viewport,d=t.Config3D.pixelRatio;if(n>=h.x&&i>=h.y&&n<=h.width/d&&i<=h.height/d){l.viewportPointToRay(ie,oe);let t=o.rayCast(oe);if(t)return t;if(!r)continue;if(r.rayCast(oe,se)||l.clearFlag===e.CameraClearFlags.SolidColor||l.clearFlag===e.CameraClearFlags.Sky)break}}if(se.succeeded)return se.collider.owner}return null};class GradientDataVector2{constructor(){this._currentLength=0,this._elements=new Float32Array(12)}get gradientCount(){return this._currentLength/3}add(e,t){this._currentLength<8?(6===this._currentLength&&1!==e&&(e=1,console.log("GradientDataVector2 warning:the forth key is  be force set to 1.")),this._elements[this._currentLength++]=e,this._elements[this._currentLength++]=t.x,this._elements[this._currentLength++]=t.y):console.log("GradientDataVector2 warning:data count must lessEqual than 4")}cloneTo(e){var t=e;t._currentLength=this._currentLength;for(var a=t._elements,r=0,n=this._elements.length;r<n;r++)a[r]=this._elements[r]}clone(){var e=new GradientDataVector2;return this.cloneTo(e),e}}class MaterialInstanceProperty{constructor(){this._isNeedUpdate=!1}createInstanceVertexBuffer3D(){this._instanceData=new Float32Array(DrawMeshInstancedCMD.maxInstanceCount*this._vertexStride),this._vertexBuffer=Laya3DRender.renderOBJCreate.createVertexBuffer3D(4*this._instanceData.length,t.BufferUsage.Dynamic,!1),this._vertexBuffer.vertexDeclaration=this._vertexDeclaration,this._vertexBuffer.instanceBuffer=!0}updateVertexBufferData(e){if(!this._isNeedUpdate)return;let t,a=this._instanceData,r=this._value,n=this._value.length,i=this._vertexStride,o=0;switch(this._value instanceof Float32Array||(o=1),o){case 0:a.set(r,0);break;case 1:for(let e=0;e<n;e++)t=r[e],t.writeTo(a,e*i)}this._vertexBuffer._deviceBuffer.setDataLength(this._vertexBuffer._byteLength),this._vertexBuffer.setData(a.buffer,0,0,4*e*i)}destroy(){delete this._value,delete this._instanceData,this._vertexDeclaration=null,this._vertexBuffer.destroy()}}var le;e.InstanceLocation=void 0,(le=e.InstanceLocation||(e.InstanceLocation={}))[le.CUSTOME0=12]="CUSTOME0",le[le.CUSTOME1=13]="CUSTOME1",le[le.CUSTOME2=14]="CUSTOME2",le[le.CUSTOME3=15]="CUSTOME3";class MaterialInstancePropertyBlock{constructor(){this._type=0,this._propertyMap={}}_checkPropertyLegal(e,t,a,r){if(r._vertexDeclaration._vertexElements[0]._elementFormat!==e)throw"Data exists and format does not match";if(r._name!==t)throw"You cannot add a new property to an existing attributeLocation,Please use another attributeLocation"}_creatProperty(e,a,r,n,i){var o=this._propertyMap[i]=new MaterialInstanceProperty;o._name=e,o._value=a,o._vertexDeclaration=new t.VertexDeclaration(r,[new t.VertexElement(0,n,i)]),o._isNeedUpdate=!0,o._vertexStride=r/4,o.createInstanceVertexBuffer3D()}setVectorArray(e,a,r){var n=this._propertyMap[r];n?(this._checkPropertyLegal(t.VertexElementFormat.Vector4,e,r,n),n._value=a,n._isNeedUpdate=!0):this._creatProperty(e,a,16,t.VertexElementFormat.Vector4,r)}setVector3Array(e,a,r){var n=this._propertyMap[r];n?(this._checkPropertyLegal(t.VertexElementFormat.Vector3,e,r,n),n._value=a,n._isNeedUpdate=!0):this._creatProperty(e,a,12,t.VertexElementFormat.Vector3,r)}setVector2Array(e,a,r){var n=this._propertyMap[r];n?(this._checkPropertyLegal(t.VertexElementFormat.Vector2,e,r,n),n._value=a,n._isNeedUpdate=!0):this._creatProperty(e,a,8,t.VertexElementFormat.Vector2,r)}setNumberArray(e,a,r){var n=this._propertyMap[r];n?(this._checkPropertyLegal(t.VertexElementFormat.Single,e,r,n),n._value=a,n._isNeedUpdate=!0):this._creatProperty(e,a,4,t.VertexElementFormat.Single,r)}getPropertyArray(e){var t=this._propertyMap[e];return t?t._value:null}clear(){for(var e in this._propertyMap)this._propertyMap[e].destroy();this._propertyMap={}}}MaterialInstancePropertyBlock.INSTANCETYPE_ATTRIBUTE=0,MaterialInstancePropertyBlock.INSTANCETYPE_UNIFORMBUFFER=1,e.ACESShaderLib=ACESShaderLib,e.AlternateLightQueue=AlternateLightQueue,e.AnimationClip=AnimationClip,e.AnimationClipParser03=AnimationClipParser03,e.AnimationClipParser04=AnimationClipParser04,e.AnimationEvent=AnimationEvent,e.Animator=Animator,e.AnimatorController=AnimatorController,e.AnimatorControllerLayer=AnimatorControllerLayer,e.AnimatorPlayState=AnimatorPlayState,e.AnimatorResource=AnimatorResource,e.AnimatorState=AnimatorState,e.AnimatorStateScript=class{constructor(){this.playStateInfo={animator:null,layerindex:-1,playState:null}}setPlayScriptInfo(e,t,a){this.playStateInfo.animator=e,this.playStateInfo.layerindex=t,this.playStateInfo.playState=a}onStateEnter(){}onStateUpdate(e){}onStateExit(){}onStateLoop(){}},e.AnimatorTransition=AnimatorTransition,e.AreaLightCom=AreaLightCom,e.AvatarMask=AvatarMask,e.AxiGamepad=AxiGamepad,e.BaseCamera=BaseCamera,e.BaseRender=BaseRender,e.BaseShape=BaseShape,e.BatchMark=BatchMark,e.BatchRender=BatchRender,e.BlinnPhongMaterial=BlinnPhongMaterial,e.BlinnPhongShaderInit=BlinnPhongShaderInit,e.BlitFrameBufferCMD=BlitFrameBufferCMD,e.BlitQuadCMDData=class{get element(){return this._element}set element(e){this._element=e}get dest(){return this._dest}set dest(e){this._dest=e}get viewport(){return this._viewport}set viewport(e){this._viewport=e}get scissor(){return this._scissor}set scissor(e){this._scissor=e}get source(){return this._source}set source(e){this._source=e}get offsetScale(){return this._offsetScale}set offsetScale(e){this._offsetScale=e}apply(e){throw new Error("Method not implemented.")}},e.BlitScreenQuadCMD=BlitScreenQuadCMD,e.BlitScreenShaderInit=BlitScreenShaderInit,e.BloomEffect=BloomEffect,e.BoundBox=BoundBox,e.BoundFrustum=BoundFrustum,e.BoundSphere=BoundSphere,e.Bounds=Bounds,e.BoundsImpl=BoundsImpl,e.BoxShape=BoxShape,e.Burst=Burst,e.ButtonGamepad=ButtonGamepad,e.Camera=Camera,e.CameraCullInfo=class{constructor(){this.boundFrustum=new BoundFrustum(new t.Matrix4x4)}},e.CircleShape=CircleShape,e.Cluster=Cluster,e.Collision=class{constructor(){this._lastUpdateFrame=-2147483648,this._updateFrame=-2147483648,this._isTrigger=!1,this.contacts=[],this._inPool=!1}_setUpdateFrame(e){this._lastUpdateFrame=this._updateFrame,this._updateFrame=e}},e.CollisionUtils=CollisionUtils,e.ColorGradEffect=ColorGradEffect,e.ColorOverLifetime=ColorOverLifetime,e.Command=Command,e.CommandBuffer=CommandBuffer,e.CommandUniformMap=class{constructor(e){}addShaderUniform(e,t,a,r=null){throw"need override it"}addShaderUniformArray(e,t,a,r,n=""){throw"need override it"}addShaderBlockUniform(e,t,a){throw"need override it"}},e.ConeShape=ConeShape,e.ContactPoint=class{constructor(){this._idCounter=0,this._colliderA=null,this._colliderB=null,this.distance=0,this.normal=new t.Vector3,this.positionOnA=new t.Vector3,this.positionOnB=new t.Vector3,this._id=++this._idCounter}},e.ContainmentType=ContainmentType,e.DepthCasterData=DepthCasterData,e.DepthPass=DepthPass,e.DirectionLightCom=DirectionLightCom,e.DrawElementCMDData=class{setRenderelements(e){throw new Error("Method not implemented.")}apply(e){throw new Error("Method not implemented.")}},e.DrawMeshCMD=DrawMeshCMD,e.DrawMeshInstancedCMD=DrawMeshInstancedCMD,e.DrawNodeCMDData=class{get node(){return this._node}set node(e){this._node=e}get destShaderData(){return this._destShaderData}set destShaderData(e){this._destShaderData=e}get destSubShader(){return this._destSubShader}set destSubShader(e){this._destSubShader=e}get subMeshIndex(){return this._subMeshIndex}set subMeshIndex(e){this._subMeshIndex=e}apply(e){throw new Error("Method not implemented.")}},e.DrawRenderCMD=DrawRenderCMD,e.EffectMaterial=EffectMaterial,e.Emission=Emission,e.ExtendTerrainMaterial=ExtendTerrainMaterial,e.FloatKeyframe=FloatKeyframe,e.FrameOverTime=FrameOverTime,e.FrustumCulling=FrustumCulling,e.GaussianDoF=GaussianDoF,e.GeometryElement=GeometryElement,e.Gradient=Gradient,e.GradientAngularVelocity=GradientAngularVelocity,e.GradientColor=GradientColor,e.GradientDataInt=GradientDataInt,e.GradientDataNumber=GradientDataNumber,e.GradientDataVector2=GradientDataVector2,e.GradientMode=GradientMode,e.GradientSize=GradientSize,e.GradientVelocity=GradientVelocity,e.HLOD=HLOD,e.HLODBatchMesh=class extends GeometryElement{constructor(){super(t.MeshTopology.Triangles,t.DrawType.DrawElement)}set batchMesh(e){this._mesh!=e&&(this._mesh&&this._mesh._removeReference(),this.indexFormat=e.indexFormat,this._mesh=e,this._mesh._addReference())}get batchMesh(){return this._mesh}set batchSubMeshInfo(e){this._batchSubMeshInfos=e}get batchSubMeshInfo(){return this._batchSubMeshInfos}set drawSubMeshs(e){this._drawSubMeshs=e}get drawSubMeshs(){return this._drawSubMeshs}_prepareRender(e){return this._mesh._uploadVerticesData(),!0}_updateRenderParams(e){var a,r=this._mesh;switch(r.indexFormat){case t.IndexFormat.UInt32:a=4;break;case t.IndexFormat.UInt16:a=2;break;case t.IndexFormat.UInt8:a=1}this.clearRenderParams(),this.bufferState=r._bufferState,this._drawSubMeshs&&this._drawSubMeshs.forEach((e=>{this.setDrawElemenParams(e.drawPramas.y,e.drawPramas.x*a)}))}destroy(){this._mesh&&this._mesh._removeReference(),delete this._batchSubMeshInfos,delete this._drawSubMeshs}},e.HLODBatchSubMesh=class{},e.HLODConfig=class{},e.HLODElement=class{get material(){return this._material}set material(e){this._material!=e&&(this._material&&this._material._removeReference(),this._material=e,this._material._addReference())}get lightmap(){return this._lightmap}set lightmap(e){this._lightmap!=e&&(this._lightmap&&(this._lightmap.lightmapColor._removeReference(),this._lightmap.lightmapDirection._removeReference()),this._lightmap=e,this._lightmap.lightmapColor._addReference(),this._lightmap.lightmapDirection._addReference()),this._lightmap=e}release(){this.HLODMesh.destroy(),this.material.destroy(),this.lightmap&&(this._lightmap.lightmapColor.destroy(),this._lightmap.lightmapDirection.destroy())}},e.HLODRender=HLODRender,e.HLODResourceGroup=class{load(e,a){this.loaded||t.Laya.loader.load(this.url,t.Handler.create(this,(t=>{e.apply(a,[this]),this.loaded=!0}),[this]))}release(){this.resources.forEach((e=>{e.release()})),this.loaded=!1}},e.HemisphereShape=HemisphereShape,e.HitResult=HitResult,e.ILaya3D=ILaya3D,e.IndexBuffer3D=IndexBuffer3D,e.InstanceBatchManager=InstanceBatchManager,e.InstanceRenderElement=InstanceRenderElement,e.Keyframe=Keyframe,e.KeyframeNode=KeyframeNode,e.KeyframeNodeList=KeyframeNodeList,e.KeyframeNodeOwner=KeyframeNodeOwner,e.LODGroup=LODGroup,e.LODInfo=LODInfo,e.Laya3D=Laya3D,e.Laya3DRender=Laya3DRender,e.LengencyRenderEngine3DFactory=LengencyRenderEngine3DFactory,e.LensFlareCMD=LensFlareCMD,e.LensFlareData=LensFlareData,e.LensFlareEffect=LensFlareEffect,e.LensFlareElement=LensFlareElement,e.LensFlareElementGeomtry=LensFlareElementGeomtry,e.LensFlareSettingsLoader=LensFlareSettingsLoader,e.LensFlareShaderInit=LensFlareShaderInit,e.Light=Light,e.LightQueue=LightQueue,e.LightSprite=LightSprite,e.Lightmap=Lightmap,e.LoadModelV04=LoadModelV04,e.LoadModelV05=LoadModelV05,e.MaterialInstanceProperty=MaterialInstanceProperty,e.MaterialInstancePropertyBlock=MaterialInstancePropertyBlock,e.Mesh=Mesh,e.MeshFilter=MeshFilter,e.MeshInstanceGeometry=MeshInstanceGeometry,e.MeshReader=MeshReader,e.MeshRenderer=MeshRenderer,e.MeshSprite3D=MeshSprite3D,e.MeshSprite3DShaderDeclaration=MeshSprite3DShaderDeclaration,e.MeshUtil=MeshUtil,e.MorphTarget=MorphTarget,e.MorphTargetChannel=MorphTargetChannel,e.MorphTargetData=MorphTargetData,e.PBRDefaultDFG=PBRDefaultDFG,e.PBRMaterial=PBRMaterial,e.PBRShaderLib=PBRShaderLib,e.PBRStandardMaterial=PBRStandardMaterial,e.PBRStandardShaderInit=PBRStandardShaderInit,e.ParticleShuriKenShaderInit=ParticleShuriKenShaderInit,e.Physics3DUtils=Physics3DUtils,e.PhysicsSettings=PhysicsSettings,e.Picker=Picker,e.PixelLineData=PixelLineData,e.PixelLineFilter=PixelLineFilter,e.PixelLineMaterial=PixelLineMaterial,e.PixelLineRenderer=PixelLineRenderer,e.PixelLineSprite3D=class extends RenderableSprite3D{constructor(e=2,t=null){super(t),this._isRenderActive=!1,this._isInRenders=!1,this._render=this.addComponent(PixelLineRenderer),this._geometryFilter=this._render._pixelLineFilter,this._render.maxLineCount=e,(this._render.material=new UnlitMaterial).enableVertexColor=!0}get maxLineCount(){return this._render.maxLineCount}set maxLineCount(e){this._render.maxLineCount=e}get lineCount(){return this._render.lineCount}get pixelLineRenderer(){return this._render}addLine(e,t,a,r){this._render.addLine(e,t,a,r)}addLines(e){this._render.addLines(e)}removeLine(e){this._render.removeLine(e)}setLine(e,t,a,r,n){this._render.setLine(e,t,a,r,n)}getLine(e,t){this._render.getLine(e,t)}clear(){this._render.clear()}_create(){return new Sprite3D}},e.PixelLineVertex=PixelLineVertex,e.Plane=Plane,e.PointLightCom=PointLightCom,e.PostProcess=PostProcess,e.PostProcessEffect=PostProcessEffect,e.PostProcessRenderContext=PostProcessRenderContext,e.PrimitiveMesh=PrimitiveMesh,e.QuaternionKeyframe=QuaternionKeyframe,e.Rand=Rand,e.RandX=RandX,e.Ray=Ray,e.ReflectionProbe=ReflectionProbe,e.ReflectionProbeManager=ReflectionProbeManager,e.RenderContext3D=RenderContext3D,e.RenderElement=RenderElement,e.RenderElementBatch=RenderElementBatch,e.RenderState=RenderState,e.RenderableSprite3D=RenderableSprite3D,e.RotationOverLifetime=RotationOverLifetime,e.ScalableAO=ScalableAO,e.Scene3D=Scene3D,e.Scene3DShaderDeclaration=Scene3DShaderDeclaration,e.SceneRenderManager=SceneRenderManager,e.SceneRenderManagerOBJ=class{constructor(){this._renders=new t.SingletonList,this._motionRenders=new t.SingletonList,this.baseRenderList=new t.SingletonList}get list(){return this._renders}set list(e){this._renders=e}addRenderObject(e){this._renders.add(e),this.baseRenderList.add(e._baseRenderNode)}removeRenderObject(e){this._renders.remove(e),this.baseRenderList.remove(e._baseRenderNode),this.removeMotionObject(e)}removeMotionObject(e){}updateMotionObjects(){}addMotionObject(e){}destroy(){this._renders.destroy()}},e.ScreenQuad=ScreenQuad,e.Script3D=ee,e.SetDefineCMD=SetDefineCMD,e.SetGlobalShaderDataCMD=SetGlobalShaderDataCMD,e.SetRTCMD=SetRTCMD,e.SetRenderDataCMD=class{get value(){return this._value}set value(e){this._value=e}get dataType(){return this._dataType}set dataType(e){this._dataType=e}get propertyID(){return this._propertyID}set propertyID(e){this._propertyID=e}get dest(){return this._dest}set dest(e){this._dest=e}apply(e){throw new Error("Method not implemented.")}},e.SetRenderTargetCMD=class{get rt(){return this._rt}set rt(e){this._rt=e}get clearFlag(){return this._clearFlag}set clearFlag(e){this._clearFlag=e}get clearDepthValue(){return this._clearDepthValue}set clearDepthValue(e){this._clearDepthValue=e}get clearStencilValue(){return this._clearStencilValue}set clearStencilValue(e){this._clearStencilValue=e}get clearColorValue(){return this._clearColorValue}set clearColorValue(e){this._clearColorValue=e}apply(e){throw new Error("Method not implemented.")}},e.SetShaderDataCMD=SetShaderDataCMD,e.SetShaderDefineCMD=class{get define(){return this._define}set define(e){this._define=e}get dest(){return this._dest}set dest(e){this._dest=e}get add(){return this._add}set add(e){this._add=e}apply(e){throw new Error("Method not implemented.")}},e.SetViewportCMD=class{get viewport(){return this._viewport}set viewport(e){this._viewport=e}get scissor(){return this._scissor}set scissor(e){this._scissor=e}apply(e){throw new Error("Method not implemented.")}},e.ShaderData=class{constructor(e=null){this._ownerResource=e}_addCheckUBO(e,t,a){throw new Error("Method not implemented.")}_releaseUBOData(){throw new Error("Method not implemented.")}getDefineData(){throw new Error("Method not implemented.")}getData(){throw new Error("Method not implemented.")}addDefine(e){throw new Error("Method not implemented.")}addDefines(e){throw new Error("Method not implemented.")}removeDefine(e){throw new Error("Method not implemented.")}hasDefine(e){throw new Error("Method not implemented.")}clearDefine(){throw new Error("Method not implemented.")}getBool(e){throw new Error("Method not implemented.")}setBool(e,t){throw new Error("Method not implemented.")}getInt(e){throw new Error("Method not implemented.")}setInt(e,t){throw new Error("Method not implemented.")}getNumber(e){throw new Error("Method not implemented.")}setNumber(e,t){throw new Error("Method not implemented.")}getVector2(e){throw new Error("Method not implemented.")}setVector2(e,t){throw new Error("Method not implemented.")}getVector3(e){throw new Error("Method not implemented.")}setVector3(e,t){throw new Error("Method not implemented.")}getVector(e){throw new Error("Method not implemented.")}setVector(e,t){throw new Error("Method not implemented.")}getColor(e){throw new Error("Method not implemented.")}setColor(e,t){throw new Error("Method not implemented.")}getMatrix4x4(e){throw new Error("Method not implemented.")}setMatrix4x4(e,t){throw new Error("Method not implemented.")}getMatrix3x3(e){throw new Error("Method not implemented.")}setMatrix3x3(e,t){throw new Error("Method not implemented.")}getBuffer(e){throw new Error("Method not implemented.")}setBuffer(e,t){throw new Error("Method not implemented.")}setTexture(e,t){throw new Error("Method not implemented.")}getTexture(e){throw new Error("Method not implemented.")}setUniformBuffer(e,t){throw new Error("Method not implemented.")}getUniformBuffer(e){throw new Error("Method not implemented.")}setShaderData(t,a,r){switch(a){case e.ShaderDataType.Int:this.setInt(t,r);break;case e.ShaderDataType.Bool:this.setBool(t,r);break;case e.ShaderDataType.Float:this.setNumber(t,r);break;case e.ShaderDataType.Vector2:this.setVector2(t,r);break;case e.ShaderDataType.Vector3:this.setVector3(t,r);break;case e.ShaderDataType.Vector4:this.setVector(t,r);break;case e.ShaderDataType.Color:this.setColor(t,r);break;case e.ShaderDataType.Matrix4x4:this.setMatrix4x4(t,r);break;case e.ShaderDataType.Matrix3x3:this.setMatrix3x3(t,r);break;case e.ShaderDataType.Texture2D:case e.ShaderDataType.TextureCube:this.setTexture(t,r);break;case e.ShaderDataType.Buffer:this.setBuffer(t,r);break;default:throw new Error(`unkown shader data type: ${a}`)}}getShaderData(t,a){switch(a){case e.ShaderDataType.Int:return this.getInt(t);case e.ShaderDataType.Bool:return this.getBool(t);case e.ShaderDataType.Float:return this.getNumber(t);case e.ShaderDataType.Vector2:return this.getVector2(t);case e.ShaderDataType.Vector3:return this.getVector3(t);case e.ShaderDataType.Vector4:return this.getVector(t);case e.ShaderDataType.Color:return this.getColor(t);case e.ShaderDataType.Matrix4x4:return this.getMatrix4x4(t);case e.ShaderDataType.Texture2D:case e.ShaderDataType.TextureCube:return this.getTexture(t);case e.ShaderDataType.Buffer:return this.getBuffer(t);case e.ShaderDataType.Matrix3x3:return this.getMatrix3x3(t);case e.ShaderDataType.Matrix4x4:return this.getMatrix4x4(t);default:throw"unkone shader data type."}}_setInternalTexture(e,t){throw new Error("Method not implemented.")}cloneTo(e){throw new Error("Method not implemented.")}_cloneUBO(e){throw new Error("Method not implemented.")}clone(){throw new Error("Method not implemented.")}reset(){throw new Error("Method not implemented.")}destroy(){throw new Error("Method not implemented.")}},e.ShaderDataDefaultValue=function(a){switch(a){case e.ShaderDataType.Int:return 0;case e.ShaderDataType.Bool:return!1;case e.ShaderDataType.Float:return 0;case e.ShaderDataType.Vector2:return t.Vector2.ZERO;case e.ShaderDataType.Vector3:return t.Vector3.ZERO;case e.ShaderDataType.Vector4:return t.Vector4.ZERO;case e.ShaderDataType.Color:return t.Color.BLACK;case e.ShaderDataType.Matrix4x4:return t.Matrix4x4.DEFAULT;case e.ShaderDataType.Matrix3x3:return t.Matrix3x3.DEFAULT}return null},e.ShaderDefine=class{constructor(e,t){this._index=e,this._value=t}},e.ShaderInit3D=ShaderInit3D,e.ShadowCasterPass=ShadowCasterPass,e.ShadowSliceData=class{constructor(){if(this.position=new t.Vector3,this.viewMatrix=new t.Matrix4x4,this.projectionMatrix=new t.Matrix4x4,this.viewProjectMatrix=new t.Matrix4x4,this.cullPlanes=[new Plane(new t.Vector3,0),new Plane(new t.Vector3,0),new Plane(new t.Vector3,0),new Plane(new t.Vector3,0),new Plane(new t.Vector3,0),new Plane(new t.Vector3,0),new Plane(new t.Vector3,0),new Plane(new t.Vector3,0),new Plane(new t.Vector3,0),new Plane(new t.Vector3,0)],this.splitBoundSphere=new BoundSphere(new t.Vector3,0),this.cameraShaderValue=t.LayaGL.renderDeviceFactory.createShaderData(null),t.Config3D._uniformBlock){let e=t.UniformBufferObject.getBuffer(t.UniformBufferObject.UBONAME_CAMERA,0),a=BaseCamera.createCameraUniformBlock();e||(e=t.UniformBufferObject.create(t.UniformBufferObject.UBONAME_CAMERA,t.BufferUsage.Dynamic,a.getbyteLength(),!1)),this.cameraShaderValue._addCheckUBO(t.UniformBufferObject.UBONAME_CAMERA,e,a),this.cameraShaderValue.setUniformBuffer(BaseCamera.CAMERAUNIFORMBLOCK,e),this.cameraUBO=e,this.cameraUBData=a}}},e.ShadowUtils=ShadowUtils,e.ShapeUtils=ShapeUtils,e.ShuriKenParticle3D=ShuriKenParticle3D,e.ShuriKenParticle3DShaderDeclaration=ShuriKenParticle3DShaderDeclaration,e.ShurikenParticleData=ShurikenParticleData,e.ShurikenParticleInstanceSystem=ShurikenParticleInstanceSystem,e.ShurikenParticleMaterial=ShurikenParticleMaterial,e.ShurikenParticleRenderer=ShurikenParticleRenderer,e.ShurikenParticleSystem=ShurikenParticleSystem,e.SimpleSkinnedMeshRenderer=SimpleSkinnedMeshRenderer,e.SimpleSkinnedMeshSprite3D=SimpleSkinnedMeshSprite3D,e.Size=Size,e.SizeOverLifetime=SizeOverLifetime,e.SkinRenderElement=SkinRenderElement,e.SkinnedMeshRenderer=SkinnedMeshRenderer,e.SkinnedMeshSprite3D=SkinnedMeshSprite3D,e.SkinnedMeshSprite3DShaderDeclaration=SkinnedMeshSprite3DShaderDeclaration,e.SkyBox=SkyBox,e.SkyBoxMaterial=SkyBoxMaterial,e.SkyBoxShaderInit=SkyBoxShaderInit,e.SkyDome=SkyDome,e.SkyPanoramicMaterial=SkyPanoramicMaterial,e.SkyPanoramicShaderInit=SkyPanoramicShaderInit,e.SkyProceduralMaterial=SkyProceduralMaterial,e.SkyProceduralShaderInit=SkyProceduralShaderInit,e.SkyRenderElement=SkyRenderElement,e.SkyRenderer=SkyRenderer,e.SphereShape=SphereShape,e.SphericalHarmonicsL2=SphericalHarmonicsL2,e.SphericalHarmonicsL2Generater=SphericalHarmonicsL2Generater,e.SpotLightCom=SpotLightCom,e.Sprite3D=Sprite3D,e.Sprite3DRenderDeclaration=Sprite3DRenderDeclaration,e.StartFrame=StartFrame,e.StatiVertexMergeBatchRender=StatiVertexMergeBatchRender,e.StaticBatchMesh=StaticBatchMesh,e.StaticBatchMeshRender=StaticBatchMeshRender,e.StaticBatchMeshRenderElement=StaticBatchMeshRenderElement,e.StaticBatchSubInfo=StaticBatchSubInfo,e.StaticBatchSubMesh=StaticBatchSubMesh,e.StaticBatchVolume=StaticBatchVolume,e.StaticInstanceBatchRender=StaticInstanceBatchRender,e.StaticMeshBatchManager=class{constructor(){this.meshVertexDecSet=new Set}combine(e){for(const t of e){let e=!1;for(const a of this.meshVertexDecSet)a.match(t)&&(e=!0,a.addElement(t));if(!e){let e=StaticMeshMergeInfo.create(t);e.addElement(t),this.meshVertexDecSet.add(e)}}let t=[];for(const e of this.meshVertexDecSet)t.push(StaticBatchMeshRender.create(e));return this.meshVertexDecSet.clear(),t}merge(e){return StaticBatchMeshRender.create(e)}},e.StaticMeshMergeInfo=StaticMeshMergeInfo,e.SubMesh=SubMesh,e.SubMeshInstanceBatch=SubMeshInstanceBatch,e.SubMeshRenderElement=SubMeshRenderElement,e.TextMesh=class{constructor(){}get text(){return this._text}set text(e){this._text=e}get fontSize(){return this._fontSize}set fontSize(e){this._fontSize=e}get color(){return this._color}set color(e){this._color=e}},e.Texture2DArrayLoader=Texture2DArrayLoader,e.TextureGenerator=TextureGenerator,e.TextureSheetAnimation=TextureSheetAnimation,e.TrailFilter=TrailFilter,e.TrailGeometry=TrailGeometry,e.TrailMaterial=TrailMaterial,e.TrailRenderer=TrailRenderer,e.TrailShaderInit=TrailShaderInit,e.TrailTextureMode=TrailTextureMode,e.Transform3D=Transform3D,e.UI3D=UI3D,e.UI3DGeometry=UI3DGeometry,e.UI3DManager=UI3DManager,e.UnlitMaterial=UnlitMaterial,e.UnlitShaderInit=UnlitShaderInit,e.Utils3D=Utils3D,e.Vector2Keyframe=Vector2Keyframe,e.Vector3Keyframe=Vector3Keyframe,e.Vector4Keyframe=Vector4Keyframe,e.VelocityOverLifetime=VelocityOverLifetime,e.VertexBuffer3D=VertexBuffer3D,e.VertexPositionTerrain=VertexPositionTerrain,e.VertexPositionTexture0=VertexPositionTexture0,e.VertexShuriKenParticle=VertexShuriKenParticle,e.VertexShurikenParticleBillboard=VertexShurikenParticleBillboard,e.VertexShurikenParticleMesh=VertexShurikenParticleMesh,e.VertexTrail=VertexTrail,e.Volume=Volume,e.VolumeManager=VolumeManager,e.VolumetricGI=VolumetricGI,e.VolumetricGIManager=VolumetricGIManager,e.WebGLInstanceRenderBatch=class{constructor(){this._batchQpaqueMarks=[],this._updateCountMark=0,this._revocerList=new t.SingletonList}getBathMark(e){let t=e.owner,a=e.geometry,r=!!e.transform&&e.transform._isFrontFaceInvert?1:0,n=t.receiveShadow?1:0,i=a._id,o=(e.materialId<<17)+(i<<2)+(r<<1)+n,s=((t.probeReflection?t.probeReflection._id:-1)+1<<10)+(t.lightmapIndex+1<<20)+((t.volumetricGI?t.volumetricGI._id:-1)+1),l=this._batchQpaqueMarks[o]||(this._batchQpaqueMarks[o]={});return l[s]||(l[s]=new BatchMark)}batch(e){if(!t.Config3D.enableDynamicBatch||!t.LayaGL.renderEngine.getCapable(t.RenderCapable.DrawElement_Instance))return;let a=e.length,r=e.elements;e.length=0,this._updateCountMark++;for(let n=0;n<a;n++){let a=r[n];if(a.canDynamicBatch&&a.subShader.moduleData.enableInstance){let n=this.getBathMark(a);if(this._updateCountMark==n.updateMark){let i=n.indexInList;if(n.batched){let o=r[i]._instanceElementList;o.length==t.WebGLInstanceRenderElement3D.MaxInstanceCount?(n.indexInList=e.length,n.batched=!1,e.add(a)):o.add(a)}else{let e=r[i],o=t.WebGLInstanceRenderElement3D.create();this._revocerList.add(o),o.subShader=a.subShader,o.materialShaderData=a.materialShaderData,o.materialRenderQueue=a.materialRenderQueue,o.renderShaderData=a.renderShaderData,o.owner=a.owner,o.setGeometry(a.geometry);let s=o._instanceElementList;s.length=0,s.add(e),s.add(a),r[i]=o,n.batched=!0,o._invertFrontFace=!!a.transform&&a.transform._isFrontFaceInvert}}else n.updateMark=this._updateCountMark,n.indexInList=e.length,n.batched=!1,e.add(a)}else e.add(a)}}clearRenderData(){for(let e=0,t=this._revocerList.length;e<t;e++){this._revocerList.elements[e].clearRenderData()}}recoverData(){for(let e=0,t=this._revocerList.length;e<t;e++){this._revocerList.elements[e].recover()}this._revocerList.length=0}},e.WebXRCamera=WebXRCamera,e.WebXRCameraInfo=class{},e.WebXRCameraManager=WebXRCameraManager,e.WebXRExperienceHelper=WebXRExperienceHelper,e.WebXRInput=WebXRInput,e.WebXRInputManager=WebXRInputManager,e.WebXRRenderTexture=WebXRRenderTexture,e.WebXRSessionManager=WebXRSessionManager,e.skinnedMatrixCache=skinnedMatrixCache,e.volumeIntersectInfo=class{}}(window.Laya=window.Laya||{},Laya);
//# sourceMappingURL=laya.d3.js.map